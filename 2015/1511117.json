{
 "awd_id": "1511117",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CI-EN: Collaborative Research:  TraceLab Community Infrastructure for Replication, Collaboration, and Innovation",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2015-06-01",
 "awd_exp_date": "2019-05-31",
 "tot_intn_awd_amt": 124986.0,
 "awd_amount": 130506.0,
 "awd_min_amd_letter_date": "2015-06-02",
 "awd_max_amd_letter_date": "2016-06-28",
 "awd_abstract_narration": "This is the second phase of the TraceLab project, which was initially funded under an NSF Major Research Instrumentation grant.   The goal of this project is to deliver an instrument that facilitates reproducibility of Software Engineering experiments, fosters comparative evaluation, and provides an environment in which components can be easily shared across research groups.  The challenge of experimental reproducibility extends across almost every science and engineering discipline. Recently, a widely reported study conducted by the biotech firm \"Amgen\" revealed that of 53 previously published landmark papers, only six were reproducible. Recent studies have unearthed similar problems across a diverse set of Software Engineering domains, including, but not limited to, software traceability, feature location, and compiler optimization.  Reproducibility is often undermined by lack of publicly available datasets, obsolete and unavailable tools, insufficient details about the experiment, and undocumented decisions about the way various metrics are computed.  TraceLab provides a plug-and-play experimental environment, as well as libraries of shareable components and seminal experiments.  As such, it is designed to address these problems.\r\n\r\nTraceLab introduces a radically different way of approaching empirical software engineering research and paves the way for greater community collaboration, more rigorous evaluation of results, and an easier entry-way for new researchers.  It is expected to lay the foundation for future advances in the field of empirical software engineering, accelerate and shape future research directions, support industrial pilot studies, and significantly reduce the cost and effort that oftentimes discourages new researchers from entering the field.  In addition, the project will provide opportunities to a diverse group of undergraduate and graduate students, and will be used for educational purposes across various software engineering courses.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Jane",
   "pi_last_name": "Hayes",
   "pi_mid_init": "E",
   "pi_sufx_name": "",
   "pi_full_name": "Jane E Hayes",
   "pi_email_addr": "hayes@cs.uky.edu",
   "nsf_id": "000293689",
   "pi_start_date": "2015-06-02",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Kentucky Research Foundation",
  "inst_street_address": "500 S LIMESTONE",
  "inst_street_address_2": "109 KINKEAD HALL",
  "inst_city_name": "LEXINGTON",
  "inst_state_code": "KY",
  "inst_state_name": "Kentucky",
  "inst_phone_num": "8592579420",
  "inst_zip_code": "405260001",
  "inst_country_name": "United States",
  "cong_dist_code": "06",
  "st_cong_dist_code": "KY06",
  "org_lgl_bus_name": "UNIVERSITY OF KENTUCKY RESEARCH FOUNDATION, THE",
  "org_prnt_uei_num": "",
  "org_uei_num": "H1HYA8Z1NTM5"
 },
 "perf_inst": {
  "perf_inst_name": "University of Kentucky Research Foundation",
  "perf_str_addr": "500 S Limestone 109 Kinkead Hall",
  "perf_city_name": "Lexington",
  "perf_st_code": "KY",
  "perf_st_name": "Kentucky",
  "perf_zip_code": "405260001",
  "perf_ctry_code": "US",
  "perf_cong_dist": "06",
  "perf_st_cong_dist": "KY06",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "735900",
   "pgm_ele_name": "CCRI-CISE Cmnty Rsrch Infrstrc"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7359",
   "pgm_ref_txt": "COMPUTING RES INFRASTRUCTURE"
  },
  {
   "pgm_ref_code": "9102",
   "pgm_ref_txt": "WOMEN, MINORITY, DISABLED, NEC"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 124986.0
  },
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 5520.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Our society has become increasingly dependent on software -- from exercising to banking to driving, software literally touches almost all aspects of our lives.&nbsp; We depend on it to perform as expected when expected.&nbsp; Unfortunately, software may not possess the quality and reliability and security, etc. that is necessary for us to place our trust in it.&nbsp; Practitioners who seek to ensure software possesses these characteristics rely on something called&nbsp;a trace matrix or TM to assist them in their quality assurance work (see images 1 and 2) - it captures the relationships between artifacts in the software development hierarchy such as between requirements and design.&nbsp;</p>\n<p>The trace matrix&nbsp;supports important activities such as change impact analysis (what happens to the software system if I make this change to it? Does it ripple through my system?) and regression testing (I just made a change to the code, did I inadvertently break other aspects of the software that were working before?).&nbsp; The trace matrix is rarely prepared or kept up to date by developers, hence researchers have sought ways to automatically or semi-automatically generate it.</p>\n<p>The TraceLab framework (see image 3) assists researchers to generate trace matrices and also to assist others in fields such as computer science, biology, psychology, to perform experiments (see image 4) by developing and composing reusable software components.&nbsp; TraceLab permits easy replication of experiments, sharing of data, and sharing of components, also improving researcher and practitioner productivity.</p>\n<p>Our grant sought to broaden TraceLab into areas beyond traceability by developing components and replicating seminal experiments.&nbsp; The outcomes fall under these categories:</p>\n<p>1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Training future generations of researchers&nbsp;</p>\n<p>We worked with many undergraduates, and a hand full of high school students, training them on how to perform research, how to critically read a research paper, how to write a research paper, how to present research, etc.&nbsp; We also had several graduate students who worked on our grant, we similarly trained them.&nbsp; All students learned about software engineering, traceability, and TraceLab as well as about a specific area on which they worked.&nbsp; Most students also learned a new development language as well as about empirical research and statistical analysis.</p>\n<p>2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Technology transfer and publications&nbsp;</p>\n<p>We published two journal papers, eight conference papers, four workshop papers (all of the aforementioned were peer reviewed), plus five posters.</p>\n<p>We also made our TraceLab components available to the public via our website:</p>\n<p><a href=\"http://selab.netlab.uky.edu/homepage/pages/TraceLabCatalogue/TracelabCatalogue/componentspage.html\">http://selab.netlab.uky.edu/homepage/pages/TraceLabCatalogue/TracelabCatalogue/componentspage.html</a></p>\n<p>We developed a tool to allow the tracing research community to vote on answer sets of datasets that are used for testing new tracing techniques, called MIDAS.</p>\n<p>We attended biomedical research conferences at our University and had a poster to introduce other researchers beyond software engineering to TraceLab.</p>\n<p>We introduced TraceLab to industry colleagues.</p>\n<p>3)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Outreach&nbsp;</p>\n<p>Our students assisted us to run the Hour of Code at numerous venues over the course of the grant including at local schools, at schools in eastern Kentucky (economically challenged area), at libraries, at Engineering Day, at McDonald's PlayPlaces, at Girls Enjoying Math and Science (GEMS), etc.</p>\n<p>4)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Data</p>\n<p>&nbsp;We developed a dataset from an earlier tracing tool we developed called RETRO.NET.&nbsp; This dataset provided the source, target, and answer sets that are needed for tracing research.&nbsp; We also developed a training dataset of acceptable use policies (networking domain) and made it available.</p>\n<p>5)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TraceLab components&nbsp;</p>\n<p>We developed a large collection of TraceLab components that can be used by other researchers or practitioners as they develop or modify TraceLab experiments.&nbsp; These include, but are not limited to: Krovetz stemmer, WEKA decision tree classifier, universal file importer, Drools rule parser, similarity matrix voting merge.&nbsp; These components are available at the website listed above.</p>\n<p>6)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Experiment replication</p>\n<p>&nbsp;We worked on replicating seminal experiments as TraceLab experiments. Earlier work on test case generation resulted in the software testing and means test experiment/components.&nbsp; Feature request (horizontal tracing) was also successfully replicated.&nbsp; Mutation testing replication was also undertaken.&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 06/10/2019<br>\n\t\t\t\t\tModified by: Jane&nbsp;E&nbsp;Hayes</p>\n</div>\n<div class=\"porSideCol\">\n<div class=\"each-gallery\">\n<div class=\"galContent\" id=\"gallery0\">\n<div class=\"photoCount\" id=\"photoCount0\">\n\t\t\t\t\t\t\t\t\tImages (<span id=\"selectedPhoto0\">1</span> of <span class=\"totalNumber\"></span>)\t\t\n\t\t\t\t\t\t\t\t</div>\n<div class=\"galControls\" id=\"controls0\"></div>\n<div class=\"galSlideshow\" id=\"slideshow0\"></div>\n<div class=\"galEmbox\" id=\"embox\">\n<div class=\"image-title\"></div>\n</div>\n</div>\n<div class=\"galNavigation\" id=\"navigation0\">\n<ul class=\"thumbs\" id=\"thumbs0\">\n<li>\n<a href=\"/por/images/Reports/POR/2019/1511117/1511117_10366903_1560178275751_outcomes-report-nsf-2019-image1--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2019/1511117/1511117_10366903_1560178275751_outcomes-report-nsf-2019-image1--rgov-800width.jpg\" title=\"Image 1 - Software development artifact hierarchy\"><img src=\"/por/images/Reports/POR/2019/1511117/1511117_10366903_1560178275751_outcomes-report-nsf-2019-image1--rgov-66x44.jpg\" alt=\"Image 1 - Software development artifact hierarchy\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Software artifacts are related to each other - here we use trace matrix information to help us answer the question, have all requirements been allocated to design elements?</div>\n<div class=\"imageCredit\">Dekhtyar, Hayes</div>\n<div class=\"imageSubmitted\">Jane&nbsp;E&nbsp;Hayes</div>\n<div class=\"imageTitle\">Image 1 - Software development artifact hierarchy</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2019/1511117/1511117_10366903_1560178641870_outcomes-nsf-2019-image2--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2019/1511117/1511117_10366903_1560178641870_outcomes-nsf-2019-image2--rgov-800width.jpg\" title=\"Image 2 - A trace matrix\"><img src=\"/por/images/Reports/POR/2019/1511117/1511117_10366903_1560178641870_outcomes-nsf-2019-image2--rgov-66x44.jpg\" alt=\"Image 2 - A trace matrix\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">A trace matrix is visualized (requirements (source) traced to design elements(target)), and shown as a file (requirement IDs on the left followed by their design elements on the right).</div>\n<div class=\"imageCredit\">Dekhtyar, Hayes</div>\n<div class=\"imagePermisssions\">Public Domain</div>\n<div class=\"imageSubmitted\">Jane&nbsp;E&nbsp;Hayes</div>\n<div class=\"imageTitle\">Image 2 - A trace matrix</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2019/1511117/1511117_10366903_1560178723797_outcomes-nsf-2019-image3--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2019/1511117/1511117_10366903_1560178723797_outcomes-nsf-2019-image3--rgov-800width.jpg\" title=\"Image 3 - The TraceLab framework\"><img src=\"/por/images/Reports/POR/2019/1511117/1511117_10366903_1560178723797_outcomes-nsf-2019-image3--rgov-66x44.jpg\" alt=\"Image 3 - The TraceLab framework\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">The TraceLab framework is shown, an earlier version.</div>\n<div class=\"imageCredit\">Huang</div>\n<div class=\"imageSubmitted\">Jane&nbsp;E&nbsp;Hayes</div>\n<div class=\"imageTitle\">Image 3 - The TraceLab framework</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2019/1511117/1511117_10366903_1560179126875_outcomes-nsf-2019-image4--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2019/1511117/1511117_10366903_1560179126875_outcomes-nsf-2019-image4--rgov-800width.jpg\" title=\"Image 4 - A TraceLab experiment\"><img src=\"/por/images/Reports/POR/2019/1511117/1511117_10366903_1560179126875_outcomes-nsf-2019-image4--rgov-66x44.jpg\" alt=\"Image 4 - A TraceLab experiment\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">These components constitute a TraceLab experiment.  The names on each component icon indicate what that component does.  These experiments help perform important work for researchers and practitioners.</div>\n<div class=\"imageCredit\">Hayes</div>\n<div class=\"imagePermisssions\">Public Domain</div>\n<div class=\"imageSubmitted\">Jane&nbsp;E&nbsp;Hayes</div>\n<div class=\"imageTitle\">Image 4 - A TraceLab experiment</div>\n</div>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>",
  "por_txt_cntn": "\nOur society has become increasingly dependent on software -- from exercising to banking to driving, software literally touches almost all aspects of our lives.  We depend on it to perform as expected when expected.  Unfortunately, software may not possess the quality and reliability and security, etc. that is necessary for us to place our trust in it.  Practitioners who seek to ensure software possesses these characteristics rely on something called a trace matrix or TM to assist them in their quality assurance work (see images 1 and 2) - it captures the relationships between artifacts in the software development hierarchy such as between requirements and design. \n\nThe trace matrix supports important activities such as change impact analysis (what happens to the software system if I make this change to it? Does it ripple through my system?) and regression testing (I just made a change to the code, did I inadvertently break other aspects of the software that were working before?).  The trace matrix is rarely prepared or kept up to date by developers, hence researchers have sought ways to automatically or semi-automatically generate it.\n\nThe TraceLab framework (see image 3) assists researchers to generate trace matrices and also to assist others in fields such as computer science, biology, psychology, to perform experiments (see image 4) by developing and composing reusable software components.  TraceLab permits easy replication of experiments, sharing of data, and sharing of components, also improving researcher and practitioner productivity.\n\nOur grant sought to broaden TraceLab into areas beyond traceability by developing components and replicating seminal experiments.  The outcomes fall under these categories:\n\n1)      Training future generations of researchers \n\nWe worked with many undergraduates, and a hand full of high school students, training them on how to perform research, how to critically read a research paper, how to write a research paper, how to present research, etc.  We also had several graduate students who worked on our grant, we similarly trained them.  All students learned about software engineering, traceability, and TraceLab as well as about a specific area on which they worked.  Most students also learned a new development language as well as about empirical research and statistical analysis.\n\n2)      Technology transfer and publications \n\nWe published two journal papers, eight conference papers, four workshop papers (all of the aforementioned were peer reviewed), plus five posters.\n\nWe also made our TraceLab components available to the public via our website:\n\nhttp://selab.netlab.uky.edu/homepage/pages/TraceLabCatalogue/TracelabCatalogue/componentspage.html\n\nWe developed a tool to allow the tracing research community to vote on answer sets of datasets that are used for testing new tracing techniques, called MIDAS.\n\nWe attended biomedical research conferences at our University and had a poster to introduce other researchers beyond software engineering to TraceLab.\n\nWe introduced TraceLab to industry colleagues.\n\n3)      Outreach \n\nOur students assisted us to run the Hour of Code at numerous venues over the course of the grant including at local schools, at schools in eastern Kentucky (economically challenged area), at libraries, at Engineering Day, at McDonald's PlayPlaces, at Girls Enjoying Math and Science (GEMS), etc.\n\n4)      Data\n\n We developed a dataset from an earlier tracing tool we developed called RETRO.NET.  This dataset provided the source, target, and answer sets that are needed for tracing research.  We also developed a training dataset of acceptable use policies (networking domain) and made it available.\n\n5)      TraceLab components \n\nWe developed a large collection of TraceLab components that can be used by other researchers or practitioners as they develop or modify TraceLab experiments.  These include, but are not limited to: Krovetz stemmer, WEKA decision tree classifier, universal file importer, Drools rule parser, similarity matrix voting merge.  These components are available at the website listed above.\n\n6)      Experiment replication\n\n We worked on replicating seminal experiments as TraceLab experiments. Earlier work on test case generation resulted in the software testing and means test experiment/components.  Feature request (horizontal tracing) was also successfully replicated.  Mutation testing replication was also undertaken. \n\n\t\t\t\t\tLast Modified: 06/10/2019\n\n\t\t\t\t\tSubmitted by: Jane E Hayes"
 }
}