{
 "awd_id": "1452959",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CAREER:Understanding Program Comprehension for Automated Software Documentation Generation",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2015-09-01",
 "awd_exp_date": "2020-08-31",
 "tot_intn_awd_amt": 450000.0,
 "awd_amount": 450000.0,
 "awd_min_amd_letter_date": "2015-01-30",
 "awd_max_amd_letter_date": "2019-06-11",
 "awd_abstract_narration": "The objective of this research project is 1) to create a model of program comprehension for how software development professionals write software documentation, and 2) to use this model to design algorithms to automate the process of writing documentation.  The process of writing documentation is a major expense in software development projects, and is often neglected.  By automating key components of the process, this research helps programmers to avoid this expense and therefore to be more productive.\r\n\r\nThe project studies the process that programmers follow when reading source code to write documentation.  Then, the project proposes algorithms to mimic that process.  These algorithms are integrated with novel natural language generation systems to create descriptions of software behavior.  These descriptions are then integrated into documentation of the source code.  A key broader impact of this project is to increase the workforce participation of persons with visual disabilities.  First, the descriptions generated by the research can be used in accessibility technologies for blind programmers, to help those programmers read source code.  Second, an outreach program to state K-12 schools for the blind and visually impaired helps prepare students in these schools prepare for a career in the software development industry.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Collin",
   "pi_last_name": "McMillan",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Collin McMillan",
   "pi_email_addr": "collin.mcmillan@nd.edu",
   "nsf_id": "000626801",
   "pi_start_date": "2015-01-30",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Notre Dame",
  "inst_street_address": "940 GRACE HALL",
  "inst_street_address_2": "",
  "inst_city_name": "NOTRE DAME",
  "inst_state_code": "IN",
  "inst_state_name": "Indiana",
  "inst_phone_num": "5746317432",
  "inst_zip_code": "465565708",
  "inst_country_name": "United States",
  "cong_dist_code": "02",
  "st_cong_dist_code": "IN02",
  "org_lgl_bus_name": "UNIVERSITY OF NOTRE DAME DU LAC",
  "org_prnt_uei_num": "FPU6XGFXMBE9",
  "org_uei_num": "FPU6XGFXMBE9"
 },
 "perf_inst": {
  "perf_inst_name": "University of Notre Dame",
  "perf_str_addr": "940 Grace Hall",
  "perf_city_name": "Notre Dame",
  "perf_st_code": "IN",
  "perf_st_name": "Indiana",
  "perf_zip_code": "465565708",
  "perf_ctry_code": "US",
  "perf_cong_dist": "02",
  "perf_st_cong_dist": "IN02",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "1045",
   "pgm_ref_txt": "CAREER-Faculty Erly Career Dev"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 172634.0
  },
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 89891.0
  },
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 92405.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 95070.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>This research project targets the problem of automatic documentation generation for software.&nbsp; Programmers are notorious for lacking time and resources to write good software documentation for others, even while seeking high-quality software documentation for themselves.&nbsp; The dilemma is essentially that programmers are under intense time pressure during development, and often cannot devote energy to documentation.&nbsp; But then later, other programmers struggle to read their code because the documentation is sparse or out of date.&nbsp; For decades, a dream of software engineering research has been to design algorithms that write this documentation automatically.&nbsp; This proposal targets four research questions towards this long-term dream:<br /><br />RQ1: How do programmers read source code when creating documentation?&nbsp; This question targets the physical process that programmers follow, such as eye movements, keyboard/mouse cursor strikes, and stress indicators when writing documentation.&nbsp; The purpose for studying this information is to help understand what programmers do in order to automate the rote portions for them.<br /><br />RQ2: What information from source code do programmers prioritize for documentation?&nbsp; The purpose of this research question is to determine what information that programmers tend to include in documentation, after they have obtained an understanding of the source code.&nbsp; Programmers who write documentation may obtain this understanding after reading code from someone else or by writing the code themselves.&nbsp; In either case, they decide which information is important enough for others programmers to know.&nbsp; Automated documentation tools would benefit by including this information.<br /><br />RQ3: How can solutions from text summarization technologies be adapted to solve code summarization research problems?&nbsp; The rationale behind this research question is that several effective techniques have been proposed in text summarization for over two decades, but are difficult to adapt to code summarization ? code and text communicate information directly.&nbsp; However, by mimicking the process followed by humans in writing documentation, which we study in RQ1 and RQ2, it is possible to adapt text summarization to source code more effectively than current approaches.&nbsp; We have published several research papers demonstrating how to adapt text summarization to code summarization, which have helped establish code summarization as a research area at the intersection of software engineering and natural language processing.<br /><br />RQ4: Do code summarization technologies assist blind programmers in comprehending code as quickly as sighted programmers?&nbsp; The intent of this question is to blend this proposal?s intellectual merit and broader impacts.&nbsp; Through this project, a collaborative teaching program between the University of Notre Dame and the Illinois School for the Blind as flourished.&nbsp; Impact is demonstrated through several research papers.&nbsp; A landmark paper funded by this project demonstrated zero difference in the quality of code comprehension between sighted and blind programmers, which has strong implications for employment and education of persons who are blind and low vision in computer science.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 09/01/2020<br>\n\t\t\t\t\tModified by: Collin&nbsp;Mcmillan</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThis research project targets the problem of automatic documentation generation for software.  Programmers are notorious for lacking time and resources to write good software documentation for others, even while seeking high-quality software documentation for themselves.  The dilemma is essentially that programmers are under intense time pressure during development, and often cannot devote energy to documentation.  But then later, other programmers struggle to read their code because the documentation is sparse or out of date.  For decades, a dream of software engineering research has been to design algorithms that write this documentation automatically.  This proposal targets four research questions towards this long-term dream:\n\nRQ1: How do programmers read source code when creating documentation?  This question targets the physical process that programmers follow, such as eye movements, keyboard/mouse cursor strikes, and stress indicators when writing documentation.  The purpose for studying this information is to help understand what programmers do in order to automate the rote portions for them.\n\nRQ2: What information from source code do programmers prioritize for documentation?  The purpose of this research question is to determine what information that programmers tend to include in documentation, after they have obtained an understanding of the source code.  Programmers who write documentation may obtain this understanding after reading code from someone else or by writing the code themselves.  In either case, they decide which information is important enough for others programmers to know.  Automated documentation tools would benefit by including this information.\n\nRQ3: How can solutions from text summarization technologies be adapted to solve code summarization research problems?  The rationale behind this research question is that several effective techniques have been proposed in text summarization for over two decades, but are difficult to adapt to code summarization ? code and text communicate information directly.  However, by mimicking the process followed by humans in writing documentation, which we study in RQ1 and RQ2, it is possible to adapt text summarization to source code more effectively than current approaches.  We have published several research papers demonstrating how to adapt text summarization to code summarization, which have helped establish code summarization as a research area at the intersection of software engineering and natural language processing.\n\nRQ4: Do code summarization technologies assist blind programmers in comprehending code as quickly as sighted programmers?  The intent of this question is to blend this proposal?s intellectual merit and broader impacts.  Through this project, a collaborative teaching program between the University of Notre Dame and the Illinois School for the Blind as flourished.  Impact is demonstrated through several research papers.  A landmark paper funded by this project demonstrated zero difference in the quality of code comprehension between sighted and blind programmers, which has strong implications for employment and education of persons who are blind and low vision in computer science.\n\n\t\t\t\t\tLast Modified: 09/01/2020\n\n\t\t\t\t\tSubmitted by: Collin Mcmillan"
 }
}