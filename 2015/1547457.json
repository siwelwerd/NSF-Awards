{
 "awd_id": "1547457",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CICI: Secure Data Architecture: CapNet: Secure Scientific Workloads with Capability Enabled Networks",
 "cfda_num": "47.070",
 "org_code": "05090000",
 "po_phone": "7032924220",
 "po_email": "kthompso@nsf.gov",
 "po_sign_block_name": "Kevin Thompson",
 "awd_eff_date": "2015-10-01",
 "awd_exp_date": "2019-03-31",
 "tot_intn_awd_amt": 499999.0,
 "awd_amount": 499999.0,
 "awd_min_amd_letter_date": "2015-09-08",
 "awd_max_amd_letter_date": "2016-07-19",
 "awd_abstract_narration": "Modern scientific experiments have outgrown the capacity of a single lab.  \r\nThey require the storage and processing power of a datacenter, involve \r\ncross-institutional access to sensitive data, and span multiple domains of \r\nadministrative trust. In such a setting, security is fragile. In the face of \r\nsteady growth of sophisticated cyber-attack tools, modern server and desktop \r\nmachines are fundamentally insecure. Over a hundred critical \r\nvulnerabilities that allow unrestricted access to the entire system are \r\ndiscovered in the Linux kernel each year. Lacking flexibility to express \r\nfine-grained access control policies, modern networks often give vulnerable \r\nhosts excessive or even unrestricted connectivity to the rest of the network.  \r\nAn exploit of any host enables attackers to explore, exploit and take control \r\nover an entire cyber facility. Without support from the network, scientific \r\nfacilities will remain vulnerable. \r\n\r\nCapNet is a network architecture that enables secure, least privilege \r\ncollaboration in the cross-institutional environment of a modern research \r\nfacility. Building on the principles of capability access control, this \r\nresearch develops key elements needed to secure a network of a modern \r\nscientific infrastructure: 1) \"off by default\" behavior, with connectivity \r\ngranted on as-needed basis; 2) mechanisms for decentralized, \r\napplication-driven dynamic management of connectivity; and 3) a formal \r\nfoundation enabling secure collaboration of fine-grained, dynamic, \r\nmulti-institutional principals. The basis for CapNet's design is strong \r\nisolation of network activities with the mechanisms of software defined \r\nnetworks (SDN) and mediation of all communication between network hosts by \r\na capability access control model. CapNet represents the network as an access \r\ncontrol graph. Nodes are network hosts, edges (or \"capabilities\") are \r\npointers to other hosts allowing communication and further exchange of rights.  \r\nBy controlling the initial distribution of capabilities and their flow, CapNet \r\ngoverns network interactions through fine-grained, application-driven policies \r\nthat enable safe collaboration among multiple institutions and third-party \r\nservices. Finally, while taking a holistic approach to network access control, \r\nCapNet remains practical: it retains compatibility with unmodified network \r\nnetwork stacks, integrates with existing datacenter and cloud management \r\nstacks, enables incremental adoption, and is fast and scalable.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "OAC",
 "org_div_long_name": "Office of Advanced Cyberinfrastructure (OAC)",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Jacobus",
   "pi_last_name": "VAN DER MERWE",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Jacobus VAN DER MERWE",
   "pi_email_addr": "kobus@cs.utah.edu",
   "nsf_id": "000540324",
   "pi_start_date": "2016-07-19",
   "pi_end_date": null
  },
  {
   "pi_role": "Former Principal Investigator",
   "pi_first_name": "Anton",
   "pi_last_name": "Burtsev",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Anton Burtsev",
   "pi_email_addr": "aburtsev@flux.utah.edu",
   "nsf_id": "000637182",
   "pi_start_date": "2015-09-08",
   "pi_end_date": "2016-07-19"
  },
  {
   "pi_role": "Former Co-Principal Investigator",
   "pi_first_name": "Jacobus",
   "pi_last_name": "VAN DER MERWE",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Jacobus VAN DER MERWE",
   "pi_email_addr": "kobus@cs.utah.edu",
   "nsf_id": "000540324",
   "pi_start_date": "2015-09-08",
   "pi_end_date": "2016-07-19"
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Anton",
   "pi_last_name": "Burtsev",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Anton Burtsev",
   "pi_email_addr": "aburtsev@flux.utah.edu",
   "nsf_id": "000637182",
   "pi_start_date": "2016-07-19",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Utah",
  "inst_street_address": "201 PRESIDENTS CIR",
  "inst_street_address_2": "",
  "inst_city_name": "SALT LAKE CITY",
  "inst_state_code": "UT",
  "inst_state_name": "Utah",
  "inst_phone_num": "8015816903",
  "inst_zip_code": "841129049",
  "inst_country_name": "United States",
  "cong_dist_code": "01",
  "st_cong_dist_code": "UT01",
  "org_lgl_bus_name": "UNIVERSITY OF UTAH",
  "org_prnt_uei_num": "",
  "org_uei_num": "LL8GLEVH6MG3"
 },
 "perf_inst": {
  "perf_inst_name": "University of Utah",
  "perf_str_addr": "50 S.Central Campus Drive #3190",
  "perf_city_name": "Salt Lake City",
  "perf_st_code": "UT",
  "perf_st_name": "Utah",
  "perf_zip_code": "841129249",
  "perf_ctry_code": "US",
  "perf_cong_dist": "01",
  "perf_st_cong_dist": "UT01",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "802700",
   "pgm_ele_name": "Cybersecurity Innovation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "9150",
   "pgm_ref_txt": "EXP PROG TO STIM COMP RES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 499999.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>A wide range of modern scientific experiments have outgrown the capacity of a single lab. Today, such experiments require the storage capacity and processing power of a datacenter. Moreover, they involve cross-institutional access to sensitive data, and span multiple domains of administrative trust. Despite numerous advances in datacenter and cloud security, modern datacenters remain vulnerable to targeted attacks. Traditionally, cloud security concentrates on perimeter protection. Network firewalls and advanced intrusion-detection systems are designed to keep attacks outside of the datacenter network. Today, however, well-sponsored, coordinated, targeted attacks continue to penetrate the cloud perimeter. &nbsp;<br />This project developed a new network architecture, CapNet, aimed at implementing least authority and secure collaboration in the cloud and datacenter network. At its core, CapNet is an object capability system that represents the resources of a traditional network as a graph of objects that have unforgeable pointers (or capabilities) to other objects. In CapNet, objects represent two kinds of resources: (1) resources of the cloud network itself (hosts, network flows, etc.) and (2) primitives that control mutation of the object graph. &nbsp;Capabilities in CapNet allow principals to perform operations on objects: e.g., a capability to a &ldquo;flow object&rdquo; allows packets to be sent along the flow, and a capability to a &ldquo;node object&rdquo; can control a virtual or physical device in the cloud. Principals have no authority beyond capabilities: all network operations are accessible only through capability invocations.&nbsp;<br />Over the course of the project CapNet developed mechanisms and abstractions that enable the following security constructs in the datacenter network:<br />(1) Least authority. The key principle enabling security in CapNet is the ability to construct small, isolated cloud subsystems that operate on a minimal number of isolated resources. By minimizing the authority of individual subsystems, CapNet guarantees that even if a part of a computation is compromised, the possible effect of the attack is minimal and limited to a set of objects reachable through capabilities.<br />(2) Mutual isolation. CapNet developed mechanisms enabling mutual isolation of principals irrespective of the ownership of the network nodes and their past. In CapNet, the providers and consumers of third-party cloud services can interact without requiring trust. For example, even if a service is configured by a third-party provider, the consumer of the service has guarantees that the service is completely isolated from the provider after deployment. On the other hand, the provider can protect its proprietary service from the consumer by isolating the service from the consumer itself, inside the consumer&rsquo;s network.<br />(3) Decentralized access control. CapNet developed primitives that enable decentralized access control in the datacenter network. Datacenter workloads that involve multiple parties combining their sensitive datasets for joint processing require isolation for each dataset and the ability to reason about information flow across the joint computation. CapNet allows mistrusting tenants to assemble tightly controlled cloud networks in a decentralized manner, i.e., without trusting each other, yet enforcing their own network-wide isolation and information-flow properties.<br />By providing a foundation for secure scientific collaboration, CapNet is a step towards mitigating the potential for damage (including cyber-attacks, data loss, and data exfiltration) present in current scientific infrastructure. CapNet is open-source software and is available for download at https://gitlab.flux.utah.edu/tcloud/capnet. It can be test-driven via a CloudLab profile (https://www.cloudlab.us/p/TCloud/OpenStack-Capnet) that automatically instantiates a private Open-Stack cloud for the user, preconfigured with CapNet.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 07/03/2019<br>\n\t\t\t\t\tModified by: Jacobus&nbsp;Van Der Merwe</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nA wide range of modern scientific experiments have outgrown the capacity of a single lab. Today, such experiments require the storage capacity and processing power of a datacenter. Moreover, they involve cross-institutional access to sensitive data, and span multiple domains of administrative trust. Despite numerous advances in datacenter and cloud security, modern datacenters remain vulnerable to targeted attacks. Traditionally, cloud security concentrates on perimeter protection. Network firewalls and advanced intrusion-detection systems are designed to keep attacks outside of the datacenter network. Today, however, well-sponsored, coordinated, targeted attacks continue to penetrate the cloud perimeter.  \nThis project developed a new network architecture, CapNet, aimed at implementing least authority and secure collaboration in the cloud and datacenter network. At its core, CapNet is an object capability system that represents the resources of a traditional network as a graph of objects that have unforgeable pointers (or capabilities) to other objects. In CapNet, objects represent two kinds of resources: (1) resources of the cloud network itself (hosts, network flows, etc.) and (2) primitives that control mutation of the object graph.  Capabilities in CapNet allow principals to perform operations on objects: e.g., a capability to a \"flow object\" allows packets to be sent along the flow, and a capability to a \"node object\" can control a virtual or physical device in the cloud. Principals have no authority beyond capabilities: all network operations are accessible only through capability invocations. \nOver the course of the project CapNet developed mechanisms and abstractions that enable the following security constructs in the datacenter network:\n(1) Least authority. The key principle enabling security in CapNet is the ability to construct small, isolated cloud subsystems that operate on a minimal number of isolated resources. By minimizing the authority of individual subsystems, CapNet guarantees that even if a part of a computation is compromised, the possible effect of the attack is minimal and limited to a set of objects reachable through capabilities.\n(2) Mutual isolation. CapNet developed mechanisms enabling mutual isolation of principals irrespective of the ownership of the network nodes and their past. In CapNet, the providers and consumers of third-party cloud services can interact without requiring trust. For example, even if a service is configured by a third-party provider, the consumer of the service has guarantees that the service is completely isolated from the provider after deployment. On the other hand, the provider can protect its proprietary service from the consumer by isolating the service from the consumer itself, inside the consumer?s network.\n(3) Decentralized access control. CapNet developed primitives that enable decentralized access control in the datacenter network. Datacenter workloads that involve multiple parties combining their sensitive datasets for joint processing require isolation for each dataset and the ability to reason about information flow across the joint computation. CapNet allows mistrusting tenants to assemble tightly controlled cloud networks in a decentralized manner, i.e., without trusting each other, yet enforcing their own network-wide isolation and information-flow properties.\nBy providing a foundation for secure scientific collaboration, CapNet is a step towards mitigating the potential for damage (including cyber-attacks, data loss, and data exfiltration) present in current scientific infrastructure. CapNet is open-source software and is available for download at https://gitlab.flux.utah.edu/tcloud/capnet. It can be test-driven via a CloudLab profile (https://www.cloudlab.us/p/TCloud/OpenStack-Capnet) that automatically instantiates a private Open-Stack cloud for the user, preconfigured with CapNet.\n\n\t\t\t\t\tLast Modified: 07/03/2019\n\n\t\t\t\t\tSubmitted by: Jacobus Van Der Merwe"
 }
}