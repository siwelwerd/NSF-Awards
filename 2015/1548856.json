{
 "awd_id": "1548856",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "EAGER: Collaborative Research: Leveraging Graph Databases for Incremental and Scalable Symbolic Analysis and Verification of Web Applications",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927991",
 "po_email": "namla@nsf.gov",
 "po_sign_block_name": "Nina Amla",
 "awd_eff_date": "2015-09-01",
 "awd_exp_date": "2018-02-28",
 "tot_intn_awd_amt": 100000.0,
 "awd_amount": 100000.0,
 "awd_min_amd_letter_date": "2015-07-24",
 "awd_max_amd_letter_date": "2015-07-24",
 "awd_abstract_narration": "Modern human society relies heavily on web applications and is deeply affected by their poor dependability. Unfortunately, no matter how much effort is put into verification and validation of software, existing techniques are inherently limited, and software is routinely released with bugs and issues that limit its functionality and can dramatically affect the user experience. This project investigates an approach that has the potential to significantly improve the scalability and effectiveness of symbolic program analysis and verification techniques, that will improve the dependability of modern web applications,. \r\n\r\nThis project develops techniques and tools that use symbolic execution and automata-based verification techniques to automatically analyze and verify web applications, and store results of symbolic analyses in a graph database for efficient storage, and retrieval. The methods use incremental and differential analysis strategies that utilize the graph database in order to improve scalability and effectiveness of software analysis and verification. The project trains graduate students, and will make its artifacts publicly available to other researchers and educators.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Alessandro",
   "pi_last_name": "Orso",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Alessandro Orso",
   "pi_email_addr": "orso@cc.gatech.edu",
   "nsf_id": "000489660",
   "pi_start_date": "2015-07-24",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Wenke",
   "pi_last_name": "Lee",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Wenke Lee",
   "pi_email_addr": "wenke@cc.gatech.edu",
   "nsf_id": "000165836",
   "pi_start_date": "2015-07-24",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Georgia Tech Research Corporation",
  "inst_street_address": "926 DALNEY ST NW",
  "inst_street_address_2": "",
  "inst_city_name": "ATLANTA",
  "inst_state_code": "GA",
  "inst_state_name": "Georgia",
  "inst_phone_num": "4048944819",
  "inst_zip_code": "303186395",
  "inst_country_name": "United States",
  "cong_dist_code": "05",
  "st_cong_dist_code": "GA05",
  "org_lgl_bus_name": "GEORGIA TECH RESEARCH CORP",
  "org_prnt_uei_num": "EMW9FC8J3HN4",
  "org_uei_num": "EMW9FC8J3HN4"
 },
 "perf_inst": {
  "perf_inst_name": "Georgia Institute of Technology",
  "perf_str_addr": "225 North Ave NW",
  "perf_city_name": "Atlanta",
  "perf_st_code": "GA",
  "perf_st_name": "Georgia",
  "perf_zip_code": "303320002",
  "perf_ctry_code": "US",
  "perf_cong_dist": "05",
  "perf_st_cong_dist": "GA05",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7916",
   "pgm_ref_txt": "EAGER"
  },
  {
   "pgm_ref_code": "8206",
   "pgm_ref_txt": "Formal Methods and Verification"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 100000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The main goal of this project was to develop scalable program analysistechniques to improve security and dependability of software systems.Within the scope of this project, we have developed several novel programanalysis techniques and improved their scalability.&nbsp;</p>\n<p>We developed novel constraint solving and model counting techniques forhandling both numeric and string constraints and their combinations. Weimplemented our results in a novel constraint solver called ABC that storesconstraints as automata.&nbsp; To improve scalability of constraint based programanalysis, we developed a constraint database called Cashew that can cachenumeric and string constraints and model counting queries.&nbsp; We conductedempirical studies that demonstrate that constraint caching can significantlyimprove the performance of symbolic and quantitative program analyses.</p>\n<p>Our results on constraint cashing demonstrate that using appropriateconstraint databases, the scalability of symbolic program analysis can besignificantly improved.</p>\n<p>We developed a novel static, scalable analysis technique for detectingside channels in software systems based on symbolic cost analysis ofprogram paths.&nbsp; We implemented our symbolic path cost analysis techniquefor detecting side channels in a prototype tool, CoCo-Channel (CompositionalConstraint-based side Channel analyzer), for analyzing Java programs.</p>\n<p>We developed symbolic analysis techniques for detecting vulnerabilitiesthat are due to adaptive side-channel attacks, and synthesizing attacks thatexploit the identified vulnerabilities.</p>\n<p>Our results on side channel analysis demonstrate that symbolic executiontechniques, when combined with automata-based model-counting constraintsolvers, can be used to identify side channels in software applications. Sidechannel analysis is a very important problem in computing since it can beused to identify leakage of privileged information, which is crucial fordependability of modern software systems.</p>\n<p>Our results on automated attack synthesis enable us to identify the attacksthat malicious users can launch against software systems.&nbsp; This knowledgeis necessary for remedying existing vulnerabilities.</p>\n<p>We developed a static analysis technique for iOS executables for checkingAPI call vulnerabilities.&nbsp; Using a combination of dependency analysis andstring analysis, we were able to detect potential violations of Apple&rsquo;sAPI policies (such as restricted use of private/sensitive APIs) in iOSexecutables.</p>\n<p>Our results on information-flow tracking show that it is feasible to performaccurate forensic analysis of attacks in real-world scenarios. This canhelp making software systems more secure against the increasingly commonphenomenon of advanced persistent threats.</p>\n<p>The results from the research conducted within the scope of this project werepublished in international conferences and presented to the internationalresearch community. PIs gave invited, distinguished and keynote talks topresent the research results they obtained within the scope of this project.</p>\n<p>The students who participated in this research project have gained valuableresearch experience and training. They have furthered their education andimproved their research skills.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 05/28/2018<br>\n\t\t\t\t\tModified by: Alessandro&nbsp;Orso</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThe main goal of this project was to develop scalable program analysistechniques to improve security and dependability of software systems.Within the scope of this project, we have developed several novel programanalysis techniques and improved their scalability. \n\nWe developed novel constraint solving and model counting techniques forhandling both numeric and string constraints and their combinations. Weimplemented our results in a novel constraint solver called ABC that storesconstraints as automata.  To improve scalability of constraint based programanalysis, we developed a constraint database called Cashew that can cachenumeric and string constraints and model counting queries.  We conductedempirical studies that demonstrate that constraint caching can significantlyimprove the performance of symbolic and quantitative program analyses.\n\nOur results on constraint cashing demonstrate that using appropriateconstraint databases, the scalability of symbolic program analysis can besignificantly improved.\n\nWe developed a novel static, scalable analysis technique for detectingside channels in software systems based on symbolic cost analysis ofprogram paths.  We implemented our symbolic path cost analysis techniquefor detecting side channels in a prototype tool, CoCo-Channel (CompositionalConstraint-based side Channel analyzer), for analyzing Java programs.\n\nWe developed symbolic analysis techniques for detecting vulnerabilitiesthat are due to adaptive side-channel attacks, and synthesizing attacks thatexploit the identified vulnerabilities.\n\nOur results on side channel analysis demonstrate that symbolic executiontechniques, when combined with automata-based model-counting constraintsolvers, can be used to identify side channels in software applications. Sidechannel analysis is a very important problem in computing since it can beused to identify leakage of privileged information, which is crucial fordependability of modern software systems.\n\nOur results on automated attack synthesis enable us to identify the attacksthat malicious users can launch against software systems.  This knowledgeis necessary for remedying existing vulnerabilities.\n\nWe developed a static analysis technique for iOS executables for checkingAPI call vulnerabilities.  Using a combination of dependency analysis andstring analysis, we were able to detect potential violations of Apple?sAPI policies (such as restricted use of private/sensitive APIs) in iOSexecutables.\n\nOur results on information-flow tracking show that it is feasible to performaccurate forensic analysis of attacks in real-world scenarios. This canhelp making software systems more secure against the increasingly commonphenomenon of advanced persistent threats.\n\nThe results from the research conducted within the scope of this project werepublished in international conferences and presented to the internationalresearch community. PIs gave invited, distinguished and keynote talks topresent the research results they obtained within the scope of this project.\n\nThe students who participated in this research project have gained valuableresearch experience and training. They have furthered their education andimproved their research skills.\n\n\t\t\t\t\tLast Modified: 05/28/2018\n\n\t\t\t\t\tSubmitted by: Alessandro Orso"
 }
}