{
 "awd_id": "1453086",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CAREER: Semantics, Abstractions, and Tools for a Pragmatic Verified LLVM Compiler",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2015-01-15",
 "awd_exp_date": "2020-12-31",
 "tot_intn_awd_amt": 545000.0,
 "awd_amount": 561000.0,
 "awd_min_amd_letter_date": "2015-01-15",
 "awd_max_amd_letter_date": "2020-03-30",
 "awd_abstract_narration": "Title: : CAREER: Semantics, Abstractions, and Tools for a Pragmatic Verified LLVM Compiler\r\n\r\nCompilers are crucial components of the computing ecosystem. They can transform source programs written in multiple languages (e.g, C/C++/Java) into multiple target architectures (e.g, x86/ARM). Compiler bugs, however, break properties enforced at the level of source programs and can lead to unintended application behavior and disasters in safety-critical domains. This project aims to develop pragmatic and lightweight formal techniques for making mainstream compilers robust, in a manner that can be easily adopted by compiler developers. The intellectual merit of this project is the development of real-world compiler verification environments drawing influence from multiple areas like programming languages, architecture, and concurrency. The project's broader significance and importance are: (1) improving the quality of a large number of software projects by improving the robustness of the compiler, (2) inculcating formal reasoning for building large systems (compilers in particular) that are correct by construction, and (3) educating high school students, undergraduates, and graduate students for developing software with lightweight formal methods.\r\n\r\nThis project aims to build new techniques and tools that can check the correctness of optimizations with the help of the developer. The project achieves this by (1) designing mathematically-precise semantics for various components of the mainstream LLVM compiler, (2) designing domain specific languages for writing and specifying LLVM optimizations, which not only check optimizations for correctness but also generate efficient C++ implementations, (3) designing techniques to build precise translation validators, which compare the source and the target code with assistance from the compiler developer. Technology  developed by this research will not only improve the reliability of compilers but also the reliability of other large software systems which depend on correct compilation.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Santosh",
   "pi_last_name": "Nagarakatte",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Santosh Nagarakatte",
   "pi_email_addr": "santosh.nagarakatte@rutgers.edu",
   "nsf_id": "000630570",
   "pi_start_date": "2015-01-15",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Rutgers University New Brunswick",
  "inst_street_address": "3 RUTGERS PLZ",
  "inst_street_address_2": "",
  "inst_city_name": "NEW BRUNSWICK",
  "inst_state_code": "NJ",
  "inst_state_name": "New Jersey",
  "inst_phone_num": "8489320150",
  "inst_zip_code": "089018559",
  "inst_country_name": "United States",
  "cong_dist_code": "12",
  "st_cong_dist_code": "NJ12",
  "org_lgl_bus_name": "RUTGERS, THE STATE UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "M1LVPE5GLSD9"
 },
 "perf_inst": {
  "perf_inst_name": "Rutgers University New Brunswick",
  "perf_str_addr": "110 Frelinghuysen Road",
  "perf_city_name": "Piscataway",
  "perf_st_code": "NJ",
  "perf_st_name": "New Jersey",
  "perf_zip_code": "088548072",
  "perf_ctry_code": "US",
  "perf_cong_dist": "06",
  "perf_st_cong_dist": "NJ06",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "1045",
   "pgm_ref_txt": "CAREER-Faculty Erly Career Dev"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 209045.0
  },
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 108904.0
  },
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 227051.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 16000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The goal of this project is to develop usable&nbsp;formal tools for LLVM verification and educate/train students on formal verification. In this direction, we have completed the following tasks.</p>\n<p>1. We have been built the Alive-NJ prototype that allows the compiler writer to specify a peephole optimization in a domain specific language (DSL), which we call Alive. The Alive-NJ interpreter automatically checks the correctness of a peephole optimization by encoding the optimization as constraints in first-order logic. The validity of the constraints is automatically checked by using an SMT solver. The Alive DSL is both a specification and an implementation language. The Alive-NJ prototype automatically generates a C++ implementation that can be used within the LLVM compiler. Alive2, which is latest production version of Alive, is part of the LLVM compiler tool-chain. It is widely used by developers throughout the world.</p>\n<p>2. We discovered a new class of errors, which we call non-termination bugs,&nbsp; that arise when a suite of peephole optimizations is executed until a fixed point. An optimization can undo the effect of another optimization in the suite, which results in non-terminating compilation. We have designed a novel methodology to detect non-termination bugs with a suite of peephole optimizations,&nbsp; identified the necessary condition to ensure termination while composing peephole optimizations, and&nbsp; developed debugging support by generating concrete input programs that cause such non-terminating compilation.</p>\n<p>3. We identified that peephole optimizations related to floating point (FP) are typically errorneous. Hence, we&nbsp; designed&nbsp;Alive-FP, an automated verification framework for floating point based peephole optimizations in LLVM. Alive-FP handles a class of floating point optimizations and fast-math optimizations involving signed zeros, not-a-number, and infinities, which do not result in loss of accuracy. We explored multiple encodings for various floating point operations to account for the various kinds of undefined behavior and under-specification in the LLVM&rsquo;s language reference manual.</p>\n<p>4. Compiler developers typically transform an incorrect peephole optimization into a valid one by strengthening the precondition. This process is challenging and tedious even when the Alive-NJ prototype provides a counterexample. To help compiler writers develop a correct peephole optimization in such a scenario, we have developed ALIVE-INFER, a data-driven approach that infers preconditions for peephole optimizations expressed in Alive. ALIVE-INFER generates positive and negative examples for an optimization, enumerates predicates ondemand, and learns a set of predicates that separate the positive and negative examples. ALIVE-INFER repeats this process until it finds a precondition that ensures the validity of the optimization. ALIVE-INFER reports both a weakest precondition and a set of succinct partial preconditions to the developer. Our prototype generates preconditions that are weaker than LLVM&rsquo;s preconditions for numerous optimizations. We also demonstrate the applicability of this technique to generalize optimization patterns generated by Souper, an LLVM IR&ndash;based superoptimizer.</p>\n<p>5. To accomplish our educational goal of training students on formal reasoning skills,&nbsp; this grant partially supported&nbsp; the following PhD students on their research related to program analysis and verification: David Menendez, Jay Lim, Adarsh Yoga, Sangeeta Chowdhary, Mohammed Reza Soltaniyeh, and Nader Boushehrinejadmoradi. David Menendez (PhD 2018), Adarsh Yoga (PhD 2019), and Nader Boushehrinejadmoradi (PhD 2021) have subsequently graduated and are deploying these ideas in industry and academia. It also helped train numerous undergraduate students on various project related to formal verification. Two summer REU students Sammy Berger and Josh Cooper worked on formal verification for low-level code in the summer of 2020.&nbsp;</p>\n<p><span>Overall, our research findings and prototypes advance the state-of-the-art in formal verification of mainstream compilers. We have published our research findings at premier research venues. Furthermore, the grant was helpful in training&nbsp; PhD and undergraduate students in part, who are now applying these ideas in the field.</span></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 03/01/2021<br>\n\t\t\t\t\tModified by: Santosh&nbsp;Nagarakatte</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThe goal of this project is to develop usable formal tools for LLVM verification and educate/train students on formal verification. In this direction, we have completed the following tasks.\n\n1. We have been built the Alive-NJ prototype that allows the compiler writer to specify a peephole optimization in a domain specific language (DSL), which we call Alive. The Alive-NJ interpreter automatically checks the correctness of a peephole optimization by encoding the optimization as constraints in first-order logic. The validity of the constraints is automatically checked by using an SMT solver. The Alive DSL is both a specification and an implementation language. The Alive-NJ prototype automatically generates a C++ implementation that can be used within the LLVM compiler. Alive2, which is latest production version of Alive, is part of the LLVM compiler tool-chain. It is widely used by developers throughout the world.\n\n2. We discovered a new class of errors, which we call non-termination bugs,  that arise when a suite of peephole optimizations is executed until a fixed point. An optimization can undo the effect of another optimization in the suite, which results in non-terminating compilation. We have designed a novel methodology to detect non-termination bugs with a suite of peephole optimizations,  identified the necessary condition to ensure termination while composing peephole optimizations, and  developed debugging support by generating concrete input programs that cause such non-terminating compilation.\n\n3. We identified that peephole optimizations related to floating point (FP) are typically errorneous. Hence, we  designed Alive-FP, an automated verification framework for floating point based peephole optimizations in LLVM. Alive-FP handles a class of floating point optimizations and fast-math optimizations involving signed zeros, not-a-number, and infinities, which do not result in loss of accuracy. We explored multiple encodings for various floating point operations to account for the various kinds of undefined behavior and under-specification in the LLVM\u2019s language reference manual.\n\n4. Compiler developers typically transform an incorrect peephole optimization into a valid one by strengthening the precondition. This process is challenging and tedious even when the Alive-NJ prototype provides a counterexample. To help compiler writers develop a correct peephole optimization in such a scenario, we have developed ALIVE-INFER, a data-driven approach that infers preconditions for peephole optimizations expressed in Alive. ALIVE-INFER generates positive and negative examples for an optimization, enumerates predicates ondemand, and learns a set of predicates that separate the positive and negative examples. ALIVE-INFER repeats this process until it finds a precondition that ensures the validity of the optimization. ALIVE-INFER reports both a weakest precondition and a set of succinct partial preconditions to the developer. Our prototype generates preconditions that are weaker than LLVM\u2019s preconditions for numerous optimizations. We also demonstrate the applicability of this technique to generalize optimization patterns generated by Souper, an LLVM IR&ndash;based superoptimizer.\n\n5. To accomplish our educational goal of training students on formal reasoning skills,  this grant partially supported  the following PhD students on their research related to program analysis and verification: David Menendez, Jay Lim, Adarsh Yoga, Sangeeta Chowdhary, Mohammed Reza Soltaniyeh, and Nader Boushehrinejadmoradi. David Menendez (PhD 2018), Adarsh Yoga (PhD 2019), and Nader Boushehrinejadmoradi (PhD 2021) have subsequently graduated and are deploying these ideas in industry and academia. It also helped train numerous undergraduate students on various project related to formal verification. Two summer REU students Sammy Berger and Josh Cooper worked on formal verification for low-level code in the summer of 2020. \n\nOverall, our research findings and prototypes advance the state-of-the-art in formal verification of mainstream compilers. We have published our research findings at premier research venues. Furthermore, the grant was helpful in training  PhD and undergraduate students in part, who are now applying these ideas in the field.\n\n \n\n \n\n \n\n\t\t\t\t\tLast Modified: 03/01/2021\n\n\t\t\t\t\tSubmitted by: Santosh Nagarakatte"
 }
}