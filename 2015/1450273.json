{
 "awd_id": "1450273",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SI2-SSI: Collaborative Research: A Sustainable Infrastructure for Perfomance, Security, and Correctness Tools",
 "cfda_num": "47.070",
 "org_code": "05090000",
 "po_phone": "7032928235",
 "po_email": "bmihaila@nsf.gov",
 "po_sign_block_name": "Bogdan Mihaila",
 "awd_eff_date": "2015-08-01",
 "awd_exp_date": "2020-07-31",
 "tot_intn_awd_amt": 1500000.0,
 "awd_amount": 1500000.0,
 "awd_min_amd_letter_date": "2015-07-20",
 "awd_max_amd_letter_date": "2015-07-20",
 "awd_abstract_narration": "Software has become indispensable to society, used by computational scientists for science and engineering, by analysts mining big data for value, and to connect society over the Internet. However, the properties of software systems for any of these purposes cannot be understood without accounting for code transformations applied by optimizing compilers used to compose algorithm and data structure templates, and libraries available only in binary form. To address this need, this project will overhaul, integrate, and enhance static binary analysis and runtime technologies to produce components that provide a foundation for performance, correctness, and security tools. The project will build upon three successful and widely adopted open source software packages: the DynInst library for analysis and transformation of application binaries, the MRNet infrastructure for control of large-scale parallel executions and data analysis of their results, and the HPCToolkit performance analysis tools. The project team will engage the community to participate in the design and evaluation of the emerging components, as well as to adopt its components. \r\n\r\nThis project will have a wide range of impacts. First, software components built by the project will enable the development of sophisticated, high-quality, end-user performance, correctness, and security tools built by the project team, as well as others in academia, government, and industry. Software developed by the project team will help researchers and developers tackle testing, debugging, monitoring, analysis, and tuning of applications for systems at all scales. Second, end-user tools produced by the project have a natural place in the classroom to help students write efficient, correct, and secure programs. Third, components produced by the project will lower the barrier for new researchers to enter the field and build tools that have impact on production applications without years of investment. Fourth, the project will provide training for graduate students and interns in the area of software for performance, correctness, and security. Finally, through workshops and tutorials, the project will disseminate project results, provide training to enable others to leverage project software, and grow a community of tool researchers who depend on project components and thus have a strong motivation to help sustain project software into the future.\r\n\r\nModernizing open-source software components and tools for binary analysis will enable static analysis of application characteristics at the level of executable machine code, transformation of binaries to inject monitoring code, measurement to capture a detailed record of application?s interactions with all facets of a target platform, analysis of recorded data in parallel, and attribution of analysis results back to application source code in meaningful ways. Providing innovative, software components that support development of robust performance, correctness, and security tools will accelerate innovation by tools researchers and help them grapple with the increasing complexity of modern software. Of particular note, helping tools researchers and computational scientists grapple with the challenges of software for modern parallel systems and producing training materials that help people use this software, addresses several of the needs identified in the NSF Vision for Cyberinfrastructure for the 21st Century.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "OAC",
 "org_div_long_name": "Office of Advanced Cyberinfrastructure (OAC)",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "John",
   "pi_last_name": "Mellor-Crummey",
   "pi_mid_init": "M",
   "pi_sufx_name": "",
   "pi_full_name": "John M Mellor-Crummey",
   "pi_email_addr": "johnmc@rice.edu",
   "nsf_id": "000195018",
   "pi_start_date": "2015-07-20",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "William Marsh Rice University",
  "inst_street_address": "6100 MAIN ST",
  "inst_street_address_2": "",
  "inst_city_name": "Houston",
  "inst_state_code": "TX",
  "inst_state_name": "Texas",
  "inst_phone_num": "7133484820",
  "inst_zip_code": "770051827",
  "inst_country_name": "United States",
  "cong_dist_code": "09",
  "st_cong_dist_code": "TX09",
  "org_lgl_bus_name": "WILLIAM MARSH RICE UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "K51LECU1G8N3"
 },
 "perf_inst": {
  "perf_inst_name": "William Marsh Rice University",
  "perf_str_addr": "6100 Main St",
  "perf_city_name": "Houston",
  "perf_st_code": "TX",
  "perf_st_name": "Texas",
  "perf_zip_code": "770051827",
  "perf_ctry_code": "US",
  "perf_cong_dist": "09",
  "perf_st_cong_dist": "TX09",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "800400",
   "pgm_ele_name": "Software Institutes"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7433",
   "pgm_ref_txt": "CyberInfra Frmwrk 21st (CIF21)"
  },
  {
   "pgm_ref_code": "8009",
   "pgm_ref_txt": "Scientifc Software Integration"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 1500000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>In a collaboration with the University of Wisconsin, the project team at Rice University extended Wisconsin's Dyninst binary analysis toolkit, Rice University's HPCToolkit performance analysis tools, and leveraged both of these software systems to build a new correctness tool - the ROMP data race detector for multithreaded OpenMP programs - and evaluate its performance. Below are brief highlights of the sustainable software infrastructure project's technical accomplishments.</p>\n<ul>\n<li>The project team extended Dyninst with support for analysis of binaries for ARM processors and IBM Power processors that operate in little-endian mode, e.g. Power8 and Power9.&nbsp;</li>\n<li><span style=\"font-size: 12px;\">The project team enhanced the precision of binary analysis in Dyninst by improving the analysis of jump tables and improving machine code parsing for vector instructions.</span></li>\n<li><span style=\"font-size: 12px;\">The project team extended Dyninst with an API that enables client tools to inject information about basic blocks and control flow edges obtained from machine code parsed outside Dyninst. This capability enables HPCToolkit to use Dyninst to support analysis of loop nests in binaries for Intel and NVIDIA GPUs.</span></li>\n<li><span style=\"font-size: 12px;\">The project team replaced HPCToolkit's home-grown binary analysis capabilities with Dyninst, which improves HPCToolkit's ability to attribute performance measurements back to application source code at multiple levels. Leveraging Dyninst enabled porting of HPCToolkit to ARM, Power8, and Power9 processors.</span></li>\n<li><span style=\"font-size: 12px;\">The project team leveraged Dyninst's binary analysis capabilities to extend HPCToolkit to support performance measurement and analysis of GPU-accelerated parallel applications.&nbsp;</span></li>\n<li><span style=\"font-size: 12px;\">To better support analysis of large application binaries, the project team enhanced Dyninst to parse machine code and symbol table information in parallel. Using this multithreaded version of Dyninst reduced HPCToolkit's program structure analysis of a 7.7GiB TensorFlow binary from over 20 minutes to 161s on 16 cores.&nbsp;</span></li>\n<li><span style=\"font-size: 12px;\">The project team at Rice University used Dyninst to implement ROMP - a new correctness tool for detecting data races in multithreaded programs written using the OpenMP programming model. (Data races, which occur when multiple accesses, including one or more writes, to a shared variable are not synchronized, are errors can cause multithreaded programs to behave unpredictably.)</span></li>\n<li><span style=\"font-size: 12px;\">The project team at Rice University contributed to the open-source libunwind project to (1) enable it to be used to unwind an application's call stack from within a signal handler in an async-signal-safe fashion, and (2) enable memoization of unwind recipes at runtime to reduce unwinding overhead. These capabilities were pre-requisites for HPCToolkit to use libunwind.</span></li>\n<li><span style=\"font-size: 12px;\">The project team leveraged libunwind in HPCToolkit to collect calling context profiles on ARM processors and to improve existing call stack unwinding capabilities for x86_64 processors.&nbsp;</span></li>\n<li><span style=\"font-size: 12px;\">The project team began modernizing HPCToolkit's Graphical User Interface (GUI). This modernization included combining support for both trace and profile views into a single GUI and porting the GUI to the Eclipse4 framework, which works with newer versions of Java. The new implementation uses the Apache Maven build system to generate GUI executables for Windows, MacOS and Linux.</span></li>\n<li><span style=\"font-size: 12px;\">The project team leveraged both Dyninst's binary analysis and HPCToolkit's performance measurement and attribution to develop new capabilities for automated diagnosis of scalability losses in parallel applications.&nbsp;</span></li>\n<li><span style=\"font-size: 12px;\">The project team began development of \"hpctest\" a python-based framework for automated regression testing of HPCToolkit. This work leverages the DOE Spack package manager to support testing across multiple configurations and versions of compilers and software frameworks.</span></li>\n</ul>\n<p dir=\"ltr\"><span>The project team disseminates Dyninst and HPCToolkit as open source software. Dyninst is distributed as part of Red Hat Linux. HPCToolkit has been deployed on systems around the world and is used in academia, industry, and at national laboratories. Notably, HPCToolkit is used to analyze GPU-accelerated computations on the Summit and Sierra supercomputers at Oak Ridge and Lawrence Livermore National Laboratories - two of the fastest supercomputers in the world.&nbsp;</span></p>\n<p dir=\"ltr\"><span>The project team achieved the sustainability goals for HPCToolkit and Dyninst, securing new funding from the Department of Energy's (DOE) Exascale Computing Program, ARM, AMD, Intel, Cray, Argonne National Laboratory, and DOE National Nuclear Security Administration laboratories (Livermore, Sandia, Los Alamos).</span></p>\n<p dir=\"ltr\"><span>The project has included participation by graduate students and undergraduates at Rice University, as well as summer interns from the University of Novi Sad and the University of Belgrade in Serbia. Every year since the beginning of this project (with an exception for 2020 due to COVID-19), the project team has led an annual Scalable Tools Workshop, which attracts approximately 40 tool developers from academia, industry, and national laboratories around the world. Every summer during the term of the grant, the Rice University PI has lectured and supervised a hands-on session about the HPCToolkit performance tools at the Argonne Training Program for Extreme-Scale Computing (ATPESC) - a program for graduate students, postdocs, and computational scientists.</span></p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 01/12/2021<br>\n\t\t\t\t\tModified by: John&nbsp;M&nbsp;Mellor-Crummey</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nIn a collaboration with the University of Wisconsin, the project team at Rice University extended Wisconsin's Dyninst binary analysis toolkit, Rice University's HPCToolkit performance analysis tools, and leveraged both of these software systems to build a new correctness tool - the ROMP data race detector for multithreaded OpenMP programs - and evaluate its performance. Below are brief highlights of the sustainable software infrastructure project's technical accomplishments.\n\nThe project team extended Dyninst with support for analysis of binaries for ARM processors and IBM Power processors that operate in little-endian mode, e.g. Power8 and Power9. \nThe project team enhanced the precision of binary analysis in Dyninst by improving the analysis of jump tables and improving machine code parsing for vector instructions.\nThe project team extended Dyninst with an API that enables client tools to inject information about basic blocks and control flow edges obtained from machine code parsed outside Dyninst. This capability enables HPCToolkit to use Dyninst to support analysis of loop nests in binaries for Intel and NVIDIA GPUs.\nThe project team replaced HPCToolkit's home-grown binary analysis capabilities with Dyninst, which improves HPCToolkit's ability to attribute performance measurements back to application source code at multiple levels. Leveraging Dyninst enabled porting of HPCToolkit to ARM, Power8, and Power9 processors.\nThe project team leveraged Dyninst's binary analysis capabilities to extend HPCToolkit to support performance measurement and analysis of GPU-accelerated parallel applications. \nTo better support analysis of large application binaries, the project team enhanced Dyninst to parse machine code and symbol table information in parallel. Using this multithreaded version of Dyninst reduced HPCToolkit's program structure analysis of a 7.7GiB TensorFlow binary from over 20 minutes to 161s on 16 cores. \nThe project team at Rice University used Dyninst to implement ROMP - a new correctness tool for detecting data races in multithreaded programs written using the OpenMP programming model. (Data races, which occur when multiple accesses, including one or more writes, to a shared variable are not synchronized, are errors can cause multithreaded programs to behave unpredictably.)\nThe project team at Rice University contributed to the open-source libunwind project to (1) enable it to be used to unwind an application's call stack from within a signal handler in an async-signal-safe fashion, and (2) enable memoization of unwind recipes at runtime to reduce unwinding overhead. These capabilities were pre-requisites for HPCToolkit to use libunwind.\nThe project team leveraged libunwind in HPCToolkit to collect calling context profiles on ARM processors and to improve existing call stack unwinding capabilities for x86_64 processors. \nThe project team began modernizing HPCToolkit's Graphical User Interface (GUI). This modernization included combining support for both trace and profile views into a single GUI and porting the GUI to the Eclipse4 framework, which works with newer versions of Java. The new implementation uses the Apache Maven build system to generate GUI executables for Windows, MacOS and Linux.\nThe project team leveraged both Dyninst's binary analysis and HPCToolkit's performance measurement and attribution to develop new capabilities for automated diagnosis of scalability losses in parallel applications. \nThe project team began development of \"hpctest\" a python-based framework for automated regression testing of HPCToolkit. This work leverages the DOE Spack package manager to support testing across multiple configurations and versions of compilers and software frameworks.\n\nThe project team disseminates Dyninst and HPCToolkit as open source software. Dyninst is distributed as part of Red Hat Linux. HPCToolkit has been deployed on systems around the world and is used in academia, industry, and at national laboratories. Notably, HPCToolkit is used to analyze GPU-accelerated computations on the Summit and Sierra supercomputers at Oak Ridge and Lawrence Livermore National Laboratories - two of the fastest supercomputers in the world. \nThe project team achieved the sustainability goals for HPCToolkit and Dyninst, securing new funding from the Department of Energy's (DOE) Exascale Computing Program, ARM, AMD, Intel, Cray, Argonne National Laboratory, and DOE National Nuclear Security Administration laboratories (Livermore, Sandia, Los Alamos).\nThe project has included participation by graduate students and undergraduates at Rice University, as well as summer interns from the University of Novi Sad and the University of Belgrade in Serbia. Every year since the beginning of this project (with an exception for 2020 due to COVID-19), the project team has led an annual Scalable Tools Workshop, which attracts approximately 40 tool developers from academia, industry, and national laboratories around the world. Every summer during the term of the grant, the Rice University PI has lectured and supervised a hands-on session about the HPCToolkit performance tools at the Argonne Training Program for Extreme-Scale Computing (ATPESC) - a program for graduate students, postdocs, and computational scientists.\n\n \n\n\t\t\t\t\tLast Modified: 01/12/2021\n\n\t\t\t\t\tSubmitted by: John M Mellor-Crummey"
 }
}