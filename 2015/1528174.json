{
 "awd_id": "1528174",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "AF: Small: Algorithms: approximate, combinatorial, and continuous.",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Tracy Kimbrel",
 "awd_eff_date": "2015-08-01",
 "awd_exp_date": "2018-07-31",
 "tot_intn_awd_amt": 450000.0,
 "awd_amount": 450000.0,
 "awd_min_amd_letter_date": "2015-07-27",
 "awd_max_amd_letter_date": "2015-07-27",
 "awd_abstract_narration": "This project will attempt to improve recent breakthroughs in the area of linear programming.  Linear programming is a central tool for optimization that is used in logistics, factory planning, flight scheduling, and numerous other tasks.  Recently, theorical computer scientists have developed algorithms for linear programming with provably better performance than previously known.  These algorithms rely on new understanding of basic mathematical objects such as vectors and measures of their length, and the behavior of functions on such vectors; the vectors could correspond, for example, to how many flights are scheduled to leave from a particular airport in a flight scheduling problem.  The project will critically involve graduate students in designing provably better algorithms and will provide for opportunities for undergraduates in implementing the algorithms.  The PI has consistently worked with undergraduates and this project, given its possibilities for practical impact, is especially well suited for the inclusion of undergraduate students. Berkeley Computer Science now enrolls almost 900 students from the College of Letters and Science (in addition to its College of Engineering Students) which contains a much larger fraction of women. The PI is especially interested in involving this population in research.\r\n\r\nThis project endeavors to improve the complexity and simplify recent algorithms for linear programming and, in particular, the maximum flow problem.   The linear programming problem is the problem of finding a point in space that optimizes a linear function on the coordinates and obeys linear inequalities. The maximum flow problem is a particular linear programming problem where one wishes to push as much flow through a network as possible. The idea of the improvement is to find alternate representations of the networks, in the case of the maximum flow problem, or the set of feasible vectors, in the case of linear programming, where traditional optimization methods converge faster.  The methods combine a calculus based minimization approach with methods for efficiently capturing properties of networks and polytopes.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Satish",
   "pi_last_name": "Rao",
   "pi_mid_init": "B",
   "pi_sufx_name": "",
   "pi_full_name": "Satish B Rao",
   "pi_email_addr": "satishr@cs.berkeley.edu",
   "nsf_id": "000373507",
   "pi_start_date": "2015-07-27",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of California-Berkeley",
  "inst_street_address": "1608 4TH ST STE 201",
  "inst_street_address_2": "",
  "inst_city_name": "BERKELEY",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "5106433891",
  "inst_zip_code": "947101749",
  "inst_country_name": "United States",
  "cong_dist_code": "12",
  "st_cong_dist_code": "CA12",
  "org_lgl_bus_name": "REGENTS OF THE UNIVERSITY OF CALIFORNIA, THE",
  "org_prnt_uei_num": "",
  "org_uei_num": "GS3YEVSS12N6"
 },
 "perf_inst": {
  "perf_inst_name": "University of California-Berkeley",
  "perf_str_addr": "687 Soda Hall",
  "perf_city_name": "Berkeley",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "947201776",
  "perf_ctry_code": "US",
  "perf_cong_dist": "12",
  "perf_st_cong_dist": "CA12",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779600",
   "pgm_ele_name": "Algorithmic Foundations"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7926",
   "pgm_ref_txt": "ALGORITHMS"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 450000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>&nbsp;</p>\n<p>There have been major breakthroughs in the development of algorithms for what people traditionally viewed as combinatorial problems and in some sense vice versa.&nbsp; In particular, methods from optimization and combinatorial insights have been combined to provide better solutions to linear system solvers for many problems on the continuous side and to maximum flow solvers on the combinatorial side.&nbsp; Optimization tradionally viewed problems in matrices and worked generically in high dimensional space using as their core concept the convexity of the problem; that is that the body that contains the feasible solution is convex.&nbsp; Combinatorial methods view the matrix as things like a graph, which have associated objects like spanning trees in the graph. It turns out when a matrix can be viewed as a graph, things like spanning trees can be used to reshape the convex region that contains the feasible set for a number of optimization problems.&nbsp;&nbsp; This paradigm is relatively recent, circa 2000,&nbsp; breaking trends in both areas. <br /><br />This project sought to apply those techniques further.&nbsp; The combination produced faster algorithms for classes of linear programmings called packing/covering programs which model planning problems with various kind of resource constraints, as well as solving long open problems about sampling combinatorial objects accurately; in particular a supported graduate student showed how to find a random spanning tree in nearly linear time which significantly improved in theory over previous methods.&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 07/09/2019<br>\n\t\t\t\t\tModified by: Satish&nbsp;B&nbsp;Rao</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n \n\nThere have been major breakthroughs in the development of algorithms for what people traditionally viewed as combinatorial problems and in some sense vice versa.  In particular, methods from optimization and combinatorial insights have been combined to provide better solutions to linear system solvers for many problems on the continuous side and to maximum flow solvers on the combinatorial side.  Optimization tradionally viewed problems in matrices and worked generically in high dimensional space using as their core concept the convexity of the problem; that is that the body that contains the feasible solution is convex.  Combinatorial methods view the matrix as things like a graph, which have associated objects like spanning trees in the graph. It turns out when a matrix can be viewed as a graph, things like spanning trees can be used to reshape the convex region that contains the feasible set for a number of optimization problems.   This paradigm is relatively recent, circa 2000,  breaking trends in both areas. \n\nThis project sought to apply those techniques further.  The combination produced faster algorithms for classes of linear programmings called packing/covering programs which model planning problems with various kind of resource constraints, as well as solving long open problems about sampling combinatorial objects accurately; in particular a supported graduate student showed how to find a random spanning tree in nearly linear time which significantly improved in theory over previous methods. \n\n \n\n \n\n\t\t\t\t\tLast Modified: 07/09/2019\n\n\t\t\t\t\tSubmitted by: Satish B Rao"
 }
}