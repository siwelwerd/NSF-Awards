{
 "awd_id": "1513687",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "TWC: Medium: HARDWARE-ASSISTED LIGHTWEIGHT CAPABILITY OPTIMIZATION (HALCYON)",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Indrajit Ray",
 "awd_eff_date": "2015-10-01",
 "awd_exp_date": "2019-09-30",
 "tot_intn_awd_amt": 1200000.0,
 "awd_amount": 1438900.0,
 "awd_min_amd_letter_date": "2015-09-09",
 "awd_max_amd_letter_date": "2017-07-13",
 "awd_abstract_narration": "To address today's environment of constant security challenges and cyber-threats, the Hardware-Assisted Lightweight Capability Optimization (HALCYON) research explores novel techniques to make the performance of more secure system designs acceptable to users. Conventional system designs have achieved acceptable performance, but have evolved from hardware and software designs that carry forward compromises in security that made sense in the past, but not with modern hardware resources in today's security climate. HALCYON uses an approach, called \"capabilities\", that provides better control of information sharing and protection in computer systems than today's architectures. Capability access control is preferred by many security experts, but conventional wisdom holds that it is too slow to be used in practice. If HALCYON is successful, a new generation of fundamentally more secure software systems will be enabled, at little to no cost in performance. \r\n\r\nHALCYON research explores hardware acceleration of selected operations in the use of per-object access controls in an object-oriented programmer-controlled protection model based on capabilities. The measurement and data driven exploration is based on understanding the quantitative benefits of hardware acceleration on microkernels such as L4 that are used in mobile phones and other devices.  Examples of hardware accelerations include lightweight support for fat pointers (\"low-fat pointers\"), object pointers with associated access control specifications. Such fat pointers, which have been designed, validated and implemented, can protect units as small as individual memory words. As an initial example, the project is using measurements to identify the impact of this hardware acceleration. Measurement data from the quantitative exploration allows the researchers to identify both worthwhile hardware accelerations and opportunities for operating system restructuring that exploit those accelerations.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Jonathan",
   "pi_last_name": "Smith",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Jonathan Smith",
   "pi_email_addr": "jms@central.cis.upenn.edu",
   "nsf_id": "000090716",
   "pi_start_date": "2015-09-09",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Andre",
   "pi_last_name": "DeHon",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Andre DeHon",
   "pi_email_addr": "andre@seas.upenn.edu",
   "nsf_id": "000355592",
   "pi_start_date": "2015-09-09",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Pennsylvania",
  "inst_street_address": "3451 WALNUT ST STE 440A",
  "inst_street_address_2": "",
  "inst_city_name": "PHILADELPHIA",
  "inst_state_code": "PA",
  "inst_state_name": "Pennsylvania",
  "inst_phone_num": "2158987293",
  "inst_zip_code": "191046205",
  "inst_country_name": "United States",
  "cong_dist_code": "03",
  "st_cong_dist_code": "PA03",
  "org_lgl_bus_name": "TRUSTEES OF THE UNIVERSITY OF PENNSYLVANIA, THE",
  "org_prnt_uei_num": "GM1XX56LEP58",
  "org_uei_num": "GM1XX56LEP58"
 },
 "perf_inst": {
  "perf_inst_name": "University of Pennsylvania",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "PA",
  "perf_st_name": "Pennsylvania",
  "perf_zip_code": "191046205",
  "perf_ctry_code": "US",
  "perf_cong_dist": "03",
  "perf_st_cong_dist": "PA03",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "171400",
   "pgm_ele_name": "Special Projects - CNS"
  },
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  },
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  },
  {
   "pgm_ref_code": "8237",
   "pgm_ref_txt": "CISE Interagency Agreements"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516RB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718RB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 1200000.0
  },
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 238900.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Today's computers are insecure---vulnerable to attack and subversion by malicious hackers. &nbsp;Hardly a day goes by without the report of another breach, defacing web sites and stealing personal and private data.</p>\n<p><br />HALCYON (Hardware-Assisted Lightweight CapabilitY OptimizatioN) looked at how we can add modest hardware features to enabled more secure systems based around capabilities. &nbsp;With these capabilities, it becomes possible to lock down the insides of our computer systems more tightly, limiting access on a much more \"need to know\" basis than conventional systems.</p>\n<p><br />For analogy, consider a large business with a sprawling office complex. &nbsp;Most of today's applications and systems act as if there is a single lock on the front door and no internal locks. &nbsp;Once anyone is inside the building (a janitor, a delivery person, or a visitor), they can walk into any office and over hear any conversation or can walk into any file room and read (or replace) any file. &nbsp;In practice, most large businesses don't work like this. &nbsp;They have guards and badges to limit access, and internal locks on doors and file cabinets, restricting who can see what information. A capability system provides these kind of internal guards and locks.</p>\n<p><br />One challenge in deploying a capability system is to decide how tightly to lock down material. &nbsp;Should each office and file cabinet (or even file) have its own key? Or, is it ok to only restrict access by department? &nbsp;Another challenge is how to retrofit this internal locking for a computer system that previously had no internal restrictions?</p>\n<p><br />In HALCYON much of our work went to understanding how to automatically protect systems, how much that may slow down the operation of systems, how that helped reduce the vulnerability of our systems to attack, and how hardware support can reduce the slow down while preserving the reduction in vulnerability. &nbsp;We focused on two systems. &nbsp;We looked at JavaScript programs as heavily used in business Enterprise Systems, and at the Linux kernel---the privileged operation manager of most of today's computing systems. &nbsp;For both, we were able to show how to automatically divide the programs into separate security regions (separate departments and keys) and provide high-level controls that allow developers (managers) to tune the level of separation.</p>\n<p><br />Figure 2 (<span>JavaScript Privilege Reduction)</span>&nbsp;shows that we can reduce the access available in typical Enterprise JavaScript programs by orders of magnitude (4 orders of magnitude for one); see the numbers on the top of each bar. &nbsp; Most program components only need access to (keys for) 2--8 other things (Y axis in figure). Reducing access to the unnecessary material limits the impact of bugs or misbehavior (cf. rouge employees or visitors).</p>\n<p><br />Figure 1 (<span>uSCOPE Privilege-Performance Tradeoffs for Linux Kernel)</span>&nbsp;shows that we can reduce access available to code in the Linux kernel by a factor of 25,000 (X-axis), and we can reduce it by over 1,000 with overheads less than 15% (Y-axis) even for conventional hardware protection mechanisms, such as modern virtual memory systems with extended page tables. &nbsp;The individual curves show a large range of performance-privilege tradeoffs that our tools expose to developers and managers. &nbsp;Figure 3 (<span>Impact of Hardware Support on uSCOPE Privilege-Performance Tradeoffs for Linux Kernel)</span> shows how hardware support can lower this overhead to a few percent.</p>\n<p><br /><strong>Intellectual Merit</strong>: Our compartmentalization techniques provide automated techniques to improve the security of systems, reducing the inherent vulnerabilities in the computing systems that increasingly form the infrastructure of our society. &nbsp; The Linux kernel work provides automation to generate privilege- and performance-aware compartments. This can enhance security and is essential to allow large-scale, legacy code bases to be reshaped to exploit novel security hardware. &nbsp;The JavaScript work provides a mechanism to mitigate the inherent dangers of using large portions of third-party code, allowing the productivity benefit of code reuse while containing the associated dangers. The techniques we introduce are applicable to a wide range of systems beyond JavaScript and C, including Python and Lua.</p>\n<p><br /><strong>Broader Impact</strong>: &nbsp;Computer systems form the infrastructure of modern society. &nbsp;Today's systems are vulnerable to attack, compromise, and subversion. &nbsp;Our techniques show how to reduce the vulnerability of our systems to attack, and provide automated tools to introduce this protection even for large systems were no single person understands all the code in the system.</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 03/22/2020<br>\n\t\t\t\t\tModified by: Andre&nbsp;Dehon</p>\n</div>\n<div class=\"porSideCol\">\n<div class=\"each-gallery\">\n<div class=\"galContent\" id=\"gallery0\">\n<div class=\"photoCount\" id=\"photoCount0\">\n\t\t\t\t\t\t\t\t\tImages (<span id=\"selectedPhoto0\">1</span> of <span class=\"totalNumber\"></span>)\t\t\n\t\t\t\t\t\t\t\t</div>\n<div class=\"galControls\" id=\"controls0\"></div>\n<div class=\"galSlideshow\" id=\"slideshow0\"></div>\n<div class=\"galEmbox\" id=\"embox\">\n<div class=\"image-title\"></div>\n</div>\n</div>\n<div class=\"galNavigation\" id=\"navigation0\">\n<ul class=\"thumbs\" id=\"thumbs0\">\n<li>\n<a href=\"/por/images/Reports/POR/2020/1513687/1513687_10397171_1584909154538_uscope-privilege-performance--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2020/1513687/1513687_10397171_1584909154538_uscope-privilege-performance--rgov-800width.jpg\" title=\"uSCOPE Privilege-Performance Tradeoffs for Linux Kernel\"><img src=\"/por/images/Reports/POR/2020/1513687/1513687_10397171_1584909154538_uscope-privilege-performance--rgov-66x44.jpg\" alt=\"uSCOPE Privilege-Performance Tradeoffs for Linux Kernel\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">This shows the privilege (x-axis) vs. performance (y-axis) compartmentalization tradeoffs that our uSCOPE tool can  automatically identify for the Linux kernel.</div>\n<div class=\"imageCredit\">Nick Roessler</div>\n<div class=\"imagePermisssions\">Royalty-free (unrestricted use)</div>\n<div class=\"imageSubmitted\">Andre&nbsp;Dehon</div>\n<div class=\"imageTitle\">uSCOPE Privilege-Performance Tradeoffs for Linux Kernel</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2020/1513687/1513687_10397171_1584915491214_mir_privilege-reduction--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2020/1513687/1513687_10397171_1584915491214_mir_privilege-reduction--rgov-800width.jpg\" title=\"JavaScript Privilege Reduction\"><img src=\"/por/images/Reports/POR/2020/1513687/1513687_10397171_1584915491214_mir_privilege-reduction--rgov-66x44.jpg\" alt=\"JavaScript Privilege Reduction\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Graph shows privilege reduction for Enterprise JavaScript using our techniques.  Numbers over bars show ratio of privilege reduction.  Y-axis shows absolute number of privileges needed by each entity.</div>\n<div class=\"imageCredit\">Nikos Vasilakis</div>\n<div class=\"imagePermisssions\">Royalty-free (unrestricted use)</div>\n<div class=\"imageSubmitted\">Andre&nbsp;Dehon</div>\n<div class=\"imageTitle\">JavaScript Privilege Reduction</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2020/1513687/1513687_10397171_1584915677568_uscope-hardware-mechanisms--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2020/1513687/1513687_10397171_1584915677568_uscope-hardware-mechanisms--rgov-800width.jpg\" title=\"Impact of Hardware Support on uSCOPE Privilege-Performance Tradeoffs for Linux Kernel\"><img src=\"/por/images/Reports/POR/2020/1513687/1513687_10397171_1584915677568_uscope-hardware-mechanisms--rgov-66x44.jpg\" alt=\"Impact of Hardware Support on uSCOPE Privilege-Performance Tradeoffs for Linux Kernel\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">This shows privilege (X-axis) vs. performance (Y-axis) compartmentalization tradeoff curves for the Linux Kernel under different hardware support mechanisms.</div>\n<div class=\"imageCredit\">Nick Roessler</div>\n<div class=\"imagePermisssions\">Royalty-free (unrestricted use)</div>\n<div class=\"imageSubmitted\">Andre&nbsp;Dehon</div>\n<div class=\"imageTitle\">Impact of Hardware Support on uSCOPE Privilege-Performance Tradeoffs for Linux Kernel</div>\n</div>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>",
  "por_txt_cntn": "\nToday's computers are insecure---vulnerable to attack and subversion by malicious hackers.  Hardly a day goes by without the report of another breach, defacing web sites and stealing personal and private data.\n\n\nHALCYON (Hardware-Assisted Lightweight CapabilitY OptimizatioN) looked at how we can add modest hardware features to enabled more secure systems based around capabilities.  With these capabilities, it becomes possible to lock down the insides of our computer systems more tightly, limiting access on a much more \"need to know\" basis than conventional systems.\n\n\nFor analogy, consider a large business with a sprawling office complex.  Most of today's applications and systems act as if there is a single lock on the front door and no internal locks.  Once anyone is inside the building (a janitor, a delivery person, or a visitor), they can walk into any office and over hear any conversation or can walk into any file room and read (or replace) any file.  In practice, most large businesses don't work like this.  They have guards and badges to limit access, and internal locks on doors and file cabinets, restricting who can see what information. A capability system provides these kind of internal guards and locks.\n\n\nOne challenge in deploying a capability system is to decide how tightly to lock down material.  Should each office and file cabinet (or even file) have its own key? Or, is it ok to only restrict access by department?  Another challenge is how to retrofit this internal locking for a computer system that previously had no internal restrictions?\n\n\nIn HALCYON much of our work went to understanding how to automatically protect systems, how much that may slow down the operation of systems, how that helped reduce the vulnerability of our systems to attack, and how hardware support can reduce the slow down while preserving the reduction in vulnerability.  We focused on two systems.  We looked at JavaScript programs as heavily used in business Enterprise Systems, and at the Linux kernel---the privileged operation manager of most of today's computing systems.  For both, we were able to show how to automatically divide the programs into separate security regions (separate departments and keys) and provide high-level controls that allow developers (managers) to tune the level of separation.\n\n\nFigure 2 (JavaScript Privilege Reduction) shows that we can reduce the access available in typical Enterprise JavaScript programs by orders of magnitude (4 orders of magnitude for one); see the numbers on the top of each bar.   Most program components only need access to (keys for) 2--8 other things (Y axis in figure). Reducing access to the unnecessary material limits the impact of bugs or misbehavior (cf. rouge employees or visitors).\n\n\nFigure 1 (uSCOPE Privilege-Performance Tradeoffs for Linux Kernel) shows that we can reduce access available to code in the Linux kernel by a factor of 25,000 (X-axis), and we can reduce it by over 1,000 with overheads less than 15% (Y-axis) even for conventional hardware protection mechanisms, such as modern virtual memory systems with extended page tables.  The individual curves show a large range of performance-privilege tradeoffs that our tools expose to developers and managers.  Figure 3 (Impact of Hardware Support on uSCOPE Privilege-Performance Tradeoffs for Linux Kernel) shows how hardware support can lower this overhead to a few percent.\n\n\nIntellectual Merit: Our compartmentalization techniques provide automated techniques to improve the security of systems, reducing the inherent vulnerabilities in the computing systems that increasingly form the infrastructure of our society.   The Linux kernel work provides automation to generate privilege- and performance-aware compartments. This can enhance security and is essential to allow large-scale, legacy code bases to be reshaped to exploit novel security hardware.  The JavaScript work provides a mechanism to mitigate the inherent dangers of using large portions of third-party code, allowing the productivity benefit of code reuse while containing the associated dangers. The techniques we introduce are applicable to a wide range of systems beyond JavaScript and C, including Python and Lua.\n\n\nBroader Impact:  Computer systems form the infrastructure of modern society.  Today's systems are vulnerable to attack, compromise, and subversion.  Our techniques show how to reduce the vulnerability of our systems to attack, and provide automated tools to introduce this protection even for large systems were no single person understands all the code in the system.\n\n \n\n\t\t\t\t\tLast Modified: 03/22/2020\n\n\t\t\t\t\tSubmitted by: Andre Dehon"
 }
}