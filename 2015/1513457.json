{
 "awd_id": "1513457",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "TWC: Medium: Collaborative: Developer Crowdsourcing: Capturing, Understanding, and Addressing Security-related Blind Spots in APIs",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2015-09-01",
 "awd_exp_date": "2019-08-31",
 "tot_intn_awd_amt": 394271.0,
 "awd_amount": 394271.0,
 "awd_min_amd_letter_date": "2015-07-09",
 "awd_max_amd_letter_date": "2018-07-20",
 "awd_abstract_narration": "Despite an emphasis the security community places on the importance of producing secure software, the number of new security vulnerabilities in software increases every year. This research is based on the assumption that software vulnerabilities are caused by misunderstandings, or lack of knowledge, called blind spots, which the developers experience while they are building systems. When building systems, developers often focus more on functional requirements than on non-functional ones, such as security. Thus, they can make design decisions that prioritize functionality without noticing the security vulnerabilities these decisions create. Today, developers often have no access to effective software tools that highlight these vulnerabilities during development. This research identifies common developer blind spots with the goal of building and evaluating practical software tools that help prevent blind spots during development and detect vulnerabilities in deployed software.\r\n\r\nTo capture developers' reasoning when faced with blind spots, and to identify common blind spot characteristics, this research converts several identified blind spots into programming puzzles, and conducts a user study with developers solving these puzzles. Statistical analysis of the developers' answers identifies common characteristics among blind spots, and the observations of developers' behaviors guide the creation of tools to automatically detect blind spots and to warn developers about them as developers experience them. The tools have two complementary goals: (1) prevent blind spots from occurring by cueing developers on-the-spot about potential blind spots as they write code, and (2) identify software vulnerabilities in existing applications by detecting code that may have been written as a result of a blind spot. This research evaluates these newly developed tools in the context of a user study with developers, producing the following outcomes: (1) understanding of blind spots in application programming interfaces (APIs), and of developers' attentional and decision processes when writing code using APIs, (2) understanding of how to notify, without habituation and annoyance, developers on-the-spot about blind spots so that relevant security information is used by developers while writing code, (3) creation of open-source, publicly available developer tools that notify developers about blind spots and facilitate detection of vulnerabilities caused by blind spots, and (4) development of guidelines for better API design to minimize blind spots by considering developers' attentional and decision processes. This research addresses an important gap in secure software development by incorporating the human factor of the development process. This is particularly crucial given our society's increasing dependence on software applications.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Justin",
   "pi_last_name": "Cappos",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Justin Cappos",
   "pi_email_addr": "jcappos@nyu.edu",
   "nsf_id": "000600621",
   "pi_start_date": "2015-07-09",
   "pi_end_date": null
  },
  {
   "pi_role": "Former Co-Principal Investigator",
   "pi_first_name": "Yanyan",
   "pi_last_name": "Zhuang",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Yanyan Zhuang",
   "pi_email_addr": "yzhuang@uccs.edu",
   "nsf_id": "000656847",
   "pi_start_date": "2015-07-09",
   "pi_end_date": "2017-04-16"
  },
  {
   "pi_role": "Former Co-Principal Investigator",
   "pi_first_name": "Samuel",
   "pi_last_name": "Weber",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Samuel Weber",
   "pi_email_addr": "sam.m.weber@gmail.com",
   "nsf_id": "000663445",
   "pi_start_date": "2017-04-16",
   "pi_end_date": "2018-07-20"
  }
 ],
 "inst": {
  "inst_name": "New York University",
  "inst_street_address": "70 WASHINGTON SQ S",
  "inst_street_address_2": "",
  "inst_city_name": "NEW YORK",
  "inst_state_code": "NY",
  "inst_state_name": "New York",
  "inst_phone_num": "2129982121",
  "inst_zip_code": "100121019",
  "inst_country_name": "United States",
  "cong_dist_code": "10",
  "st_cong_dist_code": "NY10",
  "org_lgl_bus_name": "NEW YORK UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "NX9PXMKW5KW8"
 },
 "perf_inst": {
  "perf_inst_name": "New York University",
  "perf_str_addr": "15 Metrotech Center",
  "perf_city_name": "Brooklyn",
  "perf_st_code": "NY",
  "perf_st_name": "New York",
  "perf_zip_code": "112013846",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "NY07",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 394271.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Software vulnerabilities are a major economic and security problem for society today.&nbsp; Through this work, we helped to make a certain, popular type of security issue easier for developers to find and fix.&nbsp; We determined that many software vulnerabilities are caused by blindspots in developers? heuristic-based decision-making processes. In other words, when using a piece of software tthat already exists, a developer will often now fully understand some aspect of how that software works and will make an error.&nbsp; (We call these areas where there is a lack of understanding 'blindspots'.)&nbsp; We performed many pieces of resarch to understand and help to build better tools to address this phenomenon.&nbsp;</p>\n<p>&nbsp;</p>\n<p>To conduct this research we performed several large user studies on Python and Jave developers.&nbsp; I<span>n particular, we found that (1) The presence of blindspots correlated negatively with the developers? accuracy in answering implicit security questions and the developers? ability to identify potential security concerns in the code. This effect was more pronounced for I/O-related APIs and for puzzles with higher cyclomatic complexity. (2) Higher cognitive functioning and more programming experience did not predict better ability to detect API blindspots. (3) Developers exhibiting greater openness as a personality trait were more likely to detect API blindspots. Taken together, these project?s outcomes are applicable in the following areas: (1) design, implementation, and evaluation of new APIs; (2) addressing of blindspots in legacy APIs; (3) development of novel methods for developer recruitment/training based on personality assessment; (4) improvement of software development processes in organizations (e.g., establishment of separate security vs. functionality teams), (5) development of usable warning tools for vulnerabilities during coding time,; and (6) development of effective runtime vulnerability discovery.</span></p>\n<p>&nbsp;</p>\n<p>We also conducted several studies to understand other causes of confusion in C programs.&nbsp; We found small code patterns \"atoms of confusion\" in source code that are much more confusing than equivalent, clarified code&nbsp;<span>Of our proposed atoms, 15 have been shown to be more confusing than corresponding clarified code. These results are statistically significant and the size of the effect varies from moderate to very large.&nbsp;&nbsp;&nbsp;Style Guidelines have overlooked some very confusing patterns that are used in practice, including those that appear thousands of times in large software projects like Linux, Apache, Firefox, etc..&nbsp; Those patterns are more highly correlated with later bug fixes and comments in code.&nbsp; Fixing these issues can help to reduce confusion in code overall, leading to more understandable programs.</span></p>\n<p>&nbsp;</p>\n<p><span>Overall, this research will help programmers to write clearer, less buggy code.&nbsp; As a result, this will reduce the rate of bugs in software and improve the security and reliability of the software that we all rely on.</span></p>\n<p>&nbsp;</p>\n<p><span><br /></span></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 11/30/2019<br>\n\t\t\t\t\tModified by: Justin&nbsp;Cappos</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nSoftware vulnerabilities are a major economic and security problem for society today.  Through this work, we helped to make a certain, popular type of security issue easier for developers to find and fix.  We determined that many software vulnerabilities are caused by blindspots in developers? heuristic-based decision-making processes. In other words, when using a piece of software tthat already exists, a developer will often now fully understand some aspect of how that software works and will make an error.  (We call these areas where there is a lack of understanding 'blindspots'.)  We performed many pieces of resarch to understand and help to build better tools to address this phenomenon. \n\n \n\nTo conduct this research we performed several large user studies on Python and Jave developers.  In particular, we found that (1) The presence of blindspots correlated negatively with the developers? accuracy in answering implicit security questions and the developers? ability to identify potential security concerns in the code. This effect was more pronounced for I/O-related APIs and for puzzles with higher cyclomatic complexity. (2) Higher cognitive functioning and more programming experience did not predict better ability to detect API blindspots. (3) Developers exhibiting greater openness as a personality trait were more likely to detect API blindspots. Taken together, these project?s outcomes are applicable in the following areas: (1) design, implementation, and evaluation of new APIs; (2) addressing of blindspots in legacy APIs; (3) development of novel methods for developer recruitment/training based on personality assessment; (4) improvement of software development processes in organizations (e.g., establishment of separate security vs. functionality teams), (5) development of usable warning tools for vulnerabilities during coding time,; and (6) development of effective runtime vulnerability discovery.\n\n \n\nWe also conducted several studies to understand other causes of confusion in C programs.  We found small code patterns \"atoms of confusion\" in source code that are much more confusing than equivalent, clarified code Of our proposed atoms, 15 have been shown to be more confusing than corresponding clarified code. These results are statistically significant and the size of the effect varies from moderate to very large.   Style Guidelines have overlooked some very confusing patterns that are used in practice, including those that appear thousands of times in large software projects like Linux, Apache, Firefox, etc..  Those patterns are more highly correlated with later bug fixes and comments in code.  Fixing these issues can help to reduce confusion in code overall, leading to more understandable programs.\n\n \n\nOverall, this research will help programmers to write clearer, less buggy code.  As a result, this will reduce the rate of bugs in software and improve the security and reliability of the software that we all rely on.\n\n \n\n\n\n\n \n\n \n\n\t\t\t\t\tLast Modified: 11/30/2019\n\n\t\t\t\t\tSubmitted by: Justin Cappos"
 }
}