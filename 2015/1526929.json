{
 "awd_id": "1526929",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Collaborative Research:Text Retrieval in Software Engineering 2.0",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2015-09-01",
 "awd_exp_date": "2018-08-31",
 "tot_intn_awd_amt": 224998.0,
 "awd_amount": 224998.0,
 "awd_min_amd_letter_date": "2015-07-20",
 "awd_max_amd_letter_date": "2015-07-20",
 "awd_abstract_narration": "Software systems contain large amounts of textual information captured in various software artifacts, such as, requirements documents, source code, user manuals, etc.  The productivity of software developers and the quality of the software they produce directly depends on their ability to retrieve and understand the textual information present in software.  Since humans cannot process and comprehend so much text, researchers proposed the use of text retrieval techniques to help software developers with many of their daily tasks.  In order to be useful, these techniques need to be properly configured, which requires calibrating many parameters.  As most software developers are not experts in text retrieval, they need help in determining the best text retrieval configuration in a given software engineering context.  The configuration problem is one of the main obstacles in the adoption of such techniques in the software industry, because many approaches proposed by researchers do not generalize well.  The outcomes of this project will transform the way software developers address many of their daily tasks, allowing them to easily adopt the use of text retrieval during software development.  The results of this research will also be used in software engineering courses to support students in their projects.  The new practices that the students will acquire will help them become better software engineers.  The proposed research also brings together work from different computing research communities: software engineering and information retrieval and it will bring new knowledge in both fields.  Existing approaches using text retrieval in software engineering will become more practical, rather than just promising, facilitating migration from the lab into industry and academia.\r\n\r\nThe outcome of this research will be: (1) a novel approach (called TRinSE2.0), which will achieve automatic, runtime query-based text retrieval configuration; and (2) improvements to important software engineering tasks, in practical settings, focusing on feature and bug location, impact analysis, traceability link recovery, and bug triage.  TRinSE2.0 will be evaluated on open source data, in the classroom, and in industrial settings.  The proposed work will transform the way text retrieval configuration is done in software engineering applications.  New, software-specific measures, as well as proven linguistic-based measures will be used to capture query properties in the context of software engineering tasks and data sets.  Machine learning algorithms will find the best configuration for a given query.  When writing a query to retrieve information from a software project, developers will get the best results, saving them time and effort, improving their productivity and the quality of their work.  The text retrieval configuration problem will no longer be heuristic-based, but it will become data-driven.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Sonia",
   "pi_last_name": "Haiduc",
   "pi_mid_init": "C",
   "pi_sufx_name": "",
   "pi_full_name": "Sonia C Haiduc",
   "pi_email_addr": "shaiduc@cs.fsu.edu",
   "nsf_id": "000662623",
   "pi_start_date": "2015-07-20",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Florida State University",
  "inst_street_address": "874 TRADITIONS WAY",
  "inst_street_address_2": "",
  "inst_city_name": "TALLAHASSEE",
  "inst_state_code": "FL",
  "inst_state_name": "Florida",
  "inst_phone_num": "8506445260",
  "inst_zip_code": "323060001",
  "inst_country_name": "United States",
  "cong_dist_code": "02",
  "st_cong_dist_code": "FL02",
  "org_lgl_bus_name": "FLORIDA STATE UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "JF2BLNN4PJC3"
 },
 "perf_inst": {
  "perf_inst_name": "Florida State University",
  "perf_str_addr": "1017 Academic Way, LOV 104-C",
  "perf_city_name": "Tallahassee",
  "perf_st_code": "FL",
  "perf_st_name": "Florida",
  "perf_zip_code": "323064510",
  "perf_ctry_code": "US",
  "perf_cong_dist": "02",
  "perf_st_cong_dist": "FL02",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 224998.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Most software artifacts contain large amounts of textual information (e.g., requirements, source code, etc.) Text Retrieval approaches, which allow searching in large amounts of text and extracting the most important information in software artifacts, have been used to help software stakeholders leverage this information and have been applied to more than 20 software engineering tasks. In order to be useful, Text Retrieval techniques need to be properly configured, which requires calibrating many parameters. Decades of research on using Text Retrieval in software engineering concluded that the performance of the Text Retrieval approaches varies widely from system to system, even when used for the same task. The variance in Text Retrieval performance on software engineering data is one of the main reasons why such approaches are not being adopted in industry as fast as they should be.</p>\n<p>The research supported by this grant improved Text Retrieval solutions to software engineering tasks by designing and implementing solutions that automatically determine the best Text Retrieval configuration for a given software engineering task, data set, and text query. More than that, the new solutions were adapted and successfully applied to several software engineering tasks, such as finding bugs in source code, recovering conceptual links between different types of software artifacts (e.g., source code and use cases), searching for information in different types of developer documentation (e.g., YouTube tutorials, StackOverflow posts), and tagging YouTube software development tutorials with relevant keywords describing their contents. In addition, two tools were developed and released for use to the public. The first, called CodeTube, is a web-based search engine which uses Text Retrieval approaches, mines video tutorials and enables developers and students to search their contents. The video tutorials are split into coherent fragments, to return only fragments related to a given query. The results are complemented with information from additional sources, such as Stack Overflow discussions. The second web-based search engine, called SPYSE, uses Text Retrieval approaches in order to support computer science students and software developers in finding quality Python packages to reuse, in order to address a specific programming task. Code reuse is a common practice among software developers, whether novices or experts, and online resources are often used for this purpose. For Python, the state-of-the-art repository and search engine PyPI has very limited capabilities, making it hard for developers to find useful, high quality Python code to use for their task at hand. SPYSE is a web-based search engine that overcomes the limitations of the state of the art, making it easier for developers to find useful code. The power of SPYSE lays in the combination of three different aspects meant to provide developers with relevant, and at the same time high quality code: code semantics (leveraged using Text Retrieval), popularity, and code quality. SPYSE also allows searching for modules, in addition to packages, which opens new reuse opportunities for developers, currently not supported.</p>\n<p>The educational and broader impact component of the project was centered on augmenting the existing software engineering curriculum with findings from the performed research and on integrating the results of the research in educational material (tutorials and keynotes) for wide dissemination to other researchers at conferences and to students in classroom projects and teaching.</p>\n<p>We delivered four Technical Briefings in top venues in the field, on &ldquo;The Use of Text Retrieval and Natural Language Processing in Software Engineering&rdquo;. We also delivered keynotes and tutorials on text retrieval applications in software engineering at summer schools.</p>\n<p>During the duration of the grant, four graduate students worked on topics related to this project under the direct advising of the PI and two of them were from underrepresented groups (Hispanic/Latino). This grant contributed to the training, professional development, and the fostering of networks for the supported graduate students, by allowing the PI to train and involve the students in research and by allowing the students to (i) present their papers at conferences and get feedback on their work from other researchers from academia and industry, (ii) attend research presentations at conferences and enrich their knowledge about the field, and (iii) interact with other students, researchers, and practitioners in the field, therefore building a professional network that can benefit their future careers.</p>\n<p>We expect that our work on calibrating Text Retrieval techniques for specific software engineering tasks, data sets, and individual queries will have a significant impact on the large body of work in the field of software engineering, which makes use of Text Retrieval approaches. At the same time, improving Text Retrieval configuration for software engineering tasks will lead to better results returned by the tools making use of these techniques. This could positively impact the adoption of the tools in industry and improve the daily tasks of developers making use of them.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 09/10/2018<br>\n\t\t\t\t\tModified by: Sonia&nbsp;C&nbsp;Haiduc</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nMost software artifacts contain large amounts of textual information (e.g., requirements, source code, etc.) Text Retrieval approaches, which allow searching in large amounts of text and extracting the most important information in software artifacts, have been used to help software stakeholders leverage this information and have been applied to more than 20 software engineering tasks. In order to be useful, Text Retrieval techniques need to be properly configured, which requires calibrating many parameters. Decades of research on using Text Retrieval in software engineering concluded that the performance of the Text Retrieval approaches varies widely from system to system, even when used for the same task. The variance in Text Retrieval performance on software engineering data is one of the main reasons why such approaches are not being adopted in industry as fast as they should be.\n\nThe research supported by this grant improved Text Retrieval solutions to software engineering tasks by designing and implementing solutions that automatically determine the best Text Retrieval configuration for a given software engineering task, data set, and text query. More than that, the new solutions were adapted and successfully applied to several software engineering tasks, such as finding bugs in source code, recovering conceptual links between different types of software artifacts (e.g., source code and use cases), searching for information in different types of developer documentation (e.g., YouTube tutorials, StackOverflow posts), and tagging YouTube software development tutorials with relevant keywords describing their contents. In addition, two tools were developed and released for use to the public. The first, called CodeTube, is a web-based search engine which uses Text Retrieval approaches, mines video tutorials and enables developers and students to search their contents. The video tutorials are split into coherent fragments, to return only fragments related to a given query. The results are complemented with information from additional sources, such as Stack Overflow discussions. The second web-based search engine, called SPYSE, uses Text Retrieval approaches in order to support computer science students and software developers in finding quality Python packages to reuse, in order to address a specific programming task. Code reuse is a common practice among software developers, whether novices or experts, and online resources are often used for this purpose. For Python, the state-of-the-art repository and search engine PyPI has very limited capabilities, making it hard for developers to find useful, high quality Python code to use for their task at hand. SPYSE is a web-based search engine that overcomes the limitations of the state of the art, making it easier for developers to find useful code. The power of SPYSE lays in the combination of three different aspects meant to provide developers with relevant, and at the same time high quality code: code semantics (leveraged using Text Retrieval), popularity, and code quality. SPYSE also allows searching for modules, in addition to packages, which opens new reuse opportunities for developers, currently not supported.\n\nThe educational and broader impact component of the project was centered on augmenting the existing software engineering curriculum with findings from the performed research and on integrating the results of the research in educational material (tutorials and keynotes) for wide dissemination to other researchers at conferences and to students in classroom projects and teaching.\n\nWe delivered four Technical Briefings in top venues in the field, on \"The Use of Text Retrieval and Natural Language Processing in Software Engineering\". We also delivered keynotes and tutorials on text retrieval applications in software engineering at summer schools.\n\nDuring the duration of the grant, four graduate students worked on topics related to this project under the direct advising of the PI and two of them were from underrepresented groups (Hispanic/Latino). This grant contributed to the training, professional development, and the fostering of networks for the supported graduate students, by allowing the PI to train and involve the students in research and by allowing the students to (i) present their papers at conferences and get feedback on their work from other researchers from academia and industry, (ii) attend research presentations at conferences and enrich their knowledge about the field, and (iii) interact with other students, researchers, and practitioners in the field, therefore building a professional network that can benefit their future careers.\n\nWe expect that our work on calibrating Text Retrieval techniques for specific software engineering tasks, data sets, and individual queries will have a significant impact on the large body of work in the field of software engineering, which makes use of Text Retrieval approaches. At the same time, improving Text Retrieval configuration for software engineering tasks will lead to better results returned by the tools making use of these techniques. This could positively impact the adoption of the tools in industry and improve the daily tasks of developers making use of them.\n\n\t\t\t\t\tLast Modified: 09/10/2018\n\n\t\t\t\t\tSubmitted by: Sonia C Haiduc"
 }
}