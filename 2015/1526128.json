{
 "awd_id": "1526128",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CSR: SMALL: Robust Algorithms for an Open Source Software Reliability Tool",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032925197",
 "po_email": "mmcclure@nsf.gov",
 "po_sign_block_name": "Marilyn McClure",
 "awd_eff_date": "2015-10-01",
 "awd_exp_date": "2018-09-30",
 "tot_intn_awd_amt": 124999.0,
 "awd_amount": 149638.0,
 "awd_min_amd_letter_date": "2015-09-14",
 "awd_max_amd_letter_date": "2017-12-19",
 "awd_abstract_narration": "The key to the success of all software is its reliability. This project will develop an open source software reliability tool that will allow software engineers to automatically apply software reliability models to help organizations ensure that software applications they develop can operate free of failures. Traditional algorithms are numerically unstable, meaning that they can fail if initial estimates are inaccurate. Failure of an algorithm renders it impossible to apply a software reliability model to make useful predictions such as the amount of additional time a software application should be tested in order to achieve a desired level of reliability. \r\n\r\nThe goal of this research is to develop numerically stable algorithms that will succeed even if the initial estimates are inaccurate. Expectation maximization (EM) and expectation conditional maximization (ECM) algorithms will be developed for failure rate and nonhomogeneous Poisson process (NHPP) software reliability models. Traditional EM algorithms impose restrictive assumptions that limit their application to only the simplest models, while the potential of the ECM algorithm has not been fully explored. Therefore, this research challenge will remove the restrictions of existing EM algorithms and design efficient ECM algorithms for software reliability models. Implementations of these numerically stable EM and ECM algorithms will be incorporated into the open source tool to ensure that software reliability models can be applied successfully. The enhanced stability of the algorithms and the open source nature of the tool may promote widespread use of quantitative software reliability models, enabling companies and organizations to improve time to market or field a software product.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Lance",
   "pi_last_name": "Fiondella",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Lance Fiondella",
   "pi_email_addr": "lfiondella@umassd.edu",
   "nsf_id": "000652207",
   "pi_start_date": "2015-09-14",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Massachusetts, Dartmouth",
  "inst_street_address": "285 OLD WESTPORT RD",
  "inst_street_address_2": "",
  "inst_city_name": "NORTH DARTMOUTH",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "5089998953",
  "inst_zip_code": "027472356",
  "inst_country_name": "United States",
  "cong_dist_code": "09",
  "st_cong_dist_code": "MA09",
  "org_lgl_bus_name": "UNIVERSITY OF MASSACHUSETTS DARTMOUTH",
  "org_prnt_uei_num": "",
  "org_uei_num": "PMMKPCKNN9R2"
 },
 "perf_inst": {
  "perf_inst_name": "University of Massachusetts, Dartmouth",
  "perf_str_addr": "285 Old Westport Road",
  "perf_city_name": "North Dartmouth",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "027472300",
  "perf_ctry_code": "US",
  "perf_cong_dist": "09",
  "perf_st_cong_dist": "MA09",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "171400",
   "pgm_ele_name": "Special Projects - CNS"
  },
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 124999.0
  },
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 12555.0
  },
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 12084.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Software is critical to many modern technologies. In the most benign cases, software failure inconveniences the user, while the most serious failures can result in loss of life as well as economic and environmental damage. Traditional software engineering designs tests to ensure that software performs as intended. Software reliability growth models are based on methods from probability and statistics, which promote more rigorous assessment of software by using the failure data collected during testing to quantify the decrease in the failure rate as faults are identified and corrected. These methods can also be used to predict reliability improvements that could be attained with additional effort and can therefore determine if a project will meet its reliability goals by the end of the original project timeline. Schedule overruns can also incur substantial additional costs. Thus, software reliability growth models can inform private industry and government projects, providing users of these models with the ability to assess project schedule and cost risks, including those paid for by the taxpayer.</p>\n<p>&nbsp;</p>\n<p>Software reliability models are a helpful supplementary tool, but require a computer to apply and relatively few individuals possess knowledge of these methods. Even individuals possessing this knowledge may struggle to apply the methods regularly because past algorithms applied to these models require the user to estimate numbers close to the values that best characterize a failure data set. If this is not done with sufficient accuracy, models may fail to obtain a &ldquo;curve of best fit&rdquo; and predictions may be inaccurate. Optimistic predictions may lead to an inappropriate decision to release software that is not sufficiently reliable, which could result in product failure or more serious consequences.</p>\n<p>&nbsp;</p>\n<p>To overcome these limitations, this project developed numerical algorithms from statistics to rapidly and consistently fit software reliability models to failure data and implemented these methods in an open source tool that can be downloaded an used by any individual or organization wishing to perform software reliability assessments as part of their software engineering activities. This tool is already being used by private industry to improve their time to market or field a software product. It is also employed by major defense contractors and Federally Funded Research and Development Centers (FFRDCs) that assess systems critical to national defense and security. The open architecture enables researchers to contribute additional models produced through their research to benefit software engineering projects that utilize the tool.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 11/29/2018<br>\n\t\t\t\t\tModified by: Lance&nbsp;Fiondella</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nSoftware is critical to many modern technologies. In the most benign cases, software failure inconveniences the user, while the most serious failures can result in loss of life as well as economic and environmental damage. Traditional software engineering designs tests to ensure that software performs as intended. Software reliability growth models are based on methods from probability and statistics, which promote more rigorous assessment of software by using the failure data collected during testing to quantify the decrease in the failure rate as faults are identified and corrected. These methods can also be used to predict reliability improvements that could be attained with additional effort and can therefore determine if a project will meet its reliability goals by the end of the original project timeline. Schedule overruns can also incur substantial additional costs. Thus, software reliability growth models can inform private industry and government projects, providing users of these models with the ability to assess project schedule and cost risks, including those paid for by the taxpayer.\n\n \n\nSoftware reliability models are a helpful supplementary tool, but require a computer to apply and relatively few individuals possess knowledge of these methods. Even individuals possessing this knowledge may struggle to apply the methods regularly because past algorithms applied to these models require the user to estimate numbers close to the values that best characterize a failure data set. If this is not done with sufficient accuracy, models may fail to obtain a \"curve of best fit\" and predictions may be inaccurate. Optimistic predictions may lead to an inappropriate decision to release software that is not sufficiently reliable, which could result in product failure or more serious consequences.\n\n \n\nTo overcome these limitations, this project developed numerical algorithms from statistics to rapidly and consistently fit software reliability models to failure data and implemented these methods in an open source tool that can be downloaded an used by any individual or organization wishing to perform software reliability assessments as part of their software engineering activities. This tool is already being used by private industry to improve their time to market or field a software product. It is also employed by major defense contractors and Federally Funded Research and Development Centers (FFRDCs) that assess systems critical to national defense and security. The open architecture enables researchers to contribute additional models produced through their research to benefit software engineering projects that utilize the tool.\n\n\t\t\t\t\tLast Modified: 11/29/2018\n\n\t\t\t\t\tSubmitted by: Lance Fiondella"
 }
}