{
 "awd_id": "1453474",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CAREER: Improving Software Quality using Dynamically Inferred Models",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2015-03-01",
 "awd_exp_date": "2022-02-28",
 "tot_intn_awd_amt": 439353.0,
 "awd_amount": 597780.0,
 "awd_min_amd_letter_date": "2015-01-30",
 "awd_max_amd_letter_date": "2019-02-15",
 "awd_abstract_narration": "Software has become an integral part of our society and it is hard to imagine many aspects of our lives, including the economy, healthcare, and communication, functioning without software. However, software is rarely perfect and software defects can have serious consequences, such as security breaches and the compromise of private information. While these high costs of defects are well known, the software industry has been unable to remedy the problem because the inherent complexity of software is so high that even the best, most careful developers still make mistakes. As a result, defects are not only common but new defects are typically reported faster than developers can fix them. This makes the problem of improving software quality one of the most critical challenges facing our society today. It is this challenge that is the central goal of this project. The focus of the project is to develop techniques and tools that help developers understand the complex software behavior and the behavioral implications of software changes. These techniques and tools aim to improve the quality of software by helping developers do their jobs better and make fewer mistakes. Improving software quality in such a way will reduce the negative effects of buggy software, positively affecting the many aspects of society that rely on software.\r\n\r\nOne significant cause of defects and poor software quality is the inconsistency between what developers think their system does, and what the system actually does. This project focuses on reducing this inconsistency by helping developers visualize, explore, and understand the runtime behavior of their systems, and how the behavior changes when the developers change the code. Today, common ways to reduce this inconsistency are to study the source code directly, to observe executions via a runtime debugger, and to instrument key locations in the code and use logging to peek into an implementation's runtime behavior. But these processes are highly manual and labor intensive, and often force the developer to think of a single execution at a time, rather than consider the system behavior as a whole. Instead, this project creates techniques and tools that help developers reduce this inconsistency by inferring precise, concise, predictive behavioral models from system execution logs, aiding developers in comprehension and debugging tasks by comparing, visualizing, and querying such models, and generating tests from such models. The broader impact of this work is the advancement of techniques that improve software quality, which, in turn, reduces the negative economic and societal effects of software defects.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Yuriy",
   "pi_last_name": "Brun",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Yuriy Brun",
   "pi_email_addr": "brun@cs.umass.edu",
   "nsf_id": "000559414",
   "pi_start_date": "2015-01-30",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Massachusetts Amherst",
  "inst_street_address": "101 COMMONWEALTH AVE",
  "inst_street_address_2": "",
  "inst_city_name": "AMHERST",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "4135450698",
  "inst_zip_code": "010039252",
  "inst_country_name": "United States",
  "cong_dist_code": "02",
  "st_cong_dist_code": "MA02",
  "org_lgl_bus_name": "UNIVERSITY OF MASSACHUSETTS",
  "org_prnt_uei_num": "VGJHK59NMPK9",
  "org_uei_num": "VGJHK59NMPK9"
 },
 "perf_inst": {
  "perf_inst_name": "University of Massachusetts Amherst",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "010039242",
  "perf_ctry_code": "US",
  "perf_cong_dist": "02",
  "perf_st_cong_dist": "MA02",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "164000",
   "pgm_ele_name": "Information Technology Researc"
  },
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "1045",
   "pgm_ref_txt": "CAREER-Faculty Erly Career Dev"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  },
  {
   "pgm_ref_code": "CL10",
   "pgm_ref_txt": "CLB-Career Life Balance"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 214602.0
  },
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 134427.0
  },
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 114410.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 134341.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Software plays a critical role in today's society and our everyday lives. As a result, bugs in software reduce our quality of life, negatively impact society, and cost our economy billions of dollars annually. The inherent complexity of today's software systems creates significant challenges for software engineers working to repair bugs and improve software quality. This project led to the development of tools (1)&nbsp;that observe software systems executions and automatically model those systems to help developers understand and debug system behavior, (2)&nbsp;that automatically test software to find bugs and help developers fix them, and (3)&nbsp;that, in some cases, automatically suggest repairs for bugs.</p>\n<p>Intellectual Merit: The project developed modeling techniques that observe software executions and automatically derive predictive models of the observed behavior. The project empirically demonstrated that these models can be used (1)&nbsp;by developers to better understand software behavior and repair buggy behavior, and (2)&nbsp;by tools to evaluate existing test suite quality and to suggest new tests that should be added to the software test suites. Specifically, the project focused on modeling three kinds of systems, sequential (single-thread) systems, parallel and distributed (multi-thread) systems, and resource-constrained systems. For each type of system, the project demonstrated an improvement in developers' understanding of system behavior and debugging ability. These derived models are predictive because they generalize beyond the observed executions to other executions potentially possible within the software. This property allows using the models to evaluate test suites -- identifying system behavior the suites fail to test -- and automatically generating new tests for such behavior. The project empirically demonstrated that these models act as a more effective method for comparing test suite quality than prior methods, and showed fundamental differences between test suite behavior and in-field, deployed software behavior that was not captured by prior comparison methods. Further, the project allowed for modeling of a diverse set of behavioral properties, including temporal properties, fairness properties, and flakiness properties. Each property type, in turn, allowed for improving the understanding and testing of different kinds of software behavior. The projects' results sugest that dynamic behavioral modeling is an effective tool for capturing a broad range of behavioral properties in a diverse set of system domains, and that both manual debugging processes and automated tools can benefit significantly from such modeling.</p>\n<p>Broader Impacts: The project's broader impact includes creating tools for improving software quality, which, in turn, reduces the negative economic and societal effects of software bugs. The project has resulted in advances in industrial software development, and contributed to the career development of a junior PI, a postdoctoral researcher, and multiple PhD, MS, and undergraduate students' educations.</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 04/07/2022<br>\n\t\t\t\t\tModified by: Yuriy&nbsp;Brun</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nSoftware plays a critical role in today's society and our everyday lives. As a result, bugs in software reduce our quality of life, negatively impact society, and cost our economy billions of dollars annually. The inherent complexity of today's software systems creates significant challenges for software engineers working to repair bugs and improve software quality. This project led to the development of tools (1) that observe software systems executions and automatically model those systems to help developers understand and debug system behavior, (2) that automatically test software to find bugs and help developers fix them, and (3) that, in some cases, automatically suggest repairs for bugs.\n\nIntellectual Merit: The project developed modeling techniques that observe software executions and automatically derive predictive models of the observed behavior. The project empirically demonstrated that these models can be used (1) by developers to better understand software behavior and repair buggy behavior, and (2) by tools to evaluate existing test suite quality and to suggest new tests that should be added to the software test suites. Specifically, the project focused on modeling three kinds of systems, sequential (single-thread) systems, parallel and distributed (multi-thread) systems, and resource-constrained systems. For each type of system, the project demonstrated an improvement in developers' understanding of system behavior and debugging ability. These derived models are predictive because they generalize beyond the observed executions to other executions potentially possible within the software. This property allows using the models to evaluate test suites -- identifying system behavior the suites fail to test -- and automatically generating new tests for such behavior. The project empirically demonstrated that these models act as a more effective method for comparing test suite quality than prior methods, and showed fundamental differences between test suite behavior and in-field, deployed software behavior that was not captured by prior comparison methods. Further, the project allowed for modeling of a diverse set of behavioral properties, including temporal properties, fairness properties, and flakiness properties. Each property type, in turn, allowed for improving the understanding and testing of different kinds of software behavior. The projects' results sugest that dynamic behavioral modeling is an effective tool for capturing a broad range of behavioral properties in a diverse set of system domains, and that both manual debugging processes and automated tools can benefit significantly from such modeling.\n\nBroader Impacts: The project's broader impact includes creating tools for improving software quality, which, in turn, reduces the negative economic and societal effects of software bugs. The project has resulted in advances in industrial software development, and contributed to the career development of a junior PI, a postdoctoral researcher, and multiple PhD, MS, and undergraduate students' educations.\n\n \n\n \n\n \n\n\t\t\t\t\tLast Modified: 04/07/2022\n\n\t\t\t\t\tSubmitted by: Yuriy Brun"
 }
}