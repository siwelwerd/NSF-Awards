{
 "awd_id": "1513854",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "TWC: Medium: Micro-Policies: A Framework for Tag-Based Security Monitors",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032920000",
 "po_email": "doliveir@nsf.gov",
 "po_sign_block_name": "Daniela Oliveira",
 "awd_eff_date": "2015-09-01",
 "awd_exp_date": "2021-08-31",
 "tot_intn_awd_amt": 1200000.0,
 "awd_amount": 1200000.0,
 "awd_min_amd_letter_date": "2015-05-11",
 "awd_max_amd_letter_date": "2015-05-11",
 "awd_abstract_narration": "Current cybersecurity practice is inadequate to defend against the security threats faced by society. Unlike physical systems, present-day computers lack supervising safety interlocks to help prevent catastrophic failures. Worse, many exploitable vulnerabilities arise from the violation of well-understood safety and security policies that are not enforced due to perceived high performance costs. This project aims to demonstrate how language design and formal verification can leverage emerging hardware capabilities to engineer practical systems with strong security and safety guarantees.  The ultimate goal is to strengthen the security foundation upon which today's information-based society is built, thereby improving national security by providing capabilities to protect critical infrastructure from misuse and cyber-attack, as well as protecting individual privacy and reducing opportunities for cyber-muggings.\r\n\r\nA rich set of micro-policies - instruction-level security monitoring mechanisms based on fine-grained metadata tags - can be described as instances of a common dynamic monitoring framework, formalized and reasoned about with unified verification tools, and efficiently implemented using programmable metadata-propagation hardware. Specific project contributions include (1) a linguistic framework for defining and combining micro-policies, with a verified compiler and a framework for carrying out machine-checked proofs of key security properties; (2) architectural extensions and microarchitectural optimizations for micro-policy enforcement in hardware with low performance overhead and acceptable resource costs; and (3) applications of the micro-policy language, proof framework, and hardware support to implement, verify, and evaluate a number of concrete micro-policies on realistic application workloads.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Benjamin",
   "pi_last_name": "Pierce",
   "pi_mid_init": "C",
   "pi_sufx_name": "",
   "pi_full_name": "Benjamin C Pierce",
   "pi_email_addr": "bcpierce@cis.upenn.edu",
   "nsf_id": "000452070",
   "pi_start_date": "2015-05-11",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Andre",
   "pi_last_name": "DeHon",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Andre DeHon",
   "pi_email_addr": "andre@seas.upenn.edu",
   "nsf_id": "000355592",
   "pi_start_date": "2015-05-11",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Pennsylvania",
  "inst_street_address": "3451 WALNUT ST STE 440A",
  "inst_street_address_2": "",
  "inst_city_name": "PHILADELPHIA",
  "inst_state_code": "PA",
  "inst_state_name": "Pennsylvania",
  "inst_phone_num": "2158987293",
  "inst_zip_code": "191046205",
  "inst_country_name": "United States",
  "cong_dist_code": "03",
  "st_cong_dist_code": "PA03",
  "org_lgl_bus_name": "TRUSTEES OF THE UNIVERSITY OF PENNSYLVANIA, THE",
  "org_prnt_uei_num": "GM1XX56LEP58",
  "org_uei_num": "GM1XX56LEP58"
 },
 "perf_inst": {
  "perf_inst_name": "Trustees of the University of Pennsylvania",
  "perf_str_addr": "3451 Walnut Street P-221 FB",
  "perf_city_name": "Philadelphia",
  "perf_st_code": "PA",
  "perf_st_name": "Pennsylvania",
  "perf_zip_code": "191046205",
  "perf_ctry_code": "US",
  "perf_cong_dist": "03",
  "perf_st_cong_dist": "PA03",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 1200000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Current cybersecurity practice is inadequate to defend against the security threats faced by society. Unlike physical systems (cars, airplanes, chemical processing plants), present-day computers lack supervising safety interlocks to help prevent catastrophic failures. Worse, many exploitable vulnerabilities arise from the violation of well-understood safety and security policies that are not enforced due to perceived high performance costs.</p>\n<p>A rich set of \"micro-policies\" -- instruction-level security monitoring mechanisms based on fine-grained metadata tags -- can be described as instances of a common dynamic monitoring framework, formalized and reasoned about with unified verification tools, and efficiently implemented using programmable metadata-propagation hardware. Specific project contributions include (i) a linguistic framework for defining and combining micro-policies, with a verified compiler and a framework for carrying out machine-checked proofs of key security properties; (ii) architectural extensions and microarchitectural optimizations for micro-policy enforcement in hardware with low performance overhead and acceptable resource costs; and (iii) applications of the micro-policy language, proof framework, and hardware support to implement, verify, and evaluate a number of concrete micro-policies on realistic application workloads.</p>\n<p>The goal of this project was to demonstrate how language design and formal verification can leverage emerging hardware capabilities to engineer practical systems with strong security and safety guarantees. &nbsp;The ultimate goal was to strengthen the security foundation upon which today?s information-based society is built, thereby improving national security by providing capabilities to protect critical infrastructure from misuse and cyber-attack, as well as protecting individual privacy and reducing opportunities for cyber-muggings.</p>\n<p>The first major thread of work was on developing and evaluating the uSCOPE system for privilege analysis and compartmentatlization, including dynamic tracing for privilege identification, compartment model formulation and refinement, automation to generate privilege minimizing compartments under constraints, and estimation of compartmentalization overhead including comparison of micro-policy enforcement mechansisms to standard TLB and page-table virtual memory enforcement mechanisms. This work demonstrates promising results that suggests micro-policy-supported compartmentalization allows reduced privileges with lower overhead than traditional mechanisms. This work included algorithms to identify the continuum pareto curve of privilege-performance tradeoffs. &nbsp;We also developed a micro-policy model for directly learning application privileges from execution on a PUMP-enhanced architecture. This allows low privilege tracing overhead. We have expanded the compartment generation automation to directly target rule cache working sets and to support automatically generating a micro-policy implementation for an identified compartmentalization, including rules and code tagging. Prefetching support further reduces the overhead of rule misses and fetches.</p>\n<p>The second major thread concerned formalization and automated random testing of some of our most interesting and complex micro-policies. &nbsp;In particular, we showed how to formally characterize three critical security properties (which might be enforced by micro-policies): memory safety, stack safety, and compartmentalization.</p>\n<p>Numerous mechanisms have been proposed to guard against attacks that corrupt the heap memory or call stack of a running program, but a clear and precise definition of memory or stack safety is missing. We developed formal definitions phrased in the technical terminology of language-based security. &nbsp;Stack safety, for example, is specified by a combination of a confidentiality property (callees should not be able to read their caller's stack frames) and an integrity property (callees should not corrupt their caller's stack frames or control state), together with a straightforward well-bracketedness condition on the program's control flow. &nbsp;We studied how these properties are enforced or approximated by existing heap and stack protection mechanisms (including, in particular, the stack-protection micro-policy designed by Roessler and Dehon, which we showed does enforce a form of stack safety). And we demonstrated a random testing framework that is able to find intentionally inserted bugs in Roessler and Dehon's micro-policy. We also collaborated with researchers at INRIA to formalize the concepts of \"compartmentalization\" of software components and \"secure compartmentalizing compilation\" -- that is, compilation techniques that leverage low-level mechanisms such as micropolicies to protect compiled modules from hostile environments.</p>\n<p>Finally, we collaborated exensively with Dover MicroSystems -- a spinout startup from Draper labs -- to commercialize the DOVER tagged processor (https://dovermicrosystems.com), which descends from our original micropolicy work.</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 12/02/2021<br>\n\t\t\t\t\tModified by: Benjamin&nbsp;C&nbsp;Pierce</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nCurrent cybersecurity practice is inadequate to defend against the security threats faced by society. Unlike physical systems (cars, airplanes, chemical processing plants), present-day computers lack supervising safety interlocks to help prevent catastrophic failures. Worse, many exploitable vulnerabilities arise from the violation of well-understood safety and security policies that are not enforced due to perceived high performance costs.\n\nA rich set of \"micro-policies\" -- instruction-level security monitoring mechanisms based on fine-grained metadata tags -- can be described as instances of a common dynamic monitoring framework, formalized and reasoned about with unified verification tools, and efficiently implemented using programmable metadata-propagation hardware. Specific project contributions include (i) a linguistic framework for defining and combining micro-policies, with a verified compiler and a framework for carrying out machine-checked proofs of key security properties; (ii) architectural extensions and microarchitectural optimizations for micro-policy enforcement in hardware with low performance overhead and acceptable resource costs; and (iii) applications of the micro-policy language, proof framework, and hardware support to implement, verify, and evaluate a number of concrete micro-policies on realistic application workloads.\n\nThe goal of this project was to demonstrate how language design and formal verification can leverage emerging hardware capabilities to engineer practical systems with strong security and safety guarantees.  The ultimate goal was to strengthen the security foundation upon which today?s information-based society is built, thereby improving national security by providing capabilities to protect critical infrastructure from misuse and cyber-attack, as well as protecting individual privacy and reducing opportunities for cyber-muggings.\n\nThe first major thread of work was on developing and evaluating the uSCOPE system for privilege analysis and compartmentatlization, including dynamic tracing for privilege identification, compartment model formulation and refinement, automation to generate privilege minimizing compartments under constraints, and estimation of compartmentalization overhead including comparison of micro-policy enforcement mechansisms to standard TLB and page-table virtual memory enforcement mechanisms. This work demonstrates promising results that suggests micro-policy-supported compartmentalization allows reduced privileges with lower overhead than traditional mechanisms. This work included algorithms to identify the continuum pareto curve of privilege-performance tradeoffs.  We also developed a micro-policy model for directly learning application privileges from execution on a PUMP-enhanced architecture. This allows low privilege tracing overhead. We have expanded the compartment generation automation to directly target rule cache working sets and to support automatically generating a micro-policy implementation for an identified compartmentalization, including rules and code tagging. Prefetching support further reduces the overhead of rule misses and fetches.\n\nThe second major thread concerned formalization and automated random testing of some of our most interesting and complex micro-policies.  In particular, we showed how to formally characterize three critical security properties (which might be enforced by micro-policies): memory safety, stack safety, and compartmentalization.\n\nNumerous mechanisms have been proposed to guard against attacks that corrupt the heap memory or call stack of a running program, but a clear and precise definition of memory or stack safety is missing. We developed formal definitions phrased in the technical terminology of language-based security.  Stack safety, for example, is specified by a combination of a confidentiality property (callees should not be able to read their caller's stack frames) and an integrity property (callees should not corrupt their caller's stack frames or control state), together with a straightforward well-bracketedness condition on the program's control flow.  We studied how these properties are enforced or approximated by existing heap and stack protection mechanisms (including, in particular, the stack-protection micro-policy designed by Roessler and Dehon, which we showed does enforce a form of stack safety). And we demonstrated a random testing framework that is able to find intentionally inserted bugs in Roessler and Dehon's micro-policy. We also collaborated with researchers at INRIA to formalize the concepts of \"compartmentalization\" of software components and \"secure compartmentalizing compilation\" -- that is, compilation techniques that leverage low-level mechanisms such as micropolicies to protect compiled modules from hostile environments.\n\nFinally, we collaborated exensively with Dover MicroSystems -- a spinout startup from Draper labs -- to commercialize the DOVER tagged processor (https://dovermicrosystems.com), which descends from our original micropolicy work.\n\n \n\n\t\t\t\t\tLast Modified: 12/02/2021\n\n\t\t\t\t\tSubmitted by: Benjamin C Pierce"
 }
}