{
 "awd_id": "1533767",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "XPS: FULL: CCA: Cymric: A Flexible Processor-Near-Memory System Architecture",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Yuanyuan Yang",
 "awd_eff_date": "2015-09-01",
 "awd_exp_date": "2019-08-31",
 "tot_intn_awd_amt": 750000.0,
 "awd_amount": 750000.0,
 "awd_min_amd_letter_date": "2015-08-12",
 "awd_max_amd_letter_date": "2015-08-12",
 "awd_abstract_narration": "Emerging software applications in data analytics, graph analysis, and machine learning must process increasing volumes of data. Such data-intensive applications stress the communication and storage parts of a computer system more than the computation parts. Yet most of today?s systems are ?compute-centric? in the sense that their designs focus on improving the efficiency of computation. Computing near data or processing-near-memory can significantly reduce data communication between memory and processor providing potential for significant improvement in energy-efficiency of next generation computing systems.  \r\n\r\nThis project investigates and addresses the challenges facing the design of the next generation of memory-centric processors ? specifically processing-near-memory (PNM) architectures.  The project will characterize the energy and time behavior of future applications and use this understanding to assess how to best architect new systems that combine memory and compute in close proximity. Specifically, the activities will address i) programming models, ii) processing-near-memory architectures, and iii) power & thermal managements with the development of cross-cutting data movement, compiler and microarchitectural optimizations. The results of this work can influence the design of future enterprise and high performance computing systems. The major principles, insights, and outcomes of this project will be integrated as modules into mainstream courses in Computer Architecture. The investigators will also continue their participation in Institute outreach programs that have the goal of promoting participation of undergraduate, minority, and female students in engineering research and higher education.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Hyesoon",
   "pi_last_name": "Kim",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Hyesoon Kim",
   "pi_email_addr": "hyesoon@cc.gatech.edu",
   "nsf_id": "000084212",
   "pi_start_date": "2015-08-12",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Sudhakar",
   "pi_last_name": "Yalamanchili",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Sudhakar Yalamanchili",
   "pi_email_addr": "sudha@ece.gatech.edu",
   "nsf_id": "000161439",
   "pi_start_date": "2015-08-12",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Saibal",
   "pi_last_name": "Mukhopadhyay",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Saibal Mukhopadhyay",
   "pi_email_addr": "saibal@ece.gatech.edu",
   "nsf_id": "000083185",
   "pi_start_date": "2015-08-12",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Georgia Tech Research Corporation",
  "inst_street_address": "926 DALNEY ST NW",
  "inst_street_address_2": "",
  "inst_city_name": "ATLANTA",
  "inst_state_code": "GA",
  "inst_state_name": "Georgia",
  "inst_phone_num": "4048944819",
  "inst_zip_code": "303186395",
  "inst_country_name": "United States",
  "cong_dist_code": "05",
  "st_cong_dist_code": "GA05",
  "org_lgl_bus_name": "GEORGIA TECH RESEARCH CORP",
  "org_prnt_uei_num": "EMW9FC8J3HN4",
  "org_uei_num": "EMW9FC8J3HN4"
 },
 "perf_inst": {
  "perf_inst_name": "Georgia Institute of Technology",
  "perf_str_addr": "225 North Avenue",
  "perf_city_name": "Atlanta",
  "perf_st_code": "GA",
  "perf_st_name": "Georgia",
  "perf_zip_code": "303320002",
  "perf_ctry_code": "US",
  "perf_cong_dist": "05",
  "perf_st_cong_dist": "GA05",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "828300",
   "pgm_ele_name": "Exploiting Parallel&Scalabilty"
  }
 ],
 "pgm_ref": null,
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 750000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The energy consumption for computing platforms has been increasing significantly. As we are in the big-data era, energy consumption resulting from data movement is one of the main reasons. Traditional computing platforms move data to the computing units, but this study explores the other option: moving the computation into the data. Understanding the characteristics of the energy and the time behavior for future applications and the best architecture to address the data movement cost are one of the main goals of this program. The form of these architectures is called near-memory computation or processing-in-memory. The recent development of 3D stacked memory enables processing-in-memory. HMC from Micron is one example of an earlier version of such a technology. This research advances programming models and architecture designs for processing-in-memory.</p>\n<p>&nbsp;</p>\n<p>The major intellectual outcomes of this program are several and focus on emerging applications (graphs and machine learning applications). Graphs are popular data structures for representing social networks, biological networks, transport networks, etc. In this program, we developed mechanisms to accelerate graph computation on processing-in-memory. The nature of graph processing demands a high data supply (memory bandwidth) and irregular memory accesses. Such complex memory accesses can be performed directly in the processing-in-memory rather than bringing the data into the computing units. Furthermore, graph data does not have a strong temporal locality, so the traditional memory hierarchy is not suitable for graph computation. By offloading graph processing in the memory, the traditional memory hierarchy would work more efficiently by reducing contention from the graph data. In the second work, we develop a performance and power model to decide when to offload computation into processing in the memory. It first decides which computation is good for offloading to the memory at compile time. It then performs benefit analysis. The model considers memory bandwidth effects, data processing cost, and the locality effects. In the third work, we demonstrate a possible processing-in-memory architecture using an FPGA. We develop an in-housing tool frame to explore different processing-in-memory architecture design options to take advantage of high data supply bandwidth. In the fourth work, we analyze the power and thermal behavior of in-processing memory and 3D stacked memory. This increases the understandability of thermal behavior and bandwidth relationships. Last, we study the effect of running machine learning workloads in the near-memory computation and propose a new architecture. Similar to processing-in-memory, &nbsp;we have also studied processing-near-sensors: moving the computation into the sensor where the data is produced so that machine learning workloads can also get the benefits of saving energy. &nbsp;This study shows the feasibility of achieving very high throughput as well as low energy performance. As an outcome, the program develops new types of near-memory processing for machine learning-based applications: NeuroCube for an acceleration of inference and training of Deep Neural Network (DNN) applications. These contributions represent a cross-cutting effort among algorithms, architecture, and circuit knowledge.</p>\n<p>&nbsp;</p>\n<p>The engineering contributions of this program translate the preceding intellectual contributions into open source software artifacts to benefit the larger research and development community and enable further developments. These include i) a new application benchmark suite for graph processing on near-memory computation, ii) architecture design tool explorations that prototype high-level architecture simulation to low-level implementations.</p>\n<p>This research program advances programming models and architecture design options for in-memory computing in which the computation is moved to the location of the data.</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 11/06/2019<br>\n\t\t\t\t\tModified by: Hyesoon&nbsp;Kim</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThe energy consumption for computing platforms has been increasing significantly. As we are in the big-data era, energy consumption resulting from data movement is one of the main reasons. Traditional computing platforms move data to the computing units, but this study explores the other option: moving the computation into the data. Understanding the characteristics of the energy and the time behavior for future applications and the best architecture to address the data movement cost are one of the main goals of this program. The form of these architectures is called near-memory computation or processing-in-memory. The recent development of 3D stacked memory enables processing-in-memory. HMC from Micron is one example of an earlier version of such a technology. This research advances programming models and architecture designs for processing-in-memory.\n\n \n\nThe major intellectual outcomes of this program are several and focus on emerging applications (graphs and machine learning applications). Graphs are popular data structures for representing social networks, biological networks, transport networks, etc. In this program, we developed mechanisms to accelerate graph computation on processing-in-memory. The nature of graph processing demands a high data supply (memory bandwidth) and irregular memory accesses. Such complex memory accesses can be performed directly in the processing-in-memory rather than bringing the data into the computing units. Furthermore, graph data does not have a strong temporal locality, so the traditional memory hierarchy is not suitable for graph computation. By offloading graph processing in the memory, the traditional memory hierarchy would work more efficiently by reducing contention from the graph data. In the second work, we develop a performance and power model to decide when to offload computation into processing in the memory. It first decides which computation is good for offloading to the memory at compile time. It then performs benefit analysis. The model considers memory bandwidth effects, data processing cost, and the locality effects. In the third work, we demonstrate a possible processing-in-memory architecture using an FPGA. We develop an in-housing tool frame to explore different processing-in-memory architecture design options to take advantage of high data supply bandwidth. In the fourth work, we analyze the power and thermal behavior of in-processing memory and 3D stacked memory. This increases the understandability of thermal behavior and bandwidth relationships. Last, we study the effect of running machine learning workloads in the near-memory computation and propose a new architecture. Similar to processing-in-memory,  we have also studied processing-near-sensors: moving the computation into the sensor where the data is produced so that machine learning workloads can also get the benefits of saving energy.  This study shows the feasibility of achieving very high throughput as well as low energy performance. As an outcome, the program develops new types of near-memory processing for machine learning-based applications: NeuroCube for an acceleration of inference and training of Deep Neural Network (DNN) applications. These contributions represent a cross-cutting effort among algorithms, architecture, and circuit knowledge.\n\n \n\nThe engineering contributions of this program translate the preceding intellectual contributions into open source software artifacts to benefit the larger research and development community and enable further developments. These include i) a new application benchmark suite for graph processing on near-memory computation, ii) architecture design tool explorations that prototype high-level architecture simulation to low-level implementations.\n\nThis research program advances programming models and architecture design options for in-memory computing in which the computation is moved to the location of the data.\n\n \n\n \n\n\t\t\t\t\tLast Modified: 11/06/2019\n\n\t\t\t\t\tSubmitted by: Hyesoon Kim"
 }
}