{
 "awd_id": "1464801",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CAREER: Bridging the Semantic Gap in Virtualization-based Security Solutions via Collaboration between Guest OS and Virtual Machine",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2014-07-01",
 "awd_exp_date": "2019-02-28",
 "tot_intn_awd_amt": 226791.0,
 "awd_amount": 234608.0,
 "awd_min_amd_letter_date": "2014-10-30",
 "awd_max_amd_letter_date": "2016-02-19",
 "awd_abstract_narration": "In the last ten years virtual machines (VMs) have been extensively used for security-related applications, such as intrusion detection systems, malicious software (malware) analyzers and secure logging and replay of system execution. A VM is high-level software designed to emulate a computer's hardware. In the traditional usage model, security solutions are placed in a VM layer, which has complete control of the system resources. The guest operating system (OS) is considered to be easily compromised by malware and runs unaware of virtualization. The cost of this approach is the semantic gap problem, which hinders the development and widespread deployment of virtualization-based security solutions: there is significant difference between the state observed by the guest OS (high level semantic information) and by the VM (low level semantic information). The guest OS works on abstractions such as processes and files, while the VM can only see lower-level abstractions, such as CPU and main memory. To obtain information about the guest OS state these virtualization solutions use a technique called introspection, by which the guest OS state is inspected from the outside (VM layer), usually by trying build a map of the OS layout to an area of memory where these solutions can analyze it. We propose a new way to perform introspection, by having the guest OS, traditionally unaware of virtualization, actively collaborate with a VM layer underneath it by requesting services and communicating data and information as equal peers in different levels of abstraction. Our approach allows for stronger and more fine-grained and flexible security approaches to be developed and it is no less secure than the traditional model, as introspection tools also depend on the OS data and code to be untampered to report correct results.\r\n\r\n\r\nWe will design, implement and make available to the research community this collaborative architecture between a guest OS and a VM layer and employ such architecture to counter various types of kernel-level malware. The goal is to increase the cost for attackers by refining trust/integrity values for subjects and objects at OS/VM layers by leveraging social trust. In this architecture guest OS and a VM actively collaborate requesting services and exchanging data and information through special instructions protected from tampering. This will open up possibilities for malware analysis and defense that are not currently possible (due to the semantic gap problem) including, preventing the actions from privacy-invasion malware like keyloggers, mitigating certain types of DoS attacks in the kernel and return-oriented rootkits, increasing the costs for attackers by leveraging social trust to refine integrity levels and restrict systems resources based on them, just to name a few. This research will also lead to the creation of a cyber security laboratory at Bowdoin, a liberal arts college located in Maine.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Daniela",
   "pi_last_name": "Oliveira",
   "pi_mid_init": "A",
   "pi_sufx_name": "",
   "pi_full_name": "Daniela A Oliveira",
   "pi_email_addr": "daniela@ece.ufl.edu",
   "nsf_id": "000582084",
   "pi_start_date": "2014-10-30",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Florida",
  "inst_street_address": "1523 UNION RD RM 207",
  "inst_street_address_2": "",
  "inst_city_name": "GAINESVILLE",
  "inst_state_code": "FL",
  "inst_state_name": "Florida",
  "inst_phone_num": "3523923516",
  "inst_zip_code": "326111941",
  "inst_country_name": "United States",
  "cong_dist_code": "03",
  "st_cong_dist_code": "FL03",
  "org_lgl_bus_name": "UNIVERSITY OF FLORIDA",
  "org_prnt_uei_num": "",
  "org_uei_num": "NNFQH1JAPEP3"
 },
 "perf_inst": {
  "perf_inst_name": "University of Florida",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "FL",
  "perf_st_name": "Florida",
  "perf_zip_code": "326112002",
  "perf_ctry_code": "US",
  "perf_cong_dist": "03",
  "perf_st_cong_dist": "FL03",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "1045",
   "pgm_ref_txt": "CAREER-Faculty Erly Career Dev"
  },
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "7556",
   "pgm_ref_txt": "CONFERENCE AND WORKSHOPS"
  },
  {
   "pgm_ref_code": "7795",
   "pgm_ref_txt": "TRUSTWORTHY COMPUTING"
  },
  {
   "pgm_ref_code": "9102",
   "pgm_ref_txt": "WOMEN, MINORITY, DISABLED, NEC"
  },
  {
   "pgm_ref_code": "9150",
   "pgm_ref_txt": "EXP PROG TO STIM COMP RES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0114",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001415DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2014,
   "fund_oblg_amt": 83442.0
  },
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 79192.0
  },
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 71974.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-9280b827-7fff-1cba-e6a6-5e00deb54912\"> </span></p>\n<p dir=\"ltr\"><strong>1) Intellectual Merit:</strong><span> This project investigated two research questions (i) in what ways computer security can be improved by having software and hardware collaborate to enforce security policies and (ii) whether the introduction of a level of unpredictability during software execution can improve computer security and software resilience against faults during execution.</span></p>\n<p dir=\"ltr\"><strong>Research Question (i):</strong><span> The current methodology for the design of the software that manages computer systems (called operating system - OS) involves allowing extensions from third parties to be added to the OS, where these extensions have the same privileges in the system as the OS. Such model is convenient for extending the system with new functionalities (e.g., adding a &nbsp;driver to allow the computer to communicate with a printer), but facilitates security compromises and errors because these components can come from untrusted parties. This situation is paradoxical from a security viewpoint: modern systems depend and must co-exist with untrustworthy, but needed extensions. This project proposed a paradigm for secure and effectiveness co-existence of the OS and these extensions based on software-hardware collaboration. The goal of this collaboration is to ensure that these extensions only access/modify the parts of the system that they need to accomplish their tasks. The project developed a hardware-software collaborative architecture for the Linux OS to allow the OS to provide the hardware with information from the software layer that is needed for enforcement of security policies. For example, the OS would provide information about where extensions are stored in memory so as a policy, such as \"</span><span>extensions should not modify internal OS data\"&nbsp;</span><span>can be enforced. The hardware would, then, prohibit write operations in areas other than those specified to be used by the extension. The project developed a proof-of-concept prototype, Ianus, which successfully confined extensions into their own memory space and contained their interactions with sensitive parts of the OS with low performance impact (12% overhead in execution). </span></p>\n<p><strong>Research Question (ii): </strong>Predictability is a first-class design goal for the development of computer systems. It simplifies engineering and usability, such as compatibility among different versions of the system. The downside is the computer system monoculture, where software vulnerabilities become reliably exploitable on all systems of the same type. Because of computers' predictability, software are not well prepared to endure misbehavior at the OS level. The project addressed this issue in three fronts. First, it developed a system, BEAR, &nbsp;to statistically analyze software sensitivity to various types of misbehaviors at the OS level. BEAR can, therefore, help developers discover challenging errors, vulnerabilities, and identify the scenarios during software development and testing that most need validation and can provide insights for software developers in building more resilient software. Next, the project developed CHAMELEON, an OS extension that leverages unpredictable and non-corruptive perturbations of software execution at the OS level to hamper the effects of potentially malicious software (malware). CHAMELEON then was leveraged to develop a two-phase system (PROPEDEUTICA) for malware detection. &nbsp;PROPEDEUTICA works by first classifying software as benign or malicious using traditional (and fast) machine learning models, and, if the classification results are inconclusive, placing the software in a second environment, where it undergoes a more accurate, but also more costly, deep learning classification process. Results showed that PROPEDEUTICA is promising for real-time malware detection with high detection accuracy and acceptable misclassification rates (false positive).</p>\n<p dir=\"ltr\"><strong>2) Broader Impacts:</strong><span> The project resulted in the creation of a Cyber Security laboratory at Bowdoin College, an undergraduates-only, liberal arts college in Maine. The laboratory supported 14 undergraduate students, including four women and four students from hispanic descent. These students had opportunities to attend prestigious conferences in the field of cyber security and some students spent part of their summers in R1 universities (Stony Brook University and the University of New Mexico) to get motivated to pursue graduate school and acquire hands-on experience about how a large research laboratory operates. The project also supported five professors from R1 institutions to give cyber security talks at the college to motivate students to get engaged in cyber security issues in the industry and academia. The project also established a cyber security/programming camp for incoming students from underrepresented minority groups (e.g., first-generation college students). This research was awarded with the Presidential Early Career Award for Scientists and Engineers (PECASE) in 2014.</span></p>\n<p dir=\"ltr\"><span>This project also fostered collaborations with groups of researchers in Brazil (including two PhD students co-supervised by the PI) who were interested in applying the concept of software-hardware collaboration for malware detection.</span></p>\n<p dir=\"ltr\"><span>In sum, this project supported several undergraduate students who later pursued cyber security as a career, including two students who pursued graduate studies. The project also supported one female student to complete her PhD at the University of Florida and produced 16 papers (including five under submission), and a PECASE award.</span></p>\n<div><span><br /></span></div>\n<p>&nbsp;</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 05/29/2019<br>\n\t\t\t\t\tModified by: Daniela&nbsp;A&nbsp;Oliveira</p>\n</div>\n<div class=\"porSideCol\">\n<div class=\"each-gallery\">\n<div class=\"galContent\" id=\"gallery0\">\n<div class=\"photoCount\" id=\"photoCount0\">\n\t\t\t\t\t\t\t\t\tImages (<span id=\"selectedPhoto0\">1</span> of <span class=\"totalNumber\"></span>)\t\t\n\t\t\t\t\t\t\t\t</div>\n<div class=\"galControls\" id=\"controls0\"></div>\n<div class=\"galSlideshow\" id=\"slideshow0\"></div>\n<div class=\"galEmbox\" id=\"embox\">\n<div class=\"image-title\"></div>\n</div>\n</div>\n<div class=\"galNavigation\" id=\"navigation0\">\n<ul class=\"thumbs\" id=\"thumbs0\">\n<li>\n<a href=\"/por/images/Reports/POR/2019/1464801/1464801_10148905_1559143425553_BSE2012--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2019/1464801/1464801_10148905_1559143425553_BSE2012--rgov-800width.jpg\" title=\"Bowdoin Science Experience 2012\"><img src=\"/por/images/Reports/POR/2019/1464801/1464801_10148905_1559143425553_BSE2012--rgov-66x44.jpg\" alt=\"Bowdoin Science Experience 2012\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Incoming freshmen students from under-represented groups participating in a Cyber Security and Programming camp. Bowdoin College, Brunswick, ME. 2012.</div>\n<div class=\"imageCredit\">Daniela Oliveira</div>\n<div class=\"imagePermisssions\">Public Domain</div>\n<div class=\"imageSubmitted\">Daniela&nbsp;A&nbsp;Oliveira</div>\n<div class=\"imageTitle\">Bowdoin Science Experience 2012</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2019/1464801/1464801_10148905_1559143506097_CyberSecurityLab--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2019/1464801/1464801_10148905_1559143506097_CyberSecurityLab--rgov-800width.jpg\" title=\"Bowdoin College Cyber Security Lab\"><img src=\"/por/images/Reports/POR/2019/1464801/1464801_10148905_1559143506097_CyberSecurityLab--rgov-66x44.jpg\" alt=\"Bowdoin College Cyber Security Lab\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Cyber Security Lab for undergraduate students created via this project. Bowdoin College. Brunswick, ME. 2012.</div>\n<div class=\"imageCredit\">Daniela Oliveira</div>\n<div class=\"imagePermisssions\">Public Domain</div>\n<div class=\"imageSubmitted\">Daniela&nbsp;A&nbsp;Oliveira</div>\n<div class=\"imageTitle\">Bowdoin College Cyber Security Lab</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2019/1464801/1464801_10148905_1559143610197_Bear--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2019/1464801/1464801_10148905_1559143610197_Bear--rgov-800width.jpg\" title=\"BEAR architecture\"><img src=\"/por/images/Reports/POR/2019/1464801/1464801_10148905_1559143610197_Bear--rgov-66x44.jpg\" alt=\"BEAR architecture\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Architecture of the BEAR framework for statistical analysis of software sensitivity to operating system misbehavior. Ruimin Sun et al. Bear: A Framework for Understanding Application Sensitivity to OS (Mis)Behavior. IEEE International Symposium on Software Reliability Engineering (ISSRE) 2016.</div>\n<div class=\"imageCredit\">Daniela Oliveira</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Daniela&nbsp;A&nbsp;Oliveira</div>\n<div class=\"imageTitle\">BEAR architecture</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2019/1464801/1464801_10148905_1559144040773_Chameleon--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2019/1464801/1464801_10148905_1559144040773_Chameleon--rgov-800width.jpg\" title=\"CHAMELEON Architecture\"><img src=\"/por/images/Reports/POR/2019/1464801/1464801_10148905_1559144040773_Chameleon--rgov-66x44.jpg\" alt=\"CHAMELEON Architecture\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">When a process running in the uncertain environment invokes a system call in the interference set, the Module checks if the process is running in the uncertain environment (2), and depending on the  corruption protection mechanism, randomly selects an interference strategy to be applied.</div>\n<div class=\"imageCredit\">Daniela Oliveira</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Daniela&nbsp;A&nbsp;Oliveira</div>\n<div class=\"imageTitle\">CHAMELEON Architecture</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2019/1464801/1464801_10148905_1559144393126_os-hw-collaboration--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2019/1464801/1464801_10148905_1559144393126_os-hw-collaboration--rgov-800width.jpg\" title=\"Operating system-hardware collaboration\"><img src=\"/por/images/Reports/POR/2019/1464801/1464801_10148905_1559144393126_os-hw-collaboration--rgov-66x44.jpg\" alt=\"Operating system-hardware collaboration\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">General architecture.Daniela Oliveira, Nicholas Wetzel*, Max Bucci*, Dean Sullivan and Yier Jin. Hardware-Software Collaboration for Secure Coexistence with Kernel Extensions.  ACM Applied Computing Review Journal, Fall 2014 Issue, Volume 14, Number 3.</div>\n<div class=\"imageCredit\">Daniela Oliveira</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Daniela&nbsp;A&nbsp;Oliveira</div>\n<div class=\"imageTitle\">Operating system-hardware collaboration</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2019/1464801/1464801_10148905_1559146734659_Propedeutica--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2019/1464801/1464801_10148905_1559146734659_Propedeutica--rgov-800width.jpg\" title=\"Propedeutica\"><img src=\"/por/images/Reports/POR/2019/1464801/1464801_10148905_1559146734659_Propedeutica--rgov-66x44.jpg\" alt=\"Propedeutica\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">PROPEDEUTICA?s architecture with steps performed for malware detection.</div>\n<div class=\"imageCredit\">Daniela Oliveira</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Daniela&nbsp;A&nbsp;Oliveira</div>\n<div class=\"imageTitle\">Propedeutica</div>\n</div>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>",
  "por_txt_cntn": "\n \n1) Intellectual Merit: This project investigated two research questions (i) in what ways computer security can be improved by having software and hardware collaborate to enforce security policies and (ii) whether the introduction of a level of unpredictability during software execution can improve computer security and software resilience against faults during execution.\nResearch Question (i): The current methodology for the design of the software that manages computer systems (called operating system - OS) involves allowing extensions from third parties to be added to the OS, where these extensions have the same privileges in the system as the OS. Such model is convenient for extending the system with new functionalities (e.g., adding a  driver to allow the computer to communicate with a printer), but facilitates security compromises and errors because these components can come from untrusted parties. This situation is paradoxical from a security viewpoint: modern systems depend and must co-exist with untrustworthy, but needed extensions. This project proposed a paradigm for secure and effectiveness co-existence of the OS and these extensions based on software-hardware collaboration. The goal of this collaboration is to ensure that these extensions only access/modify the parts of the system that they need to accomplish their tasks. The project developed a hardware-software collaborative architecture for the Linux OS to allow the OS to provide the hardware with information from the software layer that is needed for enforcement of security policies. For example, the OS would provide information about where extensions are stored in memory so as a policy, such as \"extensions should not modify internal OS data\" can be enforced. The hardware would, then, prohibit write operations in areas other than those specified to be used by the extension. The project developed a proof-of-concept prototype, Ianus, which successfully confined extensions into their own memory space and contained their interactions with sensitive parts of the OS with low performance impact (12% overhead in execution). \n\nResearch Question (ii): Predictability is a first-class design goal for the development of computer systems. It simplifies engineering and usability, such as compatibility among different versions of the system. The downside is the computer system monoculture, where software vulnerabilities become reliably exploitable on all systems of the same type. Because of computers' predictability, software are not well prepared to endure misbehavior at the OS level. The project addressed this issue in three fronts. First, it developed a system, BEAR,  to statistically analyze software sensitivity to various types of misbehaviors at the OS level. BEAR can, therefore, help developers discover challenging errors, vulnerabilities, and identify the scenarios during software development and testing that most need validation and can provide insights for software developers in building more resilient software. Next, the project developed CHAMELEON, an OS extension that leverages unpredictable and non-corruptive perturbations of software execution at the OS level to hamper the effects of potentially malicious software (malware). CHAMELEON then was leveraged to develop a two-phase system (PROPEDEUTICA) for malware detection.  PROPEDEUTICA works by first classifying software as benign or malicious using traditional (and fast) machine learning models, and, if the classification results are inconclusive, placing the software in a second environment, where it undergoes a more accurate, but also more costly, deep learning classification process. Results showed that PROPEDEUTICA is promising for real-time malware detection with high detection accuracy and acceptable misclassification rates (false positive).\n2) Broader Impacts: The project resulted in the creation of a Cyber Security laboratory at Bowdoin College, an undergraduates-only, liberal arts college in Maine. The laboratory supported 14 undergraduate students, including four women and four students from hispanic descent. These students had opportunities to attend prestigious conferences in the field of cyber security and some students spent part of their summers in R1 universities (Stony Brook University and the University of New Mexico) to get motivated to pursue graduate school and acquire hands-on experience about how a large research laboratory operates. The project also supported five professors from R1 institutions to give cyber security talks at the college to motivate students to get engaged in cyber security issues in the industry and academia. The project also established a cyber security/programming camp for incoming students from underrepresented minority groups (e.g., first-generation college students). This research was awarded with the Presidential Early Career Award for Scientists and Engineers (PECASE) in 2014.\nThis project also fostered collaborations with groups of researchers in Brazil (including two PhD students co-supervised by the PI) who were interested in applying the concept of software-hardware collaboration for malware detection.\nIn sum, this project supported several undergraduate students who later pursued cyber security as a career, including two students who pursued graduate studies. The project also supported one female student to complete her PhD at the University of Florida and produced 16 papers (including five under submission), and a PECASE award.\n\n\n\n \n\n \n\n\t\t\t\t\tLast Modified: 05/29/2019\n\n\t\t\t\t\tSubmitted by: Daniela A Oliveira"
 }
}