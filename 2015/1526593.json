{
 "awd_id": "1526593",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: An Aspect-Oriented Approach to Large-Scale Urban Simulations",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2015-07-01",
 "awd_exp_date": "2018-09-30",
 "tot_intn_awd_amt": 465040.0,
 "awd_amount": 465040.0,
 "awd_min_amd_letter_date": "2015-06-17",
 "awd_max_amd_letter_date": "2015-06-17",
 "awd_abstract_narration": "Population, environmental, and technological changes are reshaping the infrastructure of our urban environments, and will be a major focus of attention in the near future. With the advent of alternative energy and the Internet of Things, there is suddenly a plethora of new technologies that will require major restructuring of cities. In order to establish sound public policies, all these new technologies can greatly benefit from urban simulations, to measure their impact on the city and on the people before the policies are defined. Large-scale urban simulations tend to be too large and complex to fit a single machine's resources and a single group's expertise. As such, distributed and decentralized urban simulations are a desirable technology to develop. Unfortunately, distributed simulations are still rarely used (except in military applications). Developing distributed simulations is much harder than developing non-distributed ones, and requires a much higher level of software engineering expertise, which usually modeling and simulation experts do not have. The difficulties have been well-known by researchers and engineers, and over the years there have been a few efforts to address them. One of the most important efforts was the development of the High Level Architecture (HLA) standard. The adoption of HLA in practice, however, has been very slow. Surveys suggest that domain-specific adaptors and middleware could help bridge the technical gap in software knowledge. The use of appropriate software engineering concepts and theories can greatly reduce the technical complexity of developing such middleware, and make HLA accessible to a much wider audience, including scientists.\r\n\r\nThe main objective of this proposal is to investigate whether the use of Aspect Oriented Programming (AOP) concepts will help overcome the engineering challenges faced by distributed simulation systems. Introduced in 1997 by Kiczales, Lopes et. al, AOP put forward a model of system decomposition that encompasses a base functional decomposition as well as one or more orthogonal ones that cut across the base and each other. There are many similarities between the concept of aspect (as given by AOP) and the general concept of aspect of a city that urban planning researchers routinely use. All these aspects are conceptually distinct, but interact with each other over essentially the same objects of simulation, the city and its coordinate system. There are many unknown variables in applying the AOP paradigm to the simulation field. For instance, if simulators are divided by aspects, there is a high chance that urban entities such as individuals, vehicles, and buildings, will be common to multiple simulators. The HLA standard enforces that an attribute of an object can be owned (i.e. read and write permission) by any simulator, but only by one simulator. Thus multiple aspects of the same object will need to coexist, but as different objects. Consistency and performance become issues in maintaining separate versions of what is essentially the same entity. Determining how to maintain a semantic interoperability between aspects would solve one of the major issues with distributed simulations. If AOP proves to be a good fit for distributed simulations, this work can have a tremendous influence on the accessibility of distributed simulations for a large number of modeling and simulation experts, therefore also having a potential impact on policy making, wherever modeling and simulation is used ? in science, logistics, social behavioral, transportation management, health, and land to mention only some examples.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Cristina",
   "pi_last_name": "Lopes",
   "pi_mid_init": "V",
   "pi_sufx_name": "",
   "pi_full_name": "Cristina V Lopes",
   "pi_email_addr": "lopes@ics.uci.edu",
   "nsf_id": "000103290",
   "pi_start_date": "2015-06-17",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of California-Irvine",
  "inst_street_address": "160 ALDRICH HALL",
  "inst_street_address_2": "",
  "inst_city_name": "IRVINE",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "9498247295",
  "inst_zip_code": "926970001",
  "inst_country_name": "United States",
  "cong_dist_code": "47",
  "st_cong_dist_code": "CA47",
  "org_lgl_bus_name": "UNIVERSITY OF CALIFORNIA IRVINE",
  "org_prnt_uei_num": "MJC5FCYQTPE6",
  "org_uei_num": "MJC5FCYQTPE6"
 },
 "perf_inst": {
  "perf_inst_name": "University of California-Irvine",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "926173067",
  "perf_ctry_code": "US",
  "perf_cong_dist": "47",
  "perf_st_cong_dist": "CA47",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 465040.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>This project investigated the extent to which complex modeling and simulation software systems can be improved with Aspect-Oriented Programming (AOP) concepts. We aimed to find answers for the following research questions: 1) is AOP an appropriate framework for modeling multi-aspect distributed simulations? 2) can AOP be combined with object-based dynamic load-balancing? 3) how should we model and architect each aspect to scale, in terms of both new aspects and participants?</p>\n<p>We approached our research questions by developing a framework&nbsp;based on the concepts of AOP for composing scalable distributed simulations with crosscutting concerns. Additionally, we implemented&nbsp;several applications on top of it, including: a transportation simulation, a distributed crawler, and simulations of social networks. We evaluated the success of this approach through deployment and controlled experiments.</p>\n<p>The Spacetime framework developed in this project provides support for distributed shared objects using techniques inspired by version control systems such as Git.&nbsp;We model state synchronization as solving a version control problem among many independent components.Changes to the shared data are imported by the components upon pull operations, and exported upon push operations; conflicting changes are resolved by a number of possible merge strategies. Two main technical challenges arise from this version control approach to synchronizing live application state: (1) the efficient calculation and communication of state changes, and (2) the explosion of history data. We solve the first problem by managing object state changes at the attribute-level granularity. We solve the second problem by tracking enough execution information of the components, so to be able to purge history that is no longer needed for purposes of synchronization.&nbsp;</p>\n<p>Results from performance experiments show that Spacetime is not just viable but that, in many important cases, it performs better than a comparable baseline consisting of a central MySQL server configuredwith a large cache. Specifically, in cases where only part of the attributes of objects are updated, Spacetime client updates take half of the time of the baseline. All other cases have similar performance characteristics to the baseline. This is important, as partial updates to shared objects are a common occurrence in the applications we target.</p>\n<p>The following applications were developed on top of the Spacetime framework:</p>\n<p>1) Dynamic Ridesharing Simulation. This simulation studies the effects of dynamic user participation in ridesharing urban transportation systems with autonomous vehicles. Understanding the impact of user participation in ridesharing systems is crucial for stakeholders to take appropriate actions toward achieving desired outcomes. We used Spacetime to overcome scalability issues. By conducting simulations on the platform with over three million ride requests extracted from the New York City taxi trip dataset, we performed the first empirical study to investigate how and to what extent user participation influences the efficiency ofdynamic ridesharing systems.</p>\n<p>2) Distributed Crawler.&nbsp;Even though this application is not a simulation, as such, it shares the same conceptual model of simulations: it is a stateful application with large data and distributed components,where each component reads and changes the shared data repeatedly over a period of time.&nbsp;The application consists of a central data store operated by the instructor, and several crawler workers operated by the students that only communicate with the data store.&nbsp;This distributed crawler is an integral part of a project in the Information Retrieval course at UC Irvine, and has, so far, been used by 1300 students since 2017.</p>\n<p>3) Social Network simulations. As social media continues to transform the way people communicate, strategic diffusion has become a powerful tool for stakeholders to influence people's decisions or behaviors for desired objectives. Existing reward mechanisms for strategic diffusion are usually either vulnerable to false-name attacks or not individually rational for participants that have made successful referrals. In this simulation, we introduce a novel multi-winner contests (MWC) mechanism for strategic diffusion in social networks. The MWC mechanism satisfies several desirable properties, including false-name-proofness, individual rationality, budget constraint, monotonicity, and sub-graph constraint. Numerical experiments on four real-world social network datasets demonstrate that stakeholders can significantly boost participants' aggregated efforts with proper design of competitions. Our work sheds light on how to design manipulation-resistant mechanisms with appropriate contests.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 12/03/2018<br>\n\t\t\t\t\tModified by: Cristina&nbsp;V&nbsp;Lopes</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThis project investigated the extent to which complex modeling and simulation software systems can be improved with Aspect-Oriented Programming (AOP) concepts. We aimed to find answers for the following research questions: 1) is AOP an appropriate framework for modeling multi-aspect distributed simulations? 2) can AOP be combined with object-based dynamic load-balancing? 3) how should we model and architect each aspect to scale, in terms of both new aspects and participants?\n\nWe approached our research questions by developing a framework based on the concepts of AOP for composing scalable distributed simulations with crosscutting concerns. Additionally, we implemented several applications on top of it, including: a transportation simulation, a distributed crawler, and simulations of social networks. We evaluated the success of this approach through deployment and controlled experiments.\n\nThe Spacetime framework developed in this project provides support for distributed shared objects using techniques inspired by version control systems such as Git. We model state synchronization as solving a version control problem among many independent components.Changes to the shared data are imported by the components upon pull operations, and exported upon push operations; conflicting changes are resolved by a number of possible merge strategies. Two main technical challenges arise from this version control approach to synchronizing live application state: (1) the efficient calculation and communication of state changes, and (2) the explosion of history data. We solve the first problem by managing object state changes at the attribute-level granularity. We solve the second problem by tracking enough execution information of the components, so to be able to purge history that is no longer needed for purposes of synchronization. \n\nResults from performance experiments show that Spacetime is not just viable but that, in many important cases, it performs better than a comparable baseline consisting of a central MySQL server configuredwith a large cache. Specifically, in cases where only part of the attributes of objects are updated, Spacetime client updates take half of the time of the baseline. All other cases have similar performance characteristics to the baseline. This is important, as partial updates to shared objects are a common occurrence in the applications we target.\n\nThe following applications were developed on top of the Spacetime framework:\n\n1) Dynamic Ridesharing Simulation. This simulation studies the effects of dynamic user participation in ridesharing urban transportation systems with autonomous vehicles. Understanding the impact of user participation in ridesharing systems is crucial for stakeholders to take appropriate actions toward achieving desired outcomes. We used Spacetime to overcome scalability issues. By conducting simulations on the platform with over three million ride requests extracted from the New York City taxi trip dataset, we performed the first empirical study to investigate how and to what extent user participation influences the efficiency ofdynamic ridesharing systems.\n\n2) Distributed Crawler. Even though this application is not a simulation, as such, it shares the same conceptual model of simulations: it is a stateful application with large data and distributed components,where each component reads and changes the shared data repeatedly over a period of time. The application consists of a central data store operated by the instructor, and several crawler workers operated by the students that only communicate with the data store. This distributed crawler is an integral part of a project in the Information Retrieval course at UC Irvine, and has, so far, been used by 1300 students since 2017.\n\n3) Social Network simulations. As social media continues to transform the way people communicate, strategic diffusion has become a powerful tool for stakeholders to influence people's decisions or behaviors for desired objectives. Existing reward mechanisms for strategic diffusion are usually either vulnerable to false-name attacks or not individually rational for participants that have made successful referrals. In this simulation, we introduce a novel multi-winner contests (MWC) mechanism for strategic diffusion in social networks. The MWC mechanism satisfies several desirable properties, including false-name-proofness, individual rationality, budget constraint, monotonicity, and sub-graph constraint. Numerical experiments on four real-world social network datasets demonstrate that stakeholders can significantly boost participants' aggregated efforts with proper design of competitions. Our work sheds light on how to design manipulation-resistant mechanisms with appropriate contests.\n\n\t\t\t\t\tLast Modified: 12/03/2018\n\n\t\t\t\t\tSubmitted by: Cristina V Lopes"
 }
}