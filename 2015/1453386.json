{
 "awd_id": "1453386",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CAREER: UNITY: Bridging the Gap Between Program Analyzers and Deductive Verifiers via Abductive Reasoning",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927991",
 "po_email": "namla@nsf.gov",
 "po_sign_block_name": "Nina Amla",
 "awd_eff_date": "2015-02-01",
 "awd_exp_date": "2020-12-31",
 "tot_intn_awd_amt": 588394.0,
 "awd_amount": 604394.0,
 "awd_min_amd_letter_date": "2015-01-23",
 "awd_max_amd_letter_date": "2018-09-13",
 "awd_abstract_narration": "Due to the ubiquity of software and the increasingly disruptive nature of program bugs, techniques for guaranteeing software reliability are more important now than ever before. This project studies program verification techniques that achieve the right trade-off between expressiveness and automation, thereby allowing the verification of a diverse class of software. The key idea is to use abductive reasoning to automate the correctness proof as much as possible by automatically synthesizing lemmas needed in a compositional proof. Another key idea is to automatically diagnose failed proof attempts and provide constructive feedback to users.\r\n\r\nThe broader impact of the project is to enable mostly-automated, user-friendly verification of interesting properties that are too hard to prove using traditional deductive verifiers but beyond the reach of fully-automated program analyzers. Another important goal is to uncover deeper and more subtle software defects than those that can be identified using testing and program analysis technology today.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Isil",
   "pi_last_name": "Dillig",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Isil Dillig",
   "pi_email_addr": "isil@cs.utexas.edu",
   "nsf_id": "000674237",
   "pi_start_date": "2015-01-23",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Texas at Austin",
  "inst_street_address": "110 INNER CAMPUS DR",
  "inst_street_address_2": "",
  "inst_city_name": "AUSTIN",
  "inst_state_code": "TX",
  "inst_state_name": "Texas",
  "inst_phone_num": "5124716424",
  "inst_zip_code": "787121139",
  "inst_country_name": "United States",
  "cong_dist_code": "25",
  "st_cong_dist_code": "TX25",
  "org_lgl_bus_name": "UNIVERSITY OF TEXAS AT AUSTIN",
  "org_prnt_uei_num": "",
  "org_uei_num": "V6AFQPN18437"
 },
 "perf_inst": {
  "perf_inst_name": "University of Texas at Austin",
  "perf_str_addr": "101 E. 27th Street, Suite 5.300",
  "perf_city_name": "AUSTIN",
  "perf_st_code": "TX",
  "perf_st_name": "Texas",
  "perf_zip_code": "787121532",
  "perf_ctry_code": "US",
  "perf_cong_dist": "25",
  "perf_st_cong_dist": "TX25",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "287800",
   "pgm_ele_name": "Special Projects - CCF"
  },
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "1045",
   "pgm_ref_txt": "CAREER-Faculty Erly Career Dev"
  },
  {
   "pgm_ref_code": "7798",
   "pgm_ref_txt": "SOFTWARE & HARDWARE FOUNDATION"
  },
  {
   "pgm_ref_code": "8206",
   "pgm_ref_txt": "Formal Methods and Verification"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 227705.0
  },
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 253807.0
  },
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 122882.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-473a8bdc-7fff-b5b7-2840-ab1a46f74839\">&nbsp;</span></p>\n<p dir=\"ltr\"><span>The goal of this project was to advance the state-of-the-art in program verification by leveraging a logical reasoning technique known as abductive inference, which aims to find additional premises that are required to explain a desired conclusion. The main goal of this project was to broaden the class of program properties that can be verified, make program verification techniques more user friendly, and scale program verification to larger programs by developing new techniques based on logical abduction.</span></p>\n<p><br /><br /></p>\n<p dir=\"ltr\"><span>From an intellectual merit perspective, this project resulted in the development of several new approaches to program verification. In particular, we developed new abduction-based techniques that improve the scalability and usability of program verifiers, including techniques for compositional verification, semantic program simplification, invariant inference, and applications of these methods in finding (and verifying the absence of) software bugs and vulnerabilities. Our results were published in relevant programming languages and formal methods venues such as Principles of Programming Languages (POPL), Programming Languages Design and Implementation (PLDI), Computer-Aided Verification (CAV), and Object Oriented Programming, Systems, and Languages (OOPSLA). During the course of this project, we also built software prototypes (mostly targeting the Java programming language) and released them on the Github page for our research group.</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>From a broader impact perspective, the project provided research assistantships to several PhD students at UT Austin. These PhD students were trained in formal methods and programming languages and made significant contributions to all aspects of the project. This project also provided valuable summer internship opportunities to several undergraduate students, including some from under-represented groups. Several aspects of the project were incorporated into the educational curriculum (most notably the PI&rsquo;s graduate class at UT Austin) and attracted some students to Programming Languages and Formal Methods research.&nbsp; Topics directly relevant to this project were the basis of several talks at mentoring workshops and outreach events targeting under-represented minorities and undergraduate students.&nbsp;</span></p>\n<p><br /><br /></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 04/04/2021<br>\n\t\t\t\t\tModified by: Isil&nbsp;Dillig</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n \nThe goal of this project was to advance the state-of-the-art in program verification by leveraging a logical reasoning technique known as abductive inference, which aims to find additional premises that are required to explain a desired conclusion. The main goal of this project was to broaden the class of program properties that can be verified, make program verification techniques more user friendly, and scale program verification to larger programs by developing new techniques based on logical abduction.\n\n\n\n\nFrom an intellectual merit perspective, this project resulted in the development of several new approaches to program verification. In particular, we developed new abduction-based techniques that improve the scalability and usability of program verifiers, including techniques for compositional verification, semantic program simplification, invariant inference, and applications of these methods in finding (and verifying the absence of) software bugs and vulnerabilities. Our results were published in relevant programming languages and formal methods venues such as Principles of Programming Languages (POPL), Programming Languages Design and Implementation (PLDI), Computer-Aided Verification (CAV), and Object Oriented Programming, Systems, and Languages (OOPSLA). During the course of this project, we also built software prototypes (mostly targeting the Java programming language) and released them on the Github page for our research group.\n\n \nFrom a broader impact perspective, the project provided research assistantships to several PhD students at UT Austin. These PhD students were trained in formal methods and programming languages and made significant contributions to all aspects of the project. This project also provided valuable summer internship opportunities to several undergraduate students, including some from under-represented groups. Several aspects of the project were incorporated into the educational curriculum (most notably the PI\u2019s graduate class at UT Austin) and attracted some students to Programming Languages and Formal Methods research.  Topics directly relevant to this project were the basis of several talks at mentoring workshops and outreach events targeting under-represented minorities and undergraduate students. \n\n\n\n\n\n \n\n \n\n\t\t\t\t\tLast Modified: 04/04/2021\n\n\t\t\t\t\tSubmitted by: Isil Dillig"
 }
}