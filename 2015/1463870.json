{
 "awd_id": "1463870",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CRII: SaTC: Comprehensive and Automated Techniques for Evaluating Defenses Against Code Reuse Attacks",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Indrajit Ray",
 "awd_eff_date": "2015-07-01",
 "awd_exp_date": "2019-06-30",
 "tot_intn_awd_amt": 173501.0,
 "awd_amount": 189501.0,
 "awd_min_amd_letter_date": "2015-05-07",
 "awd_max_amd_letter_date": "2016-05-10",
 "awd_abstract_narration": "Modern society relies on computers to manage and transmit sensitive data.  These computers run our banks, provide our telecommunications services (such as phone, TV, and Internet), and operate critical systems found in automobiles and power grids.    The software on these systems is vulnerable to automated attacks and, if attacked successfully, can be used to cause the loss of money, property, and life.  While researchers have developed automated, easy-to-use countermeasures to thwart such attacks, it is unclear whether these countermeasures work.  Existing evaluations of such countermeasures are typically expensive because they are done by hand.  They are also often wrong; attackers are able to defeat such countermeasures by increasing the sophistication of their attacks.  If we do not know how well our defenses work, we do not know if we are safe.\r\n\r\nOne common type of automated attack is the code reuse attack.  This research investigates techniques and develops a tool that automatically determines whether a given countermeasure prevents code reuse attacks from working.  This tool uses comprehensive static analysis to automatically determine which program instructions a code reuse attack may employ, whether the malicious computations of an attack can be mapped to those instructions, and whether the defense being analyzed prevents those instructions from being executed in the required order.  The tool is automated and its static analysis is designed to aggressively consider all potential ways in which an attacker can reuse code in an attack.  With this tool, users  can determine whether existing defenses suffice to protect our computers or whether additional defenses are necessary.  The project is developing metrics to enable tool users to compare defenses and state the level of security that a defense provides to a given program.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "John",
   "pi_last_name": "Criswell",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "John Criswell",
   "pi_email_addr": "criswell@cs.rochester.edu",
   "nsf_id": "000677886",
   "pi_start_date": "2015-05-07",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Rochester",
  "inst_street_address": "910 GENESEE ST",
  "inst_street_address_2": "STE 200",
  "inst_city_name": "ROCHESTER",
  "inst_state_code": "NY",
  "inst_state_name": "New York",
  "inst_phone_num": "5852754031",
  "inst_zip_code": "146113847",
  "inst_country_name": "United States",
  "cong_dist_code": "25",
  "st_cong_dist_code": "NY25",
  "org_lgl_bus_name": "UNIVERSITY OF ROCHESTER",
  "org_prnt_uei_num": "",
  "org_uei_num": "F27KDXZMF9Y8"
 },
 "perf_inst": {
  "perf_inst_name": "University of Rochester",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "NY",
  "perf_st_name": "New York",
  "perf_zip_code": "146270140",
  "perf_ctry_code": "US",
  "perf_cong_dist": "25",
  "perf_st_cong_dist": "NY25",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "171400",
   "pgm_ele_name": "Special Projects - CNS"
  },
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "8228",
   "pgm_ref_txt": "CISE Resrch Initiatn Initiatve"
  },
  {
   "pgm_ref_code": "9178",
   "pgm_ref_txt": "UNDERGRADUATE EDUCATION"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 173501.0
  },
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 16000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>In modern computing systems, there are programs that must have additional privileges to perform operations that most programs cannot perform. &nbsp;These programs are typically like a supervisor or administrative staff member in an organization; they must be able to do things that most employees are not authorized to do. &nbsp;They have keys, which we call privileges, which open doors that most programs are unable to open.</p>\n<p>Because of their additional privilege, these programs are frequently attacked by those wishing to break into computing systems. &nbsp;Our research work has developed two tools that make these privileged programs more&nbsp;resilient to attack.</p>\n<p>The first tool, AutoPriv, is a compiler which adds code into programs to make them \"drop\" their privileges when they are done with them. &nbsp;This is akin to a worker dropping a key into a slot in a locked box when the worker is done with the key. &nbsp;Writing programs to drop privileges that they no longer require is difficult for programmers as it requires reasoning about all the different operations a program does and the order in which it does them. &nbsp;Our tools automate this reasoning and makes programs safer by letting them hold on to keys for a shorter period of time.</p>\n<p>The second tool helps us measure how much security has improved when we use the first tool. &nbsp;This new tool, called PrivAnalyzer, helped us measure the security improvement that programs gained. &nbsp;This is important because we have not yet had solid metrics for measuring security improvement previously. &nbsp;Our results were surprising; we found that several programs are written in a way that prevent their security from improving when AutoPriv is used. &nbsp;From this study, we determined that these programs could be written in a better way that more effectively uses the operating system's security features, and we developed guidelines for other programmers to use so that they understand how to write their code to work with AutoPriv more effectively. &nbsp;Using PrivAnalyzer, we were able to measure the security improvement when programs were modified using our guidelines. &nbsp;In one case, the window of vulnerability reduced from about nearly 100% down to 4%.</p>\n<p>With these tools and programming approaches, we can build software that is more secure than the software that we are using today, and we can measure how much more secure they are. &nbsp;This, in turn, will hopefully lead to computers and mobile devices that people can trust will work even when criminals attempt to attack these systems.</p>\n<p>During the course of our work, we trained graduate and undergraduate students in building programs that can analyze and change the behavior of other programs. &nbsp;We call these programs \"analysis tools\" and \"compilers,\" respectively. &nbsp;Writing programs that can understand the behavior of software and can automate changes to software can make writing secure software much easier. &nbsp;We have also trained our graduate students to communicate their ideas clearly and effectively in both written and verbal form so that they can participate in the community of researchers that are working to make computers more secure.</p>\n<p>We have also included some of the material from our research work in our undergraduate and graduate classes at the University of Rochester. &nbsp;When students attend our university, they get an opportunity to learn about the new developments in computer security that this work has developed. &nbsp;Students that eventually go on to develop software professionally can use this information to ensure that the software that they write is more secure.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 12/26/2019<br>\n\t\t\t\t\tModified by: John&nbsp;Criswell</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nIn modern computing systems, there are programs that must have additional privileges to perform operations that most programs cannot perform.  These programs are typically like a supervisor or administrative staff member in an organization; they must be able to do things that most employees are not authorized to do.  They have keys, which we call privileges, which open doors that most programs are unable to open.\n\nBecause of their additional privilege, these programs are frequently attacked by those wishing to break into computing systems.  Our research work has developed two tools that make these privileged programs more resilient to attack.\n\nThe first tool, AutoPriv, is a compiler which adds code into programs to make them \"drop\" their privileges when they are done with them.  This is akin to a worker dropping a key into a slot in a locked box when the worker is done with the key.  Writing programs to drop privileges that they no longer require is difficult for programmers as it requires reasoning about all the different operations a program does and the order in which it does them.  Our tools automate this reasoning and makes programs safer by letting them hold on to keys for a shorter period of time.\n\nThe second tool helps us measure how much security has improved when we use the first tool.  This new tool, called PrivAnalyzer, helped us measure the security improvement that programs gained.  This is important because we have not yet had solid metrics for measuring security improvement previously.  Our results were surprising; we found that several programs are written in a way that prevent their security from improving when AutoPriv is used.  From this study, we determined that these programs could be written in a better way that more effectively uses the operating system's security features, and we developed guidelines for other programmers to use so that they understand how to write their code to work with AutoPriv more effectively.  Using PrivAnalyzer, we were able to measure the security improvement when programs were modified using our guidelines.  In one case, the window of vulnerability reduced from about nearly 100% down to 4%.\n\nWith these tools and programming approaches, we can build software that is more secure than the software that we are using today, and we can measure how much more secure they are.  This, in turn, will hopefully lead to computers and mobile devices that people can trust will work even when criminals attempt to attack these systems.\n\nDuring the course of our work, we trained graduate and undergraduate students in building programs that can analyze and change the behavior of other programs.  We call these programs \"analysis tools\" and \"compilers,\" respectively.  Writing programs that can understand the behavior of software and can automate changes to software can make writing secure software much easier.  We have also trained our graduate students to communicate their ideas clearly and effectively in both written and verbal form so that they can participate in the community of researchers that are working to make computers more secure.\n\nWe have also included some of the material from our research work in our undergraduate and graduate classes at the University of Rochester.  When students attend our university, they get an opportunity to learn about the new developments in computer security that this work has developed.  Students that eventually go on to develop software professionally can use this information to ensure that the software that they write is more secure.\n\n\t\t\t\t\tLast Modified: 12/26/2019\n\n\t\t\t\t\tSubmitted by: John Criswell"
 }
}