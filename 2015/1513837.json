{
 "awd_id": "1513837",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "TWC: TTP Option: Medium: Collaborative: ENCORE - ENhanced program protection through COmpiler-REwriter cooperation",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2015-07-01",
 "awd_exp_date": "2018-06-30",
 "tot_intn_awd_amt": 619267.0,
 "awd_amount": 619267.0,
 "awd_min_amd_letter_date": "2015-06-09",
 "awd_max_amd_letter_date": "2015-06-09",
 "awd_abstract_narration": "Critical errors in widely used software are discovered almost every day. They currently leave users of that software vulnerable to cyber attacks until the manufacturer eventually supplies a fix - sometimes this takes unacceptably long. There currently is no way that users of commercial off-the-shelf software that is distributed as binary code can go and fix such vulnerabilities themselves, ex post facto, because software is not easily changeable once it has been compiled to binary form. This research project investigates techniques for enabling consumer-side rewriting of binary software. The approach is appealing because it can be deployed quickly in response to new threats, without waiting for code-producers, and can enforce consumer-specific security policies unsupported or unforeseen by the software?s developers. If successful, this research will lead to significant improvements in software security.\r\n\r\nConsumer-side binary rewriting is currently not feasible because binary files don't contain enough information to do it safely. On the other hand, code producers don't want to reveal too many implementation details of their code due to intellectual property and software piracy concerns. The key goal of this project is to enable code producers to supplement their binary code with a small amount of metadata that can be used, consumer-side, to perform sophisticated binary rewriting, but without disclosing much extra information about the internal working of the code and without making reverse-engineering much easier than before. The project will produce a prototype implementation consisting of a producer-side metadata derivation engine, and a consumer-side binary rewriting engine using this metadata to safely perform binary code manipulation.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Michael",
   "pi_last_name": "Franz",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Michael Franz",
   "pi_email_addr": "franz@uci.edu",
   "nsf_id": "000162759",
   "pi_start_date": "2015-06-09",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of California-Irvine",
  "inst_street_address": "160 ALDRICH HALL",
  "inst_street_address_2": "",
  "inst_city_name": "IRVINE",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "9498247295",
  "inst_zip_code": "926970001",
  "inst_country_name": "United States",
  "cong_dist_code": "47",
  "st_cong_dist_code": "CA47",
  "org_lgl_bus_name": "UNIVERSITY OF CALIFORNIA IRVINE",
  "org_prnt_uei_num": "MJC5FCYQTPE6",
  "org_uei_num": "MJC5FCYQTPE6"
 },
 "perf_inst": {
  "perf_inst_name": "University of California-Irvine",
  "perf_str_addr": "Computer Science I rm 444",
  "perf_city_name": "Irvine",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "926973425",
  "perf_ctry_code": "US",
  "perf_cong_dist": "47",
  "perf_st_cong_dist": "CA47",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 619267.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span>This project created automated techniques and tools to make software more robust against cyber-attacks. In particular, we focused on specific features in programming languages that provide a lot of programmer flexibility, but that can also be abused by attackers. Our solution is not entirely without cost, in that it involves a small amount of additional checking at run-time, but we were able to reduce the resulting overhead to a small percentage amount in practice.</span>&nbsp;</p>\n<p><span>Specifically, we focused on the longstanding problem of variadic functions in the C and C++ programming languages, and on problems associated with object-oriented dispatch in the commercially important Objective-C programming language, where we first discovered an entirely new vulnerability and subsequently found a technical solution that prevents it from being exploited in the future.</span></p>\n<p>In both of the approaches of making variadic functions safe and securing Objective-C, our solution is based on generating a small amount of metadata during compilation and then using that additional information during runtime to properly enforce language semantics that previously left loopholes for an attacker.&nbsp;</p>\n<p><span>Variadic functions accept a variable number of arguments (e.g.,&nbsp;</span><span>printf</span><span>). While variadic functions are flexible, they are inherently not type-safe. In fact, the semantics and parameters of variadic functions are defined implicitly by their implementation. It is left to the programmer to ensure that the caller and callee follow this implicit specification. An adversary can take advantage of a mismatch between the argument types used by the caller of a variadic function and the types expected by the callee to violate the language semantics and to tamper with memory. Format string attacks are the most popular example of such a mismatch.</span></p>\n<p><span>Objective-C is widely used in real-world commercial software. We discovered a new </span><span>offensive technique that reuses entire Objective-C methods by carefully arranging the metadata used to dispatch messages in the Objective-C runtime. The dynamic nature of Objective-C coupled with whole-function reuse renders existing integrity and randomization-based defenses ineffective against such exploits. We then developed a new defensive technique that prevents adversaries from manipulating and corrupting metadata used by the Objective-C runtime. Specifically, we were able to retrofit the Objective-C runtime with integrity checks in the lookup processes that handle Objective-C message dispatch. Our hardened runtime is fully compatible with the runtime shipped with OS X and can protect complex, real-world applications such as iTunes.&nbsp;</span></p>\n<p>In both of these cases, our solution is fully automatic and doesn't require any additional work by the programmer. We are making the source code freely available. If software manufacturers were to adopt our techniques, this would permanently eradicate two whole classes of cyber attacks. Hence, the impact of our work points to a safer cyberspace for everyone.</p>\n<p>Our project also provided substantial research training to several Ph.D. students, one of which completed his degree, and to a Post Doctoral Researcher who went on to an Assistant Professor position.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 10/01/2018<br>\n\t\t\t\t\tModified by: Michael&nbsp;Franz</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThis project created automated techniques and tools to make software more robust against cyber-attacks. In particular, we focused on specific features in programming languages that provide a lot of programmer flexibility, but that can also be abused by attackers. Our solution is not entirely without cost, in that it involves a small amount of additional checking at run-time, but we were able to reduce the resulting overhead to a small percentage amount in practice. \n\nSpecifically, we focused on the longstanding problem of variadic functions in the C and C++ programming languages, and on problems associated with object-oriented dispatch in the commercially important Objective-C programming language, where we first discovered an entirely new vulnerability and subsequently found a technical solution that prevents it from being exploited in the future.\n\nIn both of the approaches of making variadic functions safe and securing Objective-C, our solution is based on generating a small amount of metadata during compilation and then using that additional information during runtime to properly enforce language semantics that previously left loopholes for an attacker. \n\nVariadic functions accept a variable number of arguments (e.g., printf). While variadic functions are flexible, they are inherently not type-safe. In fact, the semantics and parameters of variadic functions are defined implicitly by their implementation. It is left to the programmer to ensure that the caller and callee follow this implicit specification. An adversary can take advantage of a mismatch between the argument types used by the caller of a variadic function and the types expected by the callee to violate the language semantics and to tamper with memory. Format string attacks are the most popular example of such a mismatch.\n\nObjective-C is widely used in real-world commercial software. We discovered a new offensive technique that reuses entire Objective-C methods by carefully arranging the metadata used to dispatch messages in the Objective-C runtime. The dynamic nature of Objective-C coupled with whole-function reuse renders existing integrity and randomization-based defenses ineffective against such exploits. We then developed a new defensive technique that prevents adversaries from manipulating and corrupting metadata used by the Objective-C runtime. Specifically, we were able to retrofit the Objective-C runtime with integrity checks in the lookup processes that handle Objective-C message dispatch. Our hardened runtime is fully compatible with the runtime shipped with OS X and can protect complex, real-world applications such as iTunes. \n\nIn both of these cases, our solution is fully automatic and doesn't require any additional work by the programmer. We are making the source code freely available. If software manufacturers were to adopt our techniques, this would permanently eradicate two whole classes of cyber attacks. Hence, the impact of our work points to a safer cyberspace for everyone.\n\nOur project also provided substantial research training to several Ph.D. students, one of which completed his degree, and to a Post Doctoral Researcher who went on to an Assistant Professor position.\n\n\t\t\t\t\tLast Modified: 10/01/2018\n\n\t\t\t\t\tSubmitted by: Michael Franz"
 }
}