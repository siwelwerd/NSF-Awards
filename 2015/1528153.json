{
 "awd_id": "1528153",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Model-Based Bit-Precise Reasoning",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927991",
 "po_email": "namla@nsf.gov",
 "po_sign_block_name": "Nina Amla",
 "awd_eff_date": "2015-07-01",
 "awd_exp_date": "2018-06-30",
 "tot_intn_awd_amt": 499136.0,
 "awd_amount": 499136.0,
 "awd_min_amd_letter_date": "2015-06-29",
 "awd_max_amd_letter_date": "2015-06-29",
 "awd_abstract_narration": "Formal methods are becoming more widely used to ensure correctness, safety, and security of the hardware and software systems we rely on in our daily lives. Many modern verification tools depend on reasoning engines that can automatically and effectively reason about system properties at the level of machine arithmetic. These reasoning engines, called satisfiability modulo theories (SMT) solvers, can prove that the property is always true, or provide a counter-example if this is not the case. Most SMT solvers do not reason directly at the word-level but, instead, compile the problem into its bit-level Boolean representation (bit-blasting) and then delegate it to a satisfiability (SAT) solver. The scalability of this approach is limited and, moreover, the compilation to SAT eliminates the high-level structure of the initial problem, which makes obtaining concise and useful reasoning artifacts very difficult. These artifacts are crucial for scalability of modern verification methods, and the lack of support for obtaining them hinders progress in bit-precise verification. \r\n\r\nBased on recent advances in model-based reasoning this project develops novel decision procedures for the theory of bit-vectors that are effective in practice, take advantage of word-level reasoning, and provide native word-level support for interpolation and generalization. The new procedures are orthogonal to existing techniques, and explores these key novel ideas: (1) model-based reasoning that does not rely on bit-blasting; (2) support for interpolation that does not rely on proof generation; and (3) support for generalization that does not rely on quantifier elimination.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Dejan",
   "pi_last_name": "Jovanovic",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Dejan Jovanovic",
   "pi_email_addr": "dejan@csl.sri.com",
   "nsf_id": "000657966",
   "pi_start_date": "2015-06-29",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "SRI International",
  "inst_street_address": "333 RAVENSWOOD AVE",
  "inst_street_address_2": "",
  "inst_city_name": "MENLO PARK",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "6097342285",
  "inst_zip_code": "940253493",
  "inst_country_name": "United States",
  "cong_dist_code": "16",
  "st_cong_dist_code": "CA16",
  "org_lgl_bus_name": "SRI INTERNATIONAL",
  "org_prnt_uei_num": "SRG2J1WS9X63",
  "org_uei_num": "SRG2J1WS9X63"
 },
 "perf_inst": {
  "perf_inst_name": "SRI International",
  "perf_str_addr": "333 Ravenswood Ave.",
  "perf_city_name": "Menlo Park",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "940253493",
  "perf_ctry_code": "US",
  "perf_cong_dist": "16",
  "perf_st_cong_dist": "CA16",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "8206",
   "pgm_ref_txt": "Formal Methods and Verification"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 499136.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Formal verification is an approach for ensuring correctness, safety, and security of the hardware and software systems we rely on in our daily lives. In practice, verification tools can automatically analyze a software or hardware system, and automatically prove that is behaves according to its specification. &nbsp;In order to achieve automation, while maintaining full precision, verification tools rely specialized reasoning engines to reason about system properties at the level of machine instructions and bit-level arithmetic. These reasoning engines, called satisfiability modulo theories (SMT) solvers, can prove that a particular system property is always true, or provide a counter-example if this is not the case. This project has developed theoretical and practical advancements in bit-precise reasoning by developing novel reasoning techniques that are used within SMT solvers and the corresponding verification tools.</p>\n<p>A typical verification tool, such as a model checker, uses a system-level verification procedure to decompose a statement about the overall system into a sequence of smaller statements that can be discharged by an SMT solver. The SMT solver answers the query by providing either a counter-example refuting the statement, or a by providing a certificate of correctness in the form of an interpolant. In this project we developed novel techniques in all parts of the verification process by (1) developing a new model-checking procedure, (2) developing model-based decision procedures for solving bit-precise problems in SMT solvers, and (3) developing a new technique for producing interpolants.</p>\n<p>The main contributions of the project in these areas is as follows.</p>\n<ol>\n<li>Model Checking</li>\n</ol>\n<p>We developed support for bit-precise reasoning and modelling into SRI&rsquo;s Sally model checker. Sally was initially developed for infinite-state systems and can now process finite-state systems represented in common input formats for finite-state systems.</p>\n<p>We developed an extension of the IC3 model-checking algorithm in Sally that integrates k-induction (PDKIND). The new algorithm was designed to be modular and with clear interfaces for interpolation and generalization, and has shown to be superior to the standard inductive IC3 algorithm.</p>\n<ol>\n<li>Bit-vector decision procedures</li>\n</ol>\n<p>We developed and implemented a novel MCSAT framework within the Yices2 SMT solver to support model-based decision procedures for solving bit-vector problems. The newly developed decision procedures for bit-vectors use BDDs as the core for reasoning about unit constraints and can have separate MCSAT modules for high level reasoning and conflict explanation in different sub-theories. In addition, we extended the MCSAT calculus to a more powerful proof system based on model-driven superposition with many benefits: more powerful propagation capabilities, full support for combination of many theories, and easier cross-integration with techniques developed for the standard DPPL(T) approach. These new developments have proven very effective with the new method significantly outperforming existing bit-blasting SMT solvers on non-linear problems. The developed solver has been extended to support incremental solving and has been integrated into the Sally model checker.</p>\n<ol>\n<li>Interpolation</li>\n</ol>\n<p>We developed a new interpolation technique that takes advantage of the model-based SMT reasoning to provide interpolants. The new technique is effective in practice and is the first interpolation method that has bi-directional integration with the model-checking process and provides convergence guarantees in the setting of the model-checking algorithm.</p>\n<p>&nbsp;</p>\n<p>The techniques developed in the project have been implemented in the Yices2 SMT solver, and integrated into the Sally model checker, with both tools open source (GPL) and and freely available.&nbsp;</p>\n<p>&nbsp;</p>\n<p>Besides the above-mentioned results, the project has supported the training of several graduate students though summer internships, and the PI has given lectures on SMT solving at the international summer schools devoted to SMT solving.</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 09/28/2018<br>\n\t\t\t\t\tModified by: Dejan&nbsp;Jovanovic</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nFormal verification is an approach for ensuring correctness, safety, and security of the hardware and software systems we rely on in our daily lives. In practice, verification tools can automatically analyze a software or hardware system, and automatically prove that is behaves according to its specification.  In order to achieve automation, while maintaining full precision, verification tools rely specialized reasoning engines to reason about system properties at the level of machine instructions and bit-level arithmetic. These reasoning engines, called satisfiability modulo theories (SMT) solvers, can prove that a particular system property is always true, or provide a counter-example if this is not the case. This project has developed theoretical and practical advancements in bit-precise reasoning by developing novel reasoning techniques that are used within SMT solvers and the corresponding verification tools.\n\nA typical verification tool, such as a model checker, uses a system-level verification procedure to decompose a statement about the overall system into a sequence of smaller statements that can be discharged by an SMT solver. The SMT solver answers the query by providing either a counter-example refuting the statement, or a by providing a certificate of correctness in the form of an interpolant. In this project we developed novel techniques in all parts of the verification process by (1) developing a new model-checking procedure, (2) developing model-based decision procedures for solving bit-precise problems in SMT solvers, and (3) developing a new technique for producing interpolants.\n\nThe main contributions of the project in these areas is as follows.\n\nModel Checking\n\n\nWe developed support for bit-precise reasoning and modelling into SRI?s Sally model checker. Sally was initially developed for infinite-state systems and can now process finite-state systems represented in common input formats for finite-state systems.\n\nWe developed an extension of the IC3 model-checking algorithm in Sally that integrates k-induction (PDKIND). The new algorithm was designed to be modular and with clear interfaces for interpolation and generalization, and has shown to be superior to the standard inductive IC3 algorithm.\n\nBit-vector decision procedures\n\n\nWe developed and implemented a novel MCSAT framework within the Yices2 SMT solver to support model-based decision procedures for solving bit-vector problems. The newly developed decision procedures for bit-vectors use BDDs as the core for reasoning about unit constraints and can have separate MCSAT modules for high level reasoning and conflict explanation in different sub-theories. In addition, we extended the MCSAT calculus to a more powerful proof system based on model-driven superposition with many benefits: more powerful propagation capabilities, full support for combination of many theories, and easier cross-integration with techniques developed for the standard DPPL(T) approach. These new developments have proven very effective with the new method significantly outperforming existing bit-blasting SMT solvers on non-linear problems. The developed solver has been extended to support incremental solving and has been integrated into the Sally model checker.\n\nInterpolation\n\n\nWe developed a new interpolation technique that takes advantage of the model-based SMT reasoning to provide interpolants. The new technique is effective in practice and is the first interpolation method that has bi-directional integration with the model-checking process and provides convergence guarantees in the setting of the model-checking algorithm.\n\n \n\nThe techniques developed in the project have been implemented in the Yices2 SMT solver, and integrated into the Sally model checker, with both tools open source (GPL) and and freely available. \n\n \n\nBesides the above-mentioned results, the project has supported the training of several graduate students though summer internships, and the PI has given lectures on SMT solving at the international summer schools devoted to SMT solving.\n\n \n\n \n\n\t\t\t\t\tLast Modified: 09/28/2018\n\n\t\t\t\t\tSubmitted by: Dejan Jovanovic"
 }
}