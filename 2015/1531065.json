{
 "awd_id": "1531065",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "US Ignite: Collaborative Research: Track 1: Industrial Cloud Robotics across Software Defined Networks",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Bruce Kramer",
 "awd_eff_date": "2015-09-01",
 "awd_exp_date": "2019-08-31",
 "tot_intn_awd_amt": 424261.0,
 "awd_amount": 424261.0,
 "awd_min_amd_letter_date": "2015-08-24",
 "awd_max_amd_letter_date": "2015-08-24",
 "awd_abstract_narration": "Currently, industrial robots are cost-effective for repetitive and high-volume tasks such as welding and painting, but not for lower-volume, mixed-part production.  The need for robotic part handling for unstructured industrial applications is diverse. In manufactured-goods distribution centers, where multiple bins are presented to an operator, a human is required to handle a range of parts that must be boxed and shipped. In the reclamation and recycling industry, humans sort waste streams of mixed products on conveyor belts. Assembly and kitting operations in manufacturing are termed robotic opportunities but they require a solution for handling many part types in the same work-cell. This project will research and integrate technologies to enable the use of industrial robots for low-volume mixed-part production tasks. The proposed solution will include 3D image sensors and high-speed flexible networking, cloud computing, and industrial robots. The inclusion of cutting-edge new software such as the Robot-Operating System Industrial (ROS-I) and Cloud Computing platforms offer excellent educational opportunities for both undergraduate and graduate students. The software developed in this project will be widely distributed to enable further innovations by other teams.\r\n\r\nThe project objective is to develop cloud robotics applications that leverage high-performance computing and high-speed software-defined networks (SDN). Specifically, the target applications combine big-data analytics of sensor data (of the type collected from factory floors) with the control of industrial robots for low-volume, mixed-part production tasks. Cloud computers located at a remote facility relative to the factory floor on which industrial robots operate can be used for compute-intensive applications such as object identification from 3D sensor data, and grasp planning for the robots to perform object manipulation.  The project methods will consist of (i) integrating ROS-I components and developing new software as required to transmit the 3D sensor data to remote computers, running the object identification and grasp planning applications, and returning robot instructions to the original site, (ii) running this software on geographically distributed compute clouds, (iii) collecting measurements and enhancing the software to meet real-time delay requirements. The technical challenge lies in meeting these stringent real-time requirements. For example, high-speed networks with the flexibility to connect arbitrary factory floors and datacenters are needed to transfer the 3D sensor data quickly to the remote cloud computers and to deliver the computed robot instructions(hence, SDN).",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Malathi",
   "pi_last_name": "Veeraraghavan",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Malathi Veeraraghavan",
   "pi_email_addr": "mv5g@virginia.edu",
   "nsf_id": "000254309",
   "pi_start_date": "2015-08-24",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Shaun",
   "pi_last_name": "Edwards",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Shaun Edwards",
   "pi_email_addr": "shaun.edwards@swri.org",
   "nsf_id": "000690767",
   "pi_start_date": "2015-08-24",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Virginia Main Campus",
  "inst_street_address": "1001 EMMET ST N",
  "inst_street_address_2": "",
  "inst_city_name": "CHARLOTTESVILLE",
  "inst_state_code": "VA",
  "inst_state_name": "Virginia",
  "inst_phone_num": "4349244270",
  "inst_zip_code": "229034833",
  "inst_country_name": "United States",
  "cong_dist_code": "05",
  "st_cong_dist_code": "VA05",
  "org_lgl_bus_name": "RECTOR & VISITORS OF THE UNIVERSITY OF VIRGINIA",
  "org_prnt_uei_num": "",
  "org_uei_num": "JJG6HU8PA4S5"
 },
 "perf_inst": {
  "perf_inst_name": "University of Virginia",
  "perf_str_addr": "POB 400743, Thornton Hall C222",
  "perf_city_name": "CHARLOTTESVILLE",
  "perf_st_code": "VA",
  "perf_st_name": "Virginia",
  "perf_zip_code": "229044743",
  "perf_ctry_code": "US",
  "perf_cong_dist": "05",
  "perf_st_cong_dist": "VA05",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "289000",
   "pgm_ele_name": "CISE Research Resources"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "015Z",
   "pgm_ref_txt": "US Ignite"
  },
  {
   "pgm_ref_code": "082E",
   "pgm_ref_txt": "MFG MACHINES & METROLOGY"
  },
  {
   "pgm_ref_code": "6840",
   "pgm_ref_txt": "ROBOTICS"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 424261.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p class=\"UVA-body\">A visitor to a typical manufacturing plant is likely to see robots used for high-volume welding or painting of a low-mix (few types) of products. This is because it is feasible for a manufacturer to pre-program robots for a highly repetitive operation. But, visitors to a typical assembly plant (automotive or aerospace) where a very large variety of parts are handled, or to a small or medium sized manufacturer that produces high-mix low-volume goods, are not very likely to see robots. This is because robots do not currently have the capability to recognize a wide variety of parts and plan how to grasp and manipulate the parts.</p>\n<p class=\"UVA-body\">This project developed a high-mix low-volume industrial cloud robotics application called Gilbreth that leveraged cloud computing resources. The goal of this application was to enable a robot arm to pick and sort random objects arriving on a conveyor belt.</p>\n<p class=\"UVA-body\">Different types of objects (industrial parts such as gears and piston rods) arrive at random, in arbitrary position and orientation (referred to as &ldquo;pose&rdquo;) on a conveyor belt. A UR10 robot arm is mounted on a rail that is setup in parallel with the conveyor belt. A Kinect sensor keeps taking 3D pictures of objects arriving on the belt, while a break beam sensor is triggered every time an object crosses the beam (enters the workspace of the robot arm). While the belt moves the object from the location of the break beam sensor to the position where the UR10 robot arm waits to pick up the object, the sensor data is used by the object recognition software to identify the object type and the motion planning algorithm to compute trajectories for all 7 joints of the robot arm. These trajectories were used to move the arm and its vacuum gripper between various poses, such as pick pose (to pick up the object), place pose (to drop the object in the appropriate bin) and home pose (where the robot arm waits for the next object).</p>\n<p class=\"UVA-body\">The two challenging operations in this application are object recognition and motion planning. A machine-learning based 3D object recognition algorithm proved to provide the best performance, offering a ten-fold improvement in performance over a simpler algorithm in which one-to-one correspondences are checked between stored model information and captured information from a newly arriving object. However, the machine-learning method requires significant training (e.g., 3 hours with just 13 object types). The availability of cloud computing resources enables the use of this machine-learning approach to 3D object recognition.</p>\n<p class=\"UVA-body\">For motion planning, we used the MoveIt! ROS package. ROS stands for Robot Operating System. ROS and ROS-I (ROS-Industrial) are flexible frameworks that have been developed by large numbers of robotics programmers who create a varied set of open-source software packages. The availability of these packages enabled us to design and implement such a complex application with just 4 developers within 2 years. We then used an open-source robotics simulation environment called Gazebo to evaluate Gilbreth. This evaluation study led to further improvements. For example, while most trajectory computations for the robot arm joints were completed within 0.5 seconds, sometimes these computations took a long time to complete. When the computation was long, invariably, the resulting trajectory was flawed, e.g., the robot arm did not move to the target pose directly, but instead wandered, and even rotated for a while, before reaching the desired pose. By simply limiting the trajectory computation time, we found motion plans that resulted in fewer robot execution failures and smaller coefficient of variance (e.g., 8.5% instead of 20.8% for the piston rod) in robot execution times.</p>\n<p class=\"UVA-body\">Our first conclusion is that the variety of available ROS and ROS-I software packages allowed us to assemble and evaluate a complex application within just 1.5 years with four developers. Second, machine learning algorithms for 3D object recognition offer impressive speedups when compared to traditional methods; however, a computational cost is incurred for model training. Here, cloud robotics offers an answer for both the computing and storage required in the training phase. Third, our evaluation showed that motion planning and grasping remain complex tasks, and current ROS/ROS-I packages could be improved to reduce failure rates.</p>\n<p class=\"UVA-body\">The Gilbreth software package is available on this Website: &nbsp;<a href=\"https://github.com/swri-robotics/gilbreth/\">https://github.com/swri-robotics/gilbreth/</a></p>\n<p class=\"UVA-body\">In Year 1, another application, called Godel, for automating the task of metal surface blending using an industrial robot ABB IRB 2400 was implemented and evaluated. Blending is the operation of smoothing metal surfaces down to an even finish. This application used a similar combination of machine vision for object identification and motion planning.</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 11/30/2019<br>\n\t\t\t\t\tModified by: Malathi&nbsp;Veeraraghavan</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "A visitor to a typical manufacturing plant is likely to see robots used for high-volume welding or painting of a low-mix (few types) of products. This is because it is feasible for a manufacturer to pre-program robots for a highly repetitive operation. But, visitors to a typical assembly plant (automotive or aerospace) where a very large variety of parts are handled, or to a small or medium sized manufacturer that produces high-mix low-volume goods, are not very likely to see robots. This is because robots do not currently have the capability to recognize a wide variety of parts and plan how to grasp and manipulate the parts.\nThis project developed a high-mix low-volume industrial cloud robotics application called Gilbreth that leveraged cloud computing resources. The goal of this application was to enable a robot arm to pick and sort random objects arriving on a conveyor belt.\nDifferent types of objects (industrial parts such as gears and piston rods) arrive at random, in arbitrary position and orientation (referred to as \"pose\") on a conveyor belt. A UR10 robot arm is mounted on a rail that is setup in parallel with the conveyor belt. A Kinect sensor keeps taking 3D pictures of objects arriving on the belt, while a break beam sensor is triggered every time an object crosses the beam (enters the workspace of the robot arm). While the belt moves the object from the location of the break beam sensor to the position where the UR10 robot arm waits to pick up the object, the sensor data is used by the object recognition software to identify the object type and the motion planning algorithm to compute trajectories for all 7 joints of the robot arm. These trajectories were used to move the arm and its vacuum gripper between various poses, such as pick pose (to pick up the object), place pose (to drop the object in the appropriate bin) and home pose (where the robot arm waits for the next object).\nThe two challenging operations in this application are object recognition and motion planning. A machine-learning based 3D object recognition algorithm proved to provide the best performance, offering a ten-fold improvement in performance over a simpler algorithm in which one-to-one correspondences are checked between stored model information and captured information from a newly arriving object. However, the machine-learning method requires significant training (e.g., 3 hours with just 13 object types). The availability of cloud computing resources enables the use of this machine-learning approach to 3D object recognition.\nFor motion planning, we used the MoveIt! ROS package. ROS stands for Robot Operating System. ROS and ROS-I (ROS-Industrial) are flexible frameworks that have been developed by large numbers of robotics programmers who create a varied set of open-source software packages. The availability of these packages enabled us to design and implement such a complex application with just 4 developers within 2 years. We then used an open-source robotics simulation environment called Gazebo to evaluate Gilbreth. This evaluation study led to further improvements. For example, while most trajectory computations for the robot arm joints were completed within 0.5 seconds, sometimes these computations took a long time to complete. When the computation was long, invariably, the resulting trajectory was flawed, e.g., the robot arm did not move to the target pose directly, but instead wandered, and even rotated for a while, before reaching the desired pose. By simply limiting the trajectory computation time, we found motion plans that resulted in fewer robot execution failures and smaller coefficient of variance (e.g., 8.5% instead of 20.8% for the piston rod) in robot execution times.\nOur first conclusion is that the variety of available ROS and ROS-I software packages allowed us to assemble and evaluate a complex application within just 1.5 years with four developers. Second, machine learning algorithms for 3D object recognition offer impressive speedups when compared to traditional methods; however, a computational cost is incurred for model training. Here, cloud robotics offers an answer for both the computing and storage required in the training phase. Third, our evaluation showed that motion planning and grasping remain complex tasks, and current ROS/ROS-I packages could be improved to reduce failure rates.\nThe Gilbreth software package is available on this Website:  https://github.com/swri-robotics/gilbreth/\nIn Year 1, another application, called Godel, for automating the task of metal surface blending using an industrial robot ABB IRB 2400 was implemented and evaluated. Blending is the operation of smoothing metal surfaces down to an even finish. This application used a similar combination of machine vision for object identification and motion planning.\n\n \n\n\t\t\t\t\tLast Modified: 11/30/2019\n\n\t\t\t\t\tSubmitted by: Malathi Veeraraghavan"
 }
}