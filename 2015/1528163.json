{
 "awd_id": "1528163",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Detecting and Repairing Presentation Failures in Web Applications",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2015-08-01",
 "awd_exp_date": "2020-07-31",
 "tot_intn_awd_amt": 375000.0,
 "awd_amount": 375000.0,
 "awd_min_amd_letter_date": "2015-06-29",
 "awd_max_amd_letter_date": "2015-06-29",
 "awd_abstract_narration": "The user interfaces (UIs) of a web application serve an important role\r\nin the success of online companies.  Studies have shown that the\r\naesthetics of an application?s UIs can strongly influence users?\r\noverall evaluation of a company; in particular impressions of\r\ntrustworthiness and usability. Presentation failures ? a discrepancy\r\nbetween the actual appearance of a web site and its intended\r\nappearance ? can undermine this effort and negatively impact end\r\nusers? perception of the quality of the site, the services it\r\ndelivers, and affect the branding a company is trying to achieve.\r\nDebugging presentation failures is typically a manual task where\r\ntesters must identify when the layout and style of an app?s pages is\r\nincorrect and developers must carry out repairs. This process is both\r\nlabor intensive and error prone: testers can easily miss presentation\r\nfailures, since the process is based on the testers? visual comparison\r\nof a page and an oracle; and it can be difficult for developers to\r\nidentify the responsible HTML elements or properties once a failure is\r\ndetected, since HTML and CSS interact in complex ways. In this\r\nresearch effort the PIs will investigate automated techniques to help\r\ntesters more accurately detect presentation failures and efficiently\r\nidentify the faulty code.  Given the widespread deployment of web\r\napplications, this work will impact both end users and software\r\ndevelopers by reducing errors in these applications and making the\r\ndebugging process more effective and efficient.  The results of this\r\nresearch will also impact educational efforts through the training of\r\nfuture software engineering in new techniques to improve the quality\r\nof web applications.\r\n\r\nThe technical research will encompass two general areas.  The first\r\narea of research will advance techniques for detecting presentation\r\nfailures.  The primary mechanism for doing this will be to apply\r\ncomputer vision techniques to automatically identify discrepancies\r\nbetween the actual rendered appearance of a UI and its intended\r\nappearance.  The developed techniques will be widely applicable to a\r\nrange of UIs, including those with dynamic content and those using\r\ndifferent specification mechanisms for UI oracles.  The second area of\r\nresearch will use the identified differences to identify the specific\r\nelements in the UI code that are responsible for the observed\r\nfailures.  The research efforts will focus on using artificial\r\nintelligence techniques, such as search-based and statistical-based\r\nlearning, on the UI?s layout models to reason about the UI?s possible\r\nfaults and guide the developers to identify the faulty HTML elements\r\nand CSS properties.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "William",
   "pi_last_name": "Halfond",
   "pi_mid_init": "G",
   "pi_sufx_name": "",
   "pi_full_name": "William G Halfond",
   "pi_email_addr": "halfond@usc.edu",
   "nsf_id": "000565190",
   "pi_start_date": "2015-06-29",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Southern California",
  "inst_street_address": "3720 S FLOWER ST FL 3",
  "inst_street_address_2": "",
  "inst_city_name": "LOS ANGELES",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "2137407762",
  "inst_zip_code": "90033",
  "inst_country_name": "United States",
  "cong_dist_code": "34",
  "st_cong_dist_code": "CA34",
  "org_lgl_bus_name": "UNIVERSITY OF SOUTHERN CALIFORNIA",
  "org_prnt_uei_num": "",
  "org_uei_num": "G88KLJR3KYT5"
 },
 "perf_inst": {
  "perf_inst_name": "University of Southern California",
  "perf_str_addr": "3720 S. Flower St.",
  "perf_city_name": "Los Angeles",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "900890001",
  "perf_ctry_code": "US",
  "perf_cong_dist": "37",
  "perf_st_cong_dist": "CA37",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 375000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-ba360d73-7fff-0ace-a41e-db258e5425c8\"> </span></p>\n<p dir=\"ltr\"><span>The goal of our work is to design automated techniques that can help software testers to detect and repair presentation failures in the user interfaces (UIs) of web applications.&nbsp; Broadly, presentation failures (PFs) are discrepancies between the actual appearance of a web application and its intended appearance, and can negatively impact end users' perception of the quality of a web application and the services it delivers.&nbsp; PFs can occur easily in modern web applications because of the highly complex and dynamic nature of the HTML, CSS, and JavaScript that define a web page's visual appearance.&nbsp; This complexity makes the detection and repair of these kinds of failures a labor-intensive and error-prone task, which reduces the efficiency and ability of software engineers in ensuring that web applications are error free.</span></p>\n<p dir=\"ltr\"><span>Our work developed automated techniques to assist developers in detecting and repairing PFs. To accomplish this goal, we did work in three related directions. In the first, we investigated techniques for improving detection of PFs. Second, we used the detection information to perform root cause analysis and identify the faulty HTML and CSS elements in a web page that were responsible for the observed PFs. Third, we used the fault and detection information to automatically repair the faulty code.&nbsp;&nbsp;</span></p>\n<p dir=\"ltr\"><span>We applied the algorithms and techniques we developed to several different kinds of PFs that appear in web and mobile applications.&nbsp; The first kind of PF we targeted was discrepancies between UI mockups created by graphic designers and the actual rendering of a UI created by developers.&nbsp; Our approach employed computer vision techniques to identify differences and locate the HTML elements that were responsible for this difference.&nbsp; The second type of PF that we addressed was Cross-Browser Issues (XBI), where the UI of a web page appears different based on the browser used.&nbsp; For this we designed a repair technique that given the output of widely-used XBI detection tools could automatically repair the faulty UIs.&nbsp; The third type of PF that we addressed was Internationalization Presentation Failures, which occur when the rendering of a UI becomes distorted due to its text being translated into another locale's language.&nbsp; Our technique was able to detect, localize, and repair these kinds of failures.&nbsp; Finally, we developed automated repair techniques for Mobile-Friendly Presentation Failures, which occur when a web page is not able to gracefully render on different types of devices.&nbsp; For all of these common PF types, our approaches were able to detect and localize with high accuracy.&nbsp; The automated repairs were also rated highly in terms of their visual aesthetics in end user studies.</span></p>\n<p dir=\"ltr\"><span>Overall, the work has been well received and widely disseminated.&nbsp; Fifteen peer-reviewed publications at top software testing and analysis conferences and journals were published and three of these papers received distinguished or best paper awards from the ACM and IEEE societies.&nbsp; The grant also supported the dissertation work of three Ph.D. students.</span></p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 11/02/2020<br>\n\t\t\t\t\tModified by: William&nbsp;Halfond</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n \nThe goal of our work is to design automated techniques that can help software testers to detect and repair presentation failures in the user interfaces (UIs) of web applications.  Broadly, presentation failures (PFs) are discrepancies between the actual appearance of a web application and its intended appearance, and can negatively impact end users' perception of the quality of a web application and the services it delivers.  PFs can occur easily in modern web applications because of the highly complex and dynamic nature of the HTML, CSS, and JavaScript that define a web page's visual appearance.  This complexity makes the detection and repair of these kinds of failures a labor-intensive and error-prone task, which reduces the efficiency and ability of software engineers in ensuring that web applications are error free.\nOur work developed automated techniques to assist developers in detecting and repairing PFs. To accomplish this goal, we did work in three related directions. In the first, we investigated techniques for improving detection of PFs. Second, we used the detection information to perform root cause analysis and identify the faulty HTML and CSS elements in a web page that were responsible for the observed PFs. Third, we used the fault and detection information to automatically repair the faulty code.  \nWe applied the algorithms and techniques we developed to several different kinds of PFs that appear in web and mobile applications.  The first kind of PF we targeted was discrepancies between UI mockups created by graphic designers and the actual rendering of a UI created by developers.  Our approach employed computer vision techniques to identify differences and locate the HTML elements that were responsible for this difference.  The second type of PF that we addressed was Cross-Browser Issues (XBI), where the UI of a web page appears different based on the browser used.  For this we designed a repair technique that given the output of widely-used XBI detection tools could automatically repair the faulty UIs.  The third type of PF that we addressed was Internationalization Presentation Failures, which occur when the rendering of a UI becomes distorted due to its text being translated into another locale's language.  Our technique was able to detect, localize, and repair these kinds of failures.  Finally, we developed automated repair techniques for Mobile-Friendly Presentation Failures, which occur when a web page is not able to gracefully render on different types of devices.  For all of these common PF types, our approaches were able to detect and localize with high accuracy.  The automated repairs were also rated highly in terms of their visual aesthetics in end user studies.\nOverall, the work has been well received and widely disseminated.  Fifteen peer-reviewed publications at top software testing and analysis conferences and journals were published and three of these papers received distinguished or best paper awards from the ACM and IEEE societies.  The grant also supported the dissertation work of three Ph.D. students.\n\n \n\n\t\t\t\t\tLast Modified: 11/02/2020\n\n\t\t\t\t\tSubmitted by: William Halfond"
 }
}