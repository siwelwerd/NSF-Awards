{
 "awd_id": "1449918",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SI2-SSI: Collaborative Research: A Sustainable Infrastructure for Performance, Security, and Correctness Tools",
 "cfda_num": "47.070",
 "org_code": "05090000",
 "po_phone": "7032928235",
 "po_email": "bmihaila@nsf.gov",
 "po_sign_block_name": "Bogdan Mihaila",
 "awd_eff_date": "2015-08-01",
 "awd_exp_date": "2021-07-31",
 "tot_intn_awd_amt": 1500000.0,
 "awd_amount": 1500000.0,
 "awd_min_amd_letter_date": "2015-07-20",
 "awd_max_amd_letter_date": "2015-07-20",
 "awd_abstract_narration": "Software has become indispensable to society, used by computational scientists for science and engineering, by analysts mining big data for value, and to connect society over the Internet. However, the properties of software systems for any of these purposes cannot be understood without accounting for code transformations applied by optimizing compilers used to compose algorithm and data structure templates, and libraries available only in binary form. To address this need, this project will overhaul, integrate, and enhance static binary analysis and runtime technologies to produce components that provide a foundation for performance, correctness, and security tools. The project will build upon three successful and widely adopted open source software packages: the DynInst library for analysis and transformation of application binaries, the MRNet infrastructure for control of large-scale parallel executions and data analysis of their results, and the HPCToolkit performance analysis tools. The project team will engage the community to participate in the design and evaluation of the emerging components, as well as to adopt its components. \r\n\r\nThis project will have a wide range of impacts. First, software components built by the project will enable the development of sophisticated, high-quality, end-user performance, correctness, and security tools built by the project team, as well as others in academia, government, and industry. Software developed by the project team will help researchers and developers tackle testing, debugging, monitoring, analysis, and tuning of applications for systems at all scales. Second, end-user tools produced by the project have a natural place in the classroom to help students write efficient, correct, and secure programs. Third, components produced by the project will lower the barrier for new researchers to enter the field and build tools that have impact on production applications without years of investment. Fourth, the project will provide training for graduate students and interns in the area of software for performance, correctness, and security. Finally, through workshops and tutorials, the project will disseminate project results, provide training to enable others to leverage project software, and grow a community of tool researchers who depend on project components and thus have a strong motivation to help sustain project software into the future.\r\n\r\nModernizing open-source software components and tools for binary analysis will enable static analysis of application characteristics at the level of executable machine code, transformation of binaries to inject monitoring code, measurement to capture a detailed record of application?s interactions with all facets of a target platform, analysis of recorded data in parallel, and attribution of analysis results back to application source code in meaningful ways. Providing innovative, software components that support development of robust performance, correctness, and security tools will accelerate innovation by tools researchers and help them grapple with the increasing complexity of modern software. Of particular note, helping tools researchers and computational scientists grapple with the challenges of software for modern parallel systems and producing training materials that help people use this software, addresses several of the needs identified in the NSF Vision for Cyberinfrastructure for the 21st Century.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "OAC",
 "org_div_long_name": "Office of Advanced Cyberinfrastructure (OAC)",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Barton",
   "pi_last_name": "Miller",
   "pi_mid_init": "P",
   "pi_sufx_name": "",
   "pi_full_name": "Barton P Miller",
   "pi_email_addr": "bart@cs.wisc.edu",
   "nsf_id": "000455518",
   "pi_start_date": "2015-07-20",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Wisconsin-Madison",
  "inst_street_address": "21 N PARK ST STE 6301",
  "inst_street_address_2": "",
  "inst_city_name": "MADISON",
  "inst_state_code": "WI",
  "inst_state_name": "Wisconsin",
  "inst_phone_num": "6082623822",
  "inst_zip_code": "537151218",
  "inst_country_name": "United States",
  "cong_dist_code": "02",
  "st_cong_dist_code": "WI02",
  "org_lgl_bus_name": "UNIVERSITY OF WISCONSIN SYSTEM",
  "org_prnt_uei_num": "",
  "org_uei_num": "LCLSJAGTNZQ7"
 },
 "perf_inst": {
  "perf_inst_name": "University of Wisconsin-Madison",
  "perf_str_addr": "1210 W. Dayton St.",
  "perf_city_name": "Madison",
  "perf_st_code": "WI",
  "perf_st_name": "Wisconsin",
  "perf_zip_code": "537061613",
  "perf_ctry_code": "US",
  "perf_cong_dist": "02",
  "perf_st_cong_dist": "WI02",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "800400",
   "pgm_ele_name": "Software Institutes"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7433",
   "pgm_ref_txt": "CyberInfra Frmwrk 21st (CIF21)"
  },
  {
   "pgm_ref_code": "8009",
   "pgm_ref_txt": "Scientifc Software Integration"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 1500000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>In a collaboration with the Rice University, the project team at the University of Wisconsin-Madison supported the development of the HPCToolkit performance analysis tools. Below are brief highlights of the sustainable software infrastructure project's technical accomplishments.</p>\n<ul>\n<li>The UW-Madison project team developed new techniques for diagnosing GPU/CPU program performance issues and released a prototype measurement tool call Diogenes. Efforts are underway to integrate Diogenes techniques into HPCToolkit.</li>\n<li>The project team extended Dyninst with support for analysis of binaries for ARM processors and IBM Power processors that operate in little-endian mode, e.g., Power8 and Power9.&nbsp;</li>\n<li>The project team enhanced the precision of binary analysis in Dyninst by improving the analysis of jump tables and improving machine code parsing for vector instructions.</li>\n<li>The project team extended Dyninst with an API that enables client tools to inject information about basic blocks and control flow edges obtained from machine code parsed outside Dyninst. This capability enables HPCToolkit to use Dyninst to support analysis of loop nests in binaries for Intel and NVIDIA GPUs.</li>\n<li>The project team replaced HPCToolkit's home-grown binary analysis capabilities with Dyninst, which improves HPCToolkit's ability to attribute performance measurements back to application source code at multiple levels. Leveraging Dyninst enabled porting of HPCToolkit to ARM, Power8, and Power9 processors.</li>\n<li>The project team leveraged Dyninst's binary analysis capabilities to extend HPCToolkit to support performance measurement and analysis of GPU-accelerated parallel applications.&nbsp;</li>\n<li>To better support analysis of large application binaries, the project team enhanced Dyninst to parse machine code and symbol table information in parallel. Using this multithreaded version of Dyninst reduced HPCToolkit's program structure analysis of a 7.7GiB TensorFlow binary from over 20 minutes to 161seconds on 16 cores.&nbsp;</li>\n<li>The project team leveraged both Dyninst's binary analysis and HPCToolkit's performance measurement and attribution to develop new capabilities for automated diagnosis of scalability losses in parallel applications.&nbsp;</li>\n</ul>\n<p>The project team disseminates Dyninst and HPCToolkit as open source software. Dyninst is distributed as part of Red Hat Linux. HPCToolkit has been deployed on systems around the world and is used in academia, industry, and at national laboratories. Notably, HPCToolkit is used to analyze GPU-accelerated computations on the Summit and Sierra supercomputers at Oak Ridge and Lawrence Livermore National Laboratories - two of the fastest supercomputers in the world.&nbsp;</p>\n<p>The project team achieved the sustainability goals for HPCToolkit and Dyninst, securing new funding from the Department of Energy's (DOE) Exascale Computing Program, ARM, AMD, Intel, Cray, Argonne National Laboratory, and DOE National Nuclear Security Administration laboratories (Livermore, Sandia, Los Alamos).</p>\n<p>The project has included participation by graduate students and undergraduates at the University of Wisconsin-Madison University. Every year since the beginning of this project (with an exception for 2020 and 2021 due to COVID-19), the project team has led an annual Scalable Tools Workshop, which attracts approximately 40-50 tool developers from academia, industry, and national laboratories around the world.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 08/19/2021<br>\n\t\t\t\t\tModified by: Barton&nbsp;P&nbsp;Miller</p>\n</div>\n<div class=\"porSideCol\">\n<div class=\"each-gallery\">\n<div class=\"galContent\" id=\"gallery0\">\n<div class=\"photoCount\" id=\"photoCount0\">\n\t\t\t\t\t\t\t\t\tImages (<span id=\"selectedPhoto0\">1</span> of <span class=\"totalNumber\"></span>)\t\t\n\t\t\t\t\t\t\t\t</div>\n<div class=\"galControls\" id=\"controls0\"></div>\n<div class=\"galSlideshow\" id=\"slideshow0\"></div>\n<div class=\"galEmbox\" id=\"embox\">\n<div class=\"image-title\"></div>\n</div>\n</div>\n<div class=\"galNavigation\" id=\"navigation0\">\n<ul class=\"thumbs\" id=\"thumbs0\">\n<li>\n<a href=\"/por/images/Reports/POR/2021/1449918/1449918_10378367_1629384259907_DyninstComponents--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2021/1449918/1449918_10378367_1629384259907_DyninstComponents--rgov-800width.jpg\" title=\"The Components of Dyninst\"><img src=\"/por/images/Reports/POR/2021/1449918/1449918_10378367_1629384259907_DyninstComponents--rgov-66x44.jpg\" alt=\"The Components of Dyninst\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Dyninst is deconstructed into a collection of basic tool kits, which can be used alone or in combination.</div>\n<div class=\"imageCredit\">Barton Miller</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Barton&nbsp;P&nbsp;Miller</div>\n<div class=\"imageTitle\">The Components of Dyninst</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2021/1449918/1449918_10378367_1629384174552_DyninstFlow--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2021/1449918/1449918_10378367_1629384174552_DyninstFlow--rgov-800width.jpg\" title=\"A Logical View of Dyninst's Workflow\"><img src=\"/por/images/Reports/POR/2021/1449918/1449918_10378367_1629384174552_DyninstFlow--rgov-66x44.jpg\" alt=\"A Logical View of Dyninst's Workflow\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Dyninst parses a binary program into its control- and data-flow components, allowing a user to analyze and manipulate the binary as they would source code.</div>\n<div class=\"imageCredit\">Barton Miller</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Barton&nbsp;P&nbsp;Miller</div>\n<div class=\"imageTitle\">A Logical View of Dyninst's Workflow</div>\n</div>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>",
  "por_txt_cntn": "\nIn a collaboration with the Rice University, the project team at the University of Wisconsin-Madison supported the development of the HPCToolkit performance analysis tools. Below are brief highlights of the sustainable software infrastructure project's technical accomplishments.\n\nThe UW-Madison project team developed new techniques for diagnosing GPU/CPU program performance issues and released a prototype measurement tool call Diogenes. Efforts are underway to integrate Diogenes techniques into HPCToolkit.\nThe project team extended Dyninst with support for analysis of binaries for ARM processors and IBM Power processors that operate in little-endian mode, e.g., Power8 and Power9. \nThe project team enhanced the precision of binary analysis in Dyninst by improving the analysis of jump tables and improving machine code parsing for vector instructions.\nThe project team extended Dyninst with an API that enables client tools to inject information about basic blocks and control flow edges obtained from machine code parsed outside Dyninst. This capability enables HPCToolkit to use Dyninst to support analysis of loop nests in binaries for Intel and NVIDIA GPUs.\nThe project team replaced HPCToolkit's home-grown binary analysis capabilities with Dyninst, which improves HPCToolkit's ability to attribute performance measurements back to application source code at multiple levels. Leveraging Dyninst enabled porting of HPCToolkit to ARM, Power8, and Power9 processors.\nThe project team leveraged Dyninst's binary analysis capabilities to extend HPCToolkit to support performance measurement and analysis of GPU-accelerated parallel applications. \nTo better support analysis of large application binaries, the project team enhanced Dyninst to parse machine code and symbol table information in parallel. Using this multithreaded version of Dyninst reduced HPCToolkit's program structure analysis of a 7.7GiB TensorFlow binary from over 20 minutes to 161seconds on 16 cores. \nThe project team leveraged both Dyninst's binary analysis and HPCToolkit's performance measurement and attribution to develop new capabilities for automated diagnosis of scalability losses in parallel applications. \n\n\nThe project team disseminates Dyninst and HPCToolkit as open source software. Dyninst is distributed as part of Red Hat Linux. HPCToolkit has been deployed on systems around the world and is used in academia, industry, and at national laboratories. Notably, HPCToolkit is used to analyze GPU-accelerated computations on the Summit and Sierra supercomputers at Oak Ridge and Lawrence Livermore National Laboratories - two of the fastest supercomputers in the world. \n\nThe project team achieved the sustainability goals for HPCToolkit and Dyninst, securing new funding from the Department of Energy's (DOE) Exascale Computing Program, ARM, AMD, Intel, Cray, Argonne National Laboratory, and DOE National Nuclear Security Administration laboratories (Livermore, Sandia, Los Alamos).\n\nThe project has included participation by graduate students and undergraduates at the University of Wisconsin-Madison University. Every year since the beginning of this project (with an exception for 2020 and 2021 due to COVID-19), the project team has led an annual Scalable Tools Workshop, which attracts approximately 40-50 tool developers from academia, industry, and national laboratories around the world.\n\n\t\t\t\t\tLast Modified: 08/19/2021\n\n\t\t\t\t\tSubmitted by: Barton P Miller"
 }
}