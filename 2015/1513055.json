{
 "awd_id": "1513055",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "TWC: Medium: Collaborative: Developer Crowdsourcing: Capturing, Understanding, and Addressing Security-related Blind Spots in APIs",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2015-09-01",
 "awd_exp_date": "2019-08-31",
 "tot_intn_awd_amt": 382759.0,
 "awd_amount": 398759.0,
 "awd_min_amd_letter_date": "2015-07-09",
 "awd_max_amd_letter_date": "2017-04-17",
 "awd_abstract_narration": "Despite an emphasis the security community places on the importance of producing secure software, the number of new security vulnerabilities in software increases every year. This research is based on the assumption that software vulnerabilities are caused by misunderstandings, or lack of knowledge, called blind spots, which the developers experience while they are building systems. When building systems, developers often focus more on functional requirements than on non-functional ones, such as security. Thus, they can make design decisions that prioritize functionality without noticing the security vulnerabilities these decisions create. Today, developers often have no access to effective software tools that highlight these vulnerabilities during development. This research identifies common developer blind spots with the goal of building and evaluating practical software tools that help prevent blind spots during development and detect vulnerabilities in deployed software.\r\n\r\nTo capture developers' reasoning when faced with blind spots, and to identify common blind spot characteristics, this research converts several identified blind spots into programming puzzles, and conducts a user study with developers solving these puzzles. Statistical analysis of the developers' answers identifies common characteristics among blind spots, and the observations of developers' behaviors guide the creation of tools to automatically detect blind spots and to warn developers about them as developers experience them. The tools have two complementary goals: (1) prevent blind spots from occurring by cueing developers on-the-spot about potential blind spots as they write code, and (2) identify software vulnerabilities in existing applications by detecting code that may have been written as a result of a blind spot. This research evaluates these newly developed tools in the context of a user study with developers, producing the following outcomes: (1) understanding of blind spots in application programming interfaces (APIs), and of developers' attentional and decision processes when writing code using APIs, (2) understanding of how to notify, without habituation and annoyance, developers on-the-spot about blind spots so that relevant security information is used by developers while writing code, (3) creation of open-source, publicly available developer tools that notify developers about blind spots and facilitate detection of vulnerabilities caused by blind spots, and (4) development of guidelines for better API design to minimize blind spots by considering developers' attentional and decision processes. This research addresses an important gap in secure software development by incorporating the human factor of the development process. This is particularly crucial given our society's increasing dependence on software applications.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Yuriy",
   "pi_last_name": "Brun",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Yuriy Brun",
   "pi_email_addr": "brun@cs.umass.edu",
   "nsf_id": "000559414",
   "pi_start_date": "2015-07-09",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Massachusetts Amherst",
  "inst_street_address": "101 COMMONWEALTH AVE",
  "inst_street_address_2": "",
  "inst_city_name": "AMHERST",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "4135450698",
  "inst_zip_code": "010039252",
  "inst_country_name": "United States",
  "cong_dist_code": "02",
  "st_cong_dist_code": "MA02",
  "org_lgl_bus_name": "UNIVERSITY OF MASSACHUSETTS",
  "org_prnt_uei_num": "VGJHK59NMPK9",
  "org_uei_num": "VGJHK59NMPK9"
 },
 "perf_inst": {
  "perf_inst_name": "University of Massachusetts Amherst",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "010039242",
  "perf_ctry_code": "US",
  "perf_cong_dist": "02",
  "perf_st_cong_dist": "MA02",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "171400",
   "pgm_ele_name": "Special Projects - CNS"
  },
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  },
  {
   "pgm_ref_code": "9178",
   "pgm_ref_txt": "UNDERGRADUATE EDUCATION"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 382759.0
  },
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 16000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Software systems play a critical role in today's society, yet they often contain faults, costing the global economy billions of dollars. Modern software development involves heavy use of existing software libraries and encourages code reuse. Software engineers build systems using libraries and reusing existing code by interpreting application programming interfaces (APIs), documentation, and use examples. Unfortunately incomplete or incorrect understanding of those APIs, documentation, or examples can create blindspots in developers' minds, and those blindspots can lead to mistakes, and, ultimately, to software faults. This project identified and studied the process that can lead software engineers to encounter blindspots and make mistakes that cause faults, and developed tools and methodologies for automatically detecting such developer mistakes and improving software quality.</p>\n<p>Intellectual Merit: The project defined a new cause of software defects, developer blindspots. Blindspots occur when developers use libraries or code but their understanding of how it has to be used is incomplete or incorrect. Thus, blindspots can cause misuses that lead to defects. This project developed a catalog of potential blindspots in Java and Python APIs and measured their effect on software engineers with respect to code understanding and software defects. For example, a study with 109 developers found that presence of APIs with blindspots in code correlated negatively with the developers' ability to accurately answer security questions about that code, that programming experience did not alleviate the harm caused by blindspots, and that developers who exhibiting greater openness as a personality trait were more likely to detect the API blindspots. The project has led to a better undrestanding of how code misunderstanding happens in the wild, a set of formal foundations for some programming paradigms that can reduce the effects of blindspots, and an analysis of how blindspots in collaborative development can affect the engineering process.</p>\n<p>Broader Impacts: The project's broader impact includes advancing the state-of-the-art of understanding of the mental process developers undergo when engineering software, which can lead to better tools and educational methods that can, ultimately, improve the quality of the software developers produce. The project fostered a new collaboration between four PIs at three universities, and educated a highly diverse team of graduate and undergraduate students.</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 11/20/2019<br>\n\t\t\t\t\tModified by: Yuriy&nbsp;Brun</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nSoftware systems play a critical role in today's society, yet they often contain faults, costing the global economy billions of dollars. Modern software development involves heavy use of existing software libraries and encourages code reuse. Software engineers build systems using libraries and reusing existing code by interpreting application programming interfaces (APIs), documentation, and use examples. Unfortunately incomplete or incorrect understanding of those APIs, documentation, or examples can create blindspots in developers' minds, and those blindspots can lead to mistakes, and, ultimately, to software faults. This project identified and studied the process that can lead software engineers to encounter blindspots and make mistakes that cause faults, and developed tools and methodologies for automatically detecting such developer mistakes and improving software quality.\n\nIntellectual Merit: The project defined a new cause of software defects, developer blindspots. Blindspots occur when developers use libraries or code but their understanding of how it has to be used is incomplete or incorrect. Thus, blindspots can cause misuses that lead to defects. This project developed a catalog of potential blindspots in Java and Python APIs and measured their effect on software engineers with respect to code understanding and software defects. For example, a study with 109 developers found that presence of APIs with blindspots in code correlated negatively with the developers' ability to accurately answer security questions about that code, that programming experience did not alleviate the harm caused by blindspots, and that developers who exhibiting greater openness as a personality trait were more likely to detect the API blindspots. The project has led to a better undrestanding of how code misunderstanding happens in the wild, a set of formal foundations for some programming paradigms that can reduce the effects of blindspots, and an analysis of how blindspots in collaborative development can affect the engineering process.\n\nBroader Impacts: The project's broader impact includes advancing the state-of-the-art of understanding of the mental process developers undergo when engineering software, which can lead to better tools and educational methods that can, ultimately, improve the quality of the software developers produce. The project fostered a new collaboration between four PIs at three universities, and educated a highly diverse team of graduate and undergraduate students.\n\n \n\n\t\t\t\t\tLast Modified: 11/20/2019\n\n\t\t\t\t\tSubmitted by: Yuriy Brun"
 }
}