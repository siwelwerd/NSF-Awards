{
 "awd_id": "1533564",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "AitF: FULL: Collaborative Research: Provably Efficient GPU Algorithms",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "A. Funda Ergun",
 "awd_eff_date": "2015-09-01",
 "awd_exp_date": "2021-08-31",
 "tot_intn_awd_amt": 400000.0,
 "awd_amount": 400000.0,
 "awd_min_amd_letter_date": "2015-08-13",
 "awd_max_amd_letter_date": "2018-10-05",
 "awd_abstract_narration": "Graphics processing units (GPUs) were originally developed as specialized hardware exclusively for graphics rendering. In recent years they have become massively parallel systems with hundreds of processing cores supporting thousands of threads. Given their computational potential, they are now used to support general-purpose computation via high-level programming languages.  As a result, they have become a standard platform for high-performance computing (HPC) simulations in natural sciences.\r\n\r\nHowever, there is still very little understanding of what types of algorithms translate into efficient GPU programs, and many implementations rely on a limited number of design patterns and many rounds of trial-and-error. There is a need for simple but accurate algorithmic models to get a wider algorithmic community involved in GPU computing. The project will develop such a model, intended to have the transformative effect of enabling algorithms researchers to focus their efforts on creating algorithms for GPUs in a way that is currently not possible, increasing the algorithmic knowledgebase in GPU computing. Over time, more efficient algorithms will lead to better utilization of computing resources and reuse of code implemented as libraries. Such a model for GPUs will also enable teaching GPU computing to a wider group of students, similarly to how sequential and PRAM algorithms are currently taught.\r\n\r\nThis project will study the algorithmic aspects of GPU computing and will develop a simple but accurate theoretical model for GPUs, that will define clear guidelines and complexity metrics for algorithm evaluation. The PIs will develop and implement algorithms that will improve the state of the art code base of general purpose computation on GPUs in the areas of combinatorial algorithms, computational geometry, visualization, search algorithms, and data structures.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Former Principal Investigator",
   "pi_first_name": "John",
   "pi_last_name": "Iacono",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "John Iacono",
   "pi_email_addr": "iacono@nyu.edu",
   "nsf_id": "000211077",
   "pi_start_date": "2015-08-13",
   "pi_end_date": "2018-10-05"
  },
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Claudio",
   "pi_last_name": "Silva",
   "pi_mid_init": "T",
   "pi_sufx_name": "",
   "pi_full_name": "Claudio T Silva",
   "pi_email_addr": "csilva@nyu.edu",
   "nsf_id": "000124941",
   "pi_start_date": "2018-10-05",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "John",
   "pi_last_name": "Iacono",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "John Iacono",
   "pi_email_addr": "iacono@nyu.edu",
   "nsf_id": "000211077",
   "pi_start_date": "2018-10-05",
   "pi_end_date": null
  },
  {
   "pi_role": "Former Co-Principal Investigator",
   "pi_first_name": "Claudio",
   "pi_last_name": "Silva",
   "pi_mid_init": "T",
   "pi_sufx_name": "",
   "pi_full_name": "Claudio T Silva",
   "pi_email_addr": "csilva@nyu.edu",
   "nsf_id": "000124941",
   "pi_start_date": "2015-08-13",
   "pi_end_date": "2018-10-05"
  }
 ],
 "inst": {
  "inst_name": "New York University",
  "inst_street_address": "70 WASHINGTON SQ S",
  "inst_street_address_2": "",
  "inst_city_name": "NEW YORK",
  "inst_state_code": "NY",
  "inst_state_name": "New York",
  "inst_phone_num": "2129982121",
  "inst_zip_code": "100121019",
  "inst_country_name": "United States",
  "cong_dist_code": "10",
  "st_cong_dist_code": "NY10",
  "org_lgl_bus_name": "NEW YORK UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "NX9PXMKW5KW8"
 },
 "perf_inst": {
  "perf_inst_name": "New York University",
  "perf_str_addr": "15 Metrotech Center",
  "perf_city_name": "Brooklyn",
  "perf_st_code": "NY",
  "perf_st_name": "New York",
  "perf_zip_code": "112013846",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "NY07",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "723900",
   "pgm_ele_name": "Algorithms in the Field"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "012Z",
   "pgm_ref_txt": "AitF FULL Projects"
  },
  {
   "pgm_ref_code": "9150",
   "pgm_ref_txt": "EXP PROG TO STIM COMP RES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 400000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p id=\"docs-internal-guid-c6e929d8-7fff-43db-74ad-da6df2831678\" style=\"line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #ff0000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">The major goal of the project was to advance our understanding of general purpose computation on GPUs (GPGPUs). Due to their computational power, GPGPUs have been adopted in many fields of computational and natural sciences, such as physics, astronomy, biology, chemistry, to perform simulations and data analysis. Faster GPU implementations result in more efficient utilization of computational resources. In addition to increased productivity, efficient resource utilization results in more efficient power consumption. Since power consumption accounts for almost half the cost of running data centers for high-performance computing, this efficiency will result in savings in power and, consequently, natural resources required to produce the power.&nbsp;</span></p>\n<p>&nbsp;</p>\n<p style=\"line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #ff0000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">The project advanced both theoretical and practical aspects of GPU computing. We would like to highlight our work on two particular topics: GPU sorting (Karsin et al, 2018) and GPU techniques for processing spatio-temporal urban data (Zacharatou et al, 2017).</span></p>\n<p>&nbsp;</p>\n<p style=\"line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #ff0000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Sorting is at the core of many applications. Therefore, fast GPU sorting algorithms can contribute to more efficient (and, consequently, faster) applications in many of these fields.&nbsp; We studied the relationship between memory accesses, bank conflicts, thread multiplicity (also known as over-subscription) and instruction-level parallelism in comparison-based sorting algorithms for Graphics Processing Units (GPUs). We experimentally validate a proposed formula that relates these parameters with asymptotic analysis of the number of memory accesses by an algorithm. Using this formula we analyze and compare several GPU sorting algorithms, identifying key performance bottlenecks in each one of them. Based on this analysis we propose a GPU-efficient multiway merge-sort algorithm, GPU-MMS, which minimizes or eliminates these bottlenecks and balances various limiting factors for specific hardware. In our work, we show that GPU-MMS outperforms highly optimized sorting algorithms implemented in released library implementations.</span></p>\n<p>&nbsp;</p>\n<p style=\"line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #ff0000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">The visual exploration of spatial data relies heavily on spatial aggregation queries that slice and summarize the data over different regions. These queries comprise computationally-intensive point-in-polygon tests that associate data points to polygonal regions, challenging the responsiveness of visualization tools. This challenge is compounded by the sheer amounts of data, requiring a large number of such tests to be performed. Traditional pre-aggregation approaches are unsuitable in this setting since they fix the query constraints and support only rectangular regions. On the other hand, query constraints are defined interactively in visual analytics systems, and polygons can be of arbitrary shapes. We convert a spatial aggregation query into a set of drawing operations on a canvas and leverage the rendering pipeline of the graphics hardware (GPU) to enable interactive response times. Our technique trades-off accuracy for response time by adjusting the canvas resolution, and can even provide accurate results when combined with a polygon index. We evaluate our technique on two large real-world data sets, exhibiting superior performance compared to index-based approaches. This work served as the basis and inspiration for the GPU-friendly Geometric Data Model and Algebra for Spatial Queries developed by Doraiswamy and Freire (SIGMOD 2020).</span></p>\n<p>&nbsp;</p>\n<p style=\"line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #ff0000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">The work on GPU-based urban computing was used in a number of applications, including, for example, on computing a map of all of the shadows produced by thousands of buildings in New York City. The data that we generated was used by the New York Times in their article: \"Mapping the Shadows of New York City: Every Building, Every Block\", linked here: https://www.nytimes.com/interactive/2016/12/21/upshot/Mapping-the-Shadows-of-New-York-City.html</span></p><br>\n<p>\n\t\t\t\t      \tLast Modified: 01/09/2022<br>\n\t\t\t\t\tModified by: Claudio&nbsp;T&nbsp;Silva</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "The major goal of the project was to advance our understanding of general purpose computation on GPUs (GPGPUs). Due to their computational power, GPGPUs have been adopted in many fields of computational and natural sciences, such as physics, astronomy, biology, chemistry, to perform simulations and data analysis. Faster GPU implementations result in more efficient utilization of computational resources. In addition to increased productivity, efficient resource utilization results in more efficient power consumption. Since power consumption accounts for almost half the cost of running data centers for high-performance computing, this efficiency will result in savings in power and, consequently, natural resources required to produce the power. \n\n \nThe project advanced both theoretical and practical aspects of GPU computing. We would like to highlight our work on two particular topics: GPU sorting (Karsin et al, 2018) and GPU techniques for processing spatio-temporal urban data (Zacharatou et al, 2017).\n\n \nSorting is at the core of many applications. Therefore, fast GPU sorting algorithms can contribute to more efficient (and, consequently, faster) applications in many of these fields.  We studied the relationship between memory accesses, bank conflicts, thread multiplicity (also known as over-subscription) and instruction-level parallelism in comparison-based sorting algorithms for Graphics Processing Units (GPUs). We experimentally validate a proposed formula that relates these parameters with asymptotic analysis of the number of memory accesses by an algorithm. Using this formula we analyze and compare several GPU sorting algorithms, identifying key performance bottlenecks in each one of them. Based on this analysis we propose a GPU-efficient multiway merge-sort algorithm, GPU-MMS, which minimizes or eliminates these bottlenecks and balances various limiting factors for specific hardware. In our work, we show that GPU-MMS outperforms highly optimized sorting algorithms implemented in released library implementations.\n\n \nThe visual exploration of spatial data relies heavily on spatial aggregation queries that slice and summarize the data over different regions. These queries comprise computationally-intensive point-in-polygon tests that associate data points to polygonal regions, challenging the responsiveness of visualization tools. This challenge is compounded by the sheer amounts of data, requiring a large number of such tests to be performed. Traditional pre-aggregation approaches are unsuitable in this setting since they fix the query constraints and support only rectangular regions. On the other hand, query constraints are defined interactively in visual analytics systems, and polygons can be of arbitrary shapes. We convert a spatial aggregation query into a set of drawing operations on a canvas and leverage the rendering pipeline of the graphics hardware (GPU) to enable interactive response times. Our technique trades-off accuracy for response time by adjusting the canvas resolution, and can even provide accurate results when combined with a polygon index. We evaluate our technique on two large real-world data sets, exhibiting superior performance compared to index-based approaches. This work served as the basis and inspiration for the GPU-friendly Geometric Data Model and Algebra for Spatial Queries developed by Doraiswamy and Freire (SIGMOD 2020).\n\n \nThe work on GPU-based urban computing was used in a number of applications, including, for example, on computing a map of all of the shadows produced by thousands of buildings in New York City. The data that we generated was used by the New York Times in their article: \"Mapping the Shadows of New York City: Every Building, Every Block\", linked here: https://www.nytimes.com/interactive/2016/12/21/upshot/Mapping-the-Shadows-of-New-York-City.html\n\n\t\t\t\t\tLast Modified: 01/09/2022\n\n\t\t\t\t\tSubmitted by: Claudio T Silva"
 }
}