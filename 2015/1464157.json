{
 "awd_id": "1464157",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CRII: SHF: Optimizing Program Executions on Non-uniform Threaded Architectures",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Yuanyuan Yang",
 "awd_eff_date": "2015-03-01",
 "awd_exp_date": "2018-02-28",
 "tot_intn_awd_amt": 174973.0,
 "awd_amount": 174973.0,
 "awd_min_amd_letter_date": "2015-03-06",
 "awd_max_amd_letter_date": "2015-03-06",
 "awd_abstract_narration": "Modern computer systems employ multiple threads to exploit multiple cores with multiple functional units. High thread-level parallelism arises from having multiple threads per core (simultaneous or fine-grained multithreading, SMT), multiple cores per processor (chip multithreaded processor, CMP), and multiple processors per node (non-uniform memory access, NUMA). Threads share different levels of hardware resources depending on where they execute. An architecture with hybrid SMT, CMP and NUMA threads is a non-uniform threaded architecture. Most multi-socket systems today are of this form. Due to the thread abstraction in operating systems and programming models, software developers often treat all threads in the system as symmetric, ignoring their non-uniformity in hardware. As a result, multithreaded code running on non-uniform threaded architectures performs at a level far below the theoretical peak, which can degrade productivity and increase energy consumption. \r\n\r\nThe main focus of this project is to investigate both static and dynamic software methods to exploit non-uniformity between hardware threads. For the static optimization, the PI aims to introduce thread non-uniformity in software via code transformations. This will also include improving existing applications by identifying opportunities in application source code to apply such transformations. For the dynamic optimization, the PI plans to study online scheduling methods to match non-uniform threads in software and hardware. Given an executable, it will be analyzed online to characterize resource sharing between its threads and appropriate scheduling strategies will be applied for both threads and data. This project will tightly integrate static and dynamic optimization methods for programs running on non-uniform threaded architectures. This research can dramatically improve the performance of large-scale multithreaded applications running on today?s and emerging parallel architectures. More broadly, this project will have a strong impact in designing performance tools and parallel programming frameworks for non-uniform threads. It will likely attract broad interest from industry and academia. An important part of this project is its integration with teaching undergraduate and graduate courses as well as student mentoring.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Xu",
   "pi_last_name": "Liu",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Xu Liu",
   "pi_email_addr": "xliu88@ncsu.edu",
   "nsf_id": "000677724",
   "pi_start_date": "2015-03-06",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "College of William and Mary",
  "inst_street_address": "1314 S MOUNT VERNON AVE",
  "inst_street_address_2": "",
  "inst_city_name": "WILLIAMSBURG",
  "inst_state_code": "VA",
  "inst_state_name": "Virginia",
  "inst_phone_num": "7572213965",
  "inst_zip_code": "23185",
  "inst_country_name": "United States",
  "cong_dist_code": "08",
  "st_cong_dist_code": "VA08",
  "org_lgl_bus_name": "COLLEGE OF WILLIAM AND MARY",
  "org_prnt_uei_num": "EVWJPCY6AD97",
  "org_uei_num": "EVWJPCY6AD97"
 },
 "perf_inst": {
  "perf_inst_name": "College of William and Mary",
  "perf_str_addr": "",
  "perf_city_name": "Williamsburg",
  "perf_st_code": "VA",
  "perf_st_name": "Virginia",
  "perf_zip_code": "231878795",
  "perf_ctry_code": "US",
  "perf_cong_dist": "01",
  "perf_st_cong_dist": "VA01",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7941",
   "pgm_ref_txt": "COMPUTER ARCHITECTURE"
  },
  {
   "pgm_ref_code": "8228",
   "pgm_ref_txt": "CISE Resrch Initiatn Initiatve"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 174973.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>This project focuses on the code optimization for multithreaded applications running on non-uniform threaded architectures, that is the architectures with all simulteneous multithreading (SMT), chip multithreading (CMP), and non-uniform memory accesses (NUMA) enabled.&nbsp;</p>\n<p>&nbsp;</p>\n<p>In this project, we have developed a set of tools to perform static and dynamic analysis to guide optimization in source code. Moreover, we have developed synchronization infrastructure in such architecture to support better performance. From the tools perspective, we highlight some insights obtained from the tool development as follows:</p>\n<p>1. We have developed SMTAnalyzer, which guides code optimization on systems with SMT enabled. The tool provides the insights that enhacing sharing, even the false sharing between threads running on SMT cores, is beneficial to performance. Our optimization technique shows siginificant performance improvement.&nbsp;</p>\n<p>2. We have developed StructSlim and CCProf to identify inefficient data layout in memory. These tools leverage the hardware performance monitoring units (PMU) to sample program execution in a statistical way. These tools are able to identify hot/cold fields in data structures for splitting candidates and also cache conflicts due to the cache associative sets.</p>\n<p>&nbsp;</p>\n<p>From the infrastructure perspective, we have developed a novel synchronization primitive --- A lock that works in non-uniform threaded architectures. This lock trades off the fairness with the throughput. The basic idea is to have threads on the same physical core (i.e., SMT threads) to obtain the lock first, then CMP threads have lower priority, and threads on different NUMA sockets have the lowest priority to obtain the lock. Furthermore, this lock provides an abortable feature that can significantly accelerate the execution on the critical path.</p>\n<p>&nbsp;</p>\n<p>As the highlight in this project, the PI has trained three Ph.D. students and published nine peer-reviewed conference papers, among which, there are two papers (SC'15 and PPoPP'18) received the Best Paper Award.&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 05/30/2018<br>\n\t\t\t\t\tModified by: Xu&nbsp;Liu</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThis project focuses on the code optimization for multithreaded applications running on non-uniform threaded architectures, that is the architectures with all simulteneous multithreading (SMT), chip multithreading (CMP), and non-uniform memory accesses (NUMA) enabled. \n\n \n\nIn this project, we have developed a set of tools to perform static and dynamic analysis to guide optimization in source code. Moreover, we have developed synchronization infrastructure in such architecture to support better performance. From the tools perspective, we highlight some insights obtained from the tool development as follows:\n\n1. We have developed SMTAnalyzer, which guides code optimization on systems with SMT enabled. The tool provides the insights that enhacing sharing, even the false sharing between threads running on SMT cores, is beneficial to performance. Our optimization technique shows siginificant performance improvement. \n\n2. We have developed StructSlim and CCProf to identify inefficient data layout in memory. These tools leverage the hardware performance monitoring units (PMU) to sample program execution in a statistical way. These tools are able to identify hot/cold fields in data structures for splitting candidates and also cache conflicts due to the cache associative sets.\n\n \n\nFrom the infrastructure perspective, we have developed a novel synchronization primitive --- A lock that works in non-uniform threaded architectures. This lock trades off the fairness with the throughput. The basic idea is to have threads on the same physical core (i.e., SMT threads) to obtain the lock first, then CMP threads have lower priority, and threads on different NUMA sockets have the lowest priority to obtain the lock. Furthermore, this lock provides an abortable feature that can significantly accelerate the execution on the critical path.\n\n \n\nAs the highlight in this project, the PI has trained three Ph.D. students and published nine peer-reviewed conference papers, among which, there are two papers (SC'15 and PPoPP'18) received the Best Paper Award. \n\n\t\t\t\t\tLast Modified: 05/30/2018\n\n\t\t\t\t\tSubmitted by: Xu Liu"
 }
}