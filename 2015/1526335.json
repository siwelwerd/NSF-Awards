{
 "awd_id": "1526335",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "AF:Small:Collaborative Research:Making Computational Geometry Polynomial in Derivation Length and in Dimension",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "A. Funda Ergun",
 "awd_eff_date": "2015-07-01",
 "awd_exp_date": "2020-12-31",
 "tot_intn_awd_amt": 249983.0,
 "awd_amount": 265983.0,
 "awd_min_amd_letter_date": "2015-06-26",
 "awd_max_amd_letter_date": "2020-05-22",
 "awd_abstract_narration": "Computational geometry is the discipline that creates algorithms to\r\ndesign and manipulate shapes.  It has wide application in science,\r\nengineering, and industry -- CAD/CAM systems are a notable example.\r\nThe problem is, where we see shapes and their spatial relations, the\r\ncomputer sees only numbers -- and usually, for speed, only\r\napproximate, \"floating-point\" numbers.  E.g., points on a line that\r\nare represented as numerical coordinates, when rounded to the\r\nnumber of digits the computer stores, may no longer lie on any common\r\nline.  Subsequent calculations that rely on a line being straight or\r\ntwo lines intersecting at most once can then go badly astray.  Error\r\nin numerical computation can sometimes be limited by rounding, but\r\nthere is no practical technique for rounding three-dimensional shapes.\r\n\r\nThis project investigates shape rounding by encasement:\r\nHigh-complexity shapes are encased in approximating polyhedra with\r\nfloating-point vertex coordinates.  Given an encasement, the PIs have\r\ndescribed a rounding algorithm that projects input features to nearby\r\nencasement features. For dealing with intersections of surfaces, the\r\nproject creates output-sensitive algorithms for another type of\r\nencasement, an isolating encasement that can have distant boundary\r\nvertices but cannot encase other features.\r\n\r\nEncasement is only part of the solution, so the project also explores\r\nways to compute topological structure using bounded-complexity\r\narithmetic by avoiding numerical computation for the degenerate (zero)\r\nexpressions.  It investigates using graph theory to analyze explicit\r\nexpressions and algebraic techniques to analyze expressions involving\r\nroots of polynomials.\r\n\r\nThe outcome is to include a software library for implementing\r\ncomputational geometry algorithms with automated shape rounding.  The\r\nproject integrates education and research through an introductory\r\ncomputational geometry course in which standard algorithms are taught\r\nand implemented using the library.  Previously, the computational cost\r\nof multi-step algorithms forced students to consider each algorithm in\r\nisolation.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Victor",
   "pi_last_name": "Milenkovic",
   "pi_mid_init": "J",
   "pi_sufx_name": "",
   "pi_full_name": "Victor J Milenkovic",
   "pi_email_addr": "vjm@cs.miami.edu",
   "nsf_id": "000417179",
   "pi_start_date": "2015-06-26",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Miami",
  "inst_street_address": "1320 SOUTH DIXIE HIGHWAY STE 650",
  "inst_street_address_2": "",
  "inst_city_name": "CORAL GABLES",
  "inst_state_code": "FL",
  "inst_state_name": "Florida",
  "inst_phone_num": "3052843924",
  "inst_zip_code": "331462919",
  "inst_country_name": "United States",
  "cong_dist_code": "27",
  "st_cong_dist_code": "FL27",
  "org_lgl_bus_name": "UNIVERSITY OF MIAMI",
  "org_prnt_uei_num": "",
  "org_uei_num": "RQMFJGDTQ5V3"
 },
 "perf_inst": {
  "perf_inst_name": "University of Miami",
  "perf_str_addr": "1365 Memorial Drive",
  "perf_city_name": "Coral Gables",
  "perf_st_code": "FL",
  "perf_st_name": "Florida",
  "perf_zip_code": "331248154",
  "perf_ctry_code": "US",
  "perf_cong_dist": "27",
  "perf_st_cong_dist": "FL27",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779600",
   "pgm_ele_name": "Algorithmic Foundations"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7929",
   "pgm_ref_txt": "COMPUTATIONAL GEOMETRY"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 249983.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 16000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Instead of building a physical object like a bridge or a computer chip and testing it, it is orders of magnitude cheaper to create a virtual version in the computer and test it computationally using geometric computation.&nbsp; In a computer, numerical computation is usually rounded, introducing rounding errors.&nbsp; Unfortunately, geometric computation is uniquely sensitive to numerical error.&nbsp; We have to be able to tell if a point is inside a triangle or outside or on the boundary.&nbsp; This means that that geometric computation requires exact arithmetic, which is much more expensive than rounded arithmetic.&nbsp; In several ways, the cost can be exponential in the number of steps, meaning the cost doubles with every step.&nbsp; This project addresses these exponential costs.<br />The first cost is the number of bits required to store the numbers.&nbsp; The naive approach is to perform the computation exactly but round the final coordinates.&nbsp; Unfortunately, this can cause the shape to overlap itself (Figure 1).&nbsp; Figure 1 shows several ways to resolve the overlap:&nbsp; allow the shape to ``melt'' into itself (c), allow it to touch itself but not overlap (d), or preserve the topology (e).&nbsp; The first two had been solved in 2D and the first in 3D.&nbsp; We developed a way of solving the second in 3D.&nbsp; When we discussed this solution with industry, particularly INTEL, we discovered the second was unsuitable for chip simulation.&nbsp; Electrical elements have to be kept separate and cannot touch.&nbsp; Also, the triangles could not be too small or too skinny.&nbsp; We developed a way to solve the third in 3D using linear programming to calculate a motion of the vertices that separated features as much as possible.<br />The second cost is that of computing numbers exactly, which also grows exponentially.&nbsp; Rounded computation is sufficient except for the boundary cases.&nbsp; If a point is not on the boundary of a triangle, then rounded arithmetic is good enough to determine if it is inside or outside.&nbsp; Each geometric computation can create new boundary cases (Figure 2).&nbsp; This meant that individual geometric computations would run swiftly, but if they were composed, the running time would not be additive but instead grow exponentially.&nbsp; Our solution is Probabilistic Degeneracy (boundary case) Detection.&nbsp; For a parameter k, we can detect a boundary case with probability 1/100000000 raised to the k, meaning the chance that we say it is a boundary case but it is not.<br />The new approach allows us to solve problems such as packing three polyhedra in a box or navigating a drone.&nbsp; The following link shows that an example of drone navigation that this approach can accomplish that is beyond standard robotics (PRM) methods: https://web.cs.miami.edu/home/arluck/skinny-lattice.&nbsp; Standard methods fail because they link two positions of the drone with an arm on either side of a pillar that would require the arm to pass through the pillar.<br />The third exponential cost involves curves and surfaces.&nbsp; The zero set of x^2 + y^2 = 1 is a circle.&nbsp; In general, a polynomial in x and y defines a curve and a polynomial in x,y,z defines a surface.&nbsp; Curves and surfaces are very important to define shapes.&nbsp; We want to figure out how a set of curves cut up a square or a set of surfaces cut up a cube.&nbsp; This is called their arrangement, and arrangement construction is a fundamental geometric operation for shape modeling.&nbsp; In this case, the numerical cost is proportional to the degree d (2 for the circle) raise to the dimension D (2 for a 2D circle).&nbsp; The cost is exponential in the dimension.&nbsp; One would think that D=3 would not be a problem, but no one had created a working exact arithmetic arrangement algorithm for surfaces.<br />Our approach is the encase the curves of the arrangement into polygons (Figure 4).&nbsp; Inside each polygon is a single curve or a pair of curves with a single intersection.&nbsp; Figure 4 shows a curve encasement in 2D.&nbsp; The encasement makes it simple to trace out the pieces of the square carved out by the curves.&nbsp; Our fundamental insight was that in 3D, we do not need to encase surfaces: we still only need to encase curves.&nbsp; Figures 5 and 6 show the outer and third layers of an arrangement of surfaces.&nbsp; The encasement enables us to reduce the cost of constructing the arrangement to that of finding all the vertices;&nbsp; points that three surfaces intersect, and this can be sped up by performing most of the computation in parallel on a graphics card (GPU).&nbsp; Thus we created the first algorithms and implementation for arrangements of surfaces in 3D.&nbsp; Because there is no way of avoiding the calculation of the vertices, it is also within a factor of two or three of the fastest possible solution.<br /><br /></p><br>\n<p>\n\t\t\t\t      \tLast Modified: 05/01/2021<br>\n\t\t\t\t\tModified by: Victor&nbsp;J&nbsp;Milenkovic</p>\n</div>\n<div class=\"porSideCol\">\n<div class=\"each-gallery\">\n<div class=\"galContent\" id=\"gallery0\">\n<div class=\"photoCount\" id=\"photoCount0\">\n\t\t\t\t\t\t\t\t\tImages (<span id=\"selectedPhoto0\">1</span> of <span class=\"totalNumber\"></span>)\t\t\n\t\t\t\t\t\t\t\t</div>\n<div class=\"galControls\" id=\"controls0\"></div>\n<div class=\"galSlideshow\" id=\"slideshow0\"></div>\n<div class=\"galEmbox\" id=\"embox\">\n<div class=\"image-title\"></div>\n</div>\n</div>\n<div class=\"galNavigation\" id=\"navigation0\">\n<ul class=\"thumbs\" id=\"thumbs0\">\n<li>\n<a href=\"/por/images/Reports/POR/2021/1526335/1526335_10372581_1619794629567_rounding--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2021/1526335/1526335_10372581_1619794629567_rounding--rgov-800width.jpg\" title=\"Rounding Techniques\"><img src=\"/por/images/Reports/POR/2021/1526335/1526335_10372581_1619794629567_rounding--rgov-66x44.jpg\" alt=\"Rounding Techniques\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Figure 1:  a) Object with high precision coordinates.  b) Coordinates rounding to lower precision.  c) Melting. d) Touching. e) Self-separation.</div>\n<div class=\"imageCredit\">Victor Milenkovic</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Victor&nbsp;J&nbsp;Milenkovic</div>\n<div class=\"imageTitle\">Rounding Techniques</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2021/1526335/1526335_10372581_1619795174774_hull--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2021/1526335/1526335_10372581_1619795174774_hull--rgov-800width.jpg\" title=\"New Boundary Cases\"><img src=\"/por/images/Reports/POR/2021/1526335/1526335_10372581_1619795174774_hull--rgov-66x44.jpg\" alt=\"New Boundary Cases\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Figure 2:  a) Red and blue polygon. b) Their intersection.  c) Convex hull (smallest enclosing polygon).  Points p2 and p3 lie on the boundary of the convex hull.</div>\n<div class=\"imageCredit\">Victor Milenkovic</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Victor&nbsp;J&nbsp;Milenkovic</div>\n<div class=\"imageTitle\">New Boundary Cases</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2021/1526335/1526335_10372581_1619795792282_4d2--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2021/1526335/1526335_10372581_1619795792282_4d2--rgov-800width.jpg\" title=\"Drone Navigation\"><img src=\"/por/images/Reports/POR/2021/1526335/1526335_10372581_1619795792282_4d2--rgov-66x44.jpg\" alt=\"Drone Navigation\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Figure 3:  X shaped drone navigates past narrow pillars on ramp.  For animation, see: https://web.cs.miami.edu/home/arluck/skinny-lattice</div>\n<div class=\"imageCredit\">Victor Milenkovic</div>\n<div class=\"imageSubmitted\">Victor&nbsp;J&nbsp;Milenkovic</div>\n<div class=\"imageTitle\">Drone Navigation</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2021/1526335/1526335_10372581_1619878944676_arr_face--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2021/1526335/1526335_10372581_1619878944676_arr_face--rgov-800width.jpg\" title=\"Curve Encasement\"><img src=\"/por/images/Reports/POR/2021/1526335/1526335_10372581_1619878944676_arr_face--rgov-66x44.jpg\" alt=\"Curve Encasement\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Figure 3:  Each polygon contains either a single segment or a pair of intersecting segments, allowing a face of the arrangement to be traced out (black).</div>\n<div class=\"imageCredit\">Milenkovic</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Victor&nbsp;J&nbsp;Milenkovic</div>\n<div class=\"imageTitle\">Curve Encasement</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2021/1526335/1526335_10372581_1619879431145_1--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2021/1526335/1526335_10372581_1619879431145_1--rgov-800width.jpg\" title=\"Surface arrangement outer layer\"><img src=\"/por/images/Reports/POR/2021/1526335/1526335_10372581_1619879431145_1--rgov-66x44.jpg\" alt=\"Surface arrangement outer layer\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Figure 5:  Outer later of surface arrangement..</div>\n<div class=\"imageCredit\">Victor Milenkovic</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Victor&nbsp;J&nbsp;Milenkovic</div>\n<div class=\"imageTitle\">Surface arrangement outer layer</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2021/1526335/1526335_10372581_1619879611949_3--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2021/1526335/1526335_10372581_1619879611949_3--rgov-800width.jpg\" title=\"Surface arrangment third layer\"><img src=\"/por/images/Reports/POR/2021/1526335/1526335_10372581_1619879611949_3--rgov-66x44.jpg\" alt=\"Surface arrangment third layer\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Figure 6:  Third layer of surface arrangement.</div>\n<div class=\"imageCredit\">Victor Milenkovic</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Victor&nbsp;J&nbsp;Milenkovic</div>\n<div class=\"imageTitle\">Surface arrangment third layer</div>\n</div>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>",
  "por_txt_cntn": "\nInstead of building a physical object like a bridge or a computer chip and testing it, it is orders of magnitude cheaper to create a virtual version in the computer and test it computationally using geometric computation.  In a computer, numerical computation is usually rounded, introducing rounding errors.  Unfortunately, geometric computation is uniquely sensitive to numerical error.  We have to be able to tell if a point is inside a triangle or outside or on the boundary.  This means that that geometric computation requires exact arithmetic, which is much more expensive than rounded arithmetic.  In several ways, the cost can be exponential in the number of steps, meaning the cost doubles with every step.  This project addresses these exponential costs.\nThe first cost is the number of bits required to store the numbers.  The naive approach is to perform the computation exactly but round the final coordinates.  Unfortunately, this can cause the shape to overlap itself (Figure 1).  Figure 1 shows several ways to resolve the overlap:  allow the shape to ``melt'' into itself (c), allow it to touch itself but not overlap (d), or preserve the topology (e).  The first two had been solved in 2D and the first in 3D.  We developed a way of solving the second in 3D.  When we discussed this solution with industry, particularly INTEL, we discovered the second was unsuitable for chip simulation.  Electrical elements have to be kept separate and cannot touch.  Also, the triangles could not be too small or too skinny.  We developed a way to solve the third in 3D using linear programming to calculate a motion of the vertices that separated features as much as possible.\nThe second cost is that of computing numbers exactly, which also grows exponentially.  Rounded computation is sufficient except for the boundary cases.  If a point is not on the boundary of a triangle, then rounded arithmetic is good enough to determine if it is inside or outside.  Each geometric computation can create new boundary cases (Figure 2).  This meant that individual geometric computations would run swiftly, but if they were composed, the running time would not be additive but instead grow exponentially.  Our solution is Probabilistic Degeneracy (boundary case) Detection.  For a parameter k, we can detect a boundary case with probability 1/100000000 raised to the k, meaning the chance that we say it is a boundary case but it is not.\nThe new approach allows us to solve problems such as packing three polyhedra in a box or navigating a drone.  The following link shows that an example of drone navigation that this approach can accomplish that is beyond standard robotics (PRM) methods: https://web.cs.miami.edu/home/arluck/skinny-lattice.  Standard methods fail because they link two positions of the drone with an arm on either side of a pillar that would require the arm to pass through the pillar.\nThe third exponential cost involves curves and surfaces.  The zero set of x^2 + y^2 = 1 is a circle.  In general, a polynomial in x and y defines a curve and a polynomial in x,y,z defines a surface.  Curves and surfaces are very important to define shapes.  We want to figure out how a set of curves cut up a square or a set of surfaces cut up a cube.  This is called their arrangement, and arrangement construction is a fundamental geometric operation for shape modeling.  In this case, the numerical cost is proportional to the degree d (2 for the circle) raise to the dimension D (2 for a 2D circle).  The cost is exponential in the dimension.  One would think that D=3 would not be a problem, but no one had created a working exact arithmetic arrangement algorithm for surfaces.\nOur approach is the encase the curves of the arrangement into polygons (Figure 4).  Inside each polygon is a single curve or a pair of curves with a single intersection.  Figure 4 shows a curve encasement in 2D.  The encasement makes it simple to trace out the pieces of the square carved out by the curves.  Our fundamental insight was that in 3D, we do not need to encase surfaces: we still only need to encase curves.  Figures 5 and 6 show the outer and third layers of an arrangement of surfaces.  The encasement enables us to reduce the cost of constructing the arrangement to that of finding all the vertices;  points that three surfaces intersect, and this can be sped up by performing most of the computation in parallel on a graphics card (GPU).  Thus we created the first algorithms and implementation for arrangements of surfaces in 3D.  Because there is no way of avoiding the calculation of the vertices, it is also within a factor of two or three of the fastest possible solution.\n\n\n\n\t\t\t\t\tLast Modified: 05/01/2021\n\n\t\t\t\t\tSubmitted by: Victor J Milenkovic"
 }
}