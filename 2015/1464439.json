{
 "awd_id": "1464439",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CRII: SHF: Automatic Extraction of Error-Handling Specifications in Systems Software",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2015-03-15",
 "awd_exp_date": "2018-09-30",
 "tot_intn_awd_amt": 175000.0,
 "awd_amount": 182500.0,
 "awd_min_amd_letter_date": "2015-03-23",
 "awd_max_amd_letter_date": "2016-07-18",
 "awd_abstract_narration": "Software error handling is the process of detecting and responding to\r\nthe occurrence of errors during the execution of a program. Ideally,\r\nwhenever a runtime error occurs, software systems should respond\r\naccording to the programmer?s intent. Unfortunately, that is often not\r\nthe case. Error-handling code is difficult to write, and tends to be\r\npoorly understood, poorly documented, and poorly tested.\r\nUnsurprisingly, error-handling code is often buggy. Bugs in software\r\nerror handlers are some of the most pervasive, dangerous, and\r\ndifficult to detect bugs. Incorrect error-handling is particularly\r\nalarming in systems software (e.g., the operating system) because user\r\napplications depend on the reliability of systems software. This\r\nresearch aims to gather a better understanding of error handling in\r\nsystems software through automatic inference of error-handling\r\nspecifications.\r\n\r\nError-handling specifications describe how the system detects and\r\nrecovers from errors. This research applies static program analysis\r\ntechniques to automatically infer error-handling specifications in\r\nsystems software. This task is particularly challenging because\r\nsystems software implements numerous failure policies, and\r\nerror-handling code is often diffused through the system. Furthermore,\r\nthe analysis of such large code bases often faces scalability\r\nproblems. Understanding existing error-handling strategies is the\r\nfirst step to ensure systems software is reliable. This understanding\r\nalso has the potential to lead to the development of new\r\nerror-handling mechanisms, and new programming language support for\r\nerror handling. Both of these could have a significant impact on\r\nsoftware reliability beyond systems software.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Cindy",
   "pi_last_name": "Rubio Gonzalez",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Cindy Rubio Gonzalez",
   "pi_email_addr": "crubio@ucdavis.edu",
   "nsf_id": "000678663",
   "pi_start_date": "2015-03-23",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of California-Davis",
  "inst_street_address": "1850 RESEARCH PARK DR STE 300",
  "inst_street_address_2": "",
  "inst_city_name": "DAVIS",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "5307547700",
  "inst_zip_code": "956186153",
  "inst_country_name": "United States",
  "cong_dist_code": "04",
  "st_cong_dist_code": "CA04",
  "org_lgl_bus_name": "UNIVERSITY OF CALIFORNIA, DAVIS",
  "org_prnt_uei_num": "",
  "org_uei_num": "TX2DAGQPENZ5"
 },
 "perf_inst": {
  "perf_inst_name": "University of California-Davis",
  "perf_str_addr": "1 Shields Avenue",
  "perf_city_name": "Davis",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "956165270",
  "perf_ctry_code": "US",
  "perf_cong_dist": "04",
  "perf_st_cong_dist": "CA04",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  },
  {
   "pgm_ref_code": "8228",
   "pgm_ref_txt": "CISE Resrch Initiatn Initiatve"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 175000.0
  },
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 7500.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Software error handling is the process of detecting and responding to the occurrence of errors during the execution of a program. Unfortunately, bugs in software error handlers are some of the most pervasive, dangerous, and difficult to detect bugs. Incorrect error-handling is particularly alarming in systems software (e.g., the operating system) because user applications depend on the reliability of systems software. In this project, we studied error handling and developed novel program analysis techniques to automatically infer specifications that describe how systems software handle errors.</p>\n<p>The contributions of this project include: (1) a formal definition of error-handling specifications, (2) a static analysis to identify error handling code in large software systems, (3) an specification mining technique to find error-handling specifications, and (4) an algorithm to compute vector embeddings for functions to find \"function synonyms\" that can be used to infer specifications with high support. In particular, we demonstrated that our approach can be used to find useful error-handling specifications in widely-used software such as Linux. The specifications provided a better understanding of error handling, and led to finding several previously unknown error-handling bugs in Linux. All bugs have been fixed by developers and the fixes are part of the current Linux distribution. In addition to our error-handling specification tool, we conducted empirical studies of error handling in user applications, which involved the development of a tool to select code changes relevant to error handling. The techniques and results have been published in top venues in Software Engineering, and our tools and data are publicly available.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 01/10/2019<br>\n\t\t\t\t\tModified by: Cindy&nbsp;Rubio Gonzalez</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nSoftware error handling is the process of detecting and responding to the occurrence of errors during the execution of a program. Unfortunately, bugs in software error handlers are some of the most pervasive, dangerous, and difficult to detect bugs. Incorrect error-handling is particularly alarming in systems software (e.g., the operating system) because user applications depend on the reliability of systems software. In this project, we studied error handling and developed novel program analysis techniques to automatically infer specifications that describe how systems software handle errors.\n\nThe contributions of this project include: (1) a formal definition of error-handling specifications, (2) a static analysis to identify error handling code in large software systems, (3) an specification mining technique to find error-handling specifications, and (4) an algorithm to compute vector embeddings for functions to find \"function synonyms\" that can be used to infer specifications with high support. In particular, we demonstrated that our approach can be used to find useful error-handling specifications in widely-used software such as Linux. The specifications provided a better understanding of error handling, and led to finding several previously unknown error-handling bugs in Linux. All bugs have been fixed by developers and the fixes are part of the current Linux distribution. In addition to our error-handling specification tool, we conducted empirical studies of error handling in user applications, which involved the development of a tool to select code changes relevant to error handling. The techniques and results have been published in top venues in Software Engineering, and our tools and data are publicly available.\n\n\t\t\t\t\tLast Modified: 01/10/2019\n\n\t\t\t\t\tSubmitted by: Cindy Rubio Gonzalez"
 }
}