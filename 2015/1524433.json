{
 "awd_id": "1524433",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "Small: Collaborative Research: Transform-to-Perform: Languages, Algorithms, and Code Transformations for High-Performance FEM",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927498",
 "po_email": "achtchel@nsf.gov",
 "po_sign_block_name": "Almadena Chtchelkanova",
 "awd_eff_date": "2015-07-15",
 "awd_exp_date": "2019-06-30",
 "tot_intn_awd_amt": 219408.0,
 "awd_amount": 219408.0,
 "awd_min_amd_letter_date": "2015-07-08",
 "awd_max_amd_letter_date": "2015-07-08",
 "awd_abstract_narration": "Simulation of natural and engineering phenomena is a multi-layered technical task with high demands on mathematical sophistication and computational power.  Producing a computer simulation code requires work at many different levels of detail.  A computer program should represent a scientific problem in a language close to that used by domain specialists, but this differs greatly from low-level, hardware-specific details of computers.  Bridging between the two requires several different links.  \r\nThis project sets up many intermediate software stages, called ?representations? modeling the domain knowledge of engineers, numerical analysts, and computer scientists by describing partial differential equations, the so-called weak forms needed for numerical methods, loop nests required to build discrete operations, and finally low-level code that can be executed by computers.  ?Transformations? are then programs connecting these representations, injecting knowledge about algorithms and hardware. The key advance in this research is that, through this chain of transformations, domain knowledge about each level of detail, be it application-related, numerical, or computational, can be supplied at the appropriate level of detail. The tools developed in this project promote the advancement of science by both shortening the development time and increasing the resulting power of high-performance simulation codes used by scientists and engineers, enabling them to impact the world.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Andreas",
   "pi_last_name": "Kloeckner",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Andreas Kloeckner",
   "pi_email_addr": "andreask@illinois.edu",
   "nsf_id": "000661715",
   "pi_start_date": "2015-07-08",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Illinois at Urbana-Champaign",
  "inst_street_address": "506 S WRIGHT ST",
  "inst_street_address_2": "",
  "inst_city_name": "URBANA",
  "inst_state_code": "IL",
  "inst_state_name": "Illinois",
  "inst_phone_num": "2173332187",
  "inst_zip_code": "618013620",
  "inst_country_name": "United States",
  "cong_dist_code": "13",
  "st_cong_dist_code": "IL13",
  "org_lgl_bus_name": "UNIVERSITY OF ILLINOIS",
  "org_prnt_uei_num": "V2PHZ2CSCH63",
  "org_uei_num": "Y8CWNJRCNN91"
 },
 "perf_inst": {
  "perf_inst_name": "University of Illinois at Urbana-Champaign",
  "perf_str_addr": "",
  "perf_city_name": "Champaign",
  "perf_st_code": "IL",
  "perf_st_name": "Illinois",
  "perf_zip_code": "618207473",
  "perf_ctry_code": "US",
  "perf_cong_dist": "13",
  "perf_st_cong_dist": "IL13",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7942",
   "pgm_ref_txt": "HIGH-PERFORMANCE COMPUTING"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 219408.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Scientific computing provides algorithms and tools to facilitate insight and accelerate discovery through simulation.&nbsp; In this realm, the numerical solution of partial differential equations (PDE) leads to some of the most challenging computational problems.&nbsp; Scientific software such as the FEniCS and Firedrake projects expedites fundamental research on numerical algorithms and advanced simulation of science and engineering problems.&nbsp; This project has made fundamental advances in the design and implementation of these tools that expedite and even automate the deployment of efficient algorithms for these problems, reducing the development time from months to hours for many applications.<br /><br />At the core of this project has been the idea of distinct representations of the various abstraction levels in a PDE code such as the mathematical equations, weak forms, loop nests, and scheduled operations tuned for a particular machine.&nbsp; Software-based transformations map from higher-level abstractions toward lower-level ones, injecting specialized knowledge at each step.<br /><br />Working in the context of the Firedrake project, several concrete advances have been made.&nbsp; A new tool, Loopy, that provides an architecture-netural description of loop-based programs, now serves as an intermediate layer between Firedrake's form compiler and code generation.&nbsp; It is already being used for advanced forms of performance optimization (such as vectorization) and is enabling users' existing code to work on new computer architectures such as GPUs.&nbsp; New models of the interaction between discretizations and algebraic solvers have enabled rapid deployment of scalable solver algorithms utilizing finite element representations without invasive modifications of application code. New transformations and approaches to code generation have greatly increased the performance envelope that can be reached, using our automation, from an abstract, high-level statement of a computational problem.&nbsp; The resulting tools have been applied to problems in fluid mechanics, chemical kinetics, tide modeling, and other domains.<br /><br />The intellectual merits of the proposed research lie in</p>\n<ol>\n<li>mapping out and extending the landscape of algorithmic variation in finite element computations,</li>\n<li>providing a unifying framework for reasoning about these algorithms,</li>\n<li>designing language and compiler foundations that implement this reasoning.</li>\n</ol>\n<p>The broader impacts of this work are threefold.</p>\n<ol>\n<li>Through these newly developed techniques, performance and fidelity of Firedrake-based simulations have been greatly improved at essentially no user cost.</li>\n<li>The PIs have trained mathematics and computer science graduate and undergraduate students in the multidisciplinary field of FEM theory, implementation, and usage, filling a crucial national competence need for global competitiveness in computational science.</li>\n<li>The open-source code for our tools is freely available online for the benefit of the scientific and engineering community and has seen considerable adoption across a range of application domains.</li>\n</ol><br>\n<p>\n\t\t\t\t      \tLast Modified: 09/12/2019<br>\n\t\t\t\t\tModified by: Andreas&nbsp;Kloeckner</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nScientific computing provides algorithms and tools to facilitate insight and accelerate discovery through simulation.  In this realm, the numerical solution of partial differential equations (PDE) leads to some of the most challenging computational problems.  Scientific software such as the FEniCS and Firedrake projects expedites fundamental research on numerical algorithms and advanced simulation of science and engineering problems.  This project has made fundamental advances in the design and implementation of these tools that expedite and even automate the deployment of efficient algorithms for these problems, reducing the development time from months to hours for many applications.\n\nAt the core of this project has been the idea of distinct representations of the various abstraction levels in a PDE code such as the mathematical equations, weak forms, loop nests, and scheduled operations tuned for a particular machine.  Software-based transformations map from higher-level abstractions toward lower-level ones, injecting specialized knowledge at each step.\n\nWorking in the context of the Firedrake project, several concrete advances have been made.  A new tool, Loopy, that provides an architecture-netural description of loop-based programs, now serves as an intermediate layer between Firedrake's form compiler and code generation.  It is already being used for advanced forms of performance optimization (such as vectorization) and is enabling users' existing code to work on new computer architectures such as GPUs.  New models of the interaction between discretizations and algebraic solvers have enabled rapid deployment of scalable solver algorithms utilizing finite element representations without invasive modifications of application code. New transformations and approaches to code generation have greatly increased the performance envelope that can be reached, using our automation, from an abstract, high-level statement of a computational problem.  The resulting tools have been applied to problems in fluid mechanics, chemical kinetics, tide modeling, and other domains.\n\nThe intellectual merits of the proposed research lie in\n\nmapping out and extending the landscape of algorithmic variation in finite element computations,\nproviding a unifying framework for reasoning about these algorithms,\ndesigning language and compiler foundations that implement this reasoning.\n\n\nThe broader impacts of this work are threefold.\n\nThrough these newly developed techniques, performance and fidelity of Firedrake-based simulations have been greatly improved at essentially no user cost.\nThe PIs have trained mathematics and computer science graduate and undergraduate students in the multidisciplinary field of FEM theory, implementation, and usage, filling a crucial national competence need for global competitiveness in computational science.\nThe open-source code for our tools is freely available online for the benefit of the scientific and engineering community and has seen considerable adoption across a range of application domains.\n\n\n\t\t\t\t\tLast Modified: 09/12/2019\n\n\t\t\t\t\tSubmitted by: Andreas Kloeckner"
 }
}