{
 "awd_id": "1543176",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "EAGER: Bringing Design Thinking into Developers' Coding Activities through an Architectural Tactic Recommender System",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2015-07-01",
 "awd_exp_date": "2017-06-30",
 "tot_intn_awd_amt": 80000.0,
 "awd_amount": 80000.0,
 "awd_min_amd_letter_date": "2015-05-19",
 "awd_max_amd_letter_date": "2015-05-19",
 "awd_abstract_narration": "The success of any complex software-intensive system is highly dependent on the extent to which it addresses stakeholders' quality concerns such as reliability, availability, security and performance. Software architects utilize a rich set of proven and re-usable architectural solutions such as tactics and patterns to satisfy each specific quality attribute.  The objective of this research project is to develop a novel tactic-recommender system that is trained through learning from the source code of thousands of open-source software systems.\r\n \r\nThe project will include developing a set of novel big-data compatible architecture profilers that ?detect? and ?learn? architectural choices made by several developers across source codes of thousands of open-source systems. This knowledge is used to recommend architectural tactics fitting a new project.  This represents a paradigm shift in utilizing automated techniques to bring design thinking into developers? daily coding activities.  Unlike existing architecture design practices, which all involve a rigorous upfront analysis of the system's quality concerns, this research takes a bottom-up approach. It uses the latent domain topics in the source code and identifies not only architectural tactics/patterns missing in a given project but also recommends several high quality sample implementations of the tactics/patterns from open source software projects.  The findings of this research will partially address the current gap between design and implementation. \r\n\r\nThe broader impact of the work will be to improve the productivity of software development and to improve the quality and evolvability of software-intensive systems.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Mehdi",
   "pi_last_name": "Mirakhorli",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Mehdi Mirakhorli",
   "pi_email_addr": "mehdi23@hawaii.edu",
   "nsf_id": "000666901",
   "pi_start_date": "2015-05-19",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Rochester Institute of Tech",
  "inst_street_address": "1 LOMB MEMORIAL DR",
  "inst_street_address_2": "",
  "inst_city_name": "ROCHESTER",
  "inst_state_code": "NY",
  "inst_state_name": "New York",
  "inst_phone_num": "5854757987",
  "inst_zip_code": "146235603",
  "inst_country_name": "United States",
  "cong_dist_code": "25",
  "st_cong_dist_code": "NY25",
  "org_lgl_bus_name": "ROCHESTER INSTITUTE OF TECHNOLOGY",
  "org_prnt_uei_num": "",
  "org_uei_num": "J6TWTRKC1X14"
 },
 "perf_inst": {
  "perf_inst_name": "Rochester Institute of Tech",
  "perf_str_addr": "1 Lomb Memorial Drive",
  "perf_city_name": "Rochester",
  "perf_st_code": "NY",
  "perf_st_name": "New York",
  "perf_zip_code": "146235603",
  "perf_ctry_code": "US",
  "perf_cong_dist": "25",
  "perf_st_cong_dist": "NY25",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7916",
   "pgm_ref_txt": "EAGER"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 80000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span>The success of any complex software-intensive system is highly dependent on the extent to which it addresses stakeholders' quality concerns such as reliability, availability, security, and performance. Software architects utilize a rich set of proven and re-usable architectural solutions such as tactics and patterns to satisfy each specific quality attribute. The objective of this research project is to develop a novel tactic-recommender system that is trained through learning from the source code of thousands of open-source software systems.</span></p>\n<p>The project has resulted in a set of novel big-data compatible architecture profilers that \"detect\" and \"learn\" architectural choices made by several developers across source codes of thousands of open-source systems. This knowledge was then used to recommend architectural tactics fitting a new project. This work&nbsp;has created a paradigm shift in utilizing automated techniques to bring design thinking into developers' daily coding activities. Furthermore, the developed technologies can enhance programmers productivity while improving software qualities such as security, safety, and performance. Unlike existing architecture design practices, which all involve a rigorous upfront analysis of the system's quality concerns, the developed approach in this work, takes a bottom-up approach. It uses the latent domain topics in the source code and identifies not only architectural tactics/patterns missing in a given project but also recommends several high-quality sample implementations of the tactics/patterns from open source software projects. The findings of this research have&nbsp;helped to partially address the current gap between design and implementation.&nbsp;<br /><br />The broader impact of the work is the improvement in the productivity of software development, reduction in development costs and enhancement of quality and evolvability of software-intensive systems. Furthermore, this project has created educational materials to be used in the classroom, as well as data and tools which are shared by other researchers in the community.</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 09/21/2017<br>\n\t\t\t\t\tModified by: Mehdi&nbsp;Mirakhorli</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThe success of any complex software-intensive system is highly dependent on the extent to which it addresses stakeholders' quality concerns such as reliability, availability, security, and performance. Software architects utilize a rich set of proven and re-usable architectural solutions such as tactics and patterns to satisfy each specific quality attribute. The objective of this research project is to develop a novel tactic-recommender system that is trained through learning from the source code of thousands of open-source software systems.\n\nThe project has resulted in a set of novel big-data compatible architecture profilers that \"detect\" and \"learn\" architectural choices made by several developers across source codes of thousands of open-source systems. This knowledge was then used to recommend architectural tactics fitting a new project. This work has created a paradigm shift in utilizing automated techniques to bring design thinking into developers' daily coding activities. Furthermore, the developed technologies can enhance programmers productivity while improving software qualities such as security, safety, and performance. Unlike existing architecture design practices, which all involve a rigorous upfront analysis of the system's quality concerns, the developed approach in this work, takes a bottom-up approach. It uses the latent domain topics in the source code and identifies not only architectural tactics/patterns missing in a given project but also recommends several high-quality sample implementations of the tactics/patterns from open source software projects. The findings of this research have helped to partially address the current gap between design and implementation. \n\nThe broader impact of the work is the improvement in the productivity of software development, reduction in development costs and enhancement of quality and evolvability of software-intensive systems. Furthermore, this project has created educational materials to be used in the classroom, as well as data and tools which are shared by other researchers in the community.\n\n \n\n\t\t\t\t\tLast Modified: 09/21/2017\n\n\t\t\t\t\tSubmitted by: Mehdi Mirakhorli"
 }
}