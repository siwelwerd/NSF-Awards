{
 "awd_id": "1522546",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "NeTS: Small: Collaborative Research: Software Defined Network Function Virtualization (SDNFV) - Flexible, High Performance Network and Data Center Virtualization",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Darleen Fisher",
 "awd_eff_date": "2015-01-01",
 "awd_exp_date": "2018-09-30",
 "tot_intn_awd_amt": 250000.0,
 "awd_amount": 250000.0,
 "awd_min_amd_letter_date": "2014-12-16",
 "awd_max_amd_letter_date": "2014-12-16",
 "awd_abstract_narration": "Traditional computer networks have been built from hardware appliances, such as routers, firewalls, and switches, to implement functionality. These devices can process network packets at high speed, but provide little flexibility since they are based on purpose-built hardware. Recent improvements in multi-core processors and high-speed network interface cards have enabled Network Function Virtualization (NFV), which allows these network components to run instead on commodity compute servers.  NFV makes the network data processing elements run as software, allowing them to be deployed dynamically or easily modified and tuned with changes in network workloads.  At the same time, Software Defined Networking (SDN) has grown in popularity as a way to manage more easily network services by centralizing control plane functions.  This research investigates how the convergence of NFV and SDN can enable a new breed of highly dynamic network services for customers of Internet Service Providers (ISPs), and also grant cloud computing customers far greater control over data center resources.  The work will explore both the software mechanisms needed to support network components running at speeds well beyond 10 Gbps inside of virtual machines, and the algorithms and control architectures required to coordinate these components with high performance and low cost. \r\n\r\nThe project targets two application areas for Software Defined Network Function Virtualization (SDNFV). The first is dynamic services for network providers for which the principal investigators (PIs) are developing a SDNFV platform that enables line-rate packet processing within virtual machines by exploiting network interface controller (NIC) polling and shared memory for zero-copy communication. This flexible infrastructure will allow packets to be redirected based on complex policies, packet data, or service state, which is not currently possible in hardware-based solutions.  The second focus area is on cloud computing data centers in which SDNFV will enable cloud data center operators to easily partition and multiplex network resources in the same way they currently virtualize servers and storage devices. In this application area the PIs are developing virtualization-layer trust boundaries that provide strict performance and data isolation, while still permitting the optimizations required for SDNFV?s fast packet processing. They will also study the new resource management and scheduling algorithms required to ensure a group of virtual machine-based network services can meet their strict latency requirements. Finally the PIs will evaluate their ideas by building prototypes and testing them using realistic benchmark workloads and traces.\r\n\r\nThe proposed work has the potential to redefine how networks are built and managed, by transitioning away from single-purpose hardware to flexible software-based network components. This research could make the connected, digital world we rely on more efficient and more responsive to workload changes, attacks, and policy decisions.  The research will be paired with an educational program to enhance the networking and distributed systems curriculum at the researchers' institutions. This will help prepare undergraduate, Masters, and Ph.D. students to enter the work force with highly sought-after experience in the latest networking technologies.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Kadangode",
   "pi_last_name": "Ramakrishnan",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Kadangode Ramakrishnan",
   "pi_email_addr": "kkrama84@gmail.com",
   "nsf_id": "000662605",
   "pi_start_date": "2014-12-16",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of California-Riverside",
  "inst_street_address": "200 UNIVERSTY OFC BUILDING",
  "inst_street_address_2": "",
  "inst_city_name": "RIVERSIDE",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "9518275535",
  "inst_zip_code": "925210001",
  "inst_country_name": "United States",
  "cong_dist_code": "39",
  "st_cong_dist_code": "CA39",
  "org_lgl_bus_name": "REGENTS OF THE UNIVERSITY OF CALIFORNIA AT RIVERSIDE",
  "org_prnt_uei_num": "",
  "org_uei_num": "MR5QC5FCAVH5"
 },
 "perf_inst": {
  "perf_inst_name": "University of California-Riverside",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "925210001",
  "perf_ctry_code": "US",
  "perf_cong_dist": "39",
  "perf_st_cong_dist": "CA39",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "736300",
   "pgm_ele_name": "Networking Technology and Syst"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0114",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001415DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2014,
   "fund_oblg_amt": 250000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Networks are moving to be more software based, enabling them to be more flexible and nimbler, exploiting the capability of common-off-the-shelf (COTS) platforms to take advantage of their lower cost-performance curve. The overall goal of our project is to better integrate Software Defined Networks (SDN) and Network Function Virtualization (NFV) to create more efficient and powerful networks. We expect more of the traditional (and evolving) network middlebox network functionality will migrate to high-performance NFV middleboxes running in cloud data centers.</p>\n<p>Our effort has been towards building a \"Smart Dataplane\", that takes advantage of efficient NFV processing to allow middleboxes to both transform and reroute network flows. To build a smart data plane that is efficient and intelligent enough to make localized decisions, we have been developing new systems techniques that allow software-based networks to perform comparably to traditional hardware devices, and designing new protocols between SDN and NFV.&nbsp;</p>\n<p>To this end, we have developed the OpenNetVM NFV platform which uses Intel's Data Plane Development Kit (DPDK, whose development and support has since migrated to the Linux Foundation)) for efficient I/O, and Docker lightweight containers to provide the virtualization framework for Network Functions (like deep-packet inspection, caches, firewalls, intrusion detection systems, even switches, etc.). It has been released as an open-source (BSD license) software. This activity has been a joint effort involving both George Washington University and the University of California, Riverside. OpenNetVM provides high-level abstractions on an underlying framework that provides wire-speed performance. OpenNetVM runs network functions in lightweight containers, easily combined to form complex \"service chains\". &nbsp;The code is available at https://github.com/sdnfv/openNetVM and continues to be updated as we add new features and users report bugs.</p>\n<p>We have published a total of 18 conference and workshop papers, 3 journal papers, 2 demos, and 2 posters at conferences throughout the project. We have also given a total of 6 tutorials that were given by PI K. K. Ramakrishnan and PI Tim Wood at conferences and other venues. The project also had collaborations with researchers from industry, including those from HP, AT&amp;T, Huawei, IBM, and Intel. A number of other researchers use the OpenNetVM platform for their research, as evidenced by the OpenNetVM Github repository having187 clones, being forked 51 times, and having 7597 total views in the last 6 months. The project supported four Ph.D. students at UC Riverside at various stages (including one that visited for 6 months from Germany) and two M.S. students throughout the project.</p>\n<p>In this reporting period, we have developed NFVnice that provides primitives for scheduling, and scalability in OpenNetVM, thus enabling automated resource management for NFs. Given flows have different rates and packets of each flow can have varying service requirements, it is important to meet their processing needs in an efficient and fair manner. We seek to achieve both rate and cost proportional fair service for a large number of flows that may be supported by different service chains on a single OpenNetVM platform. We combine an enhanced scheduling algorithm along with a novel backpressure scheme within a system supporting the service chain. NFVNice ensures that resources are not wasted if a downstream NF is the bottleneck in the service chain and packets are dropped. While a major part of this work was published in ACM SIGCOMM 2017, we have continued this work to improve the latency impact of context switching and scheduling multiple NFs on a core. This has helped us understand the benefit of scheduling on the same core to derive the benefit of cache hits. On the other hand, when the processing on a CPU core is a bottleneck, it is better to allocate the NFs on different cores.</p>\n<p>In this reporting period, we have also used the OpenNetVM platform to implement a re-architected version of the Evolved Packet Core for next generation cellular networks.&nbsp; The current cellular architecture and protocols are complex, with a number of different entities (mobile device, base station, the packet gateways and mobility management) involved in setting up forwarding state for every session, and every flow ('bearer') across multiple entities in a consistent manner. With the use of smaller cell-sites with the next generation cellular technology (beyond 5G), user mobility will involve more frequent hand-offs. Further, there will be increased use of control messages for supporting Internet of Things traffic. We proposed CleanG, a simplified software-based architecture for the Evolved Packet Core (EPC) that consolidates the EPC control functions and enables a simplified control plane protocol, substantially reducing the number of control messages. CleanG exploits Network Function Virtualization to simplify the EPC architecture and allows dynamic management of capacity for the control plane to adapt to changing workloads. We have published 2 workshop papers and one conference paper is under submission.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 12/25/2018<br>\n\t\t\t\t\tModified by: Kadangode&nbsp;Ramakrishnan</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nNetworks are moving to be more software based, enabling them to be more flexible and nimbler, exploiting the capability of common-off-the-shelf (COTS) platforms to take advantage of their lower cost-performance curve. The overall goal of our project is to better integrate Software Defined Networks (SDN) and Network Function Virtualization (NFV) to create more efficient and powerful networks. We expect more of the traditional (and evolving) network middlebox network functionality will migrate to high-performance NFV middleboxes running in cloud data centers.\n\nOur effort has been towards building a \"Smart Dataplane\", that takes advantage of efficient NFV processing to allow middleboxes to both transform and reroute network flows. To build a smart data plane that is efficient and intelligent enough to make localized decisions, we have been developing new systems techniques that allow software-based networks to perform comparably to traditional hardware devices, and designing new protocols between SDN and NFV. \n\nTo this end, we have developed the OpenNetVM NFV platform which uses Intel's Data Plane Development Kit (DPDK, whose development and support has since migrated to the Linux Foundation)) for efficient I/O, and Docker lightweight containers to provide the virtualization framework for Network Functions (like deep-packet inspection, caches, firewalls, intrusion detection systems, even switches, etc.). It has been released as an open-source (BSD license) software. This activity has been a joint effort involving both George Washington University and the University of California, Riverside. OpenNetVM provides high-level abstractions on an underlying framework that provides wire-speed performance. OpenNetVM runs network functions in lightweight containers, easily combined to form complex \"service chains\".  The code is available at https://github.com/sdnfv/openNetVM and continues to be updated as we add new features and users report bugs.\n\nWe have published a total of 18 conference and workshop papers, 3 journal papers, 2 demos, and 2 posters at conferences throughout the project. We have also given a total of 6 tutorials that were given by PI K. K. Ramakrishnan and PI Tim Wood at conferences and other venues. The project also had collaborations with researchers from industry, including those from HP, AT&amp;T, Huawei, IBM, and Intel. A number of other researchers use the OpenNetVM platform for their research, as evidenced by the OpenNetVM Github repository having187 clones, being forked 51 times, and having 7597 total views in the last 6 months. The project supported four Ph.D. students at UC Riverside at various stages (including one that visited for 6 months from Germany) and two M.S. students throughout the project.\n\nIn this reporting period, we have developed NFVnice that provides primitives for scheduling, and scalability in OpenNetVM, thus enabling automated resource management for NFs. Given flows have different rates and packets of each flow can have varying service requirements, it is important to meet their processing needs in an efficient and fair manner. We seek to achieve both rate and cost proportional fair service for a large number of flows that may be supported by different service chains on a single OpenNetVM platform. We combine an enhanced scheduling algorithm along with a novel backpressure scheme within a system supporting the service chain. NFVNice ensures that resources are not wasted if a downstream NF is the bottleneck in the service chain and packets are dropped. While a major part of this work was published in ACM SIGCOMM 2017, we have continued this work to improve the latency impact of context switching and scheduling multiple NFs on a core. This has helped us understand the benefit of scheduling on the same core to derive the benefit of cache hits. On the other hand, when the processing on a CPU core is a bottleneck, it is better to allocate the NFs on different cores.\n\nIn this reporting period, we have also used the OpenNetVM platform to implement a re-architected version of the Evolved Packet Core for next generation cellular networks.  The current cellular architecture and protocols are complex, with a number of different entities (mobile device, base station, the packet gateways and mobility management) involved in setting up forwarding state for every session, and every flow ('bearer') across multiple entities in a consistent manner. With the use of smaller cell-sites with the next generation cellular technology (beyond 5G), user mobility will involve more frequent hand-offs. Further, there will be increased use of control messages for supporting Internet of Things traffic. We proposed CleanG, a simplified software-based architecture for the Evolved Packet Core (EPC) that consolidates the EPC control functions and enables a simplified control plane protocol, substantially reducing the number of control messages. CleanG exploits Network Function Virtualization to simplify the EPC architecture and allows dynamic management of capacity for the control plane to adapt to changing workloads. We have published 2 workshop papers and one conference paper is under submission.\n\n\t\t\t\t\tLast Modified: 12/25/2018\n\n\t\t\t\t\tSubmitted by: Kadangode Ramakrishnan"
 }
}