{
 "awd_id": "1452595",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CAREER: Evolutionary Data Systems",
 "cfda_num": "47.070",
 "org_code": "05020000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Maria Zemankova",
 "awd_eff_date": "2015-02-15",
 "awd_exp_date": "2020-01-31",
 "tot_intn_awd_amt": 550000.0,
 "awd_amount": 550000.0,
 "awd_min_amd_letter_date": "2015-01-23",
 "awd_max_amd_letter_date": "2019-01-31",
 "awd_abstract_narration": "We are entering the era of data deluge. Businesses, sciences and government organizations collect overwhelming amounts of data on a daily or even hourly basis. But data becomes useful information (knowledge) only after proper analysis. Data systems drive the analysis of data by servicing query requests. The way a system stores, accesses and processes data, defines the architecture of the data system. Over the past five decades the database research community and industry have designed numerous data systems architectures; a fundamental problem now is that there is no single data systems architecture that fits the ever-increasing kinds of data driven applications and scenarios. This is a critical problem for numerous reasons. First, anyone in need of a data system is confronted with numerous complex options, e.g., relational databases, NoSQL, NewSQL, column-stores, row-stores, and the list goes on. This overwhelming array of choices makes bootstrapping data-driven applications difficult and time consuming, requiring expertise often not accessible due to cost issues (e.g., to sciences or small businesses). Furthermore, many new kinds of data-driven applications are characterized by (a) varying workload patterns, i.e., varying patterns in data and queries and (b) new requirements in terms of interactive query processing and data exploration, i.e., when in need to quickly find useful knowledge in a big pile of data without a predefined exact goal. What these cases have in common is that one cannot tell a priori which data system architecture is the best fit as there is no predefined or fixed workload. An application may change over time and then a different architecture will be best. In short, this is a \"one size does not fit all world\" which sacrifices flexibility for performance.  However, as sciences and businesses increase their ability to collect more data and thus create more data-driven applications and scenarios, this model does not scale. The goal of this proposal is to maintain the performance characteristics of the \"one size does not fit all\" world, while adding the flexibility to effortlessly support emerging applications and varying workloads. \r\n\r\nThe researchers will study a new class of database architectures, evolutionary data systems, which evolve continuously to match the application's needs. The way data is stored and the way data is accessed changes to accommodate the data and query patterns. There is no need to make a priori complex set-up decisions, locking an application to a fixed system architecture that may soon become suboptimal due to workload changes. Instead, one starts using an evolutionary system simply by identifying the data. Then, as new data and queries come in, the system evolves such that its architecture matches the properties of the incoming workload. At any given point in time, an evolutionary system may employ multiple competing solutions down at the low level of database architectures such as using various combinations of data layouts, access methods and execution strategies. Then \"the fittest wins\" and becomes the dominant architecture until the environment (workload) changes. The researchers will demonstrate solutions that can seamlessly evolve (back and forth) between different architectures, i.e., from key-value stores to column-stores, from read-optimized to write-optimized systems and from structured to schema-free systems. In addition, the researchers will develop solutions for several key challenges: how systems evolve, management of overheads, how to extend an evolutionary system as well as comparison with brute force approaches.\r\n\r\nFor further information see the project web site at:  http://daslab.seas.harvard.edu/evosys",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "IIS",
 "org_div_long_name": "Division of Information & Intelligent Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Stratos",
   "pi_last_name": "Idreos",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Stratos Idreos",
   "pi_email_addr": "stratos@seas.harvard.edu",
   "nsf_id": "000669659",
   "pi_start_date": "2015-01-23",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Harvard University",
  "inst_street_address": "1033 MASSACHUSETTS AVE STE 3",
  "inst_street_address_2": "",
  "inst_city_name": "CAMBRIDGE",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "6174955501",
  "inst_zip_code": "021385366",
  "inst_country_name": "United States",
  "cong_dist_code": "05",
  "st_cong_dist_code": "MA05",
  "org_lgl_bus_name": "PRESIDENT AND FELLOWS OF HARVARD COLLEGE",
  "org_prnt_uei_num": "",
  "org_uei_num": "LN53LCFJFL45"
 },
 "perf_inst": {
  "perf_inst_name": "Harvard SEAS",
  "perf_str_addr": "33 Oxford Street, 139 MD",
  "perf_city_name": "Cambridge",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "021382933",
  "perf_ctry_code": "US",
  "perf_cong_dist": "05",
  "perf_st_cong_dist": "MA05",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "736400",
   "pgm_ele_name": "Info Integration & Informatics"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "1045",
   "pgm_ref_txt": "CAREER-Faculty Erly Career Dev"
  },
  {
   "pgm_ref_code": "7364",
   "pgm_ref_txt": "INFO INTEGRATION & INFORMATICS"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 100883.0
  },
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 110574.0
  },
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 114600.0
  },
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 109971.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 113972.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><div class=\"page\" title=\"Page 2\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<p><span>What do analytics, machine learning, data science, and big data systems have in common? What is the major common component for astronomy, biology, neuroscience, and all other data-driven and computational sciences? Data structures.</span></p>\n<div class=\"page\" title=\"Page 2\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<p><span>Data structures are one of the most fundamental areas of computer science.&nbsp;</span>Since the early days of computer science, dozens of new data structures are published every year. The pace has increased over the last decade, with 50-80 new data structures yearly. This is because of 1) the growth of data, 2) the increasing number of data-driven applications, 3) more fields moving to a computational paradigm where data collection, storage, and analysis become critical, and 4) hardware changes that require a complete redesign of data structures and algorithms.&nbsp;</p>\n<div class=\"page\" title=\"Page 3\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<p><span>There are so many di</span><span>ff</span><span>erent ways to design a data structure and so many moving targets that it has become a notoriously hard problem; it takes several months even for experts to design and optimize a new structure.&nbsp;</span>For data-driven fields without computer science expertise, these low-level choices are impossible to make. The only viable solution is using suboptimal off-the-shelf designs or hiring expensive experts. Data science pipelines in astronomy, biology, neuroscience, chemistry, and other emerging data-driven scientific fields exhibit exactly those characteristics. Similarly, for both established companies and data-driven startups, this complexity leads to a slow design process and has severe cost side-effects. Time to market is of extreme importance, so data structure design stops when a design &ldquo;is due&rdquo; and only rarely when it &ldquo;is ready&rdquo;. Finally, in today&rsquo;s cloud-based world even slightly sub-optimal designs, e.g., by 1%, translate to a massive loss in energy utilization for the cloud provider and cloud expenses for the users/applications.</p>\n<p>Our work in this project takes a fundamentally different approach to data structure design. There are four critical outcomes:&nbsp;</p>\n<p>1) We introduced a design engine, the Data Calculator, which enables interactive and semi-automated design of data structures. It brings two innovations. First, it offers a set of fine-grained design primitives that capture the first principles of data layout design: how data structure nodes lay data out, and how they are positioned relative to each other. This allows for a structured description of the universe of possible data structure designs that can be synthesized as combinations of those primitives. The second innovation is the computation of performance using learned cost models. These models are trained on diverse hardware and data profiles and capture the cost properties of fundamental data access primitives. With these models, we synthesize the performance cost of complex operations on arbitrary data structure designs without having to: 1) implement the data structure, 2) run the workload, or even 3) access the target hardware.&nbsp;</p>\n<p>2) We organized the existing and possible design space of data structures into the Periodic Table of Data Structures. This can be used as a tool to accelerate research (similarly to the periodic table in Chemistry).&nbsp;</p>\n<div class=\"page\" title=\"Page 1\">\n<div class=\"section\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<p><span>3) To accelerate automated search for the best possible design among the vast space of data structure designs formed by the first principles, we introduced the concept of design continuums</span>. A design continuum unifies major distinct data structure designs under the same model. The critical insight and potential long-term impact is that such unifying models 1) render what we consider up to now as fundamentally different data structures to be seen as &ldquo;views&rdquo; of the very same overall design space, and 2) allow &ldquo;seeing&rdquo; new data structure designs with performance properties that are not feasible by existing designs. We show how to construct, evaluate, and expand, design continuums, and we also present the first continuum that unifies major data structure designs.</p>\n<p>4) Using the formalization of the design space, we have discovered a series of new data structure designs for NoSQL stores, which are critical for a massive number of everyday applications in science and business.&nbsp;</p>\n</div>\n</div>\n</div>\n</div>\n<p>Overall, we demonstrate that the formalization of the design space of data structures and the Data Calculator can assist data structure designers and researchers by accurately answering rich what-if design questions on the order of a few seconds or minutes, i.e., computing how the performance (response time) of a given data structure design is impacted by variations in the: 1) design, 2) hardware, 3) data, and 4) query workloads. This makes it effortless to test numerous designs and ideas before embarking on lengthy implementation, deployment, and hardware acquisition steps. We also demonstrate that the Data Calculator can synthesize entirely new designs, auto-complete partial designs, and detect suboptimal design choices.&nbsp;</p>\n<p>&nbsp;</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<p><span><br /></span></p>\n</div>\n</div>\n</div><br>\n<p>\n\t\t\t\t      \tLast Modified: 03/13/2020<br>\n\t\t\t\t\tModified by: Stratos&nbsp;Idreos</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n\n\n\nWhat do analytics, machine learning, data science, and big data systems have in common? What is the major common component for astronomy, biology, neuroscience, and all other data-driven and computational sciences? Data structures.\n\n\n\n\nData structures are one of the most fundamental areas of computer science. Since the early days of computer science, dozens of new data structures are published every year. The pace has increased over the last decade, with 50-80 new data structures yearly. This is because of 1) the growth of data, 2) the increasing number of data-driven applications, 3) more fields moving to a computational paradigm where data collection, storage, and analysis become critical, and 4) hardware changes that require a complete redesign of data structures and algorithms. \n\n\n\n\nThere are so many different ways to design a data structure and so many moving targets that it has become a notoriously hard problem; it takes several months even for experts to design and optimize a new structure. For data-driven fields without computer science expertise, these low-level choices are impossible to make. The only viable solution is using suboptimal off-the-shelf designs or hiring expensive experts. Data science pipelines in astronomy, biology, neuroscience, chemistry, and other emerging data-driven scientific fields exhibit exactly those characteristics. Similarly, for both established companies and data-driven startups, this complexity leads to a slow design process and has severe cost side-effects. Time to market is of extreme importance, so data structure design stops when a design \"is due\" and only rarely when it \"is ready\". Finally, in today\u2019s cloud-based world even slightly sub-optimal designs, e.g., by 1%, translate to a massive loss in energy utilization for the cloud provider and cloud expenses for the users/applications.\n\nOur work in this project takes a fundamentally different approach to data structure design. There are four critical outcomes: \n\n1) We introduced a design engine, the Data Calculator, which enables interactive and semi-automated design of data structures. It brings two innovations. First, it offers a set of fine-grained design primitives that capture the first principles of data layout design: how data structure nodes lay data out, and how they are positioned relative to each other. This allows for a structured description of the universe of possible data structure designs that can be synthesized as combinations of those primitives. The second innovation is the computation of performance using learned cost models. These models are trained on diverse hardware and data profiles and capture the cost properties of fundamental data access primitives. With these models, we synthesize the performance cost of complex operations on arbitrary data structure designs without having to: 1) implement the data structure, 2) run the workload, or even 3) access the target hardware. \n\n2) We organized the existing and possible design space of data structures into the Periodic Table of Data Structures. This can be used as a tool to accelerate research (similarly to the periodic table in Chemistry). \n\n\n\n\n\n3) To accelerate automated search for the best possible design among the vast space of data structure designs formed by the first principles, we introduced the concept of design continuums. A design continuum unifies major distinct data structure designs under the same model. The critical insight and potential long-term impact is that such unifying models 1) render what we consider up to now as fundamentally different data structures to be seen as \"views\" of the very same overall design space, and 2) allow \"seeing\" new data structure designs with performance properties that are not feasible by existing designs. We show how to construct, evaluate, and expand, design continuums, and we also present the first continuum that unifies major data structure designs.\n\n4) Using the formalization of the design space, we have discovered a series of new data structure designs for NoSQL stores, which are critical for a massive number of everyday applications in science and business. \n\n\n\n\n\nOverall, we demonstrate that the formalization of the design space of data structures and the Data Calculator can assist data structure designers and researchers by accurately answering rich what-if design questions on the order of a few seconds or minutes, i.e., computing how the performance (response time) of a given data structure design is impacted by variations in the: 1) design, 2) hardware, 3) data, and 4) query workloads. This makes it effortless to test numerous designs and ideas before embarking on lengthy implementation, deployment, and hardware acquisition steps. We also demonstrate that the Data Calculator can synthesize entirely new designs, auto-complete partial designs, and detect suboptimal design choices. \n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\t\t\tLast Modified: 03/13/2020\n\n\t\t\t\t\tSubmitted by: Stratos Idreos"
 }
}