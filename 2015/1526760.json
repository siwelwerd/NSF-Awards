{
 "awd_id": "1526760",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: IsoLator: Avoiding Isomorphic Graphs Effectively",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927991",
 "po_email": "namla@nsf.gov",
 "po_sign_block_name": "Nina Amla",
 "awd_eff_date": "2015-07-01",
 "awd_exp_date": "2019-06-30",
 "tot_intn_awd_amt": 500000.0,
 "awd_amount": 500000.0,
 "awd_min_amd_letter_date": "2015-06-24",
 "awd_max_amd_letter_date": "2015-06-24",
 "awd_abstract_narration": "Over the last two decades, the speed and capacity of Satisfiability (SAT) solvers has improved by several orders of magnitude, which enabled the verification and analysis of larger and more complex real world systems. However, a weaknesses  of contemporary SAT solvers is their limited ability to obviate needless exploration of isomorphic parts of the search space. This research investigates an approach to significantly improve the performance of SAT solvers when applied to problems of graph theory. \r\n\r\nThe approach taken in this project focuses on breaking all symmetries of SAT encodings of graph-related problems. The key new concept is the notion of isolators: propositional formulas that avoid evaluating multiple graphs in an isomorphism class. The project investigates several foundational questions: (1) how to construct perfect isolators which break all symmetries? (2) whether perfect isolators that are polynomial in the size of the corresponding graph problem exist? and (3) how perfect isolators boost SAT solver performance on hard graph-related problems?",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Marienus",
   "pi_last_name": "Heule",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Marienus Heule",
   "pi_email_addr": "marijn@cmu.edu",
   "nsf_id": "000689986",
   "pi_start_date": "2015-06-24",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Texas at Austin",
  "inst_street_address": "110 INNER CAMPUS DR",
  "inst_street_address_2": "",
  "inst_city_name": "AUSTIN",
  "inst_state_code": "TX",
  "inst_state_name": "Texas",
  "inst_phone_num": "5124716424",
  "inst_zip_code": "787121139",
  "inst_country_name": "United States",
  "cong_dist_code": "25",
  "st_cong_dist_code": "TX25",
  "org_lgl_bus_name": "UNIVERSITY OF TEXAS AT AUSTIN",
  "org_prnt_uei_num": "",
  "org_uei_num": "V6AFQPN18437"
 },
 "perf_inst": {
  "perf_inst_name": "University of Texas at Austin",
  "perf_str_addr": "101 E. 27th Street, Suite 5.300",
  "perf_city_name": "Austin",
  "perf_st_code": "TX",
  "perf_st_name": "Texas",
  "perf_zip_code": "787121532",
  "perf_ctry_code": "US",
  "perf_cong_dist": "25",
  "perf_st_cong_dist": "TX25",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "8206",
   "pgm_ref_txt": "Formal Methods and Verification"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 500000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><!-- p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 14.0px Helvetica; color: #000000} p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 14.0px Helvetica; color: #000000; min-height: 17.0px} --> <!-- p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 14.0px Helvetica; color: #000000} p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 14.0px Helvetica; color: #000000; min-height: 17.0px} --><!-- p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 14.0px Helvetica; color: #000000} p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 14.0px Helvetica; color: #000000; min-height: 17.0px} -->\n<p class=\"p1\">Automated reasoning tools have become very powerful in the last decade. These tools enable solving hard problems in academia and industry automatically. However, the effectiveness of automated reasoning can be significantly reduced if a problem contains many symmetries. To deal with this weakness, this project studied and developed novel ways to break symmetries. Additionally, the project focused on proving correctness of symmetry-breaking procedures to ensure high confidence in results obtained by symmetry breaking.</p>\n<p class=\"p1\">Many problems in mathematics, as well as planning and scheduling instances, can be expressed as graph problems. Applying existing symmetry-breaking techniques to graph problems breaks symmetries only partially. As a consequence, automated reasoning tools explore equivalent (isomorphic) parts of the search space multiple times redundantly. In this project we developed perfect symmetry breaking for graph problems to counter this issue. One of the interesting outcomes of this project is that perfect symmetry-breaking constraints can be compact (at least for small graphs).</p>\n<p class=\"p1\">Since symmetry breaking reduces the number of solutions one cannot apply the most commonly used proof system to show correctness of symmetry-breaking techniques. We designed new proof systems that allow succinct expression of automated reasoning techniques, including symmetry breaking, and developed a tool chain that uses a formally verified checker to validate the proofs. The checker is used in international competitive events for automated reasoning tools. It has also been used to prove correctness of various results obtained by automated reasoning in academia and industry.&nbsp;</p>\n<p class=\"p1\">For example, we showed that Schur number five is 160, a problem that was open for over a century. Issai Schur proved in 1916 that any coloring of the natural numbers with a finite number of colors results in a monochromatic solution of the equation a + b = c. Schur number five covers the transition point when using five colors. Our proof is 2 petabytes in size and includes the symmetry breaking that was required to solve the problem. Although the proof is enormous---and arguably the largest math proof ever---we were able to validate it using the formally verified checker.&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 10/27/2019<br>\n\t\t\t\t\tModified by: Marienus&nbsp;Heule</p>\n</div>\n<div class=\"porSideCol\">\n<div class=\"each-gallery\">\n<div class=\"galContent\" id=\"gallery0\">\n<div class=\"photoCount\" id=\"photoCount0\">\n\t\t\t\t\t\t\t\t\tImages (<span id=\"selectedPhoto0\">1</span> of <span class=\"totalNumber\"></span>)\t\t\n\t\t\t\t\t\t\t\t</div>\n<div class=\"galControls\" id=\"controls0\"></div>\n<div class=\"galSlideshow\" id=\"slideshow0\"></div>\n<div class=\"galEmbox\" id=\"embox\">\n<div class=\"image-title\"></div>\n</div>\n</div>\n<div class=\"galNavigation\" id=\"navigation0\">\n<ul class=\"thumbs\" id=\"thumbs0\">\n<li>\n<a href=\"/por/images/Reports/POR/2019/1526760/1526760_10371902_1572216860830_CNP-553--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2019/1526760/1526760_10371902_1572216860830_CNP-553--rgov-800width.jpg\" title=\"ChromaticNumberPlane553\"><img src=\"/por/images/Reports/POR/2019/1526760/1526760_10371902_1572216860830_CNP-553--rgov-66x44.jpg\" alt=\"ChromaticNumberPlane553\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">This image shows the first unit-distance graph with chromatic number five consisting of \"only\" 553 vertices and 2722 edges. Published in: Marijn J. H. Heule (2018).Computing Small Unit-Distance Graphs with Chromatic Number 5.Geombinatorics XXVIII(1): 32-50.</div>\n<div class=\"imageCredit\">Marijn Heule</div>\n<div class=\"imagePermisssions\">Royalty-free (unrestricted use)</div>\n<div class=\"imageSubmitted\">Marienus&nbsp;Heule</div>\n<div class=\"imageTitle\">ChromaticNumberPlane553</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2019/1526760/1526760_10371902_1572200623515_W_9_3_763--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2019/1526760/1526760_10371902_1572200623515_W_9_3_763--rgov-800width.jpg\" title=\"Spiky Rose\"><img src=\"/por/images/Reports/POR/2019/1526760/1526760_10371902_1572200623515_W_9_3_763--rgov-66x44.jpg\" alt=\"Spiky Rose\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Visualization of a van der Waerden certificate W(9, 3, 763) showing the improved lower bound for van der Wearden number W(9, 3). Published in: Marijn J. H. Heule (2017).Avoiding Triples in Arithmetic Progression.Journal of Combinatorics 8(3): 391-422.</div>\n<div class=\"imageCredit\">Marijn Heule</div>\n<div class=\"imageSubmitted\">Marienus&nbsp;Heule</div>\n<div class=\"imageTitle\">Spiky Rose</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2019/1526760/1526760_10371902_1572200442833_W_5_3_170--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2019/1526760/1526760_10371902_1572200442833_W_5_3_170--rgov-800width.jpg\" title=\"Lone Star\"><img src=\"/por/images/Reports/POR/2019/1526760/1526760_10371902_1572200442833_W_5_3_170--rgov-66x44.jpg\" alt=\"Lone Star\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Visualization of a van der Waerden certificate W(5, 3, 170) showing the improved lower bound for van der Wearden number W(5, 3). Published in: Marijn J. H. Heule (2017).Avoiding Triples in Arithmetic Progression.Journal of Combinatorics 8(3): 391-422.</div>\n<div class=\"imageCredit\">Marijn Heule</div>\n<div class=\"imagePermisssions\">Royalty-free (unrestricted use)</div>\n<div class=\"imageSubmitted\">Marienus&nbsp;Heule</div>\n<div class=\"imageTitle\">Lone Star</div>\n</div>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>",
  "por_txt_cntn": "\nAutomated reasoning tools have become very powerful in the last decade. These tools enable solving hard problems in academia and industry automatically. However, the effectiveness of automated reasoning can be significantly reduced if a problem contains many symmetries. To deal with this weakness, this project studied and developed novel ways to break symmetries. Additionally, the project focused on proving correctness of symmetry-breaking procedures to ensure high confidence in results obtained by symmetry breaking.\nMany problems in mathematics, as well as planning and scheduling instances, can be expressed as graph problems. Applying existing symmetry-breaking techniques to graph problems breaks symmetries only partially. As a consequence, automated reasoning tools explore equivalent (isomorphic) parts of the search space multiple times redundantly. In this project we developed perfect symmetry breaking for graph problems to counter this issue. One of the interesting outcomes of this project is that perfect symmetry-breaking constraints can be compact (at least for small graphs).\nSince symmetry breaking reduces the number of solutions one cannot apply the most commonly used proof system to show correctness of symmetry-breaking techniques. We designed new proof systems that allow succinct expression of automated reasoning techniques, including symmetry breaking, and developed a tool chain that uses a formally verified checker to validate the proofs. The checker is used in international competitive events for automated reasoning tools. It has also been used to prove correctness of various results obtained by automated reasoning in academia and industry. \nFor example, we showed that Schur number five is 160, a problem that was open for over a century. Issai Schur proved in 1916 that any coloring of the natural numbers with a finite number of colors results in a monochromatic solution of the equation a + b = c. Schur number five covers the transition point when using five colors. Our proof is 2 petabytes in size and includes the symmetry breaking that was required to solve the problem. Although the proof is enormous---and arguably the largest math proof ever---we were able to validate it using the formally verified checker. \n\n\t\t\t\t\tLast Modified: 10/27/2019\n\n\t\t\t\t\tSubmitted by: Marienus Heule"
 }
}