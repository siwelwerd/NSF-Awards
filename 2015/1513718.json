{
 "awd_id": "1513718",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CSR: Medium: Eidetic Systems",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032925197",
 "po_email": "mmcclure@nsf.gov",
 "po_sign_block_name": "Marilyn McClure",
 "awd_eff_date": "2015-10-01",
 "awd_exp_date": "2019-09-30",
 "tot_intn_awd_amt": 699999.0,
 "awd_amount": 699999.0,
 "awd_min_amd_letter_date": "2015-09-16",
 "awd_max_amd_letter_date": "2016-09-21",
 "awd_abstract_narration": "The vast majority of state produced by a typical computer is generated, consumed, and then lost forever.  Lost state includes process address spaces, deleted files, interprocess communication, and input received from the network.  With lost state comes lost value: users cannot recover detailed information about past computations that would be useful for auditing, forensics, debugging, error tracking, and many other purposes.\r\n\r\nTo solve this problem, this project is developing eidetic computer systems that can recall, on demand, any past state that existed on a computer, including all versions of all files, transient application state, and network communication.  Further, eidetic computer systems can explain the provenance of current and past state at byte granularity: for example, they can answer questions such as \"Where did this data come from and what steps were used to derive the data?\" or \"What state or outputs did this data influence?\"\r\n\r\nThe proposed work is deploying several important system features that utilize eidetic systems: (1) Total recall: a computer system can recover not just any prior data saved to disk (as in versioning file systems), but also any prior application state, transient output, or computation state.  (2) Complete provenance: for any data object, the system can provide the history of how that data was produced, including inter-process channels and the computations that transformed the data.  (3) Rich queries: users can reason over the entire history of execution to detect anomalies, recover workflows, and improve productivity.  (4) Replay-structured storage: network usage can be reduced by deterministically regenerating file data at endpoints, and storage usage can be reduced by opportunistically deduplicating logs of non-deterministic inputs rather than file data. (5) Privacy-preserving replay: provenance can enable comprehensive deletion policies in which all values derived from sensitive data are identified and redacted.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Jason",
   "pi_last_name": "Flinn",
   "pi_mid_init": "N",
   "pi_sufx_name": "",
   "pi_full_name": "Jason N Flinn",
   "pi_email_addr": "jflinn@umich.edu",
   "nsf_id": "000096770",
   "pi_start_date": "2015-09-16",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Peter",
   "pi_last_name": "Chen",
   "pi_mid_init": "M",
   "pi_sufx_name": "",
   "pi_full_name": "Peter M Chen",
   "pi_email_addr": "pmchen@umich.edu",
   "nsf_id": "000119730",
   "pi_start_date": "2015-09-16",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Regents of the University of Michigan - Ann Arbor",
  "inst_street_address": "1109 GEDDES AVE STE 3300",
  "inst_street_address_2": "",
  "inst_city_name": "ANN ARBOR",
  "inst_state_code": "MI",
  "inst_state_name": "Michigan",
  "inst_phone_num": "7347636438",
  "inst_zip_code": "481091015",
  "inst_country_name": "United States",
  "cong_dist_code": "06",
  "st_cong_dist_code": "MI06",
  "org_lgl_bus_name": "REGENTS OF THE UNIVERSITY OF MICHIGAN",
  "org_prnt_uei_num": "",
  "org_uei_num": "GNJ7BBP73WE9"
 },
 "perf_inst": {
  "perf_inst_name": "University of Michigan Ann Arbor",
  "perf_str_addr": "2260 Hayward St., Rm.4641, BBB",
  "perf_city_name": "Ann Arbor",
  "perf_st_code": "MI",
  "perf_st_name": "Michigan",
  "perf_zip_code": "481092121",
  "perf_ctry_code": "US",
  "perf_cong_dist": "06",
  "perf_st_cong_dist": "MI06",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 467404.0
  },
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 232595.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-9f67dc33-7fff-8e04-d2c2-622cf29d76aa\"> </span></p>\n<p dir=\"ltr\"><span>This project developed operating systems support to transform general-purpose computer into eidetic systems and explore the possibilities created by this transformation.&nbsp;</span></p>\n<p dir=\"ltr\"><span>An eidetic system is one that can recall any past state that existed on a computer, including all versions of all files, the memory and register states of processes, interprocess communication, and network input.&nbsp; Further, an eidetic system can explain the provenance of each byte of current and past state.</span></p>\n<p dir=\"ltr\"><span>We developed eidetic systems that allow users to express rich and interactive queries over past state and provenance.&nbsp; For example, users might ask: \"On what inputs, state, and execution does this data depend?\" or \"What other state did this data affect?\"&nbsp; More complex queries could reveal anomalous behavior, continuously evaluate predicates over the state of the system, or reveal opportunities for automation or optimization in frequent user workflows.&nbsp; We then explored how these queries could be dramatically accelerated by parallelizing them across a cluster of computers.</span></p>\n<p dir=\"ltr\"><span>We next proposed new methods for long-term, cold storage based on the observation that the log of nondeterministic events, rather than file data, is the fundamental unit of storage in eidetic systems.&nbsp; This enables an equivalency between storage and computation that can be used to reduce communication and/or storage costs.  Rather than storing file data, a storage system can store a more compact \"recipe\" of non-deterministic events that can be used to regenerate the file data on demand.</span></p>\n<p dir=\"ltr\"><span>We then used eidetic properties to enable new methods of debugging complex computing systems.&nbsp; Users can express new types of queries over program properties such as adding retroactive logging or expressing invariants that are evaluated continuously over all states of the computer program; eidetic systems allow such queries to be evaluated on past executions and parallelized across a cluster of computers for efficiency.</span></p>\n<p dir=\"ltr\"><span>Finally, we used eidetic systems to proposed new methods for optimizing computer programs.&nbsp; Our work showed that it is possible to vastly accelerate mostly-deterministic code regions through partial memoization of similar executions.&nbsp; Our work separates such regions into determinisitic and non-deterministic regions, using memoization for the deterministic portions and program slicing for the non-deterministic regions.</span></p>\n<p dir=\"ltr\"><span>The project has helped train Ph.d. students who have graduated and taken prestigious positions in the US computer industry and US academic institutions.&nbsp; The source code developed by the project has been released with an open-source license and has been used by other researchers in their published results and on other government-funded projects.</span></p>\n<p><br /><br /></p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 12/29/2019<br>\n\t\t\t\t\tModified by: Jason&nbsp;N&nbsp;Flinn</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n \nThis project developed operating systems support to transform general-purpose computer into eidetic systems and explore the possibilities created by this transformation. \nAn eidetic system is one that can recall any past state that existed on a computer, including all versions of all files, the memory and register states of processes, interprocess communication, and network input.  Further, an eidetic system can explain the provenance of each byte of current and past state.\nWe developed eidetic systems that allow users to express rich and interactive queries over past state and provenance.  For example, users might ask: \"On what inputs, state, and execution does this data depend?\" or \"What other state did this data affect?\"  More complex queries could reveal anomalous behavior, continuously evaluate predicates over the state of the system, or reveal opportunities for automation or optimization in frequent user workflows.  We then explored how these queries could be dramatically accelerated by parallelizing them across a cluster of computers.\nWe next proposed new methods for long-term, cold storage based on the observation that the log of nondeterministic events, rather than file data, is the fundamental unit of storage in eidetic systems.  This enables an equivalency between storage and computation that can be used to reduce communication and/or storage costs.  Rather than storing file data, a storage system can store a more compact \"recipe\" of non-deterministic events that can be used to regenerate the file data on demand.\nWe then used eidetic properties to enable new methods of debugging complex computing systems.  Users can express new types of queries over program properties such as adding retroactive logging or expressing invariants that are evaluated continuously over all states of the computer program; eidetic systems allow such queries to be evaluated on past executions and parallelized across a cluster of computers for efficiency.\nFinally, we used eidetic systems to proposed new methods for optimizing computer programs.  Our work showed that it is possible to vastly accelerate mostly-deterministic code regions through partial memoization of similar executions.  Our work separates such regions into determinisitic and non-deterministic regions, using memoization for the deterministic portions and program slicing for the non-deterministic regions.\nThe project has helped train Ph.d. students who have graduated and taken prestigious positions in the US computer industry and US academic institutions.  The source code developed by the project has been released with an open-source license and has been used by other researchers in their published results and on other government-funded projects.\n\n\n\n\n\n \n\n\t\t\t\t\tLast Modified: 12/29/2019\n\n\t\t\t\t\tSubmitted by: Jason N Flinn"
 }
}