{
 "awd_id": "1526253",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "NeTS: Small: Systematically and Scalably Testing Network Programs through Symbolic Exploration of Packet Dynamics",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Darleen Fisher",
 "awd_eff_date": "2015-10-01",
 "awd_exp_date": "2019-09-30",
 "tot_intn_awd_amt": 499810.0,
 "awd_amount": 499810.0,
 "awd_min_amd_letter_date": "2015-08-17",
 "awd_max_amd_letter_date": "2015-08-17",
 "awd_abstract_narration": "Network protocols and applications are an essential component of the Internet, and they must be implemented correctly so that Internet nodes (e.g., desktop PCs, laptops, smartphones, sensors, and routers) can correctly communicate with one another. However, the correctness of their implementations is difficult to test, especially under the large space of potential behavior introduced by packet dynamics.  This is because there are a prohibitively large number of packet dynamics possibilities, and many bugs are revealed only in low probability corner cases, such as those with specific packet delay, number of packets, packet ordering, or packet loss and duplication. The goal of this project is to design and implement symbolic representations and methods for packet dynamics and the underlying network. These representations and methods will enable the use of emerging test case generation techniques based on symbolic execution for a systematic exploration of network protocol and application implementations. The approach will leverage symbolic execution capabilities of focusing on distinct input classes, in our context for packet dynamics and network states, avoiding redundantly testing equivalent behavior, and instead spending testing resources on packet dynamics leading to distinct and potentially buggy behavior.\r\n\r\nThe proposed research consists of four research tasks. First, develop symbolic representations of common types of Internet packet dynamics, such as independent and dependent packet delays, and packet loss rates. Second, design distributed symbolic drivers that provide a network program under test with the illusion of communicating over a network with symbolic packet dynamics. Third, design a class of execution methods with mixed symbolic and random packet dynamics models for testing a network program with a large number of packets. Fourth, evaluate the proposed techniques and tools. The tasks will provide new insights into the correctness of vital network protocols and applications, and what type of representations and methods are more effective at detecting different types of bugs.\r\n\r\nThe key potential broader impact is the detection of bugs in critical network protocols and applications, which may resonate well outside the computer science community. In addition, joined efforts by members of the networking and the software engineering communities are rare, but as shown in this proposal could be clearly beneficial in bringing the latest validation methodologies to bear in critical networking infrastructure, and in pushing to the forefront of the software testing agenda the networking timing and scale issues. From that perspective, the cross-cutting nature of this proposal and the expected byproducts for which the investigators have a strong record (students, data, tools, papers in top venues) will impact and generate synergy across both communities. The investigators will hold seminars to discuss with the systems and software engineering groups of professional and students the challenges and results of the project. They will also continue actively recruiting and training undergraduate, female, and minority students through this project.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Lisong",
   "pi_last_name": "Xu",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Lisong Xu",
   "pi_email_addr": "xu@cse.unl.edu",
   "nsf_id": "000250125",
   "pi_start_date": "2015-08-17",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Sebastian",
   "pi_last_name": "Elbaum",
   "pi_mid_init": "G",
   "pi_sufx_name": "",
   "pi_full_name": "Sebastian G Elbaum",
   "pi_email_addr": "selbaum@virginia.edu",
   "nsf_id": "000412723",
   "pi_start_date": "2015-08-17",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Nebraska-Lincoln",
  "inst_street_address": "2200 VINE ST # 830861",
  "inst_street_address_2": "",
  "inst_city_name": "LINCOLN",
  "inst_state_code": "NE",
  "inst_state_name": "Nebraska",
  "inst_phone_num": "4024723171",
  "inst_zip_code": "685032427",
  "inst_country_name": "United States",
  "cong_dist_code": "01",
  "st_cong_dist_code": "NE01",
  "org_lgl_bus_name": "BOARD OF REGENTS OF THE UNIVERSITY OF NEBRASKA",
  "org_prnt_uei_num": "",
  "org_uei_num": "HTQ6K6NJFHA6"
 },
 "perf_inst": {
  "perf_inst_name": "University of Nebraska-Lincoln",
  "perf_str_addr": "256 Avery, CSE Department",
  "perf_city_name": "Lincoln",
  "perf_st_code": "NE",
  "perf_st_name": "Nebraska",
  "perf_zip_code": "685880115",
  "perf_ctry_code": "US",
  "perf_cong_dist": "01",
  "perf_st_cong_dist": "NE01",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "736300",
   "pgm_ele_name": "Networking Technology and Syst"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "9150",
   "pgm_ref_txt": "EXP PROG TO STIM COMP RES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 499810.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Network protocols are essential for different Internet devices (e.g., desktop computers, laptops, smartphones, sensors, and routers) to communicate with one another. They must be designed and implemented correctly; otherwise, the Internet will not work. However, the correctness of the network protocols is difficult to test, especially under the large space of possible network protocol behaviors introduced by packet uncertainty, such as uncertain packet delay, reordering, and loss. This is because there are a prohibitively large number of packet uncertainty possibilities, but many network protocol bugs are revealed only in special cases, such as those with special packet delays, special packet ordering patterns, or special packet loss patterns.</p>\n<p>In this project, we design and develop a group of new network protocol testing methods for efficiently testing the correctness of the network protocol behaviors under packet uncertainty. We have designed two types of testing methods for detecting two important types of network protocol bugs, respectively.&nbsp; First, the bugs that involve a short sequence of network protocol behaviors and then can be revealed after running a network protocol for a small number of packets. Second, the bugs that involve a long sequence of network protocol behaviors and then can be revealed after running a network protocol for a large number of packets.&nbsp;</p>\n<p>We have designed efficient network protocol testing methods for the first type of bugs by leveraging symbolic execution that is an efficient software testing technique. The challenging in detecting the first type of bugs is that although there is only a small number of packets, the total number of packet uncertainty possibilities is still too large to exhaustively check. We leverage symbolic execution to divide all possible packet uncertainty possibilities into equivalence classes with the same network protocol behaviors, and then check all packet uncertainty possibilities in each equivalence class together instead of separately checking each packet uncertainty possibility. Specifically, we have designed a symbolic-execution-based testing method for testing real-world network protocols and applications, and another symbolic-execution-based testing method for testing simulated network protocols in a network simulator.&nbsp;</p>\n<p>We have designed efficient network protocol testing methods for the second type of bugs by leveraging random testing that is scalable to a large number of packets. The challenge in detecting the second type of bugs is that the total number of packet uncertainty possibilities is extremely large so that symbolic execution does not work well. While random testing is scalable to a large number of packets, it is inefficient in detecting bugs that are revealed only in special cases. We improve the efficiently of random testing using feedbacks or symbolic execution in order to more efficiently select the packet uncertainty cases that are more likely to reveal different network protocol behaviors and thus can more efficiently detect the bugs. Specifically, we have designed a feedback-guided random testing method for detecting common network protocol bugs involving a large number of packets, and a hybrid symbolic random testing method for detecting low-probability network protocol bugs involving a large number of packets.</p>\n<p>A total of eight students were involved in this project, including three Ph.D. students (one graduated, one graduating next year, and one just started), one MS student, and four undergraduate students. They received unique training on not only network protocols but also software testing, and they also received training on writing technical reports and giving technical presentations. Especially two undergraduate students were co-authors of top-tier conference papers. The work of this project has been published and presented in several top-tier networking and software testing conferences, such as USENIX NSDI, IEEE INFOCOM, and ACM ISSTA. The testing methods designed in this project have successfully detected several real and unreported bugs of network protocols. Their source code has been released to the public so that they can be used to test other current and future protocols by network developers and to design more efficient network protocol testing methods by network researchers.&nbsp;<br /><br /><br /></p><br>\n<p>\n\t\t\t\t      \tLast Modified: 12/19/2019<br>\n\t\t\t\t\tModified by: Lisong&nbsp;Xu</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nNetwork protocols are essential for different Internet devices (e.g., desktop computers, laptops, smartphones, sensors, and routers) to communicate with one another. They must be designed and implemented correctly; otherwise, the Internet will not work. However, the correctness of the network protocols is difficult to test, especially under the large space of possible network protocol behaviors introduced by packet uncertainty, such as uncertain packet delay, reordering, and loss. This is because there are a prohibitively large number of packet uncertainty possibilities, but many network protocol bugs are revealed only in special cases, such as those with special packet delays, special packet ordering patterns, or special packet loss patterns.\n\nIn this project, we design and develop a group of new network protocol testing methods for efficiently testing the correctness of the network protocol behaviors under packet uncertainty. We have designed two types of testing methods for detecting two important types of network protocol bugs, respectively.  First, the bugs that involve a short sequence of network protocol behaviors and then can be revealed after running a network protocol for a small number of packets. Second, the bugs that involve a long sequence of network protocol behaviors and then can be revealed after running a network protocol for a large number of packets. \n\nWe have designed efficient network protocol testing methods for the first type of bugs by leveraging symbolic execution that is an efficient software testing technique. The challenging in detecting the first type of bugs is that although there is only a small number of packets, the total number of packet uncertainty possibilities is still too large to exhaustively check. We leverage symbolic execution to divide all possible packet uncertainty possibilities into equivalence classes with the same network protocol behaviors, and then check all packet uncertainty possibilities in each equivalence class together instead of separately checking each packet uncertainty possibility. Specifically, we have designed a symbolic-execution-based testing method for testing real-world network protocols and applications, and another symbolic-execution-based testing method for testing simulated network protocols in a network simulator. \n\nWe have designed efficient network protocol testing methods for the second type of bugs by leveraging random testing that is scalable to a large number of packets. The challenge in detecting the second type of bugs is that the total number of packet uncertainty possibilities is extremely large so that symbolic execution does not work well. While random testing is scalable to a large number of packets, it is inefficient in detecting bugs that are revealed only in special cases. We improve the efficiently of random testing using feedbacks or symbolic execution in order to more efficiently select the packet uncertainty cases that are more likely to reveal different network protocol behaviors and thus can more efficiently detect the bugs. Specifically, we have designed a feedback-guided random testing method for detecting common network protocol bugs involving a large number of packets, and a hybrid symbolic random testing method for detecting low-probability network protocol bugs involving a large number of packets.\n\nA total of eight students were involved in this project, including three Ph.D. students (one graduated, one graduating next year, and one just started), one MS student, and four undergraduate students. They received unique training on not only network protocols but also software testing, and they also received training on writing technical reports and giving technical presentations. Especially two undergraduate students were co-authors of top-tier conference papers. The work of this project has been published and presented in several top-tier networking and software testing conferences, such as USENIX NSDI, IEEE INFOCOM, and ACM ISSTA. The testing methods designed in this project have successfully detected several real and unreported bugs of network protocols. Their source code has been released to the public so that they can be used to test other current and future protocols by network developers and to design more efficient network protocol testing methods by network researchers. \n\n\n\n\n\t\t\t\t\tLast Modified: 12/19/2019\n\n\t\t\t\t\tSubmitted by: Lisong Xu"
 }
}