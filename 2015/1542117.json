{
 "awd_id": "1542117",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CAREER: Analyzing Program Changes and Versions for Bug Detection and Diagnosis",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2014-08-16",
 "awd_exp_date": "2020-05-31",
 "tot_intn_awd_amt": 412971.0,
 "awd_amount": 412971.0,
 "awd_min_amd_letter_date": "2015-04-21",
 "awd_max_amd_letter_date": "2018-05-23",
 "awd_abstract_narration": "Software development is inherently incremental. Nowadays, many software companies adopt an agile process and a shorter release cycle, where software needs to be delivered faster but with quality assurances, and many versions of software may co-exist in the field and need to be maintained. While faster releases do not increase the user's tolerance of bugs, it is challenging to correctly introduce a change on top of existing programs. In recent studies, researchers found that when programming a change, the most important information a developer wants to know is whether this change breaks any code elsewhere, and in fact, 15-24% of the bug fixes are incorrect. \r\n\r\nThis project will develop program analyses to address quality assurance problems related to program changes and versions, specifically for the three challenges: efficiently verifying changes for reliable software releases, automatically diagnosing failures caused by changes, and effectively patching multiple versions of software.  The project will result in tools and techniques transferable to industry to improve the quality and productivity of software development. The results will also be disseminated via STEM volunteering, new course materials, and release of the software and data obtained through this research.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Wei",
   "pi_last_name": "Le",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Wei Le",
   "pi_email_addr": "weile@iastate.edu",
   "nsf_id": "000599868",
   "pi_start_date": "2015-04-21",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Iowa State University",
  "inst_street_address": "1350 BEARDSHEAR HALL",
  "inst_street_address_2": "515 MORRILL ROAD",
  "inst_city_name": "AMES",
  "inst_state_code": "IA",
  "inst_state_name": "Iowa",
  "inst_phone_num": "5152945225",
  "inst_zip_code": "500112103",
  "inst_country_name": "United States",
  "cong_dist_code": "04",
  "st_cong_dist_code": "IA04",
  "org_lgl_bus_name": "IOWA STATE UNIVERSITY OF SCIENCE AND TECHNOLOGY",
  "org_prnt_uei_num": "DQDBM7FGJPC5",
  "org_uei_num": "DQDBM7FGJPC5"
 },
 "perf_inst": {
  "perf_inst_name": "Iowa State University",
  "perf_str_addr": "1138 Pearson",
  "perf_city_name": "Ames",
  "perf_st_code": "IA",
  "perf_st_name": "Iowa",
  "perf_zip_code": "500112207",
  "perf_ctry_code": "US",
  "perf_cong_dist": null,
  "perf_st_cong_dist": "IA",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "1045",
   "pgm_ref_txt": "CAREER-Faculty Erly Career Dev"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  }
 ],
 "app_fund": [
  {
   "app_code": "0114",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001415DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2014,
   "fund_oblg_amt": 136130.0
  },
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 115556.0
  },
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 70768.0
  },
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 90517.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The research contributions of this project includes:</p>\n<ol>\n<li>a program representation, called MVICFG (multiversion interprocedural control flow graph), that specifies the differences of program paths between software versions; it enables easy applications of existing program analysis techniques on software changes and versions,</li>\n<li>a set of static analysis algorithms that compute the commonalities and differences of program properties across software versions, and</li>\n<li>the applications of analysis algorithms to automate software engineering tasks such as detecting bugs in changes, verifying patches and determining the impact of vulnerabilities and patches on different versions of software.</li>\n</ol>\n<p>We found that vulnerabilities can impact different software releases differently. A patch does not always work for all the vulnerable versions. Manually documented vulnerabilities, e.g., in CVE, often report incomplete affected versions.&nbsp; Demand-driven symbolic algorithms are efficient to automatically compute such program properties regarding software versions.<br /><br />We also found that between buggy and correct program versions, there often exist invariant changes. Therefore, computing invariant changes can be used for automatically generating assertions to prevent future such bugs. Interestingly, version invariants exist on software versions developed by different programmers. These invariants are a specification of the common problem addressed by these programs.<br /><br />This project advances state-of-the-art in static analysis for software assurance.&nbsp; We make software change analysis more efficient and precise, requiring much less human efforts. We automate software assurance tasks that previously had been done manually.<br /><br />In addition to the papers published in the top software engineering conferences, this project produced an open source software: https://github.com/iowastateuniversity-programanalysis/hydrogen and a new courseware https://github.com/wei-le/programanalysiscourse</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 06/30/2020<br>\n\t\t\t\t\tModified by: Wei&nbsp;Le</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThe research contributions of this project includes:\n\na program representation, called MVICFG (multiversion interprocedural control flow graph), that specifies the differences of program paths between software versions; it enables easy applications of existing program analysis techniques on software changes and versions,\na set of static analysis algorithms that compute the commonalities and differences of program properties across software versions, and\nthe applications of analysis algorithms to automate software engineering tasks such as detecting bugs in changes, verifying patches and determining the impact of vulnerabilities and patches on different versions of software.\n\n\nWe found that vulnerabilities can impact different software releases differently. A patch does not always work for all the vulnerable versions. Manually documented vulnerabilities, e.g., in CVE, often report incomplete affected versions.  Demand-driven symbolic algorithms are efficient to automatically compute such program properties regarding software versions.\n\nWe also found that between buggy and correct program versions, there often exist invariant changes. Therefore, computing invariant changes can be used for automatically generating assertions to prevent future such bugs. Interestingly, version invariants exist on software versions developed by different programmers. These invariants are a specification of the common problem addressed by these programs.\n\nThis project advances state-of-the-art in static analysis for software assurance.  We make software change analysis more efficient and precise, requiring much less human efforts. We automate software assurance tasks that previously had been done manually.\n\nIn addition to the papers published in the top software engineering conferences, this project produced an open source software: https://github.com/iowastateuniversity-programanalysis/hydrogen and a new courseware https://github.com/wei-le/programanalysiscourse\n\n\t\t\t\t\tLast Modified: 06/30/2020\n\n\t\t\t\t\tSubmitted by: Wei Le"
 }
}