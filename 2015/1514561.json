{
 "awd_id": "1514561",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Medium: Collaborative Research: Finding and Fixing Architectural Hotspots: An Economics-Based Decision Support Approach",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2015-07-01",
 "awd_exp_date": "2018-12-31",
 "tot_intn_awd_amt": 360709.0,
 "awd_amount": 360709.0,
 "awd_min_amd_letter_date": "2015-06-30",
 "awd_max_amd_letter_date": "2015-06-30",
 "awd_abstract_narration": "Recent research has revealed strong correlations between error-proneness and change-proneness in source code files and software architecture decisions. That is, even though a software system may have hundreds of buggy files, these files always form just a few architecturally connected groups: architecture hotspots. Hotspots exhibit architectural flaws that propagate errors among source files. This phenomenon has been observed over numerous projects, both open source and industrial, regardless of their domain, age, or programming language. The implication is that it is impossible to reduce error or change rates in complex software systems without fixing the architecture problems that cause these errors to propagate. The objective of the research proposed here is to guide the identification of high-maintenance architecture problems, quantitatively characterize their consequences in terms of software quality and productivity, and create business cases to justify their refactoring. The end goal is to reduce long-term software maintenance costs though strategic architecture improvement.\r\n\r\nThe key to this research is to automatically extract architecture hotspots, and to quantify their economic consequences in terms of increased bug-fixing effort or reduced ability to deliver features. This quantification involves building models that leverage information broadly available in software projects--on bugs, changes, and commits--so that an architect can plan refactorings to the hotspots and confidently estimate the costs and benefits of such refactorings. This research will produce direct impact through the PIs' extensive national and international academic and industrial collaborations. It will fundamentally change how software defects are discovered, examined, and handled: instead of examining hundreds of defective files, each one in isolation, the analyst only needs to examine a few architecture hotspots detected by the proposed approach, fixing numerous defects simultaneously by removing their architecture roots, thus providing substantial savings in maintenance costs. The proposed decision-support approach has the potential to change the management of the software industry by providing an empirical basis for the pricing and risk analysis of software architecture decisions. The proposed architecture hotspot detection approach will influence numerous software engineering research areas, and will have significant impact on software design education by providing tool-support for the teaching of software architecture and design analysis.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Rick",
   "pi_last_name": "Kazman",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Rick Kazman",
   "pi_email_addr": "kazman@hawaii.edu",
   "nsf_id": "000214093",
   "pi_start_date": "2015-06-30",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Hawaii",
  "inst_street_address": "2425 CAMPUS RD SINCLAIR RM 1",
  "inst_street_address_2": "",
  "inst_city_name": "HONOLULU",
  "inst_state_code": "HI",
  "inst_state_name": "Hawaii",
  "inst_phone_num": "8089567800",
  "inst_zip_code": "968222247",
  "inst_country_name": "United States",
  "cong_dist_code": "01",
  "st_cong_dist_code": "HI01",
  "org_lgl_bus_name": "UNIVERSITY OF HAWAII",
  "org_prnt_uei_num": "",
  "org_uei_num": "NSCKLFSSABF2"
 },
 "perf_inst": {
  "perf_inst_name": "University of Hawaii",
  "perf_str_addr": "2404 Maile Way",
  "perf_city_name": "Honolulu",
  "perf_st_code": "HI",
  "perf_st_name": "Hawaii",
  "perf_zip_code": "968222457",
  "perf_ctry_code": "US",
  "perf_cong_dist": "01",
  "perf_st_cong_dist": "HI01",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 360709.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><!-- p, li { white-space: pre-wrap; } --> <!-- p.p1 {margin: 0.0px 0.0px 10.0px 0.0px; line-height: 14.0px; font: 12.0px Arial; color: #000000; -webkit-text-stroke: #000000} span.s1 {font-kerning: none} -->\n<p>Our research over the course of this project has revealed the very strong correlations between error- and change-proneness in source code files and software architecture decisions, specifically software architecture flaws.&nbsp;We have come to term these flaws&nbsp;<em>hotspots</em>&nbsp;or&nbsp;<em>architecture anti-patterns</em>. These architectural anti-patterns have been shown to propagate errors among source files, causing architectural debt, a particularly troublesome and expensive form of technical debt. This phenomenon has been observed over numerous projects, both open source and industrial, regardless of their domain, age, or programming language. We have formalized the concept of architecture debts, and enabled their quantification using data mined from project repositories.</p>\n<p>We have also developed an architectural coupling measure&mdash;called Decoupling Level (DL)&mdash;that characterizes, in a single measure, how likely bugs and changes can be localized and separated, and how more likely that developers can make changes independently. And DL has been shown to be strongly correlated to measures of a system&rsquo;s maintainability. The implications of our findings are profound: it is impossible to reduce error or change rates in complex software systems without first fixing the architecture problems that cause these errors to propagate and without increasing the system-wide level of decoupling.</p>\n<p>The research that we have prosecuted over the course of this grant was to guide the identification of high-maintenance architecture problems, to visualize them, to quantitatively characterize their consequences in terms of software quality and productivity, and to create business cases to justify their removal via refactoring. The end result is that we are now able to fully automatically diagnose large, complex software projects and create strategies for them to reduce their long-term software maintenance costs through strategic architecture improvements. And, using data collected from these projects, we can help a project manager or architect build the business case for refactoring, based on return-on-investment estimates.</p>\n<p>A key to our research has been to automatically extract architecture anti-patterns, and to quantify the economic consequences of these anti-patterns in terms of increased bug-fixing effort or reduced ability to deliver features. This quantification involves building models that leverage information broadly available in software projects--on bugs, changes, and commits--so that an architect can plan refactorings to remove the flaws. Using the data that we provide, architects and managers can confidently estimate the costs and benefits of such refactorings.</p>\n<p>In addition, DL can also be used to guide architectural and management strategies. First, we have measured the DL scores for hundreds of projects, and this dataset can be used by other software projects to determine the overall health of their project, in comparison with the broader community (in much the same way that size and weight charts are used as one measure of the health and maturation of children as they grow). And DL has also been shown to be valuable as a means of tracking a project&rsquo;s evolution over time. Projects can determine threshold DL values, below which a project would be considered for refactoring or cancelling.</p>\n<p>The tools and techniques created as a result of this research can fundamentally change how problems in software systems are discovered, examined, and handled: instead of examining defective files one by one in isolation, the analyst only needs to examine a few architecture anti-patterns detected and highlighted by our tools. This gives the analyst the insight and measures to justify paying down the debt, and the specific guidance to fix numerous defects by removing their underlying root-causes (their design flaws), thus providing substantial savings in maintenance costs.</p>\n<p>These tools and methods have the potential to change the management of the software industry by providing an empirical basis for the pricing and risk analysis of software architecture decisions. In fact, we have already reported multiple case studies with multiple industrial partners where our approach and tooling have fundamentally affected how they analyze and manage their software projects. Our architecture anti-pattern detection approach and our DL measure have thus already had an influence on software engineering research <em>and</em> software engineering practice.&nbsp; In addition, these advances have the potential to make a significant impact on software design education by providing tool-support for the teaching of software architecture and design analysis.</p>\n<p class=\"p1\">&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 02/23/2019<br>\n\t\t\t\t\tModified by: Rick&nbsp;Kazman</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n\nOur research over the course of this project has revealed the very strong correlations between error- and change-proneness in source code files and software architecture decisions, specifically software architecture flaws. We have come to term these flaws hotspots or architecture anti-patterns. These architectural anti-patterns have been shown to propagate errors among source files, causing architectural debt, a particularly troublesome and expensive form of technical debt. This phenomenon has been observed over numerous projects, both open source and industrial, regardless of their domain, age, or programming language. We have formalized the concept of architecture debts, and enabled their quantification using data mined from project repositories.\n\nWe have also developed an architectural coupling measure&mdash;called Decoupling Level (DL)&mdash;that characterizes, in a single measure, how likely bugs and changes can be localized and separated, and how more likely that developers can make changes independently. And DL has been shown to be strongly correlated to measures of a system?s maintainability. The implications of our findings are profound: it is impossible to reduce error or change rates in complex software systems without first fixing the architecture problems that cause these errors to propagate and without increasing the system-wide level of decoupling.\n\nThe research that we have prosecuted over the course of this grant was to guide the identification of high-maintenance architecture problems, to visualize them, to quantitatively characterize their consequences in terms of software quality and productivity, and to create business cases to justify their removal via refactoring. The end result is that we are now able to fully automatically diagnose large, complex software projects and create strategies for them to reduce their long-term software maintenance costs through strategic architecture improvements. And, using data collected from these projects, we can help a project manager or architect build the business case for refactoring, based on return-on-investment estimates.\n\nA key to our research has been to automatically extract architecture anti-patterns, and to quantify the economic consequences of these anti-patterns in terms of increased bug-fixing effort or reduced ability to deliver features. This quantification involves building models that leverage information broadly available in software projects--on bugs, changes, and commits--so that an architect can plan refactorings to remove the flaws. Using the data that we provide, architects and managers can confidently estimate the costs and benefits of such refactorings.\n\nIn addition, DL can also be used to guide architectural and management strategies. First, we have measured the DL scores for hundreds of projects, and this dataset can be used by other software projects to determine the overall health of their project, in comparison with the broader community (in much the same way that size and weight charts are used as one measure of the health and maturation of children as they grow). And DL has also been shown to be valuable as a means of tracking a project?s evolution over time. Projects can determine threshold DL values, below which a project would be considered for refactoring or cancelling.\n\nThe tools and techniques created as a result of this research can fundamentally change how problems in software systems are discovered, examined, and handled: instead of examining defective files one by one in isolation, the analyst only needs to examine a few architecture anti-patterns detected and highlighted by our tools. This gives the analyst the insight and measures to justify paying down the debt, and the specific guidance to fix numerous defects by removing their underlying root-causes (their design flaws), thus providing substantial savings in maintenance costs.\n\nThese tools and methods have the potential to change the management of the software industry by providing an empirical basis for the pricing and risk analysis of software architecture decisions. In fact, we have already reported multiple case studies with multiple industrial partners where our approach and tooling have fundamentally affected how they analyze and manage their software projects. Our architecture anti-pattern detection approach and our DL measure have thus already had an influence on software engineering research and software engineering practice.  In addition, these advances have the potential to make a significant impact on software design education by providing tool-support for the teaching of software architecture and design analysis.\n \n\n\t\t\t\t\tLast Modified: 02/23/2019\n\n\t\t\t\t\tSubmitted by: Rick Kazman"
 }
}