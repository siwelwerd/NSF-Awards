{
 "awd_id": "1523017",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "EDU:Collaborative: VACCS - Visualization and Analysis for C Code Security",
 "cfda_num": "47.076",
 "org_code": "11010001",
 "po_phone": "7032925141",
 "po_email": "vpiotrow@nsf.gov",
 "po_sign_block_name": "Victor Piotrowski",
 "awd_eff_date": "2016-01-01",
 "awd_exp_date": "2019-12-31",
 "tot_intn_awd_amt": 130001.0,
 "awd_amount": 130001.0,
 "awd_min_amd_letter_date": "2015-09-08",
 "awd_max_amd_letter_date": "2015-09-08",
 "awd_abstract_narration": "The proposed project will develop Visualization and Analysis of C Code Security (VACCS) tool to assist students with learning secure code programming. The proposal addresses the critical issue of learning secure coding through the development of a system for analyzing and visualizing C code and associated learning materials. VACCS will utilize static and dynamic program analysis to detect security vulnerabilities and warn programmers about the potential errors in their code. The research team has a significant experience in using visualization to teach computer science in such areas as parallel computing, geometric modeling and data encryption. The project will develop visualization and animation of common security vulnerabilities that can be customized for programmers with different level of programming experience. The project will evaluate the effectiveness of VACCS and instructional materials to improve students' learning of secure coding.\r\n\r\nThe outcomes of this research will provide a better understanding of the visualization impact on secure programming instruction within a computing curriculum, as well as a deployable VACCS tool for faculty to adopt. This research will inform the broader community on the visualization potential for positive effects on the quality of code developed by future computer scientists. The VACCS tool and educational materials including tutorials, lectures, projects and extensive examples of teaching secure software development will be disseminated to academic computing community. In addition, this project will teach students how to perform software security audits using VACCS and will train graduate students in the art of teaching computer security.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "EDU",
 "org_dir_long_name": "Directorate for STEM Education",
 "div_abbr": "DGE",
 "org_div_long_name": "Division Of Graduate Education",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Jean",
   "pi_last_name": "Mayo",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Jean Mayo",
   "pi_email_addr": "jmayo@mtu.edu",
   "nsf_id": "000240605",
   "pi_start_date": "2015-09-08",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Ching-Kuang",
   "pi_last_name": "Shene",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Ching-Kuang Shene",
   "pi_email_addr": "shene@mtu.edu",
   "nsf_id": "000234045",
   "pi_start_date": "2015-09-08",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Michigan Technological University",
  "inst_street_address": "1400 TOWNSEND DR",
  "inst_street_address_2": "",
  "inst_city_name": "HOUGHTON",
  "inst_state_code": "MI",
  "inst_state_name": "Michigan",
  "inst_phone_num": "9064871885",
  "inst_zip_code": "499311200",
  "inst_country_name": "United States",
  "cong_dist_code": "01",
  "st_cong_dist_code": "MI01",
  "org_lgl_bus_name": "MICHIGAN TECHNOLOGICAL UNIVERSITY",
  "org_prnt_uei_num": "GKMSN3DA6P91",
  "org_uei_num": "GKMSN3DA6P91"
 },
 "perf_inst": {
  "perf_inst_name": "Michigan Technological University",
  "perf_str_addr": "1400 Townsend Dr.",
  "perf_city_name": "Houghton",
  "perf_st_code": "MI",
  "perf_st_name": "Michigan",
  "perf_zip_code": "499311295",
  "perf_ctry_code": "US",
  "perf_cong_dist": "01",
  "perf_st_cong_dist": "MI01",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "9178",
   "pgm_ref_txt": "UNDERGRADUATE EDUCATION"
  },
  {
   "pgm_ref_code": "9179",
   "pgm_ref_txt": "GRADUATE INVOLVEMENT"
  },
  {
   "pgm_ref_code": "SMET",
   "pgm_ref_txt": "SCIENCE, MATH, ENG & TECH EDUCATION"
  }
 ],
 "app_fund": [
  {
   "app_code": "0415",
   "app_name": "NSF Education & Human Resource",
   "app_symb_id": "040106",
   "fund_code": "04001516DB",
   "fund_name": "NSF Education & Human Resource",
   "fund_symb_id": "040106"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 130001.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Cybersecurity is at the forefront of computer science. While research is identifying new ways to protect computer systems, most successful attacks exploit vulnerabilities that are well-known.&nbsp; This project addressed this problem by developing new tools and techniques to teach students how to avoid common vulnerabilties that arise in C programs.&nbsp; Low-level software that is fundamentally responsible for system protection is often written in C for performance reasons.<br /><br />The sytem ls called Visualization and Analysis for C Code Security (VACCS).&nbsp; It leverages visualization to improve learning. The system is comprised of two parts: an analysis system and a visualization system. The visualization takes input from the analysis system in the form of events related to program security drawn from a program execution.&nbsp; Students can step through the events and watch their program execute.&nbsp; The system ties a source code line to its corresponding assembly language and the impact of its execution on memory, including the representation of integers and their corresponding decimal value.&nbsp;</p>\n<p>The tools have been shown to help students understand how their C programs execute and how to avoid pervasive errors such as integer overflow and buffer overflows.&nbsp; Student feedback had been positive and students overwhelmingly felt that the tools enhanced the courses in which they were used.&nbsp; Improved learning through use of the VACCS system will help to secure the national cyberinfrastructure.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 03/31/2020<br>\n\t\t\t\t\tModified by: Jean&nbsp;Mayo</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nCybersecurity is at the forefront of computer science. While research is identifying new ways to protect computer systems, most successful attacks exploit vulnerabilities that are well-known.  This project addressed this problem by developing new tools and techniques to teach students how to avoid common vulnerabilties that arise in C programs.  Low-level software that is fundamentally responsible for system protection is often written in C for performance reasons.\n\nThe sytem ls called Visualization and Analysis for C Code Security (VACCS).  It leverages visualization to improve learning. The system is comprised of two parts: an analysis system and a visualization system. The visualization takes input from the analysis system in the form of events related to program security drawn from a program execution.  Students can step through the events and watch their program execute.  The system ties a source code line to its corresponding assembly language and the impact of its execution on memory, including the representation of integers and their corresponding decimal value. \n\nThe tools have been shown to help students understand how their C programs execute and how to avoid pervasive errors such as integer overflow and buffer overflows.  Student feedback had been positive and students overwhelmingly felt that the tools enhanced the courses in which they were used.  Improved learning through use of the VACCS system will help to secure the national cyberinfrastructure.\n\n\t\t\t\t\tLast Modified: 03/31/2020\n\n\t\t\t\t\tSubmitted by: Jean Mayo"
 }
}