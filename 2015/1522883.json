{
 "awd_id": "1522883",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "EDU:Collaborative: VACCS - Visualization and Analysis for C Code Security",
 "cfda_num": "47.076",
 "org_code": "11010001",
 "po_phone": "7032925141",
 "po_email": "vpiotrow@nsf.gov",
 "po_sign_block_name": "Victor Piotrowski",
 "awd_eff_date": "2016-01-01",
 "awd_exp_date": "2019-12-31",
 "tot_intn_awd_amt": 169575.0,
 "awd_amount": 177575.0,
 "awd_min_amd_letter_date": "2015-09-08",
 "awd_max_amd_letter_date": "2018-11-30",
 "awd_abstract_narration": "The proposed project will develop Visualization and Analysis of C Code Security (VACCS) tool to assist students with learning secure code programming. The proposal addresses the critical issue of learning secure coding through the development of a system for analyzing and visualizing C code and associated learning materials. VACCS will utilize static and dynamic program analysis to detect security vulnerabilities and warn programmers about the potential errors in their code. The research team has a significant experience in using visualization to teach computer science in such areas as parallel computing, geometric modeling and data encryption. The project will develop visualization and animation of common security vulnerabilities that can be customized for programmers with different level of programming experience. The project will evaluate the effectiveness of VACCS and instructional materials to improve students' learning of secure coding.\r\n\r\nThe outcomes of this research will provide a better understanding of the visualization impact on secure programming instruction within a computing curriculum, as well as a deployable VACCS tool for faculty to adopt. This research will inform the broader community on the visualization potential for positive effects on the quality of code developed by future computer scientists. The VACCS tool and educational materials including tutorials, lectures, projects and extensive examples of teaching secure software development will be disseminated to academic computing community. In addition, this project will teach students how to perform software security audits using VACCS and will train graduate students in the art of teaching computer security.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "EDU",
 "org_dir_long_name": "Directorate for STEM Education",
 "div_abbr": "DGE",
 "org_div_long_name": "Division Of Graduate Education",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Steven",
   "pi_last_name": "Carr",
   "pi_mid_init": "M",
   "pi_sufx_name": "",
   "pi_full_name": "Steven M Carr",
   "pi_email_addr": "steve.carr@wmich.edu",
   "nsf_id": "000321908",
   "pi_start_date": "2015-09-08",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Zijiang",
   "pi_last_name": "Yang",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Zijiang Yang",
   "pi_email_addr": "zijiang.yang@wmich.edu",
   "nsf_id": "000492905",
   "pi_start_date": "2015-09-08",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Western Michigan University",
  "inst_street_address": "1903 W MICHIGAN AVE",
  "inst_street_address_2": "",
  "inst_city_name": "KALAMAZOO",
  "inst_state_code": "MI",
  "inst_state_name": "Michigan",
  "inst_phone_num": "2693878298",
  "inst_zip_code": "490085200",
  "inst_country_name": "United States",
  "cong_dist_code": "04",
  "st_cong_dist_code": "MI04",
  "org_lgl_bus_name": "WESTERN MICHIGAN UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "J7WULLYGFRH1"
 },
 "perf_inst": {
  "perf_inst_name": "Western Michigan University",
  "perf_str_addr": "1903 W. Michigan Ave.",
  "perf_city_name": "Kalamazoo",
  "perf_st_code": "MI",
  "perf_st_name": "Michigan",
  "perf_zip_code": "490085466",
  "perf_ctry_code": "US",
  "perf_cong_dist": "04",
  "perf_st_cong_dist": "MI04",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "9178",
   "pgm_ref_txt": "UNDERGRADUATE EDUCATION"
  },
  {
   "pgm_ref_code": "9179",
   "pgm_ref_txt": "GRADUATE INVOLVEMENT"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  },
  {
   "pgm_ref_code": "SMET",
   "pgm_ref_txt": "SCIENCE, MATH, ENG & TECH EDUCATION"
  }
 ],
 "app_fund": [
  {
   "app_code": "0415",
   "app_name": "NSF Education & Human Resource",
   "app_symb_id": "040106",
   "fund_code": "04001516DB",
   "fund_name": "NSF Education & Human Resource",
   "fund_symb_id": "040106"
  },
  {
   "app_code": "0416",
   "app_name": "NSF Education & Human Resource",
   "app_symb_id": "040106",
   "fund_code": "04001617DB",
   "fund_name": "NSF Education & Human Resource",
   "fund_symb_id": "040106"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 169575.0
  },
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 8000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>One of the most critical needs for software infrastructure is security. From e-commerce to the power grid, the potential for significant damage through attacks of insecure software systems is extensive. Unfortunately, computer software has seen little improvement in the effective reduction of software vulnerabilities. This has left our infrastructure at risk. Now is the time to act to<br />change this pattern.<br /><br />This project helps address software security through the development of software tools to teach secure coding in C. Specifically, we have developed a system for the Visualization and Analysis for C Code Security (VACCS). VACCS will utilize static and dynamic program analysis to help detect potential security vulnerabilities and use visualization to help teach programmers about the<br />potential errors in their code. Thus, students will be able to learn by seeing what is wrong with their programs rather than just having it explained in words.<br /><br />The major outcomes for this project are visualization tools for teaching various aspects of software security. Each of the tools has been tested in a classroom setting and shown to improve student learning. These tools include visualization of<br /><br />&nbsp; 1) Integer type conversions,<br />&nbsp; 2) Process address space,<br />&nbsp; 3) Operations on secure data, and<br />&nbsp; 4) Management of memory<br /><br />The project results could have a significant effect on software infrastructure. Training programmers to think about security and to detect and understand vulnerabilities will have significant positive effects on the quality of code developed by future computer scientists. Students with a better understanding of security and software will have a significant impact on our society. Fewer security holes in software will decrease costs to business and individuals and make the internet safer for everyone. The time to include secure software education for all computer scientists is now. We believe our project will improve the quality of that education and have a significant, positive impact on the future.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 01/15/2020<br>\n\t\t\t\t\tModified by: Steven&nbsp;M&nbsp;Carr</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nOne of the most critical needs for software infrastructure is security. From e-commerce to the power grid, the potential for significant damage through attacks of insecure software systems is extensive. Unfortunately, computer software has seen little improvement in the effective reduction of software vulnerabilities. This has left our infrastructure at risk. Now is the time to act to\nchange this pattern.\n\nThis project helps address software security through the development of software tools to teach secure coding in C. Specifically, we have developed a system for the Visualization and Analysis for C Code Security (VACCS). VACCS will utilize static and dynamic program analysis to help detect potential security vulnerabilities and use visualization to help teach programmers about the\npotential errors in their code. Thus, students will be able to learn by seeing what is wrong with their programs rather than just having it explained in words.\n\nThe major outcomes for this project are visualization tools for teaching various aspects of software security. Each of the tools has been tested in a classroom setting and shown to improve student learning. These tools include visualization of\n\n  1) Integer type conversions,\n  2) Process address space,\n  3) Operations on secure data, and\n  4) Management of memory\n\nThe project results could have a significant effect on software infrastructure. Training programmers to think about security and to detect and understand vulnerabilities will have significant positive effects on the quality of code developed by future computer scientists. Students with a better understanding of security and software will have a significant impact on our society. Fewer security holes in software will decrease costs to business and individuals and make the internet safer for everyone. The time to include secure software education for all computer scientists is now. We believe our project will improve the quality of that education and have a significant, positive impact on the future.\n\n\t\t\t\t\tLast Modified: 01/15/2020\n\n\t\t\t\t\tSubmitted by: Steven M Carr"
 }
}