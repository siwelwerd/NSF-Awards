{
 "awd_id": "1533737",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "XPS: FULL: CCA: Collaborative Research: Automatically Scalable Computation",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032925197",
 "po_email": "mmcclure@nsf.gov",
 "po_sign_block_name": "Marilyn McClure",
 "awd_eff_date": "2015-08-01",
 "awd_exp_date": "2020-07-31",
 "tot_intn_awd_amt": 525000.0,
 "awd_amount": 525000.0,
 "awd_min_amd_letter_date": "2015-07-27",
 "awd_max_amd_letter_date": "2015-07-27",
 "awd_abstract_narration": "For over thirty years, each generation of computers has been faster than the one that preceded it. This exponential scaling transformed the way we communicate, navigate, purchase, and conduct science. More recently, this dramatic growth in single processor performance has stopped and has been replaced by new generations of computers with more processors on them; for example, even the cell phones we carry have multiple processors in them.  Writing software that effectively leverages multiple processing elements is difficult, and rewriting the decades of accumulated software is both difficult and costly. This research takes a different approach -- rather than converting sequential software into parallel software, this project develops ways to store and reuse computation. Imagine computing only when computer time and energy are cheap and plentiful, storing that computation, and then using it later, when computation might be limited or expensive.  The approach used involves making informed predictions about computation likely to happen in the future, proactively executing likely computations in parallel with the actual computation, and then \"jumping forward in time\" if the actual execution arrives at any of the predicted computations that have already been completed.  This research touches many areas within Computer Science, architecture, compilers, machine learning, systems, and theory.  Additionally, exploiting massively parallel computation will produce immediate returns in multiple scientific fields that rely on computation.\r\n\r\nThe approach used in this research views computational execution as moving a system through the enormously high dimensional space represented by its registers and memory of a conventional single-threaded processor.  It uses machine learning algorithms to observe execution patterns and make predictions about likely future states of the computation.  Based on these predictions, the system launches potentially large numbers of speculative threads to execute from these likely computations, while the actual computation proceeds serially.  At strategically chosen points, the main computation queries the speculative executions to determine if any of the completed computation is useful; if it is, the main thread uses the speculative computation to immediately begin execution where the speculative computation left off, achieving a speed-up over the serial execution.  This approach has the potential to be extremely scalable: the more cores, memory, and communication bandwidth available, the greater the potential for performance improvement. The approach also scales across programs -- if the program running today happens upon a state encountered by a program running yesterday, the program can reuse yesterday's computation. This project has the potential to break new ground for research in many areas in Computer Science touched by it.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Margo",
   "pi_last_name": "Seltzer",
   "pi_mid_init": "I",
   "pi_sufx_name": "",
   "pi_full_name": "Margo I Seltzer",
   "pi_email_addr": "margo@eecs.harvard.edu",
   "nsf_id": "000146422",
   "pi_start_date": "2015-07-27",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "David",
   "pi_last_name": "Brooks",
   "pi_mid_init": "M",
   "pi_sufx_name": "",
   "pi_full_name": "David M Brooks",
   "pi_email_addr": "dbrooks@eecs.harvard.edu",
   "nsf_id": "000091383",
   "pi_start_date": "2015-07-27",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Ryan",
   "pi_last_name": "Adams",
   "pi_mid_init": "P",
   "pi_sufx_name": "",
   "pi_full_name": "Ryan P Adams",
   "pi_email_addr": "rpa@princeton.edu",
   "nsf_id": "000623159",
   "pi_start_date": "2015-07-27",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Harvard University",
  "inst_street_address": "1033 MASSACHUSETTS AVE STE 3",
  "inst_street_address_2": "",
  "inst_city_name": "CAMBRIDGE",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "6174955501",
  "inst_zip_code": "021385366",
  "inst_country_name": "United States",
  "cong_dist_code": "05",
  "st_cong_dist_code": "MA05",
  "org_lgl_bus_name": "PRESIDENT AND FELLOWS OF HARVARD COLLEGE",
  "org_prnt_uei_num": "",
  "org_uei_num": "LN53LCFJFL45"
 },
 "perf_inst": {
  "perf_inst_name": "Harvard University",
  "perf_str_addr": "33 Oxford Street",
  "perf_city_name": "Cambridge",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "021384401",
  "perf_ctry_code": "US",
  "perf_cong_dist": "05",
  "perf_st_cong_dist": "MA05",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "828300",
   "pgm_ele_name": "Exploiting Parallel&Scalabilty"
  }
 ],
 "pgm_ref": null,
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 525000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The performance of computer programs is inherently limited by the difficulty of executing multiple portions of the application in parallel. Writing parallel programs is difficult, even for expert programmers, and hence many programs are still written in serial fashion. The goal of this project is to develop a practical approach to parallelism using coarse-grain speculative execution, learning, and prediction. The goal of this project is &ldquo;Automatically Scalable Computing&rdquo; (ASC) in which a machine learning system can assist with this problem. Effectively, the question we seek to answer if whether it is possible to we train a system to automatically find parallelism.</p>\n<p>&nbsp;</p>\n<p>The project has had several major foci of investigation:</p>\n<p>1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Identification of locations in the program that are amenable for prediction and development of prediction algorithms to accurately predict the future state of a program;</p>\n<p>2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Finding what applications this applications this approach might be useful for.</p>\n<p>3)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Understanding the hardware support necessary to take advantage of this information in order to make the program run faster.</p>\n<p>&nbsp;</p>\n<p>Work in the project demonstrated the overall merit of the ASC approach for speeding up applications. Further work was necessary to show how to build computers that could practically take advantage of this. One fundamental problem is that machine learning algorithms are themselves quite costly to implement. Hence, a major challenge in this project was to understand the hardware support necessary to enable the ASC vision. At the project outset very little research had been performed on hardware support for efficient machine learning. The cost of machine learning training and prediction on general-purpose computers was known to be quite high in energy and latency. However, over the past two years many machine learning accelerators have been deployed for both cloud and edge computing devices, and many more are under active research and development. While these accelerators have primarily been developed for existing applications leveraging deep neural networks for computer vision (CV) and natural language processing (NLP), they have the potential to impact many other applications, including techniques such as ASC. The project has undertaken the benchmarking and workload characterization of modern machine learning hardware platforms across a range of different applications. This will ultimately allow us to understand where modern hardware designed for ML can be applied to broader problems like the needs of ASC.</p>\n<p>&nbsp;</p>\n<p>Education has been an important focus throughout the duration of the project. The team included a postdocs and several graduate students and several undergraduates at Harvard University. This included two female PhD students, one of whom recently completed the PhD and is a researcher in US industry.</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 10/29/2020<br>\n\t\t\t\t\tModified by: David&nbsp;M&nbsp;Brooks</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThe performance of computer programs is inherently limited by the difficulty of executing multiple portions of the application in parallel. Writing parallel programs is difficult, even for expert programmers, and hence many programs are still written in serial fashion. The goal of this project is to develop a practical approach to parallelism using coarse-grain speculative execution, learning, and prediction. The goal of this project is \"Automatically Scalable Computing\" (ASC) in which a machine learning system can assist with this problem. Effectively, the question we seek to answer if whether it is possible to we train a system to automatically find parallelism.\n\n \n\nThe project has had several major foci of investigation:\n\n1)         Identification of locations in the program that are amenable for prediction and development of prediction algorithms to accurately predict the future state of a program;\n\n2)         Finding what applications this applications this approach might be useful for.\n\n3)         Understanding the hardware support necessary to take advantage of this information in order to make the program run faster.\n\n \n\nWork in the project demonstrated the overall merit of the ASC approach for speeding up applications. Further work was necessary to show how to build computers that could practically take advantage of this. One fundamental problem is that machine learning algorithms are themselves quite costly to implement. Hence, a major challenge in this project was to understand the hardware support necessary to enable the ASC vision. At the project outset very little research had been performed on hardware support for efficient machine learning. The cost of machine learning training and prediction on general-purpose computers was known to be quite high in energy and latency. However, over the past two years many machine learning accelerators have been deployed for both cloud and edge computing devices, and many more are under active research and development. While these accelerators have primarily been developed for existing applications leveraging deep neural networks for computer vision (CV) and natural language processing (NLP), they have the potential to impact many other applications, including techniques such as ASC. The project has undertaken the benchmarking and workload characterization of modern machine learning hardware platforms across a range of different applications. This will ultimately allow us to understand where modern hardware designed for ML can be applied to broader problems like the needs of ASC.\n\n \n\nEducation has been an important focus throughout the duration of the project. The team included a postdocs and several graduate students and several undergraduates at Harvard University. This included two female PhD students, one of whom recently completed the PhD and is a researcher in US industry.\n\n \n\n\t\t\t\t\tLast Modified: 10/29/2020\n\n\t\t\t\t\tSubmitted by: David M Brooks"
 }
}