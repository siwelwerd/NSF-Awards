{
 "awd_id": "1518702",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CSR: CC: Large: A High-Performance Data Center Operating System",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032925197",
 "po_email": "mmcclure@nsf.gov",
 "po_sign_block_name": "Marilyn McClure",
 "awd_eff_date": "2015-07-15",
 "awd_exp_date": "2018-12-31",
 "tot_intn_awd_amt": 900000.0,
 "awd_amount": 900000.0,
 "awd_min_amd_letter_date": "2015-07-20",
 "awd_max_amd_letter_date": "2017-07-09",
 "awd_abstract_narration": "Today, many popular cloud data center applications spend a huge fraction of their time running operating system code.  Examples include the backend services implementing Facebook, Google, Amazon, and other popular websites.  These applications spend much of their time moving, processing, and storing data. In a traditional operating system, however, the operating system kernel mediates all network and storage access, as a means to provide application, data, and network security within the data center.  Thus, the code path for a network or storage request to traverse from application code through the kernel to the device hardware (and back again) is many times longer than the minimum required.\r\n\r\nThis work streamlines the performance of these applications without compromising security by changing the roles of the operating systems kernel, application runtime library, and device hardware. Instead, the traditional role of the kernel is split in two.  Applications have direct access to virtualized I/O devices, allowing most I/O operations to skip the kernel entirely.  The kernel operates primarily in the control plane, establishing and limiting data plane connections in accordance with the operating system security policy.  \r\n\r\nThe work has the potential for dramatic improvements in application and server performance, as well as data center energy consumption and protocol flexibility.  Network and storage intensive data center applications are used by literally billions of people around the globe on a daily basis.  By reducing the overhead of network and storage these applications, the hardware needed to support existing services can be reduced, making it cheaper for new services to be developed.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Thomas",
   "pi_last_name": "Anderson",
   "pi_mid_init": "E",
   "pi_sufx_name": "",
   "pi_full_name": "Thomas E Anderson",
   "pi_email_addr": "tom@cs.washington.edu",
   "nsf_id": "000196821",
   "pi_start_date": "2015-07-20",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Arvind",
   "pi_last_name": "Krishnamurthy",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Arvind Krishnamurthy",
   "pi_email_addr": "arvind@cs.washington.edu",
   "nsf_id": "000488256",
   "pi_start_date": "2015-07-20",
   "pi_end_date": null
  },
  {
   "pi_role": "Former Co-Principal Investigator",
   "pi_first_name": "Xi",
   "pi_last_name": "Wang",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Xi Wang",
   "pi_email_addr": "xi@cs.washington.edu",
   "nsf_id": "000684160",
   "pi_start_date": "2015-07-20",
   "pi_end_date": "2016-07-14"
  }
 ],
 "inst": {
  "inst_name": "University of Washington",
  "inst_street_address": "4333 BROOKLYN AVE NE",
  "inst_street_address_2": "",
  "inst_city_name": "SEATTLE",
  "inst_state_code": "WA",
  "inst_state_name": "Washington",
  "inst_phone_num": "2065434043",
  "inst_zip_code": "981951016",
  "inst_country_name": "United States",
  "cong_dist_code": "07",
  "st_cong_dist_code": "WA07",
  "org_lgl_bus_name": "UNIVERSITY OF WASHINGTON",
  "org_prnt_uei_num": "",
  "org_uei_num": "HD1WMN6945W6"
 },
 "perf_inst": {
  "perf_inst_name": "University of Washington",
  "perf_str_addr": "185 Stevens Way",
  "perf_city_name": "Seattle",
  "perf_st_code": "WA",
  "perf_st_name": "Washington",
  "perf_zip_code": "981952350",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "WA07",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7925",
   "pgm_ref_txt": "LARGE PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 588445.0
  },
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 311555.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Today, many popular data center applications spend a huge fraction of their time running operating system code to perform network and file I/O. In a traditional system, the kernel mediates access to device hardware to enforce process isolation as well as network and disk security. Typically, the kernel also provides higher-level functionality, such as a TCP/IP network protocol stack and sophisticated file and storage management. Thus, the code path for a network or disk request to traverse from application code through the kernel to the device hardware (and back again) is many times longer than the minimum required.</p>\n<p>&nbsp;</p>\n<p>We proposed a new approach to the co-design of the operating system kernel, application runtime library, and device hardware, with a goal of streamlining the performance of I/O-bound server applications. We believe our approach has the potential for dramatic improvements in application and server performance, as well as data center energy consumption and protocol flexibility.</p>\n<p>&nbsp;</p>\n<p>We proposed to split the traditional role of the kernel in two. In our model, applications have direct access to virtualized I/O devices, allowing most I/O operations to skip the kernel entirely. The kernel operates primarily in the control plane, establishing and limiting data plane connections in accordance with the operating system security policy. A key enabler is emerging I/O device hardware trends. Our aim was to understand the implications of this new paradigm for application, operating system, and hardware design. What data plane interface is needed to achieve maximal user-level performance and flexibility (e.g., transmit/receive queues, RDMA, SCSI)?&nbsp; What control plane interface is needed to allow the operating system kernel to enforce security policy (e.g., to prevent a rogue application from flooding the network)?&nbsp; How do we implement congestion control in the data center, when applications have direct access to the network?&nbsp; How should the operating system kernel be re-designed to setup and manage data paths?&nbsp; How should we specialize application runtime libraries once the network stack and file system can become application-specific?&nbsp; What is the impact of on-chip network and disk interfaces for steering incoming I/O to the appropriate core?&nbsp; To our knowledge, none of them were well-addressed in the research literature.</p>\n<p>&nbsp;</p>\n<p>We also did research this year with undergraduates as part of the Arrakis project (broadly all of them were working on aspects of designing and prototyping a way to extend Arrakis to support container virtualization). The other part of the experiment was to see whether it would be possible to scale research experiences to more undergraduates.</p>\n<p>&nbsp;</p>\n<p>I/O-intensive data center applications are used by literally billions of people around the globe on a daily basis. By reducing the overhead of I/O, we can dramatically reduce the cost of provisioning existing public services, like Wikipedia, as well as make it much cheaper for new public services to be developed.&nbsp; As importantly, if the research approach is successful, we will need to change how we teach operating systems to both undergraduate and graduate students. We plan to develop lecture notes, slides, and assignments to better prepare students for the changes sweeping through data center operating systems.</p>\n<p>&nbsp;</p>\n<p>We published a paper regarding TAS in Eurosys 2019 and Slim in NSDI 2019. We have open sourced the TAS/FlexNIC code, and researchers at University of Wisconsin, Madison, are already building on top of this code in order to engineer other high-performance datacenter applications.&nbsp; Related papers were also published at NSDI&rsquo;17 and NSDI&rsquo;18.</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 03/05/2019<br>\n\t\t\t\t\tModified by: Arvind&nbsp;Krishnamurthy</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nToday, many popular data center applications spend a huge fraction of their time running operating system code to perform network and file I/O. In a traditional system, the kernel mediates access to device hardware to enforce process isolation as well as network and disk security. Typically, the kernel also provides higher-level functionality, such as a TCP/IP network protocol stack and sophisticated file and storage management. Thus, the code path for a network or disk request to traverse from application code through the kernel to the device hardware (and back again) is many times longer than the minimum required.\n\n \n\nWe proposed a new approach to the co-design of the operating system kernel, application runtime library, and device hardware, with a goal of streamlining the performance of I/O-bound server applications. We believe our approach has the potential for dramatic improvements in application and server performance, as well as data center energy consumption and protocol flexibility.\n\n \n\nWe proposed to split the traditional role of the kernel in two. In our model, applications have direct access to virtualized I/O devices, allowing most I/O operations to skip the kernel entirely. The kernel operates primarily in the control plane, establishing and limiting data plane connections in accordance with the operating system security policy. A key enabler is emerging I/O device hardware trends. Our aim was to understand the implications of this new paradigm for application, operating system, and hardware design. What data plane interface is needed to achieve maximal user-level performance and flexibility (e.g., transmit/receive queues, RDMA, SCSI)?  What control plane interface is needed to allow the operating system kernel to enforce security policy (e.g., to prevent a rogue application from flooding the network)?  How do we implement congestion control in the data center, when applications have direct access to the network?  How should the operating system kernel be re-designed to setup and manage data paths?  How should we specialize application runtime libraries once the network stack and file system can become application-specific?  What is the impact of on-chip network and disk interfaces for steering incoming I/O to the appropriate core?  To our knowledge, none of them were well-addressed in the research literature.\n\n \n\nWe also did research this year with undergraduates as part of the Arrakis project (broadly all of them were working on aspects of designing and prototyping a way to extend Arrakis to support container virtualization). The other part of the experiment was to see whether it would be possible to scale research experiences to more undergraduates.\n\n \n\nI/O-intensive data center applications are used by literally billions of people around the globe on a daily basis. By reducing the overhead of I/O, we can dramatically reduce the cost of provisioning existing public services, like Wikipedia, as well as make it much cheaper for new public services to be developed.  As importantly, if the research approach is successful, we will need to change how we teach operating systems to both undergraduate and graduate students. We plan to develop lecture notes, slides, and assignments to better prepare students for the changes sweeping through data center operating systems.\n\n \n\nWe published a paper regarding TAS in Eurosys 2019 and Slim in NSDI 2019. We have open sourced the TAS/FlexNIC code, and researchers at University of Wisconsin, Madison, are already building on top of this code in order to engineer other high-performance datacenter applications.  Related papers were also published at NSDI?17 and NSDI?18.\n\n \n\n\t\t\t\t\tLast Modified: 03/05/2019\n\n\t\t\t\t\tSubmitted by: Arvind Krishnamurthy"
 }
}