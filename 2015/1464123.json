{
 "awd_id": "1464123",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CRII: SHF: Scaling Systematic Software Analyses Using Memoization",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927991",
 "po_email": "namla@nsf.gov",
 "po_sign_block_name": "Nina Amla",
 "awd_eff_date": "2015-06-01",
 "awd_exp_date": "2019-05-31",
 "tot_intn_awd_amt": 175000.0,
 "awd_amount": 175000.0,
 "awd_min_amd_letter_date": "2015-02-20",
 "awd_max_amd_letter_date": "2015-02-20",
 "awd_abstract_narration": "Systematic software analyses, such as model checking and symbolic execution, perform systematic exploration of program behaviors to find faults in software systems. While the usefulness of systematic software analyses for improving software reliability has long been established, scaling them to real-world applications remains a key technical challenge, since the state spaces of these applications typically are large and computationally expensive to explore systematically. \r\n\r\n\r\nThis project develops a memoization-based approach to enhance scalability of systematic analyses. Specifically, the analysis results are re-used to amortize the cost of analysis over multiple successive executions of the analysis. The project investigates foundations that provide the basic tool-set for enabling reuse of analysis results, optimizations that specialize memoized analyses in the context of change, and the use of parallel techniques to effectively utilize the available computing resources. The technical contributions of the project could significantly enhance the efficacy of systematic analyses, which could have a broad impact by improving the quality of software systems.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Guowei",
   "pi_last_name": "Yang",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Guowei Yang",
   "pi_email_addr": "gyang@txstate.edu",
   "nsf_id": "000676081",
   "pi_start_date": "2015-02-20",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Texas State University - San Marcos",
  "inst_street_address": "601 UNIVERSITY DR",
  "inst_street_address_2": "",
  "inst_city_name": "SAN MARCOS",
  "inst_state_code": "TX",
  "inst_state_name": "Texas",
  "inst_phone_num": "5122452314",
  "inst_zip_code": "786664684",
  "inst_country_name": "United States",
  "cong_dist_code": "15",
  "st_cong_dist_code": "TX15",
  "org_lgl_bus_name": "TEXAS STATE UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "HS5HWWK1AAU5"
 },
 "perf_inst": {
  "perf_inst_name": "Texas State University - San Marcos",
  "perf_str_addr": "601 University Drive",
  "perf_city_name": "San Marcos",
  "perf_st_code": "TX",
  "perf_st_name": "Texas",
  "perf_zip_code": "786664684",
  "perf_ctry_code": "US",
  "perf_cong_dist": "15",
  "perf_st_cong_dist": "TX15",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "8206",
   "pgm_ref_txt": "Formal Methods and Verification"
  },
  {
   "pgm_ref_code": "8228",
   "pgm_ref_txt": "CISE Resrch Initiatn Initiatve"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 175000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Systematic software analyses are powerful techniques for finding bugs in software systems, yet scaling them to handle complex programs remains challenging. This project developed a set of novel techniques and tools that improved scalability and efficacy of symbolic execution through new forms of incremental, parallel, and synergistic analyses. These tools and techniques enabled efficient property checking by avoiding unnecessary or redundant analysis to minimize work load among different workers in a distributed setting, reduce the amount of communication and share constraint solutions among workers for parallel symbolic execution, and enable an effective integration of heuristics-based and systematic approaches for test generation. While the project is mainly focused on scaling symbolic execution, a novel approach based on symbolic execution was introduced for numeric characterization of program changes to support software evolution. This project yields several broader impacts: (1) the project provided highly skilled training and cutting-edge research in testing and verification to PhD, Masters, and undergraduate students; (2) it enabled potential technology transfer from academia to industry through courses offered to part-time students who worked full-time in the software industry; and (3) the results of the project were disseminated to both academia and industry through peer-reviewed publications, presentations, and open-source tools.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 08/30/2019<br>\n\t\t\t\t\tModified by: Guowei&nbsp;Yang</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nSystematic software analyses are powerful techniques for finding bugs in software systems, yet scaling them to handle complex programs remains challenging. This project developed a set of novel techniques and tools that improved scalability and efficacy of symbolic execution through new forms of incremental, parallel, and synergistic analyses. These tools and techniques enabled efficient property checking by avoiding unnecessary or redundant analysis to minimize work load among different workers in a distributed setting, reduce the amount of communication and share constraint solutions among workers for parallel symbolic execution, and enable an effective integration of heuristics-based and systematic approaches for test generation. While the project is mainly focused on scaling symbolic execution, a novel approach based on symbolic execution was introduced for numeric characterization of program changes to support software evolution. This project yields several broader impacts: (1) the project provided highly skilled training and cutting-edge research in testing and verification to PhD, Masters, and undergraduate students; (2) it enabled potential technology transfer from academia to industry through courses offered to part-time students who worked full-time in the software industry; and (3) the results of the project were disseminated to both academia and industry through peer-reviewed publications, presentations, and open-source tools.\n\n\t\t\t\t\tLast Modified: 08/30/2019\n\n\t\t\t\t\tSubmitted by: Guowei Yang"
 }
}