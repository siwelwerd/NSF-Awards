{
 "awd_id": "1538877",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "Compute-Aware Control Systems: Coordinated Control of Physical Systems and Computer Processes",
 "cfda_num": "47.041",
 "org_code": "07030000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Robert Landers",
 "awd_eff_date": "2015-09-15",
 "awd_exp_date": "2019-08-31",
 "tot_intn_awd_amt": 369906.0,
 "awd_amount": 369906.0,
 "awd_min_amd_letter_date": "2015-08-26",
 "awd_max_amd_letter_date": "2015-08-26",
 "awd_abstract_narration": "Increasingly, the heart of modern products includes embedded processors that control physical systems such as lights, motorized mechanisms, and communications. These developments are enabled by the increasing sophistication of embedded processor technology that can reconfigure the computing system while it is running in order to improve performance or power usage. However, current practice is to design the controller of the processor separately from the physical system controller, overlooking the opportunity for synergy.  The focus of this research is to develop methods to coordinate the design of the processor and physical-system controllers in order to give more design flexibility. Specifically, this coordination will make the physical system control algorithms compute-aware, that is, adaptive to the fluctuating demands and limitations of the computing systems. Similarly, a computer process controller will be designed that dynamically manages the power and performance of the computing processes in response to the changing demands of the physical system controller. The impact of this work is that embedded processors used for controls applications can be downsized, made lighter in weight and lower power, while still maintaining stability and good performance.  The applications that are expected to have the most benefit are self-powered systems such as mobile robots and aerial robots, especially ones where size and weight are important.\r\n\r\nThe objective of this research is to develop coordinated control methods for the physical system controller and the computing system controller.  The research will combine a theoretical framework with a software architecture in order to design and analyze the stochastic hybrid system that arises from integrating the physical system controller and the computing system controllers.  The researchers will develop stability analysis methods and new design methods that will expand the applicability of anytime algorithms to larger classes of control laws and larger classes of physical systems.  The predictive control methods to be developed for computing systems will make the system highly responsive to the fluctuating demands on the computer processor. The computer science approaches to be used include the concepts of soft-real-time computing, reusable software frameworks, and software verification and validation methods. The architecture to be developed has three basic components: Compute-Aware Physical System Controllers: standard controllers reformulated into Anytime Algorithms, which can be stopped or reconfigured anytime due to sudden limitations in the computer resources; Computer Power and Performance Controller:  a controller for computer processes that adapts to changing requirements of the physical system controller; and a High-Level Coordination Controller: algorithms that manage the trade-off between the power and performance requirements of the computer system and of the physical system controller. All of the developed methods will be validated through Monte Carlo simulations and experiments.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "ENG",
 "org_dir_long_name": "Directorate for Engineering",
 "div_abbr": "CMMI",
 "org_div_long_name": "Division of Civil, Mechanical, and Manufacturing Innovation",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Aldo",
   "pi_last_name": "Ferri",
   "pi_mid_init": "A",
   "pi_sufx_name": "",
   "pi_full_name": "Aldo A Ferri",
   "pi_email_addr": "al.ferri@me.gatech.edu",
   "nsf_id": "000191020",
   "pi_start_date": "2015-08-26",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Bonnie",
   "pi_last_name": "Ferri",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Bonnie Ferri",
   "pi_email_addr": "bonnie.ferri@gatech.edu",
   "nsf_id": "000342647",
   "pi_start_date": "2015-08-26",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Georgia Tech Research Corporation",
  "inst_street_address": "926 DALNEY ST NW",
  "inst_street_address_2": "",
  "inst_city_name": "ATLANTA",
  "inst_state_code": "GA",
  "inst_state_name": "Georgia",
  "inst_phone_num": "4048944819",
  "inst_zip_code": "303186395",
  "inst_country_name": "United States",
  "cong_dist_code": "05",
  "st_cong_dist_code": "GA05",
  "org_lgl_bus_name": "GEORGIA TECH RESEARCH CORP",
  "org_prnt_uei_num": "EMW9FC8J3HN4",
  "org_uei_num": "EMW9FC8J3HN4"
 },
 "perf_inst": {
  "perf_inst_name": "Georgia Institute of Techmology",
  "perf_str_addr": "225 North Avenue, NW",
  "perf_city_name": "Atlanta",
  "perf_st_code": "GA",
  "perf_st_name": "Georgia",
  "perf_zip_code": "303320002",
  "perf_ctry_code": "US",
  "perf_cong_dist": "05",
  "perf_st_cong_dist": "GA05",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "756900",
   "pgm_ele_name": "Dynamics, Control and System D"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "033E",
   "pgm_ref_txt": "Smart and responsive structures"
  },
  {
   "pgm_ref_code": "030E",
   "pgm_ref_txt": "CONTROL SYSTEMS"
  },
  {
   "pgm_ref_code": "8024",
   "pgm_ref_txt": "Complex Systems"
  },
  {
   "pgm_ref_code": "031E",
   "pgm_ref_txt": "MECHATRONICS"
  },
  {
   "pgm_ref_code": "034E",
   "pgm_ref_txt": "Dynamical systems"
  },
  {
   "pgm_ref_code": "032E",
   "pgm_ref_txt": "SENSORS AND ACTUATORS"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 369906.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Historically, control systems for physical systems have been designed by sizing the computing platform to handle the worst-case execution time for that controller, or by selecting a computing platform first and then designing the best quality controller that will run on that platform. However, the design space of these cyber-physical systems can be vastly expanded if the selection of the computing platform and control system are coordinated to couple the power/performance controllers of the computing system to the physical system controller. Then, during various phases of operation of the physical system being controlled, decisions can be made at a high level to trade-off power and performance in both the physical system controller and in the computing platform.</p>\n<p>This project built a theoretical framework and control architecture that combines imprecise computing with control of computing processes in order to make physical system controllers <em>compute-aware</em>, that is, adaptable to changes in the underlying computing system; at the same time, it produced computing process controllers that were <em>control-aware</em>, that is, adaptable to the changing needs of the physical system controller.</p>\n<p>A main impact of the research on society is the advances that it makes on real-time embedded control system applications, which are prevalent everywhere and increasing in usage in microscale applications. The methodology of coordinating the physical system controller and the computing process controllers at runtime allows for greater efficiency and for better design flexibility. As a result, the computing platform is much lighter in weight, lower in cost, and uses much less energy than is now possible with standard design procedures. Recent advances in computing technologies that make this coordination possible include power managers and underlying reconfigurable hardware that are now commonly available on embedded computing platforms. As important as the ability to control the physical processor, a compute-aware software framework was needed to allow the control algorithms to adapt to changing performance and accuracy demands and to processor resource availability.&nbsp;</p>\n<p><strong>Significant Results:</strong></p>\n<p>The most significant result in this project was the development a Quality of Service (QoS) manager that is situated between the application and the operating system. The QoS manager determines, based on measurements and service requirements, the coordinated settings for both the computing system and the physical system controller. Two methodologies for the QoS manager were developed and experimentally tested: 1) a situation-aware governor that controls the speed of the processor based on feedback from the physical system including mission-level situation awareness, and 2) a machine learning (ML) method, based on reinforcement learning, that coordinates both the computing system and the physical system controller settings. The implementations of both methods were tested on an autonomous mobile robot tasked with navigating while avoiding obstacles that it discovered along the way.&nbsp;&nbsp; The methods were compared to three baseline methods that manage the power/performance settings of the computing platform: a static low-power setting, a static high-performance setting, and the default operating system on-demand governor, which is an adaptive power manager in Linux that adjusts power based on computing load.&nbsp;Experiments revealed that the situation-aware governor resulted in 20-40% reductions in power consumption with less&nbsp;than 5% decrease in physical system performance.&nbsp;</p>\n<p>For the ML governor, a spectrum of power-performance tradeoffs were found to be possible by varying the parameters in the Q-learner. As an example, the ML governor reduced power consumption by 2.7 W (39%) while reducing tracking errors by 4.6% compared to the default Linux on-demand governor in an experimental test.</p>\n<p>This research also resulted in a hierarchy of algorithms that can be used to dynamically couple the performance of the processor to that of the application. Anytime control concepts and imprecise computing were used to develop control strategies that could be switched to meet different performance and resource targets.&nbsp; In order to manage transients that result from switching between control algorithms, a speculative-thread technique was developed to improve latency in a processor. The speculative-thread method predicted when a new algorithm might be needed and spawned a new computational ?thread? ahead of time in order to reduce the warm-up time normally needed for things like memory caches to fill.&nbsp; &nbsp;Through experiments and simulation, near ?bumpless transfer? was found to be realized when switching dynamic algorithms.&nbsp;</p>\n<p><em>Integrating Research into Classes: </em>The techniques developed in this research effort were successfully added to a graduate-level class on computing in controls.&nbsp; Students were introduced to the topics of anytime control and control of processors, specifically dynamic voltage and frequency scaling, and sleep state control.&nbsp; Students were then given a project to implement these methods on a mobile robot platform.&nbsp;&nbsp;</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 07/02/2020<br>\n\t\t\t\t\tModified by: Aldo&nbsp;F&nbsp;Ferri</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nHistorically, control systems for physical systems have been designed by sizing the computing platform to handle the worst-case execution time for that controller, or by selecting a computing platform first and then designing the best quality controller that will run on that platform. However, the design space of these cyber-physical systems can be vastly expanded if the selection of the computing platform and control system are coordinated to couple the power/performance controllers of the computing system to the physical system controller. Then, during various phases of operation of the physical system being controlled, decisions can be made at a high level to trade-off power and performance in both the physical system controller and in the computing platform.\n\nThis project built a theoretical framework and control architecture that combines imprecise computing with control of computing processes in order to make physical system controllers compute-aware, that is, adaptable to changes in the underlying computing system; at the same time, it produced computing process controllers that were control-aware, that is, adaptable to the changing needs of the physical system controller.\n\nA main impact of the research on society is the advances that it makes on real-time embedded control system applications, which are prevalent everywhere and increasing in usage in microscale applications. The methodology of coordinating the physical system controller and the computing process controllers at runtime allows for greater efficiency and for better design flexibility. As a result, the computing platform is much lighter in weight, lower in cost, and uses much less energy than is now possible with standard design procedures. Recent advances in computing technologies that make this coordination possible include power managers and underlying reconfigurable hardware that are now commonly available on embedded computing platforms. As important as the ability to control the physical processor, a compute-aware software framework was needed to allow the control algorithms to adapt to changing performance and accuracy demands and to processor resource availability. \n\nSignificant Results:\n\nThe most significant result in this project was the development a Quality of Service (QoS) manager that is situated between the application and the operating system. The QoS manager determines, based on measurements and service requirements, the coordinated settings for both the computing system and the physical system controller. Two methodologies for the QoS manager were developed and experimentally tested: 1) a situation-aware governor that controls the speed of the processor based on feedback from the physical system including mission-level situation awareness, and 2) a machine learning (ML) method, based on reinforcement learning, that coordinates both the computing system and the physical system controller settings. The implementations of both methods were tested on an autonomous mobile robot tasked with navigating while avoiding obstacles that it discovered along the way.   The methods were compared to three baseline methods that manage the power/performance settings of the computing platform: a static low-power setting, a static high-performance setting, and the default operating system on-demand governor, which is an adaptive power manager in Linux that adjusts power based on computing load. Experiments revealed that the situation-aware governor resulted in 20-40% reductions in power consumption with less than 5% decrease in physical system performance. \n\nFor the ML governor, a spectrum of power-performance tradeoffs were found to be possible by varying the parameters in the Q-learner. As an example, the ML governor reduced power consumption by 2.7 W (39%) while reducing tracking errors by 4.6% compared to the default Linux on-demand governor in an experimental test.\n\nThis research also resulted in a hierarchy of algorithms that can be used to dynamically couple the performance of the processor to that of the application. Anytime control concepts and imprecise computing were used to develop control strategies that could be switched to meet different performance and resource targets.  In order to manage transients that result from switching between control algorithms, a speculative-thread technique was developed to improve latency in a processor. The speculative-thread method predicted when a new algorithm might be needed and spawned a new computational ?thread? ahead of time in order to reduce the warm-up time normally needed for things like memory caches to fill.   Through experiments and simulation, near ?bumpless transfer? was found to be realized when switching dynamic algorithms. \n\nIntegrating Research into Classes: The techniques developed in this research effort were successfully added to a graduate-level class on computing in controls.  Students were introduced to the topics of anytime control and control of processors, specifically dynamic voltage and frequency scaling, and sleep state control.  Students were then given a project to implement these methods on a mobile robot platform.  \n\n \n\n\t\t\t\t\tLast Modified: 07/02/2020\n\n\t\t\t\t\tSubmitted by: Aldo F Ferri"
 }
}