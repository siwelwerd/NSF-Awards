{
 "awd_id": "1514422",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "TWC: Medium: Scaling proof-based verifiable computation",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032922981",
 "po_email": "pregalia@nsf.gov",
 "po_sign_block_name": "Phillip Regalia",
 "awd_eff_date": "2015-07-01",
 "awd_exp_date": "2021-06-30",
 "tot_intn_awd_amt": 1151830.0,
 "awd_amount": 1151830.0,
 "awd_min_amd_letter_date": "2015-06-29",
 "awd_max_amd_letter_date": "2015-06-29",
 "awd_abstract_narration": "This research addresses a fundamental problem in systems security: how can a machine specify a computation to another one and then, without executing the computation, check that the other machine carried it out correctly? Over the last several years, a new approach to this problem has emerged, based on refining cryptographic and theoretical tools, and incorporating them into built systems. However, despite exciting advances, the resulting systems are still not practical in the normal sense. This goal of this project is truly practical performance for certain real-world problems at realistic input sizes. This research could have wide-ranging impact on third-party computing models such as cloud computing, distributed systems, untrusted hardware manufacturers, and defense applications. More broadly, truly inexpensive verifiable computation will enable new ways of building systems. \r\n\r\nThe project applies ideas from the programming languages community to represent computation more efficiently; applies notions of program approximation to produce efficient partial verifiability; refines and implements protocols that promise reduced memory utilization; and develops new protocols that reduce overhead and are better-suited to important classes of computations. The methods include refining and adapting existing theory, implementing systems based on the refinements, modeling performance and costs, and conducting rigorous experimental evaluations. The results will be disseminated through peer-reviewed publications, and through software and experimental configurations that will be available freely.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Michael",
   "pi_last_name": "Walfish",
   "pi_mid_init": "H",
   "pi_sufx_name": "",
   "pi_full_name": "Michael H Walfish",
   "pi_email_addr": "mwalfish@gmail.com",
   "nsf_id": "000653725",
   "pi_start_date": "2015-06-29",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Andrew",
   "pi_last_name": "Blumberg",
   "pi_mid_init": "J",
   "pi_sufx_name": "",
   "pi_full_name": "Andrew J Blumberg",
   "pi_email_addr": "andrew.blumberg@columbia.edu",
   "nsf_id": "000059282",
   "pi_start_date": "2015-06-29",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Thomas",
   "pi_last_name": "Wies",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Thomas Wies",
   "pi_email_addr": "tw47@nyu.edu",
   "nsf_id": "000611335",
   "pi_start_date": "2015-06-29",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "New York University",
  "inst_street_address": "70 WASHINGTON SQ S",
  "inst_street_address_2": "",
  "inst_city_name": "NEW YORK",
  "inst_state_code": "NY",
  "inst_state_name": "New York",
  "inst_phone_num": "2129982121",
  "inst_zip_code": "100121019",
  "inst_country_name": "United States",
  "cong_dist_code": "10",
  "st_cong_dist_code": "NY10",
  "org_lgl_bus_name": "NEW YORK UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "NX9PXMKW5KW8"
 },
 "perf_inst": {
  "perf_inst_name": "New York University",
  "perf_str_addr": "715 Broadway",
  "perf_city_name": "New York",
  "perf_st_code": "NY",
  "perf_st_name": "New York",
  "perf_zip_code": "100036806",
  "perf_ctry_code": "US",
  "perf_cong_dist": "10",
  "perf_st_cong_dist": "NY10",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 1151830.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-9490ca6c-7fff-41bc-0774-74445417d799\"> </span></p>\n<p dir=\"ltr\"><span>This project built systems that allow people to get useful work out of computers and components without having to </span><em>trust</em><span>, that is </span><em>assume</em><span>, that those components work properly.</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>A central focus has been systems based on probabilistic proofs. In a probabilistic proof, a </span><em>verifier</em><span> gets a guarantee from a </span><em>prover</em><span>. An example is a setup where a client outsources computation to a server and receives the alleged output of the computation, along with some auxiliary information (such as a certificate of correctness) that allows the verifier to </span><em>check</em><span> that the prover computed correctly, without the verifier re-doing the computation. Another example, which has lately seen an explosion of interest, is in blockchains: the verifier is a miner or \"keeper of state\", and the prover is an entity that wants to memorialize a transaction on a blockchain, possibly without disclosing the details of the transaction. In that case, the prover supplies a short proof (for example, a \"zkSNARK\" or other probabilistic proof) that the computation was done correctly, and verifiers need not redo the computation, they simply check the proof.</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>This grant substantially advanced the state of the art of implementations of probabilistic proofs. This included the first hardware implementation of a probabilistic proof together with a novel use (verifying the correct execution of hardware manufactured in an untrusted foundry), the first time that any probabilistic-proof-based system actually saved work for the verifier, and the first systematic uses of formal methods to reduce the costs of representing computations in the probabilistic proof framework.&nbsp;</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>This grant also studied other kinds of outsourcing, for example giving a deployer of a web application assurance that the execution of a web application is consistent with its source code -- something that web developers cannot otherwise verify when deploying their software in cloud environments. Another example is outsourced geometric inference, where cloud servers provide assurance to a researcher that expensive data analysis conducted on very large data sets was executed correctly.</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>In addition, this grant studied how to remove trust in other system components, for example how to deal with the threat of untrusted hardware peripherals. The grant also studied other notions of correctness, for example ensuring reliable results in inference of population genetics statistics from phylogenetic data.</span><span> </span><span>Another example is the development of new machine learning algorithms that provide formal guarantees, such as algorithms that produce well-calibrated models for survival analysis of patients in health-care settings.</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>In all, the grant produced well over two dozen refereed publications in leading venues.&nbsp;</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>The grant also supported the development of multiple PhDs and postdocs, both via direct support and by supporting advising. Shuai Mu was a postdoc and is now an assistant professor at Stony Brook. Cheng Tan graduated with his PhD in CS from NYU in 2020, and is now an assistant professor at Northeastern. Cheng Tan won the award for best dissertation in the NYU CS department. Sebastian Angel graduated with his PhD in CS from UT Austin in 2018, and is now an assistant professor at UPenn. Sebastian received the award for best dissertation in the UT Austin CS department and additionally received the ACM SIGOPS Dennis Ritchie award for Best Dissertation in the systems community. Gillian Grindstaff, who did not receive direct funding from the grant but worked on research supported by the grant, graduated with her PhD in math from UT Austin in 2021, and is now an NSF postdoc at Oxford (with a year at UCLA).&nbsp; Gillian received an award for one of the top dissertations in the UT Austin math department.</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>The PIs have also done outreach, for example organizing workshops, and presenting tutorial overviews at summer and winter schools. Other examples of outreach activities include teaching and mentoring high school students and administering a fellowship program that enabled US-based students to attend conferences.</span></p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 06/09/2022<br>\n\t\t\t\t\tModified by: Michael&nbsp;H&nbsp;Walfish</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n \nThis project built systems that allow people to get useful work out of computers and components without having to trust, that is assume, that those components work properly.\n\n \nA central focus has been systems based on probabilistic proofs. In a probabilistic proof, a verifier gets a guarantee from a prover. An example is a setup where a client outsources computation to a server and receives the alleged output of the computation, along with some auxiliary information (such as a certificate of correctness) that allows the verifier to check that the prover computed correctly, without the verifier re-doing the computation. Another example, which has lately seen an explosion of interest, is in blockchains: the verifier is a miner or \"keeper of state\", and the prover is an entity that wants to memorialize a transaction on a blockchain, possibly without disclosing the details of the transaction. In that case, the prover supplies a short proof (for example, a \"zkSNARK\" or other probabilistic proof) that the computation was done correctly, and verifiers need not redo the computation, they simply check the proof.\n\n \nThis grant substantially advanced the state of the art of implementations of probabilistic proofs. This included the first hardware implementation of a probabilistic proof together with a novel use (verifying the correct execution of hardware manufactured in an untrusted foundry), the first time that any probabilistic-proof-based system actually saved work for the verifier, and the first systematic uses of formal methods to reduce the costs of representing computations in the probabilistic proof framework. \n\n \nThis grant also studied other kinds of outsourcing, for example giving a deployer of a web application assurance that the execution of a web application is consistent with its source code -- something that web developers cannot otherwise verify when deploying their software in cloud environments. Another example is outsourced geometric inference, where cloud servers provide assurance to a researcher that expensive data analysis conducted on very large data sets was executed correctly.\n\n \nIn addition, this grant studied how to remove trust in other system components, for example how to deal with the threat of untrusted hardware peripherals. The grant also studied other notions of correctness, for example ensuring reliable results in inference of population genetics statistics from phylogenetic data. Another example is the development of new machine learning algorithms that provide formal guarantees, such as algorithms that produce well-calibrated models for survival analysis of patients in health-care settings.\n\n \nIn all, the grant produced well over two dozen refereed publications in leading venues. \n\n \nThe grant also supported the development of multiple PhDs and postdocs, both via direct support and by supporting advising. Shuai Mu was a postdoc and is now an assistant professor at Stony Brook. Cheng Tan graduated with his PhD in CS from NYU in 2020, and is now an assistant professor at Northeastern. Cheng Tan won the award for best dissertation in the NYU CS department. Sebastian Angel graduated with his PhD in CS from UT Austin in 2018, and is now an assistant professor at UPenn. Sebastian received the award for best dissertation in the UT Austin CS department and additionally received the ACM SIGOPS Dennis Ritchie award for Best Dissertation in the systems community. Gillian Grindstaff, who did not receive direct funding from the grant but worked on research supported by the grant, graduated with her PhD in math from UT Austin in 2021, and is now an NSF postdoc at Oxford (with a year at UCLA).  Gillian received an award for one of the top dissertations in the UT Austin math department.\n\n \nThe PIs have also done outreach, for example organizing workshops, and presenting tutorial overviews at summer and winter schools. Other examples of outreach activities include teaching and mentoring high school students and administering a fellowship program that enabled US-based students to attend conferences.\n\n \n\n\t\t\t\t\tLast Modified: 06/09/2022\n\n\t\t\t\t\tSubmitted by: Michael H Walfish"
 }
}