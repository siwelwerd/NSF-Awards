{
 "awd_id": "1718582",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "III: Small: Non-Invasive Real-Time Analytics in Database Systems using Holistic Query Compilation",
 "cfda_num": "47.070",
 "org_code": "05020000",
 "po_phone": "7032927347",
 "po_email": "sspengle@nsf.gov",
 "po_sign_block_name": "Sylvia Spengler",
 "awd_eff_date": "2017-08-01",
 "awd_exp_date": "2020-07-31",
 "tot_intn_awd_amt": 499774.0,
 "awd_amount": 499774.0,
 "awd_min_amd_letter_date": "2017-07-27",
 "awd_max_amd_letter_date": "2017-09-14",
 "awd_abstract_narration": "There are two major trends in modern data processing applications that make them distinct from applications in previous decades. The first is that they are noted for their continuously changing data sets. This could come from transactions updating the database or from upstream sources. The second is that they want to analyze the latest obtained data as quickly as possible. Data has immense value as soon as it is created, but that value diminishes over time. Therefore, it is imperative that the queries access the newest data generated in order for their results to have the most impact. The ability to ask complex questions about data as soon as it enters in the database is useful in many application domains, including real-time monitoring systems (e.g., is an incoming packet from a potential attacker?) and financial services (e.g., is this new credit card purchase fraudulent?). But current systems contain architecture remnants of legacy database management systems (DBMSs) that prevent them from taking advantage of newer hardware support for parallel optimizations. This limits the types of queries that an application executes on a DBMS that targets data as soon as it arrives. In turn, this adds additional cost to deploying a database application in terms of both hardware and administration overhead. Thus, the goal of this project is to investigate using query compilation to allow non-invasive analytical operations that are more complex than what is practical in today's DBMSs. Such query compilation techniques are beneficial to a wide array of data processing systems. The results of this study will allow organizations to deploy DBMSs that are able to handle applications with larger data sets and more complex workloads with fewer resources (e.g., hardware, personnel, energy).\r\n\r\nModern data-intensive applications seek to obtain new insights in real-time by analyzing a combination of historical data sets alongside recently collected data. To support such workloads, database management systems (DBMSs) need to support complex analytical queries over diverse data sets. The ever decreasing cost of DRAM is allowing a greater number of these applications to be memory-resident. As such, in-memory DBMSs will be used for most analytical and machine learning applications in the future. But there are remnants of how legacy disk-oriented DBMSs process queries that still exist in newer in-memory DBMSs that inhibit the kind of high-performance query execution over large data sets that this project targets. Thus, the goal of this project is to overcome this barrier through a new holistic approach to query compilation that integrates it comprehensively throughout the DBMS, and which builds upon (and adapts) recent advances in \"just-in-time\" (JIT) compilation technology and heterogeneous hardware resources. Using compilation to optimize many different aspects of the DBMS's architecture is important to support future \"Big Data\" applications that need to ingest large amounts of new data while simultaneously executing complex analytical workloads in near real-time.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "IIS",
 "org_div_long_name": "Division of Information & Intelligent Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Andrew",
   "pi_last_name": "Pavlo",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Andrew Pavlo",
   "pi_email_addr": "pavlo@cs.cmu.edu",
   "nsf_id": "000663205",
   "pi_start_date": "2017-07-27",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Todd",
   "pi_last_name": "Mowry",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Todd Mowry",
   "pi_email_addr": "tcm@cs.cmu.edu",
   "nsf_id": "000216388",
   "pi_start_date": "2017-07-27",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Carnegie-Mellon University",
  "inst_street_address": "5000 FORBES AVE",
  "inst_street_address_2": "",
  "inst_city_name": "PITTSBURGH",
  "inst_state_code": "PA",
  "inst_state_name": "Pennsylvania",
  "inst_phone_num": "4122688746",
  "inst_zip_code": "152133815",
  "inst_country_name": "United States",
  "cong_dist_code": "12",
  "st_cong_dist_code": "PA12",
  "org_lgl_bus_name": "CARNEGIE MELLON UNIVERSITY",
  "org_prnt_uei_num": "U3NKNFLNQ613",
  "org_uei_num": "U3NKNFLNQ613"
 },
 "perf_inst": {
  "perf_inst_name": "Carnegie-Mellon University",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "PA",
  "perf_st_name": "Pennsylvania",
  "perf_zip_code": "152133890",
  "perf_ctry_code": "US",
  "perf_cong_dist": "12",
  "perf_st_cong_dist": "PA12",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "736400",
   "pgm_ele_name": "Info Integration & Informatics"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7364",
   "pgm_ref_txt": "INFO INTEGRATION & INFORMATICS"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 499774.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Database management systems (DBMSs) need to support complex analytical queries over diverse data sets. The decreasing cost of DRAM is allowing a greater number of these applications to be memory-resident. As such, more organizations are using in-memory DBMSs for analytical and machine learning applications. But there are remnants of how legacy disk-oriented DBMSs process queries that still exist in newer in-memory DBMSs that inhibit high-performance query execution over large data sets that this project targets.<br /><br />In this project, we investigated novel techniques for query compilation for in-memory DBMSs built upon recent advances in \"just-in-time\" (JIT) compilation technology and vectorized execution. We first developed the relaxed operator fusion (ROF) method that enables a DBMS to dynamically adjust data batch sizes between query pipelines to maximize parallelism. Next, we created the permutable compiled query (PCQ) technique that allows the DBMS to modify a JIT query's execution strategies after it has already compiled the query.<br /><br />This research will have a profound impact on the proliferation of data-driven applications. It will enable database applications to support much larger data sets and more complex workloads than what is possible today. As a result, optimized DBMSs will reduce the labor cost of deploying large-scale database applications (since there is only a single DBMS to manage) and lower these deployments' energy costs (since these DBMSs will require fewer machines). This research is timely in identifying the bottlenecks of existing systems and influencing future DBMS architectures' design.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 12/08/2020<br>\n\t\t\t\t\tModified by: Andrew&nbsp;Pavlo</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nDatabase management systems (DBMSs) need to support complex analytical queries over diverse data sets. The decreasing cost of DRAM is allowing a greater number of these applications to be memory-resident. As such, more organizations are using in-memory DBMSs for analytical and machine learning applications. But there are remnants of how legacy disk-oriented DBMSs process queries that still exist in newer in-memory DBMSs that inhibit high-performance query execution over large data sets that this project targets.\n\nIn this project, we investigated novel techniques for query compilation for in-memory DBMSs built upon recent advances in \"just-in-time\" (JIT) compilation technology and vectorized execution. We first developed the relaxed operator fusion (ROF) method that enables a DBMS to dynamically adjust data batch sizes between query pipelines to maximize parallelism. Next, we created the permutable compiled query (PCQ) technique that allows the DBMS to modify a JIT query's execution strategies after it has already compiled the query.\n\nThis research will have a profound impact on the proliferation of data-driven applications. It will enable database applications to support much larger data sets and more complex workloads than what is possible today. As a result, optimized DBMSs will reduce the labor cost of deploying large-scale database applications (since there is only a single DBMS to manage) and lower these deployments' energy costs (since these DBMSs will require fewer machines). This research is timely in identifying the bottlenecks of existing systems and influencing future DBMS architectures' design.\n\n\t\t\t\t\tLast Modified: 12/08/2020\n\n\t\t\t\t\tSubmitted by: Andrew Pavlo"
 }
}