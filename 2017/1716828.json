{
 "awd_id": "1716828",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SI2-SSE: GraphPack: Unified Graph Processing with Parallel Boost Graph Library, GraphBLAS, and High-Level Generic Algorithm Interfaces",
 "cfda_num": "47.070",
 "org_code": "05090000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Rob Beverly",
 "awd_eff_date": "2016-10-01",
 "awd_exp_date": "2022-09-30",
 "tot_intn_awd_amt": 499386.0,
 "awd_amount": 499386.0,
 "awd_min_amd_letter_date": "2017-02-07",
 "awd_max_amd_letter_date": "2021-08-20",
 "awd_abstract_narration": "Modeling and simulating physical phenomena with computers is now an important tool for development and discovery in almost all fields of science and engineering.  Joining theory and experimentation, computation is now recognized as the \"third pillar\" of scientific research.  More recently, data analytics (the science of examining raw data with the purpose of drawing conclusions about that information) has emerged as an important computational tool for scientific discovery - a tool that is likely to be as important as, if not more important than, modeling and simulation.  Within the broad domain of data analytics, the use of graphs is a powerful conceptual tool that describes relationships between discrete objects.  Because of the growing importance of data analytics, many research groups have turned their attention to developing new approaches for solving large-scale graph problems.  While the research results in this area have been valuable, the software products that have been produced tend to be limited in scope and/or not of sufficient quality to be reused. This project will address this problem by creation of GraphPack, a comprehensive unified graph library with a coherent user interface and support for multiple state-of-the-art compute platforms. This work will have broad impacts in scientific and engineering application areas, larger social and economic areas depending on graph analytics, and in education. GraphPack will improve the ease of use and broaden the applicability of graph algorithms. Application areas include such diverse areas as knowledge discovery, genomics, proteomics, electronic design automation, forest management, Internet routing, power grid management, and many more.\r\n\r\nGraphPack will be a reliable and comprehensive toolkit applicable across a wide variety of problems and architectures that will unleash the capabilities of the community by making the current state of the art readily available. GraphPack will develop a consistent and comprehensive set of abstractions necessary to express a wide variety of (generic) graph algorithms and data structures in the context of unimodal as well as hybrid parallelism. These abstractions will be incorporated as abstract concepts, and selected concrete efficient implementations will be provided. While genericity is an important goal, GraphPack will also provide a simplified user interface for graph algorithms for the situations where simplicity is more important than fully tuned performance. GraphPack will also provide a GraphBLAS interface based on the recent efforts to provide a standardized set of graph operations based on the concepts of linear algebra. By providing multiple interfaces with efficient parallel implementations, GraphPack will enable a wide variety of applications to take advantage of high-performance graph algorithms.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "OAC",
 "org_div_long_name": "Office of Advanced Cyberinfrastructure (OAC)",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Andrew",
   "pi_last_name": "Lumsdaine",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Andrew Lumsdaine",
   "pi_email_addr": "al75@uw.edu",
   "nsf_id": "000420340",
   "pi_start_date": "2017-02-07",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Washington",
  "inst_street_address": "4333 BROOKLYN AVE NE",
  "inst_street_address_2": "",
  "inst_city_name": "SEATTLE",
  "inst_state_code": "WA",
  "inst_state_name": "Washington",
  "inst_phone_num": "2065434043",
  "inst_zip_code": "981951016",
  "inst_country_name": "United States",
  "cong_dist_code": "07",
  "st_cong_dist_code": "WA07",
  "org_lgl_bus_name": "UNIVERSITY OF WASHINGTON",
  "org_prnt_uei_num": "",
  "org_uei_num": "HD1WMN6945W6"
 },
 "perf_inst": {
  "perf_inst_name": "University of Washington",
  "perf_str_addr": "4333 Brooklyn Ave NE",
  "perf_city_name": "Seattle",
  "perf_st_code": "WA",
  "perf_st_name": "Washington",
  "perf_zip_code": "981950001",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "WA07",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "800400",
   "pgm_ele_name": "Software Institutes"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "026Z",
   "pgm_ref_txt": "NSCI: National Strategic Computing Initi"
  },
  {
   "pgm_ref_code": "7433",
   "pgm_ref_txt": "CyberInfra Frmwrk 21st (CIF21)"
  },
  {
   "pgm_ref_code": "7942",
   "pgm_ref_txt": "HIGH-PERFORMANCE COMPUTING"
  },
  {
   "pgm_ref_code": "8004",
   "pgm_ref_txt": "Software Institutes"
  },
  {
   "pgm_ref_code": "8005",
   "pgm_ref_txt": "Scientific Software Elements"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 499386.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span>Graphs are a fundamental concept in mathematics and computer science that are used to&nbsp;</span>represent relationships or connections between objects.&nbsp; Because of their generality, graphs can be used to model many different kinds of interconnected systems, such as knowledge discovery, genomics, proteomics, electronic design automation, forest management, Internet routing, power grid management, and many more.&nbsp; Although these different settings are quite distinct, the same abstraction (a graph) can be used to model each of them.&nbsp; In turn, analytical tools can be applied to the graph to discover interactions and other characteristics, independent of the original underlying problem.&nbsp; Graphs have thus become an indispensable tool in the field of data analytics.</p>\n<p>This project focused on developing a software framework for efficiently solving graph analytics problems on large-scale graphs (problems with hundreds of millions of objects and billions of separate connections). Important requirements for the framework were that it be developed on a sound theoretical basis while also having an interface that would make it readily usable by other programmers.</p>\n<p>To meet these goals, we developed NWGraph, a software library of graph algorithms and data structures written in C++20.&nbsp; Development of NWGraph followed the principles of generic programming, which is fundamentally algorithm-oriented. To develop NWGraph, we studied a large set of graph algorithms, generalized their interfaces, and analyzed the requirements for the algorithms to be used with different types of graph data structures.&nbsp; We then organized those requirements into a common (and minimal) set of type requirements (as \"concepts\" in C++20), which in turn enabled the algorithms to be used with any type of graph meeting those requirements.&nbsp; This organization of graph abstractions has also provided new insights into the formulation and implementation of the graph algorithms themselves.</p>\n<p>The standard library that is part of C++20 includes mechanisms for executing its algorithms in parallel, dividing the work among multiple CPUs.&nbsp; Other software, such as NWGraph, written using those parallelization mechanisms could potentially obtain the same parallel speedups. Unfortunately, the rich structure of graph data structures (and, thus, the algorithms applied to them) are not amenable to parallelization with the relatively basic approaches provided by the C++20 standard library. NWGraph therefore used a third-party library (the Intel Threading Building Blocks) for its parallelization. We compared NWGraph to many of the other leading high-performance graph frameworks and found that its performance was on par with the state of the art, despite being implemented with standard \"off-the-shelf\" components.&nbsp;</p>\n<p><span>The current implementation of NWGraph is available as an open-source project, which we hope will continue to grow and to be refined by a vibrant developer community, like its ancestor the Boost Graph Library. </span>A long-term outcome of this work is the influence that NWGraph has had, and will&nbsp;continue to have, on the development and eventual adoption of graph algorithms and data structures as part of the C++ standard library. &nbsp;</p>\n<p><span>&nbsp;</span></p>\n<p><span>&nbsp;</span></p>\n<p><span>&nbsp;</span></p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 03/27/2023<br>\n\t\t\t\t\tModified by: Andrew&nbsp;Lumsdaine</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nGraphs are a fundamental concept in mathematics and computer science that are used to represent relationships or connections between objects.  Because of their generality, graphs can be used to model many different kinds of interconnected systems, such as knowledge discovery, genomics, proteomics, electronic design automation, forest management, Internet routing, power grid management, and many more.  Although these different settings are quite distinct, the same abstraction (a graph) can be used to model each of them.  In turn, analytical tools can be applied to the graph to discover interactions and other characteristics, independent of the original underlying problem.  Graphs have thus become an indispensable tool in the field of data analytics.\n\nThis project focused on developing a software framework for efficiently solving graph analytics problems on large-scale graphs (problems with hundreds of millions of objects and billions of separate connections). Important requirements for the framework were that it be developed on a sound theoretical basis while also having an interface that would make it readily usable by other programmers.\n\nTo meet these goals, we developed NWGraph, a software library of graph algorithms and data structures written in C++20.  Development of NWGraph followed the principles of generic programming, which is fundamentally algorithm-oriented. To develop NWGraph, we studied a large set of graph algorithms, generalized their interfaces, and analyzed the requirements for the algorithms to be used with different types of graph data structures.  We then organized those requirements into a common (and minimal) set of type requirements (as \"concepts\" in C++20), which in turn enabled the algorithms to be used with any type of graph meeting those requirements.  This organization of graph abstractions has also provided new insights into the formulation and implementation of the graph algorithms themselves.\n\nThe standard library that is part of C++20 includes mechanisms for executing its algorithms in parallel, dividing the work among multiple CPUs.  Other software, such as NWGraph, written using those parallelization mechanisms could potentially obtain the same parallel speedups. Unfortunately, the rich structure of graph data structures (and, thus, the algorithms applied to them) are not amenable to parallelization with the relatively basic approaches provided by the C++20 standard library. NWGraph therefore used a third-party library (the Intel Threading Building Blocks) for its parallelization. We compared NWGraph to many of the other leading high-performance graph frameworks and found that its performance was on par with the state of the art, despite being implemented with standard \"off-the-shelf\" components. \n\nThe current implementation of NWGraph is available as an open-source project, which we hope will continue to grow and to be refined by a vibrant developer community, like its ancestor the Boost Graph Library. A long-term outcome of this work is the influence that NWGraph has had, and will continue to have, on the development and eventual adoption of graph algorithms and data structures as part of the C++ standard library.  \n\n \n\n \n\n \n\n \n\n\t\t\t\t\tLast Modified: 03/27/2023\n\n\t\t\t\t\tSubmitted by: Andrew Lumsdaine"
 }
}