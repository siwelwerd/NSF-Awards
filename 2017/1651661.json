{
 "awd_id": "1651661",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CAREER: Next Generation Black-Box Web Application Vulnerability Analysis",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2017-05-01",
 "awd_exp_date": "2023-04-30",
 "tot_intn_awd_amt": 416585.0,
 "awd_amount": 416585.0,
 "awd_min_amd_letter_date": "2017-03-21",
 "awd_max_amd_letter_date": "2021-04-19",
 "awd_abstract_narration": "Recent sensitive data breaches are caused by overlooked vulnerabilities in web applications. To secure their web applications, companies typically hire professional hackers to break into their web applications. While this process finds vulnerabilities, it is costly and does not scale. Black-box vulnerability scanners attempt to automate this process. By treating the web application as a black-box (no knowledge of the source code of the application), these tools can discover unknown vulnerabilities. Traditionally, these tools work by crawling the web application, identifying input vectors, then injecting malicious input. However, despite being sold commercially for tens of thousands of dollars, the PI has shown that they are ineffective. This project aims to create a novel and effective black-box vulnerability analysis framework that finds unknown vulnerabilities in any web application.\r\n\r\nThe PI proposes a novel technique called inductive reverse engineering which, using recent advances in inductive programming, can automatically reverse engineer an abstraction of the web application's source code. Then, the tool will use static analysis techniques to discover potential vulnerabilities in the abstraction of the reverse engineered code. The goal of this project is advance the state-of-the-art in black-box vulnerability analysis tools. All tools and techniques will be open-sourced, so that researchers and industry can benefit. Use of the tool on real-world software will result in more vulnerabilities found and fixed, thus improving software security as a whole. In addition, the PI will create and lead hands-on workshops that allow all CS students to study and exploit vulnerabilities, as well as understand the ethical considerations. The education modules and the software infrastructure required will be released.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Adam",
   "pi_last_name": "Doupe",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Adam Doupe",
   "pi_email_addr": "doupe@asu.edu",
   "nsf_id": "000677394",
   "pi_start_date": "2017-03-21",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Arizona State University",
  "inst_street_address": "660 S MILL AVENUE STE 204",
  "inst_street_address_2": "",
  "inst_city_name": "TEMPE",
  "inst_state_code": "AZ",
  "inst_state_name": "Arizona",
  "inst_phone_num": "4809655479",
  "inst_zip_code": "852813670",
  "inst_country_name": "United States",
  "cong_dist_code": "04",
  "st_cong_dist_code": "AZ04",
  "org_lgl_bus_name": "ARIZONA STATE UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "NTLHJXM55KZ6"
 },
 "perf_inst": {
  "perf_inst_name": "Arizona State University",
  "perf_str_addr": "P.O. Box 876011",
  "perf_city_name": "Tempe",
  "perf_st_code": "AZ",
  "perf_st_name": "Arizona",
  "perf_zip_code": "852876011",
  "perf_ctry_code": "US",
  "perf_cong_dist": "04",
  "perf_st_cong_dist": "AZ04",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "1045",
   "pgm_ref_txt": "CAREER-Faculty Erly Career Dev"
  },
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0121",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 75183.0
  },
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 80336.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 81808.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 90044.0
  },
  {
   "fund_oblg_fiscal_yr": 2021,
   "fund_oblg_amt": 89214.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>In this project, we explored the question of how to automatically identify security vulnerabilities in a web application without any knowledge of the web application source code. Web application vulnerabilities are very important, as an attacker that can discover them can compromise the security of the web application and, ultimately, the users' data.</p>\n<p>We created a novel approach based on applying inductive programming techniques to reverse engineer possible server-side source code based on only interactions with the web application. Then, we can identify possible security vulnerabilities in the reverse engineered code, create input to trigger the vulnerability, and finally refine the model of the server-side source code based on the response. We call this approach Inductive Reverse Engineering (IRE).</p>\n<p>Throughout this project, we developed a vulnerability analysis technique based on IRE, which uses symbolic execution on the reverse engineered code to identify possible cross-site scripting vulnerabilities. We used this in a web application vulnerability scanner that can identify cross-site scripting vulnerabilities without access to the source code.</p>\n<p>We also developed a Python-based library, called libIRE, to extend the idea of IRE to domains beyond web applications. libIRE allows a developer to easily create a Domain Specific Language (DSL) that can be learned by IRE. We applied libIRE to detecting if a program is leaking sensitive information to its output as well as automatic replaying of exploits, two use-cases that are far outside the web application vulnerability analysis use-case. libIRE will be open-sourced upon paper publication. Overall, this project resulted in a number of theses and demonstrated that IRE-based techniques are feasible and have applications on real-world problems.</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 09/19/2023<br>\n\t\t\t\t\tModified by: Adam&nbsp;Doupe</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nIn this project, we explored the question of how to automatically identify security vulnerabilities in a web application without any knowledge of the web application source code. Web application vulnerabilities are very important, as an attacker that can discover them can compromise the security of the web application and, ultimately, the users' data.\n\nWe created a novel approach based on applying inductive programming techniques to reverse engineer possible server-side source code based on only interactions with the web application. Then, we can identify possible security vulnerabilities in the reverse engineered code, create input to trigger the vulnerability, and finally refine the model of the server-side source code based on the response. We call this approach Inductive Reverse Engineering (IRE).\n\nThroughout this project, we developed a vulnerability analysis technique based on IRE, which uses symbolic execution on the reverse engineered code to identify possible cross-site scripting vulnerabilities. We used this in a web application vulnerability scanner that can identify cross-site scripting vulnerabilities without access to the source code.\n\nWe also developed a Python-based library, called libIRE, to extend the idea of IRE to domains beyond web applications. libIRE allows a developer to easily create a Domain Specific Language (DSL) that can be learned by IRE. We applied libIRE to detecting if a program is leaking sensitive information to its output as well as automatic replaying of exploits, two use-cases that are far outside the web application vulnerability analysis use-case. libIRE will be open-sourced upon paper publication. Overall, this project resulted in a number of theses and demonstrated that IRE-based techniques are feasible and have applications on real-world problems.\n\n \n\n\t\t\t\t\tLast Modified: 09/19/2023\n\n\t\t\t\t\tSubmitted by: Adam Doupe"
 }
}