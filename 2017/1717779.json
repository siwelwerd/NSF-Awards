{
 "awd_id": "1717779",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Exploring Architectural Support for Full-Stack Equational Reasoning in Critical Embedded Systems",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927843",
 "po_email": "sabasu@nsf.gov",
 "po_sign_block_name": "Sankar Basu",
 "awd_eff_date": "2017-07-15",
 "awd_exp_date": "2021-06-30",
 "tot_intn_awd_amt": 449888.0,
 "awd_amount": 449888.0,
 "awd_min_amd_letter_date": "2017-07-14",
 "awd_max_amd_letter_date": "2017-07-14",
 "awd_abstract_narration": "In addition to their usual  roles in our everyday lives computers also play invisible safety-critical  roles.  They prevent the brakes in cars from locking up, fly our airplanes through dense air traffic and around large storms, manage our electrical and water systems, and even control the beating of patients' hearts.  Unfortunately, it still remains difficult to build computer systems for which one can say anything definitive about reliability of such operation. This project attempts to change the way in which critical computer systems are designed and analyzed. The technologies created will be available and accessible through open repositories, the development of those technologies will provide both undergraduate and graduate students numerous training opportunities, the most exciting ideas will be used in outreach efforts to help reach new generations of engineers, and in the end will help to develop a national community of embedded systems engineers with the skills and tools necessary to implement safe and reliable systems. \r\n\r\nTo achieve this vision of more robust computer controlled systems we need new approaches to creating them that includes both the hardware and the software together.  Traditional computer hardware is built for speed and efficiency at all costs, but often we have more than enough speed and efficiency to get a job done.  Instead, we need systems that, while remaining quite efficient, also are far easier to understand and reason about.  Building on top of powerful theories of computation (such as lambda-calculus) a new computer system, where every action it takes corresponds directly to a tractable set of equations, can be created.  Rather than try and solve the resulting equations by hand, this project reconsiders the way computer processors are designed from the ground up so that they work in perfect harmony with state-of-the-art computer-automated theorem provers.   To demonstrate that this approach is actually useful on real world problems the investigators are building a completely new computer system around this approach with all of the hardware design, computer languages, and operating system-like software needed.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Timothy",
   "pi_last_name": "Sherwood",
   "pi_mid_init": "P",
   "pi_sufx_name": "",
   "pi_full_name": "Timothy P Sherwood",
   "pi_email_addr": "sherwood@cs.ucsb.edu",
   "nsf_id": "000488790",
   "pi_start_date": "2017-07-14",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of California-Santa Barbara",
  "inst_street_address": "3227 CHEADLE HALL",
  "inst_street_address_2": "",
  "inst_city_name": "SANTA BARBARA",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "8058934188",
  "inst_zip_code": "931060001",
  "inst_country_name": "United States",
  "cong_dist_code": "24",
  "st_cong_dist_code": "CA24",
  "org_lgl_bus_name": "UNIVERSITY OF CALIFORNIA, SANTA BARBARA",
  "org_prnt_uei_num": "",
  "org_uei_num": "G9QBQDH39DF4"
 },
 "perf_inst": {
  "perf_inst_name": "University of California-Santa Barbara",
  "perf_str_addr": "",
  "perf_city_name": "Santa Barbara",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "931065110",
  "perf_ctry_code": "US",
  "perf_cong_dist": "24",
  "perf_st_cong_dist": "CA24",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7945",
   "pgm_ref_txt": "DES AUTO FOR MICRO & NANO SYST"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 449888.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-a91f76fb-7fff-9576-11d4-5ce3e0118971\">\n<p dir=\"ltr\"><span>For highly critical workloads the legitimate fear of catastrophic failure leads to both highly conservative design practices and excessive assurance costs.&nbsp; Trying to build critical systems is expensive in terms of both time and money. For example, simply assessing the assurance of such a system can cost upwards of $1,000 per line of code, a huge deterrent against creating, e.g., more efficiently controlled engines, safer computer-controlled braking systems, or verified implantable medical devices.&nbsp; Rather than trying to analyze complete computer machine code and the countless ways their instructions can interact, this work has established a new approach: a computer processor controlled by a thin computation layer designed to tightly correspond with the mathematics of lambda calculus, bringing the computer assembly language much closer to methods of automated theorem proving.&nbsp; This approach allows low-level verified versions of critical code to operate safely in tandem with arbitrary code, including imperative and unverified system components, without the need for large collections of potentially untrustworthy software.&nbsp;&nbsp;</span></p>\n<p dir=\"ltr\"><span>The project has, for the first time, demonstrated that it is possible to create such a system at all.&nbsp; To validate the design, the researchers completed a prototype running on a field programmable gate array (a form of reconfigurable hardware often used to prototype digital systems). For a comparison, they also compared to a completely unverified C version of the application on the same reconfigurable system.&nbsp; While the hardware for their new system is moderately more complex than a simple embedded CPU (with 66 total states of control logic), in all the core logic only took 29,980 primitive gates (roughly the size of a microprocessor from the 1990s). Though larger than very simple embedded CPUs, Zarf is still quite a bit smaller than many common embedded microcontrollers. The developed prototype implementation of this concept uses the new processor to control the operation of critical components in a way that allows assembly-level verified versions of critical code to operate safely in close partnership with more traditional and less-verified system components without the need to include run-times and compilers in the trusted computing base.&nbsp; The resulting system was selected by a panel of industry and academic experts as a \"IEEE Micro Top Pick\" for its potential for impact on the field.</span></p>\n<div><span><br /></span></div>\n</span></p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 05/13/2022<br>\n\t\t\t\t\tModified by: Timothy&nbsp;P&nbsp;Sherwood</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n\nFor highly critical workloads the legitimate fear of catastrophic failure leads to both highly conservative design practices and excessive assurance costs.  Trying to build critical systems is expensive in terms of both time and money. For example, simply assessing the assurance of such a system can cost upwards of $1,000 per line of code, a huge deterrent against creating, e.g., more efficiently controlled engines, safer computer-controlled braking systems, or verified implantable medical devices.  Rather than trying to analyze complete computer machine code and the countless ways their instructions can interact, this work has established a new approach: a computer processor controlled by a thin computation layer designed to tightly correspond with the mathematics of lambda calculus, bringing the computer assembly language much closer to methods of automated theorem proving.  This approach allows low-level verified versions of critical code to operate safely in tandem with arbitrary code, including imperative and unverified system components, without the need for large collections of potentially untrustworthy software.  \nThe project has, for the first time, demonstrated that it is possible to create such a system at all.  To validate the design, the researchers completed a prototype running on a field programmable gate array (a form of reconfigurable hardware often used to prototype digital systems). For a comparison, they also compared to a completely unverified C version of the application on the same reconfigurable system.  While the hardware for their new system is moderately more complex than a simple embedded CPU (with 66 total states of control logic), in all the core logic only took 29,980 primitive gates (roughly the size of a microprocessor from the 1990s). Though larger than very simple embedded CPUs, Zarf is still quite a bit smaller than many common embedded microcontrollers. The developed prototype implementation of this concept uses the new processor to control the operation of critical components in a way that allows assembly-level verified versions of critical code to operate safely in close partnership with more traditional and less-verified system components without the need to include run-times and compilers in the trusted computing base.  The resulting system was selected by a panel of industry and academic experts as a \"IEEE Micro Top Pick\" for its potential for impact on the field.\n\n\n\n\n \n\n\t\t\t\t\tLast Modified: 05/13/2022\n\n\t\t\t\t\tSubmitted by: Timothy P Sherwood"
 }
}