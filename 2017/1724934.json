{
 "awd_id": "1724934",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "NeTS: Small: A Language-Based Approach to Deep Packet Inspection: from Theory to Practice",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "John Brassil",
 "awd_eff_date": "2017-01-01",
 "awd_exp_date": "2018-01-31",
 "tot_intn_awd_amt": 94326.0,
 "awd_amount": 94326.0,
 "awd_min_amd_letter_date": "2017-02-22",
 "awd_max_amd_letter_date": "2017-02-22",
 "awd_abstract_narration": "Deep packet inspection is at the core of several established and emerging networking applications, such as network intrusion detection and content-aware routing. Due to their expressive power, in recent years regular expressions have been adopted in pattern-sets used for these applications in both industry and academia. Existing high-performance regular expression matching engines are based on finite automata, and are implemented using either logic- or memory-based designs. The former allow peak performance on single packet flows with relatively simple logic, but are not scalable to large numbers of flows; the latter offer scalability in the number of flows at the cost of algorithmic and design complexity. Despite the rich body of work in the area, providing worst-case guarantees is still challenging in the presence of complex regular expressions that include repetitions of wildcards and large character sets. Moreover, existing solutions assume that packets are inspected in-order and after data decompression. \r\n\r\nThis project will develop a language abstraction, data structures, and algorithms for line rate deep packet inspection. In particular, the project will consider open problems in regular expression-based deep packet inspection, namely: (i) handling of complex patterns containing repetitions of wildcards and large character sets, and (ii) inspection of out-of-order packets and compressed traffic. A language-based approach to deep packet inspection will be introduced in order to handle the regular expressions? complexity. This project will integrate concepts from automata theory, practices in data structure and algorithm design, analysis of the requirements of networking applications, and system architecture considerations. \r\n\r\nThe previous work performed by the PI on high speed regular expression matching has attracted the attention of several companies.  The PI will leverage these contacts to facilitate the transfer of the proposed research. The PI has added two computer architecture courses to the undergraduate and graduate Electrical and Computer Engineering curriculum at University of Missouri (MU); she will introduce a new networking systems course, which will cover the knowledge generated by this research. The PI will leverage the MU Undergraduate Research Program to involve undergraduate students in the proposed work, which will allow students to work at the intersection of three domains: algorithm and data structure design, system architecture and networking applications. The results of this research will be disseminated through publications and presentations, and by releasing open-source software modules on the PI?s Lab website.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Michela",
   "pi_last_name": "Becchi",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Michela Becchi",
   "pi_email_addr": "mbecchi@ncsu.edu",
   "nsf_id": "000573363",
   "pi_start_date": "2017-02-22",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "North Carolina State University",
  "inst_street_address": "2601 WOLF VILLAGE WAY",
  "inst_street_address_2": "",
  "inst_city_name": "RALEIGH",
  "inst_state_code": "NC",
  "inst_state_name": "North Carolina",
  "inst_phone_num": "9195152444",
  "inst_zip_code": "276950001",
  "inst_country_name": "United States",
  "cong_dist_code": "02",
  "st_cong_dist_code": "NC02",
  "org_lgl_bus_name": "NORTH CAROLINA STATE UNIVERSITY",
  "org_prnt_uei_num": "U3NVH931QJJ3",
  "org_uei_num": "U3NVH931QJJ3"
 },
 "perf_inst": {
  "perf_inst_name": "North Carolina State University",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "NC",
  "perf_st_name": "North Carolina",
  "perf_zip_code": "276957003",
  "perf_ctry_code": "US",
  "perf_cong_dist": "02",
  "perf_st_cong_dist": "NC02",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "736300",
   "pgm_ele_name": "Networking Technology and Syst"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "9102",
   "pgm_ref_txt": "WOMEN, MINORITY, DISABLED, NEC"
  }
 ],
 "app_fund": [
  {
   "app_code": "0113",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001314DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2013,
   "fund_oblg_amt": 94326.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Deep packet inspection is at the core of several established and emerging networking applications, such as network intrusion detection and content-aware routing. Due to their expressive power, in recent years regular expressions have been adopted in pattern-sets used for these applications in both industry and academia. Existing high-performance regular expression matching engines are based on finite automata, and are implemented using either logic- or memory-based designs. The former allow peak performance on single packet flows with relatively simple logic, but are not scalable to large numbers of flows; the latter offer scalability in the number of flows at the cost of algorithmic and design complexity. Despite the rich body of work in the area, providing worst-case guarantees is still challenging in the presence of complex regular expressions that include repetitions of wildcards and large character sets. Moreover, existing solutions assume that packets are inspected in-order and after data decompression.&nbsp;</p>\n<p><strong>Intellectual Merit:</strong> This project has addressed open problems in regular expression-based deep packet inspection, namely: (i) design of algorithmic techniques to inspect out-of-order packets and compressed traffic, and (ii) design of automata abstractions and mechanisms to handle complex patterns containing repetitions of wildcards and large character sets. In addition, the project has explored the implementation of the proposed techniques on different parallel hardware, including memory-centric platforms (such as general-purpose processors, GPUs and Micron&rsquo;s Automata Processor) and field-programmable gate arrays (FPGAs). This project has integrated concepts from automata theory, practices in data structure and algorithm design, analysis of the requirements of networking applications, and system architecture considerations.&nbsp;</p>\n<p>More specifically, the project has led to the following outcomes. First, we have designed a regular expression matching engine (called ARCH) that allows performing deep packet inspection on HTTP traffic compressed using the GZIP protocol without requiring prior packet decompression (results presented in INFOCOM 2015 paper). Second, we have developed a pattern-matching engine (called O<sup>3</sup>FA) to perform deep packet inspection on out-of-order packets without requiring prior flow reassembly (results presented in ANCS 2016 paper). Third, we have addressed complex regular expressions that include wildcard and large character set repetitions, typically leading to state explosion or vulnerability to algorithmic attacks when handled through traditional finite automata, either in their deterministic or non-deterministic form (DFA and NFA, respectively). Specifically, we have designed a new automata abstraction, called JFA, which uses state variables in order to avoid state explosion, and is <em>by construction</em> functionally equivalent to the corresponding DFA (JSAC 2014 paper; see attached &ldquo;JFA example&rdquo; image). Third, we have made a comprehensive exploration of different platforms &ndash; namely GPUs, FPGAs, and Micron&rsquo;s Automata Processors &ndash; as automata accelerators for large-scale datasets. To this end, we have developed a compiler tool-chain that allows the seamless deployment of large sets of regular expression onto these platforms. Our evaluation has covered preprocessing cost, pattern matching performance, pattern density (i.e., resource requirements), and power consumption (IPDPS 2016 and ICS 2017 papers; see attached &ldquo;ICS 2017 tool-chain&rdquo; image). Fourth, we have designed a novel hardware architecture (called Unified Automata Processor, or UAP) that supports a wide range of existing finite automata models (DFAs, NFAs, A-DFAs, JFAs, counting-DFAs, and counting-NFAs) efficiently, and we have demonstrated the performance and energy advantages of this architecture over Micron&rsquo;s Automata Processor, GPUs, and existing custom automata accelerators (MICRO 2015 paper; see attached &ldquo;UAP architecture&rdquo; image). Fifth, we have designed a novel memory-efficient GPU engine for patterns that can be more easily represented through automata rather than through regular expressions; namely, those enabling Hamming and Levenshtein distance matching (HiPC 2017 paper). As a side contribution, we have defined a Haskell-based approach to regular expression matching, and we have provided a compiler from a subset of Haskell to FPGA (LCTES 2015, ARC 2015 and ReCoSoC 2016 papers).</p>\n<p><strong>Broader Impacts:</strong> This award has supported one Ph.D. student and several M.S. students; students working on this project have obtained internships and permanent positions at AT&amp;T Labs, Micron Technologies, Facebook, and Intel. This project has enabled collaboration with researchers at the Interdisciplinary Center Herzliya (Israel), the Hebrew University Jerusalem (Israel), the University of Chicago, Virginia Tech, and U. California San Diego. From the curriculum development angle, this project has allowed the creation of a new Network Systems Architecture course at University of Missouri. In addition, this work has sparked interest from several IT companies, such as Micron Technologies and Intel. The PI has exchanged datasets and code with these industries.</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 03/29/2018<br>\n\t\t\t\t\tModified by: Michela&nbsp;Becchi</p>\n</div>\n<div class=\"porSideCol\">\n<div class=\"each-gallery\">\n<div class=\"galContent\" id=\"gallery0\">\n<div class=\"photoCount\" id=\"photoCount0\">\n\t\t\t\t\t\t\t\t\tImages (<span id=\"selectedPhoto0\">1</span> of <span class=\"totalNumber\"></span>)\t\t\n\t\t\t\t\t\t\t\t</div>\n<div class=\"galControls\" id=\"controls0\"></div>\n<div class=\"galSlideshow\" id=\"slideshow0\"></div>\n<div class=\"galEmbox\" id=\"embox\">\n<div class=\"image-title\"></div>\n</div>\n</div>\n<div class=\"galNavigation\" id=\"navigation0\">\n<ul class=\"thumbs\" id=\"thumbs0\">\n<li>\n<a href=\"/por/images/Reports/POR/2018/1724934/1724934_10268573_1522294452164_JFA--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2018/1724934/1724934_10268573_1522294452164_JFA--rgov-800width.jpg\" title=\"JFA example\"><img src=\"/por/images/Reports/POR/2018/1724934/1724934_10268573_1522294452164_JFA--rgov-66x44.jpg\" alt=\"JFA example\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">(a) unoptimized l-NFA accepting regular expressions ac.*cdh and ec.*cgi; (b) initial sketch of the corresponding JFA (including only the entry state and the states directly connected to it); (c) l-NFA optimized through label splitting and forwarding; and (d) sketch of the corresponding JFA.</div>\n<div class=\"imageCredit\">Xiaodong Xu, Michela Becchi</div>\n<div class=\"imagePermisssions\">Public Domain</div>\n<div class=\"imageSubmitted\">Michela&nbsp;Becchi</div>\n<div class=\"imageTitle\">JFA example</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2018/1724934/1724934_10268573_1522294453976_UAP--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2018/1724934/1724934_10268573_1522294453976_UAP--rgov-800width.jpg\" title=\"UAP Architecture\"><img src=\"/por/images/Reports/POR/2018/1724934/1724934_10268573_1522294453976_UAP--rgov-66x44.jpg\" alt=\"UAP Architecture\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">UAP Architecture</div>\n<div class=\"imageCredit\">K. Fang, T. Hoang, M. Becchi and A. Chien</div>\n<div class=\"imagePermisssions\">Public Domain</div>\n<div class=\"imageSubmitted\">Michela&nbsp;Becchi</div>\n<div class=\"imageTitle\">UAP Architecture</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2018/1724934/1724934_10268573_1522294621385_toolchain--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2018/1724934/1724934_10268573_1522294621385_toolchain--rgov-800width.jpg\" title=\"ICS 2017 tool-chain\"><img src=\"/por/images/Reports/POR/2018/1724934/1724934_10268573_1522294621385_toolchain--rgov-66x44.jpg\" alt=\"ICS 2017 tool-chain\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Toolchain for the automatic deployment of large regular expression datasets on FPGA, GPU and Micron's Automata Processor. The toolchain performs parsing, NFA partitioning, platform-independent and platform-specific optimizations.</div>\n<div class=\"imageCredit\">Marziyeh Nourian and Michela Becchi</div>\n<div class=\"imagePermisssions\">Public Domain</div>\n<div class=\"imageSubmitted\">Michela&nbsp;Becchi</div>\n<div class=\"imageTitle\">ICS 2017 tool-chain</div>\n</div>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>",
  "por_txt_cntn": "\nDeep packet inspection is at the core of several established and emerging networking applications, such as network intrusion detection and content-aware routing. Due to their expressive power, in recent years regular expressions have been adopted in pattern-sets used for these applications in both industry and academia. Existing high-performance regular expression matching engines are based on finite automata, and are implemented using either logic- or memory-based designs. The former allow peak performance on single packet flows with relatively simple logic, but are not scalable to large numbers of flows; the latter offer scalability in the number of flows at the cost of algorithmic and design complexity. Despite the rich body of work in the area, providing worst-case guarantees is still challenging in the presence of complex regular expressions that include repetitions of wildcards and large character sets. Moreover, existing solutions assume that packets are inspected in-order and after data decompression. \n\nIntellectual Merit: This project has addressed open problems in regular expression-based deep packet inspection, namely: (i) design of algorithmic techniques to inspect out-of-order packets and compressed traffic, and (ii) design of automata abstractions and mechanisms to handle complex patterns containing repetitions of wildcards and large character sets. In addition, the project has explored the implementation of the proposed techniques on different parallel hardware, including memory-centric platforms (such as general-purpose processors, GPUs and Micron?s Automata Processor) and field-programmable gate arrays (FPGAs). This project has integrated concepts from automata theory, practices in data structure and algorithm design, analysis of the requirements of networking applications, and system architecture considerations. \n\nMore specifically, the project has led to the following outcomes. First, we have designed a regular expression matching engine (called ARCH) that allows performing deep packet inspection on HTTP traffic compressed using the GZIP protocol without requiring prior packet decompression (results presented in INFOCOM 2015 paper). Second, we have developed a pattern-matching engine (called O3FA) to perform deep packet inspection on out-of-order packets without requiring prior flow reassembly (results presented in ANCS 2016 paper). Third, we have addressed complex regular expressions that include wildcard and large character set repetitions, typically leading to state explosion or vulnerability to algorithmic attacks when handled through traditional finite automata, either in their deterministic or non-deterministic form (DFA and NFA, respectively). Specifically, we have designed a new automata abstraction, called JFA, which uses state variables in order to avoid state explosion, and is by construction functionally equivalent to the corresponding DFA (JSAC 2014 paper; see attached \"JFA example\" image). Third, we have made a comprehensive exploration of different platforms &ndash; namely GPUs, FPGAs, and Micron?s Automata Processors &ndash; as automata accelerators for large-scale datasets. To this end, we have developed a compiler tool-chain that allows the seamless deployment of large sets of regular expression onto these platforms. Our evaluation has covered preprocessing cost, pattern matching performance, pattern density (i.e., resource requirements), and power consumption (IPDPS 2016 and ICS 2017 papers; see attached \"ICS 2017 tool-chain\" image). Fourth, we have designed a novel hardware architecture (called Unified Automata Processor, or UAP) that supports a wide range of existing finite automata models (DFAs, NFAs, A-DFAs, JFAs, counting-DFAs, and counting-NFAs) efficiently, and we have demonstrated the performance and energy advantages of this architecture over Micron?s Automata Processor, GPUs, and existing custom automata accelerators (MICRO 2015 paper; see attached \"UAP architecture\" image). Fifth, we have designed a novel memory-efficient GPU engine for patterns that can be more easily represented through automata rather than through regular expressions; namely, those enabling Hamming and Levenshtein distance matching (HiPC 2017 paper). As a side contribution, we have defined a Haskell-based approach to regular expression matching, and we have provided a compiler from a subset of Haskell to FPGA (LCTES 2015, ARC 2015 and ReCoSoC 2016 papers).\n\nBroader Impacts: This award has supported one Ph.D. student and several M.S. students; students working on this project have obtained internships and permanent positions at AT&amp;T Labs, Micron Technologies, Facebook, and Intel. This project has enabled collaboration with researchers at the Interdisciplinary Center Herzliya (Israel), the Hebrew University Jerusalem (Israel), the University of Chicago, Virginia Tech, and U. California San Diego. From the curriculum development angle, this project has allowed the creation of a new Network Systems Architecture course at University of Missouri. In addition, this work has sparked interest from several IT companies, such as Micron Technologies and Intel. The PI has exchanged datasets and code with these industries.\n\n \n\n\t\t\t\t\tLast Modified: 03/29/2018\n\n\t\t\t\t\tSubmitted by: Michela Becchi"
 }
}