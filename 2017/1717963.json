{
 "awd_id": "1717963",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF:Small: Rooting Out Data- and Control-Flow Anomalies in Event-Based Systems",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2017-08-15",
 "awd_exp_date": "2022-07-31",
 "tot_intn_awd_amt": 500000.0,
 "awd_amount": 500000.0,
 "awd_min_amd_letter_date": "2017-08-10",
 "awd_max_amd_letter_date": "2017-08-10",
 "awd_abstract_narration": "Distributed event-based (DEB) software systems are widespread, spanning diverse domains such as user interfaces, financial markets, logistics, and mobile applications. Unlike traditional software systems, in DEB systems software components do not directly interact but rely on brokers to transfer data and notifications of different events. Consequently, components in DEB systems are highly decoupled, which yields scalable, easy-to-evolve applications. However, this flexibility and scalability comes at a price: It is difficult to have an accurate insight into the structure and functionality of a DEB system, which makes it difficult to ensure a DEB system's desired behavior and absence of security vulnerabilities. Many techniques have been developed for dealing with analogous issues in traditional software systems. However, those techniques provide inadequate and/or misleading information when applied to DEB systems. This project is providing a suite of tools for ensuring software correctness, reliability, and security that are specifically targeted at DEB systems.\r\n \r\nThe project does so by developing novel program analysis, runtime monitoring, and visualization techniques that account for the implicit invocation, concurrency, and ambiguous interfaces inherent in DEB systems. The project's specific focus is on (1) data-flow anomalies that cause correctness and reliability issues and (2) data- and control-flow anomalies that cause security problems. The broader impact of this research is direct: It provides to engineers in a wide range of important software development domains analysis and visualization techniques that are comparable to techniques available in traditional domains. On one hand, the flexibility of DEB systems bodes well for their continued adoption and expansion. On the other hand, that adoption is impeded by obstacles in understanding, analyzing, debugging, evolving, and securing DEB systems. This research presents a significant step in the direction of providing the necessary remedies and helping to realize the full potential of DEB systems.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Nenad",
   "pi_last_name": "Medvidovic",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Nenad Medvidovic",
   "pi_email_addr": "neno@usc.edu",
   "nsf_id": "000485161",
   "pi_start_date": "2017-08-10",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Southern California",
  "inst_street_address": "3720 S FLOWER ST FL 3",
  "inst_street_address_2": "",
  "inst_city_name": "LOS ANGELES",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "2137407762",
  "inst_zip_code": "90033",
  "inst_country_name": "United States",
  "cong_dist_code": "34",
  "st_cong_dist_code": "CA34",
  "org_lgl_bus_name": "UNIVERSITY OF SOUTHERN CALIFORNIA",
  "org_prnt_uei_num": "",
  "org_uei_num": "G88KLJR3KYT5"
 },
 "perf_inst": {
  "perf_inst_name": "University of Southern California",
  "perf_str_addr": "3720 S. Flower St.",
  "perf_city_name": "Los Angeles",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "900890001",
  "perf_ctry_code": "US",
  "perf_cong_dist": "37",
  "perf_st_cong_dist": "CA37",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 500000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p class=\"p1\">Distributed event-based (DEB) systems are widespread, spanning diverse domains such as user interfaces, financial markets, logistics, sensor networks, Web services, and mobile (e.g., Android) apps. In DEB systems, components do not directly call other components, but rely on software brokers to transfer data and notifications of events. Consequently, components in DEB systems are highly decoupled and yield scalable, easy-to-evolve applications. This flexibility and scalability comes at a price: the applications are difficult to understand using traditional software analysis techniques since the dependencies and interactions between software modules are indirect. In turn, this can hamper the critical properties of an application: its correctness, reliability, security, and maintainability.</p>\n<p class=\"p1\">This project has resulted in a suite of techniques aimed at addressing the above shortcomings and to enable proper understanding of a DEB system, and of the impact of changes made to it. Furthermore, the project had developed mechanisms to identify and remedy the correctness, reliability, and security problems caused by non-determinism in DEB systems. The project has done so by developing novel software program analysis, runtime monitoring, testing, and visualization techniques.</p>\n<p class=\"p1\">&nbsp;</p>\n<p class=\"p1\">The techniques that have emerged from this project have been applied on traditional software applications that rely on DEB mechanisms, as well as the more recent mobile applications (\"apps\"). The range of techniques has spanned</p>\n<p class=\"p1\">(1) security analysis and runtime policy enforcement,</p>\n<p class=\"p1\">(2) anticipation of runtime events (e.g., user clicks) and optimization of application performance by obtaining data from remote servers so that they are available on a local device when the user actually requests them, and</p>\n<p class=\"p1\">(3) improving the testing of these applications by automatically generating tests from recordings of human usages as well as by transferring the tests from one application to a similar application, both on one platform (e.g., two Android applications) or across platforms (e.g., from Android to iOS).</p>\n<p class=\"p1\">This suite of techniques is fully reusable and has been made publicly available, as have all of the data we have used in our empirical evaluations.</p>\n<p class=\"p1\">&nbsp;</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 09/29/2022<br>\n\t\t\t\t\tModified by: Nenad&nbsp;Medvidovic</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "Distributed event-based (DEB) systems are widespread, spanning diverse domains such as user interfaces, financial markets, logistics, sensor networks, Web services, and mobile (e.g., Android) apps. In DEB systems, components do not directly call other components, but rely on software brokers to transfer data and notifications of events. Consequently, components in DEB systems are highly decoupled and yield scalable, easy-to-evolve applications. This flexibility and scalability comes at a price: the applications are difficult to understand using traditional software analysis techniques since the dependencies and interactions between software modules are indirect. In turn, this can hamper the critical properties of an application: its correctness, reliability, security, and maintainability.\nThis project has resulted in a suite of techniques aimed at addressing the above shortcomings and to enable proper understanding of a DEB system, and of the impact of changes made to it. Furthermore, the project had developed mechanisms to identify and remedy the correctness, reliability, and security problems caused by non-determinism in DEB systems. The project has done so by developing novel software program analysis, runtime monitoring, testing, and visualization techniques.\n \nThe techniques that have emerged from this project have been applied on traditional software applications that rely on DEB mechanisms, as well as the more recent mobile applications (\"apps\"). The range of techniques has spanned\n(1) security analysis and runtime policy enforcement,\n(2) anticipation of runtime events (e.g., user clicks) and optimization of application performance by obtaining data from remote servers so that they are available on a local device when the user actually requests them, and\n(3) improving the testing of these applications by automatically generating tests from recordings of human usages as well as by transferring the tests from one application to a similar application, both on one platform (e.g., two Android applications) or across platforms (e.g., from Android to iOS).\nThis suite of techniques is fully reusable and has been made publicly available, as have all of the data we have used in our empirical evaluations.\n \n\n \n\n\t\t\t\t\tLast Modified: 09/29/2022\n\n\t\t\t\t\tSubmitted by: Nenad Medvidovic"
 }
}