{
 "awd_id": "1717022",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SaTC: CORE: Small: Trustworthy Dependency Management",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2017-08-01",
 "awd_exp_date": "2021-07-31",
 "tot_intn_awd_amt": 499866.0,
 "awd_amount": 518570.0,
 "awd_min_amd_letter_date": "2017-07-25",
 "awd_max_amd_letter_date": "2018-03-21",
 "awd_abstract_narration": "Software development increasingly relies on reusing platforms, libraries, and frameworks developed independently by third parties with little coordination, which provides significant value to participants through reuse. A security threat that has received relatively little attention is attacks through malicious package updates, which are particularly threatening in platforms with many frequently updating package dependencies, such as Node.js. The burden of reviewing all updates of all dependencies for security issues is too high for most developers. In this setting, automated solutions will reduce the attack surface, guide manual effort, and as a result, allow developers to trust packages and their updates with low enough effort to make it practical.\r\n\r\nThis research will raise awareness of the problem and develop tools to significantly reduce risks and costs associated with dependency management. It will develop both heuristic and sound approaches to increase trust in package updates. It will focus on Javascript packages on the widely used package manager npm. Heuristic approaches will guide the attention of human reviewers toward suspicious updates. A permission model will establish trust of many, especially small and simple, packages. The work will significantly reduce the attack surface and restrict exploits through malicious package updates. The increased trust in package managers and corresponding lower risks and costs will \u00a0benefit not only professional developers, but also scientists, hobbyists, and end-user programmers that often have less experience with computer security and can be an easy target for attackers.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Christian",
   "pi_last_name": "Kastner",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Christian Kastner",
   "pi_email_addr": "kaestner@cmu.edu",
   "nsf_id": "000634835",
   "pi_start_date": "2017-07-25",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Limin",
   "pi_last_name": "Jia",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Limin Jia",
   "pi_email_addr": "liminjia@cmu.edu",
   "nsf_id": "000555265",
   "pi_start_date": "2017-07-25",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Carnegie-Mellon University",
  "inst_street_address": "5000 FORBES AVE",
  "inst_street_address_2": "",
  "inst_city_name": "PITTSBURGH",
  "inst_state_code": "PA",
  "inst_state_name": "Pennsylvania",
  "inst_phone_num": "4122688746",
  "inst_zip_code": "152133815",
  "inst_country_name": "United States",
  "cong_dist_code": "12",
  "st_cong_dist_code": "PA12",
  "org_lgl_bus_name": "CARNEGIE MELLON UNIVERSITY",
  "org_prnt_uei_num": "U3NKNFLNQ613",
  "org_uei_num": "U3NKNFLNQ613"
 },
 "perf_inst": {
  "perf_inst_name": "Carnegie Mellon University",
  "perf_str_addr": "5000 Forbes Ave",
  "perf_city_name": "Pittsburgh",
  "perf_st_code": "PA",
  "perf_st_name": "Pennsylvania",
  "perf_zip_code": "152133890",
  "perf_ctry_code": "US",
  "perf_cong_dist": "12",
  "perf_st_cong_dist": "PA12",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "171400",
   "pgm_ele_name": "Special Projects - CNS"
  },
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "9178",
   "pgm_ref_txt": "UNDERGRADUATE EDUCATION"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 499866.0
  },
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 18704.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-483d2ba0-7fff-82d0-6297-552cf7623e39\"> </span></p>\n<p dir=\"ltr\"><span>The project addressed the increasing security threat to software systems through attacks on their supply chains with malicious package updates. In contrast to past direct attacks on software systems, often exploiting software vulnerabilities in the software itself, recently attackers increasingly attempt to gain access to software libraries that are used as dependency in a software project. If an attacker can get access to one of the (often hundreds) of dependencies in the supply chain of a software project, it can inject malicious code into that dependency during an update and thus also into all software projects that rely on that dependency. Malicious updates can hide among the many benign updates. In fast moving software ecosystems, developers often do not inspect every single update. Hence malicious package updates have substantial potential for damage, and several high profile attacks of this kind have been detected recently.</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>This research has addressed the problem of malicious package updates through two complementary strategies for JavaScript code in the npm ecosystem, the largest repository of open source packages and a large attack vector for supply chain attacks.&nbsp;</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>First, it developed a permission system and sandboxing strategy that can restrict the security-sensitive operations an individual package can perform. Given that many packages perform relatively simple and specialized operations, they do not need permissions to access security-sensitive APIs. These packages can be sandboxed and thus have no ability to perform harmful actions through code modified by a malicious update. In contrast to past sandboxing strategies, this work focused the engineering challenges of developing a lightweight strategy with minimal performance overhead that is easy to adopt in practice. This research identified possible permissions and when and how packages can be protected. While it cannot protect all packages, it can focus manual effort or more heavyweight sandboxing strategies toward those packages that need them. The resulting system can protect a substantial number of packages and can reduce the attack surface and review load for most npm-based software systems substantially, while containing past known attacks and inducing only negligible performance overhead (&lt;1%).</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>Second, this project developed anomaly detection techniques to identify updates that are suspicious because they differ from past updates and typical updates in unusual ways. Unusual updates may start including encrypted content, start using security-sensitive APIs in minor releases that past releases did not use (e.g., network or file system APIs), or introduce an unusual amount of changes. While not providing formal guarantees, anomaly detection is generic and can be applied to all packages to focus manual review attention. It has shown to be effective to flag suspicious and malicious package updates. It is complementary with the sandboxing strategy.</span></p>\n<div><span><br /></span></div>\n<p>&nbsp;</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 11/22/2021<br>\n\t\t\t\t\tModified by: Christian&nbsp;Kastner</p>\n</div>\n<div class=\"porSideCol\">\n<div class=\"each-gallery\">\n<div class=\"galContent\" id=\"gallery0\">\n<div class=\"photoCount\" id=\"photoCount0\">\n\t\t\t\t\t\t\t\t\tImage\n\t\t\t\t\t\t\t\t</div>\n<div class=\"galControls onePhoto\" id=\"controls0\"></div>\n<div class=\"galSlideshow\" id=\"slideshow0\"></div>\n<div class=\"galEmbox\" id=\"embox\">\n<div class=\"image-title\"></div>\n</div>\n</div>\n<div class=\"galNavigation onePhoto\" id=\"navigation0\">\n<ul class=\"thumbs\" id=\"thumbs0\">\n<li>\n<a href=\"/por/images/Reports/POR/2021/1717022/1717022_10506310_1637616353013_Screenshotfrom2021-11-2216-23-23--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2021/1717022/1717022_10506310_1637616353013_Screenshotfrom2021-11-2216-23-23--rgov-800width.jpg\" title=\"Overview of the data collection and anomaly detection model development process.\"><img src=\"/por/images/Reports/POR/2021/1717022/1717022_10506310_1637616353013_Screenshotfrom2021-11-2216-23-23--rgov-66x44.jpg\" alt=\"Overview of the data collection and anomaly detection model development process.\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Overview of the data collection and anomaly detection model development process</div>\n<div class=\"imageCredit\">Garrett et al. 2019</div>\n<div class=\"imagePermisssions\">Royalty-free (unrestricted use)</div>\n<div class=\"imageSubmitted\">Christian&nbsp;Kastner</div>\n<div class=\"imageTitle\">Overview of the data collection and anomaly detection model development process.</div>\n</div>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>",
  "por_txt_cntn": "\n \nThe project addressed the increasing security threat to software systems through attacks on their supply chains with malicious package updates. In contrast to past direct attacks on software systems, often exploiting software vulnerabilities in the software itself, recently attackers increasingly attempt to gain access to software libraries that are used as dependency in a software project. If an attacker can get access to one of the (often hundreds) of dependencies in the supply chain of a software project, it can inject malicious code into that dependency during an update and thus also into all software projects that rely on that dependency. Malicious updates can hide among the many benign updates. In fast moving software ecosystems, developers often do not inspect every single update. Hence malicious package updates have substantial potential for damage, and several high profile attacks of this kind have been detected recently.\n\n \nThis research has addressed the problem of malicious package updates through two complementary strategies for JavaScript code in the npm ecosystem, the largest repository of open source packages and a large attack vector for supply chain attacks. \n\n \nFirst, it developed a permission system and sandboxing strategy that can restrict the security-sensitive operations an individual package can perform. Given that many packages perform relatively simple and specialized operations, they do not need permissions to access security-sensitive APIs. These packages can be sandboxed and thus have no ability to perform harmful actions through code modified by a malicious update. In contrast to past sandboxing strategies, this work focused the engineering challenges of developing a lightweight strategy with minimal performance overhead that is easy to adopt in practice. This research identified possible permissions and when and how packages can be protected. While it cannot protect all packages, it can focus manual effort or more heavyweight sandboxing strategies toward those packages that need them. The resulting system can protect a substantial number of packages and can reduce the attack surface and review load for most npm-based software systems substantially, while containing past known attacks and inducing only negligible performance overhead (&lt;1%).\n\n \nSecond, this project developed anomaly detection techniques to identify updates that are suspicious because they differ from past updates and typical updates in unusual ways. Unusual updates may start including encrypted content, start using security-sensitive APIs in minor releases that past releases did not use (e.g., network or file system APIs), or introduce an unusual amount of changes. While not providing formal guarantees, anomaly detection is generic and can be applied to all packages to focus manual review attention. It has shown to be effective to flag suspicious and malicious package updates. It is complementary with the sandboxing strategy.\n\n\n\n \n\n \n\n\t\t\t\t\tLast Modified: 11/22/2021\n\n\t\t\t\t\tSubmitted by: Christian Kastner"
 }
}