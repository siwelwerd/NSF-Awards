{
 "awd_id": "1717370",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Collaborative Research:Discerning and Recommending Context-Specific Best Practices in DevOps-Oriented Software Development",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2017-07-01",
 "awd_exp_date": "2021-06-30",
 "tot_intn_awd_amt": 190000.0,
 "awd_amount": 198000.0,
 "awd_min_amd_letter_date": "2017-05-31",
 "awd_max_amd_letter_date": "2018-04-26",
 "awd_abstract_narration": "This project is a scientific study of modern software development practices, which has become known as DevOps. The DevOps culture seeks to bring changes into software production as quickly as possible without compromising software quality, primarily by automating the processes of building, testing, and deploying software. In practice, DevOps engineers can choose between a multitude of tools, including configuration management, cloud-based continuous integration, and automated deployment. Often individual tools are used without much guidance on how they fit in the big picture, and questions about best practices abound in online forums. However, existing answers are typically generic rules of thumb or dated advice, mostly based on third-party experiences, often non-applicable to the specific context. In fact, current empirical evidence on the effectiveness of DevOps practices is much fragmented and incomplete. State-of-the-art decision-making support, based on hard data and informed advice, can help DevOps engineers discern the best choices and practices for their tasks.\u00a0\r\n\r\nThe proposed research is grounded in contingency theory, where the emphasis is on task context when reasoning about the effectiveness of practices. The goal of this project is to learn and convey structured, context-dependent analytics on best practices in DevOps environments, by mining and analyzing data from the collaborative coding platform GitHub. Using established and novel qualitative and quantitative techniques, this research will: (1) identify clusters of software projects that share similar context variables; and (2) within a context of interest, discern the conditions under which DevOps practices such as continuous integration are most (and least) effective. This will result in actionable knowledge and tool support for DevOps teams, to customize efficient project practices to their environment, as well as advance the theory and practice of software engineering, especially as it relates to distributed, fast paced, automation-heavy environments.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Vladimir",
   "pi_last_name": "Filkov",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Vladimir Filkov",
   "pi_email_addr": "filkov@cs.ucdavis.edu",
   "nsf_id": "000217276",
   "pi_start_date": "2017-05-31",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of California-Davis",
  "inst_street_address": "1850 RESEARCH PARK DR STE 300",
  "inst_street_address_2": "",
  "inst_city_name": "DAVIS",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "5307547700",
  "inst_zip_code": "956186153",
  "inst_country_name": "United States",
  "cong_dist_code": "04",
  "st_cong_dist_code": "CA04",
  "org_lgl_bus_name": "UNIVERSITY OF CALIFORNIA, DAVIS",
  "org_prnt_uei_num": "",
  "org_uei_num": "TX2DAGQPENZ5"
 },
 "perf_inst": {
  "perf_inst_name": "University of California-Davis",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "956168562",
  "perf_ctry_code": "US",
  "perf_cong_dist": "04",
  "perf_st_cong_dist": "CA04",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7798",
   "pgm_ref_txt": "SOFTWARE & HARDWARE FOUNDATION"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 190000.0
  },
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 8000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-b7d062db-7fff-cbb7-602d-9108d5d48030\">\n<p dir=\"ltr\"><span>The DevOps software development culture seeks to bring changes into production as quickly as possible without compromising software quality, primarily by automating the processes of building, testing, and deploying software. In practice, DevOps is supported by a multitude of tools and practices, often combined into a multi-step </span><span>pipeline</span><span>. Software engineers need to make decisions about their DevOps pipelines constantly, for example when to do what, when not to do it, and in what order it is best to do it. This project aimed to fill a gap in the decision-making support available to DevOps practitioners, by providing much needed empirical evidence on the factors associated with the adoption decision and outcomes of using different DevOps practices and tools in different contexts.</span></p>\n<p dir=\"ltr\">Our central idea was that software projects are sufficiently different from each other, and thus may need bespoke DevOps pipeline solutions. The availability of data from prior developer and team experiences, from a large number of projects, made it possible to offer customized analytics for decision-making about DevOps solutions. Centering on &ldquo;context&rdquo;, we carried out a series of data-rich empirical studies of DevOps tools and practices related to automated testing, cloud-based Continuous Integration, automated Continuous Deployment, dependency management, and others. We studied how adopting Continuous Integration impacts other software development practices such as code review, how context factors and social diffusion mechanisms impact the adoption of quality assurance automation tools, and what are some fundamental trade-offs between competing tools and between Continuous Deployment pipeline configurations.</p>\n<p dir=\"ltr\">Our methodological approach was two-fold. On the one hand, we interviewed and surveyed practitioners about their use cases and reasons for adoption or abandonment of different practices, or we qualitatively analyzed public traces from open-source software projects where these decisions were discussed. This way, we derived hypotheses about factors that influence the adoption and configuration of DevOps pipelines in the wild, and hypotheses about how different configurations might lead to different outcomes in terms of developer productivity and software quality, taking project context into account. To test those hypotheses, we collected large amounts of historical data from open-source projects, and derived existing and novel metrics from them, which we used in regression and quasi-causal analyses.</p>\n<p dir=\"ltr\"><span>Some of our most general findings are as follows. a) The effects of Continuous Integration are more nuanced and complex than found in prior studies: we found only small to moderate positive effects on productivity, indicating that in spite of CI, the ability of teams to scale up distributed development is limited by the availability of human resources for manual code review. b) There are multiple major workflows followed for Continuous Deployment, with prominent tradeoffs being made between speed and quality of the process. c) DevOps pipelines are not all equally as effective, thus proper tool choice is important, and it depends on the project context and other tools present in the pipeline. d) Teams deliberating on DevOps tool adoptions for their pipelines can benefit from discussions of available tools and from understanding of the prevailing sentiment in the team; crowdsourcing the decision making and shortening the discussions can be beneficial.</span></p>\n<p dir=\"ltr\"><span>The work resulting from this project has been well-received and impactful: our joint papers from this project have been cited about 200 times. We published and presented research papers in major software engineering venues, including the ICSE, ESEC/FSE, and ASE conferences. Notably, we were awarded an ACM Distinguished Paper award for one of them, at ASE 2020. Our data collection infrastructure, datasets, and statistical models are available as open-source tools.</span></p>\n<p dir=\"ltr\"><span>This project also served as a training ground for 2 PhD, 2 MS, and 3 undergraduate students (2 as part of NSF REU training) at UC Davis. All of them received unique training in DevOps and open-source software development, as well as contributed to the project goals and products.</span></p>\n</span></p><br>\n<p>\n\t\t\t\t      \tLast Modified: 11/08/2021<br>\n\t\t\t\t\tModified by: Vladimir&nbsp;Filkov</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n\nThe DevOps software development culture seeks to bring changes into production as quickly as possible without compromising software quality, primarily by automating the processes of building, testing, and deploying software. In practice, DevOps is supported by a multitude of tools and practices, often combined into a multi-step pipeline. Software engineers need to make decisions about their DevOps pipelines constantly, for example when to do what, when not to do it, and in what order it is best to do it. This project aimed to fill a gap in the decision-making support available to DevOps practitioners, by providing much needed empirical evidence on the factors associated with the adoption decision and outcomes of using different DevOps practices and tools in different contexts.\nOur central idea was that software projects are sufficiently different from each other, and thus may need bespoke DevOps pipeline solutions. The availability of data from prior developer and team experiences, from a large number of projects, made it possible to offer customized analytics for decision-making about DevOps solutions. Centering on \"context\", we carried out a series of data-rich empirical studies of DevOps tools and practices related to automated testing, cloud-based Continuous Integration, automated Continuous Deployment, dependency management, and others. We studied how adopting Continuous Integration impacts other software development practices such as code review, how context factors and social diffusion mechanisms impact the adoption of quality assurance automation tools, and what are some fundamental trade-offs between competing tools and between Continuous Deployment pipeline configurations.\nOur methodological approach was two-fold. On the one hand, we interviewed and surveyed practitioners about their use cases and reasons for adoption or abandonment of different practices, or we qualitatively analyzed public traces from open-source software projects where these decisions were discussed. This way, we derived hypotheses about factors that influence the adoption and configuration of DevOps pipelines in the wild, and hypotheses about how different configurations might lead to different outcomes in terms of developer productivity and software quality, taking project context into account. To test those hypotheses, we collected large amounts of historical data from open-source projects, and derived existing and novel metrics from them, which we used in regression and quasi-causal analyses.\nSome of our most general findings are as follows. a) The effects of Continuous Integration are more nuanced and complex than found in prior studies: we found only small to moderate positive effects on productivity, indicating that in spite of CI, the ability of teams to scale up distributed development is limited by the availability of human resources for manual code review. b) There are multiple major workflows followed for Continuous Deployment, with prominent tradeoffs being made between speed and quality of the process. c) DevOps pipelines are not all equally as effective, thus proper tool choice is important, and it depends on the project context and other tools present in the pipeline. d) Teams deliberating on DevOps tool adoptions for their pipelines can benefit from discussions of available tools and from understanding of the prevailing sentiment in the team; crowdsourcing the decision making and shortening the discussions can be beneficial.\nThe work resulting from this project has been well-received and impactful: our joint papers from this project have been cited about 200 times. We published and presented research papers in major software engineering venues, including the ICSE, ESEC/FSE, and ASE conferences. Notably, we were awarded an ACM Distinguished Paper award for one of them, at ASE 2020. Our data collection infrastructure, datasets, and statistical models are available as open-source tools.\nThis project also served as a training ground for 2 PhD, 2 MS, and 3 undergraduate students (2 as part of NSF REU training) at UC Davis. All of them received unique training in DevOps and open-source software development, as well as contributed to the project goals and products.\n\n\n\t\t\t\t\tLast Modified: 11/08/2021\n\n\t\t\t\t\tSubmitted by: Vladimir Filkov"
 }
}