{
 "awd_id": "1723198",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "TWC: Small: Detection and Prevention of Prior Known Software Security Vulnerabilities",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2016-07-01",
 "awd_exp_date": "2018-08-31",
 "tot_intn_awd_amt": 286724.0,
 "awd_amount": 286724.0,
 "awd_min_amd_letter_date": "2016-12-23",
 "awd_max_amd_letter_date": "2016-12-23",
 "awd_abstract_narration": "Software is a critical element in a wide range of real-world applications. Attacks against computer software can cause substantial damage to the cyber-infrastructure of our modern society and economy. In fact, many new software security vulnerabilities are discovered on a daily basis. Therefore, it is vital to identify and resolve those security issues as early as possible. This research aims to investigate a scientific foundation and a novel methodology for automated detection, prevention, and resolution of prior-known software security vulnerabilities in software systems. The results will help to detect and prevent prior-known security vulnerabilities from recurring in other software systems.\r\n \r\nIn this research, the key philosophy is that the software systems having the same/similar software security vulnerabilities share the protocols, algorithms, procedures, libraries, frameworks, modules, or source code with the same flaws, and they suffer the same/similar exploitation mechanisms. Based on that, empirical studies are conducted to investigate the nature and the characteristics of recurring software vulnerabilities in different software systems, and to validate that hypothesis. Based on the knowledge gained from the studies, new vulnerability models, representations, and similarity measurements are developed to capture recurring software security vulnerabilities, and the corresponding vulnerable code and exploitation mechanisms. Novel algorithms and techniques are designed to (semi-)automatically build graph-based vulnerability models from vulnerability reports and from vulnerable code and patches, aiming to construct a database of prior-known vulnerabilities. A new methodology is developed to help to identify the prior-known vulnerabilities in other systems and to suggest the resolution. Specifically, the automated methods and advances include 1) an algorithm to compare and match against vulnerability models in the database, 2) a technique to map software concepts between security reports and from a report to the corresponding source code fragments, modules, or components; 3) an algorithm to determine the modules and source file locations in the new system that correspond to the vulnerable modules and locations in a system with a prior-known vulnerability; and 4) a technique to suggest the patch to the new system from the prior fixes. In brief, the results of this research help to resolve early software security vulnerabilities. They will lead to more reliable software because the process of detecting and patching for recurring security vulnerabilities will be more efficient and effective.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Tien",
   "pi_last_name": "Nguyen",
   "pi_mid_init": "N",
   "pi_sufx_name": "",
   "pi_full_name": "Tien N Nguyen",
   "pi_email_addr": "nguyen.n.tien@gmail.com",
   "nsf_id": "000340493",
   "pi_start_date": "2016-12-23",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Texas at Dallas",
  "inst_street_address": "800 WEST CAMPBELL RD.",
  "inst_street_address_2": "SP2.25",
  "inst_city_name": "RICHARDSON",
  "inst_state_code": "TX",
  "inst_state_name": "Texas",
  "inst_phone_num": "9728832313",
  "inst_zip_code": "750803021",
  "inst_country_name": "United States",
  "cong_dist_code": "24",
  "st_cong_dist_code": "TX24",
  "org_lgl_bus_name": "UNIVERSITY OF TEXAS AT DALLAS",
  "org_prnt_uei_num": "",
  "org_uei_num": "EJCVPNN1WFS5"
 },
 "perf_inst": {
  "perf_inst_name": "University of Texas at Dallas",
  "perf_str_addr": "800 W. Campbell Rd.",
  "perf_city_name": "Richardson",
  "perf_st_code": "TX",
  "perf_st_name": "Texas",
  "perf_zip_code": "750803021",
  "perf_ctry_code": "US",
  "perf_cong_dist": "24",
  "perf_st_cong_dist": "TX24",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "9150",
   "pgm_ref_txt": "EXP PROG TO STIM COMP RES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0112",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001213DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2012,
   "fund_oblg_amt": 286724.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Throughout this project, we has investigated a scienti&#64257;c foundation and a novel methodology for automated identi&#64257;cation (detection/prevention) and &#64257;xing (resolution) of prior-known software security vulnerabilities in different systems. The results have helped to detect, prevent, and resolve prior-known software vulnerabilities.</p>\n<p>New software security vulnerabilities are discovered on an almost daily basis and it is vital to identify and resolve them as early as possible, because late corrections are costly.&nbsp; In reality, many software vulnerabilities are recurring and very similar.&nbsp; Thus, it is important to prevent prior-known software vulnerabilities from recurring in different systems. Unfortunately, existing supports for the learning from prior known vulnerabilities are limited to manual documentation. No automated support exists.</p>\n<p>To address this problem, we have the following key philosophy: the reuse of protocols, algorithms, procedures, modules, APIs, libraries, frameworks, or source code could cause similar vulnerabilities, i.e., when a bug or a security vulnerability occurs at one software entity, it likely occurs at the corresponding counter-parts of that entity. Thus, we can support the identi&#64257;cation (detection/prevention) and resolution (&#64257;xing) of recurring security vulnerabilities on different systems based on the investigation of previously identi&#64257;ed or resolved vulnerabilities on the systems that are similar in term of usage.</p>\n<p>Toward that goal, we has investigated a comprehensive and scienti&#64257;c methodology. To do that, we &#64257;rst conducted empirical studies on similar security vulnerabilities and their relations with software reuse at different levels. Specifically, we have studied on thousands of vulnerabilities on several databases for security vulnerabilities including NVD, CVE, and others. We reported several recurring and similar software security vulnerabilities occurring in different software systems. Type 1 of software vulnerabilities is due to source code reuse. That is, recurring vulnerabilities occur in the systems that reuse source code (e.g., having the same code base, deriving from the same source, or being developed on top of a common framework). A system has some vulnerable code fragments. Then, such code fragments are reused in other systems (e.g. by copy-and-paste, by branching/duplicating the code base and then developing new versions or new systems). Patches in one of such systems were late propagated into other systems. Type 2 of recurring vulnerabilities occurs across different systems that share APIs. For example, such systems use the same function from a library and have the same errors in API usages, e.g., missing or incorrectly checking the input/output of the function; missing or incorrectly placing function calls, etc. The corresponding vulnerable code fragments on such systems tend to misuse the same APIs in a similar manner, e.g., using the incorrect orders, missing step(s) in function calls, missing the same checking statements, incorrectly using the same comparison expression, etc. In Type 3 of recurring vulnerabilities, some systems have recurring or similar vulnerabilities due to the reuse at a higher level of abstraction. For example, such systems share the same algorithms, protocols, specifications, standards, and then have the same bugs or programming faults.</p>\n<p>With the knowledge learned from our empirical studies, we have developed techniques and tools to 1) capture the knowledge of such vulnerabilities and their solutions, and then 2) leverage such knowledge in &#64257;nding/detecting,&nbsp; patching,&nbsp; and preventing the similar vulnerabilities across different systems. Specifically, we have developed a scienti&#64257;c foundation for the representation and similarity measurement for software vulnerabilities, and a methodology for identi&#64257;cation, prevention, and resolution of similar vulnerabilities.</p>\n<p>We developed a graph-based representation model in which each vulnerability is represented as a graph. Nodes represent the entities in the system.&nbsp; Label of a node is its identifier. A node could have attributes. The attributes could be represented by text-based/structure-based/logic-based method. Edges represent the relations and dependencies of the entities. Label of an edge describes the type of corresponding relation and dependency. For example, the label \"use/call\" represents the usage (declaration, invocation), or before, input, share, output to represent the control/data dependencies.</p>\n<p>The findings in our empirical studies suggest that one could effectively detect and resolve some unreported vulnerabilities in one software system by consulting the prior known and reported vulnerabilities in the other systems that reuse/share source code, libraries, or specifications. To help developers with this task, we developed&nbsp; SecureSync,&nbsp; a supporting tool that is able to automatically detect recurring software vulnerabilities in different systems that share source code or libraries, which are the most frequent types of recurring vulnerabilities.</p>\n<p>Our results will lead to more reliable software and more vulnerabilities are prevented to reoccur in different systems. The process of detecting and patching for recurring vulnerabilities is more effective. Our validation efforts involve students and professionals, promoting teaching and training of assuring software reliability.&nbsp; Our results foster research activities in related &#64257;elds.&nbsp; They complement well to research on security patterns and software testing. Our project has contributed novel teaching modules to our curriculum and provided research opportunities for undergraduate/graduate, minority engineering, and women students.</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 11/26/2018<br>\n\t\t\t\t\tModified by: Tien&nbsp;N&nbsp;Nguyen</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThroughout this project, we has investigated a scienti&#64257;c foundation and a novel methodology for automated identi&#64257;cation (detection/prevention) and &#64257;xing (resolution) of prior-known software security vulnerabilities in different systems. The results have helped to detect, prevent, and resolve prior-known software vulnerabilities.\n\nNew software security vulnerabilities are discovered on an almost daily basis and it is vital to identify and resolve them as early as possible, because late corrections are costly.  In reality, many software vulnerabilities are recurring and very similar.  Thus, it is important to prevent prior-known software vulnerabilities from recurring in different systems. Unfortunately, existing supports for the learning from prior known vulnerabilities are limited to manual documentation. No automated support exists.\n\nTo address this problem, we have the following key philosophy: the reuse of protocols, algorithms, procedures, modules, APIs, libraries, frameworks, or source code could cause similar vulnerabilities, i.e., when a bug or a security vulnerability occurs at one software entity, it likely occurs at the corresponding counter-parts of that entity. Thus, we can support the identi&#64257;cation (detection/prevention) and resolution (&#64257;xing) of recurring security vulnerabilities on different systems based on the investigation of previously identi&#64257;ed or resolved vulnerabilities on the systems that are similar in term of usage.\n\nToward that goal, we has investigated a comprehensive and scienti&#64257;c methodology. To do that, we &#64257;rst conducted empirical studies on similar security vulnerabilities and their relations with software reuse at different levels. Specifically, we have studied on thousands of vulnerabilities on several databases for security vulnerabilities including NVD, CVE, and others. We reported several recurring and similar software security vulnerabilities occurring in different software systems. Type 1 of software vulnerabilities is due to source code reuse. That is, recurring vulnerabilities occur in the systems that reuse source code (e.g., having the same code base, deriving from the same source, or being developed on top of a common framework). A system has some vulnerable code fragments. Then, such code fragments are reused in other systems (e.g. by copy-and-paste, by branching/duplicating the code base and then developing new versions or new systems). Patches in one of such systems were late propagated into other systems. Type 2 of recurring vulnerabilities occurs across different systems that share APIs. For example, such systems use the same function from a library and have the same errors in API usages, e.g., missing or incorrectly checking the input/output of the function; missing or incorrectly placing function calls, etc. The corresponding vulnerable code fragments on such systems tend to misuse the same APIs in a similar manner, e.g., using the incorrect orders, missing step(s) in function calls, missing the same checking statements, incorrectly using the same comparison expression, etc. In Type 3 of recurring vulnerabilities, some systems have recurring or similar vulnerabilities due to the reuse at a higher level of abstraction. For example, such systems share the same algorithms, protocols, specifications, standards, and then have the same bugs or programming faults.\n\nWith the knowledge learned from our empirical studies, we have developed techniques and tools to 1) capture the knowledge of such vulnerabilities and their solutions, and then 2) leverage such knowledge in &#64257;nding/detecting,  patching,  and preventing the similar vulnerabilities across different systems. Specifically, we have developed a scienti&#64257;c foundation for the representation and similarity measurement for software vulnerabilities, and a methodology for identi&#64257;cation, prevention, and resolution of similar vulnerabilities.\n\nWe developed a graph-based representation model in which each vulnerability is represented as a graph. Nodes represent the entities in the system.  Label of a node is its identifier. A node could have attributes. The attributes could be represented by text-based/structure-based/logic-based method. Edges represent the relations and dependencies of the entities. Label of an edge describes the type of corresponding relation and dependency. For example, the label \"use/call\" represents the usage (declaration, invocation), or before, input, share, output to represent the control/data dependencies.\n\nThe findings in our empirical studies suggest that one could effectively detect and resolve some unreported vulnerabilities in one software system by consulting the prior known and reported vulnerabilities in the other systems that reuse/share source code, libraries, or specifications. To help developers with this task, we developed  SecureSync,  a supporting tool that is able to automatically detect recurring software vulnerabilities in different systems that share source code or libraries, which are the most frequent types of recurring vulnerabilities.\n\nOur results will lead to more reliable software and more vulnerabilities are prevented to reoccur in different systems. The process of detecting and patching for recurring vulnerabilities is more effective. Our validation efforts involve students and professionals, promoting teaching and training of assuring software reliability.  Our results foster research activities in related &#64257;elds.  They complement well to research on security patterns and software testing. Our project has contributed novel teaching modules to our curriculum and provided research opportunities for undergraduate/graduate, minority engineering, and women students.\n\n \n\n\t\t\t\t\tLast Modified: 11/26/2018\n\n\t\t\t\t\tSubmitted by: Tien N Nguyen"
 }
}