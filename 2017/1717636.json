{
 "awd_id": "1717636",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Formal Methods for Modern System Configuration Languages",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2017-08-01",
 "awd_exp_date": "2021-07-31",
 "tot_intn_awd_amt": 448904.0,
 "awd_amount": 448904.0,
 "awd_min_amd_letter_date": "2017-05-30",
 "awd_max_amd_letter_date": "2020-08-26",
 "awd_abstract_narration": "Computer systems play an essential role in all aspects of business, education, and the military. However, modern computer systems are incredibly complicated and thus prone to failure and susceptible to being hacked. System administrators, whose job it is to ensure that computer systems run smoothly, have a very difficult time managing and defending computing infrastructure.  This research project is developing tools and techniques to make the job of system administrators dramatically easier. The project is focused on techniques that work well with existing, industry-standard tools and practices, which will make its research contributions easier to apply. The intellectual merits are that the project is (1) developing new tools for maintaining computer systems, (2) designing models of computer systems that are amenable to analysis and verification, and (3) advancing the state of the art in formal methods for system administration tools. The project's broader significance and importance are that (1) it directly addresses a current and urgent problem that affects the nation's computing infrastructure, (2) it is developing tools that system administrators will be able to use, and (3) it will spur further research and development in this important area by publishing and releasing its products as open source software.\r\n\r\nThis project leverages recent advances in program verification and program synthesis to make system administration dramatically easier. Instead of proposing completely new abstractions that would be unfamiliar to system administrators, the project is developing techniques that are applicable to mainstream system configuration languages, such as Puppet, Chef, and Ansible. The project is developing tools to verify both universal properties of configurations and configuration-specific properties that govern how components of complex systems interact. Moreover, since real system configurations often invoke external commands, the project is also investigating a model-learning approach to accommodate them.  Finally, even verified configurations need to be updated, and updates introduce new errors. To address this problem, the project is developing new abstractions to make configuration updates dramatically easier.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Brian",
   "pi_last_name": "Levine",
   "pi_mid_init": "N",
   "pi_sufx_name": "",
   "pi_full_name": "Brian N Levine",
   "pi_email_addr": "brian@cs.umass.edu",
   "nsf_id": "000495531",
   "pi_start_date": "2020-08-26",
   "pi_end_date": null
  },
  {
   "pi_role": "Former Principal Investigator",
   "pi_first_name": "Arjun",
   "pi_last_name": "Guha",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Arjun Guha",
   "pi_email_addr": "a.guha@northeastern.edu",
   "nsf_id": "000633150",
   "pi_start_date": "2017-05-30",
   "pi_end_date": "2020-08-26"
  }
 ],
 "inst": {
  "inst_name": "University of Massachusetts Amherst",
  "inst_street_address": "101 COMMONWEALTH AVE",
  "inst_street_address_2": "",
  "inst_city_name": "AMHERST",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "4135450698",
  "inst_zip_code": "010039252",
  "inst_country_name": "United States",
  "cong_dist_code": "02",
  "st_cong_dist_code": "MA02",
  "org_lgl_bus_name": "UNIVERSITY OF MASSACHUSETTS",
  "org_prnt_uei_num": "VGJHK59NMPK9",
  "org_uei_num": "VGJHK59NMPK9"
 },
 "perf_inst": {
  "perf_inst_name": "University of Massachusetts Amherst",
  "perf_str_addr": "140 Governors Drive",
  "perf_city_name": "Amherst",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "010039242",
  "perf_ctry_code": "US",
  "perf_cong_dist": "02",
  "perf_st_cong_dist": "MA02",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 448904.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>During the course of this project, we invented several technologies to make computing system configurations more robust, safer to modify, and easier to write.</p>\n<p>The first intellectual contribution of this project is a system to semi-automatically repair errors in system configurations written in Puppet, which is a widely used system configuration language. The system that we developed, called Tortoise, allows a system administrator to directly modify the state of a Puppet-managed system that needs to be repaired. Tortoise records the changes and uses them to synthesize an updated Puppet configuration that is consistent with the state of the modified system. We published a research paper on this work.</p>\n<p>The second intellectual contribution of this project is a system for semi-automatically repairing configuration errors in robot control programs. Robot control programs have several parameters that are dependent on physical factors, e.g., friction, dimensions, and available power. When a robot is deployed in a new environment, it can underperform unless these parameters are adjusted. In typical practice, an expert roboticist painstakingly adjusts these parameters by hand. We developed a system called SRTR that instead allows a user to demonstrate corrections to bad behavior. SRTR uses these corrections to synthesize adjustments to the parameters that are consistent with the corrections. We published a research paper on this work which received the &ldquo;Most Innovative Demo&rdquo; Award at the publication venue.</p>\n<p>The third intellectual contribution of this project is a system that makes it possible to use a web browser to run programs that do not typically work in a web browser environment without significant modifications. These include long-running computations, programs that use threads, and so called &ldquo;blocking&rdquo; programs that wait for user input. We developed a general system called Stopify that makes it possible to run these programs directly in web browsers with no development effort from the programmer. This technology has since been used in several ways: (1) in a programming environment for students at UMass Amherst (https://www.ocelot-ide.org/) ; (2) to run a web-based robot simulator, which we used in an outreach workshop; and (3) as the foundation of an MS thesis and a forthcoming PhD dissertation. We published a paper on this work which received the &ldquo;Distinguished Artifact Award&rdquo; at the publication venue.</p>\n<p>The fourth intellectual contribution of this project is a system that automatically configures image processing programs to make efficient use of Graphics Processing Units (GPUs). Image processing programs are widely used in scientific discovery, medical diagnosis, and consumer products. However, they are resource intensive, and have to be re-configured to run on new generations of graphics hardware. We developed algorithms that configure image processing programs to run efficiently on contemporary graphics hardware, and demonstrated that our approaches result in significant improvement over the state of the art. We published a paper on this work which received the &ldquo;Best Paper Award&rdquo;.</p>\n<p>We also engaged in significant outreach activities aimed at educating both students and colleagues.</p>\n<ol>\n<li>PI Guha gave talks on research supported by this award at seven U.S. universities.</li>\n<li>PI Guha gave a series of invited lectures on the research supported by this award at the 2019 Programming Languages Implementation Summer School (PLISS).</li>\n<li>With collaborators, PI Guha ran an outreach workshop on programming and robotics for high-school workshops.</li>\n</ol>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 09/29/2021<br>\n\t\t\t\t\tModified by: Brian&nbsp;N&nbsp;Levine</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nDuring the course of this project, we invented several technologies to make computing system configurations more robust, safer to modify, and easier to write.\n\nThe first intellectual contribution of this project is a system to semi-automatically repair errors in system configurations written in Puppet, which is a widely used system configuration language. The system that we developed, called Tortoise, allows a system administrator to directly modify the state of a Puppet-managed system that needs to be repaired. Tortoise records the changes and uses them to synthesize an updated Puppet configuration that is consistent with the state of the modified system. We published a research paper on this work.\n\nThe second intellectual contribution of this project is a system for semi-automatically repairing configuration errors in robot control programs. Robot control programs have several parameters that are dependent on physical factors, e.g., friction, dimensions, and available power. When a robot is deployed in a new environment, it can underperform unless these parameters are adjusted. In typical practice, an expert roboticist painstakingly adjusts these parameters by hand. We developed a system called SRTR that instead allows a user to demonstrate corrections to bad behavior. SRTR uses these corrections to synthesize adjustments to the parameters that are consistent with the corrections. We published a research paper on this work which received the \"Most Innovative Demo\" Award at the publication venue.\n\nThe third intellectual contribution of this project is a system that makes it possible to use a web browser to run programs that do not typically work in a web browser environment without significant modifications. These include long-running computations, programs that use threads, and so called \"blocking\" programs that wait for user input. We developed a general system called Stopify that makes it possible to run these programs directly in web browsers with no development effort from the programmer. This technology has since been used in several ways: (1) in a programming environment for students at UMass Amherst (https://www.ocelot-ide.org/) ; (2) to run a web-based robot simulator, which we used in an outreach workshop; and (3) as the foundation of an MS thesis and a forthcoming PhD dissertation. We published a paper on this work which received the \"Distinguished Artifact Award\" at the publication venue.\n\nThe fourth intellectual contribution of this project is a system that automatically configures image processing programs to make efficient use of Graphics Processing Units (GPUs). Image processing programs are widely used in scientific discovery, medical diagnosis, and consumer products. However, they are resource intensive, and have to be re-configured to run on new generations of graphics hardware. We developed algorithms that configure image processing programs to run efficiently on contemporary graphics hardware, and demonstrated that our approaches result in significant improvement over the state of the art. We published a paper on this work which received the \"Best Paper Award\".\n\nWe also engaged in significant outreach activities aimed at educating both students and colleagues.\n\nPI Guha gave talks on research supported by this award at seven U.S. universities.\nPI Guha gave a series of invited lectures on the research supported by this award at the 2019 Programming Languages Implementation Summer School (PLISS).\nWith collaborators, PI Guha ran an outreach workshop on programming and robotics for high-school workshops.\n\n\n \n\n\t\t\t\t\tLast Modified: 09/29/2021\n\n\t\t\t\t\tSubmitted by: Brian N Levine"
 }
}