{
 "awd_id": "1712131",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "Systematic Quality Analysis and Improvement for Block-Based Software: Promoting the Culture of Quality From the Ground Up",
 "cfda_num": "47.076",
 "org_code": "11040000",
 "po_phone": "7032922832",
 "po_email": "ptymann@nsf.gov",
 "po_sign_block_name": "Paul Tymann",
 "awd_eff_date": "2017-08-15",
 "awd_exp_date": "2021-07-31",
 "tot_intn_awd_amt": 300000.0,
 "awd_amount": 300000.0,
 "awd_min_amd_letter_date": "2017-07-28",
 "awd_max_amd_letter_date": "2017-07-28",
 "awd_abstract_narration": "The key functions of modern society depend on software-based systems, with software quality critically affecting not only the utility of software applications but also their safety and security. Currently, the standard computer science (CS) curriculum introduces computing learners to this key concept very late or leaves it out completely. To address this problem, this project fundamentally rethinks the process and practices of teaching software quality to promote the culture of quality from the ground up. This project explores teaching software quality alongside the fundamentals of programming, by developing software and related teaching materials based on a professional software engineering practice for quality control known as \"code refactoring.\" This educational intervention serves the national interest by providing a simple pathway for bringing proven, real-world software engineering practices to the introductory computer science curriculum, imparting the importance of following principled software engineering practices to novice programmers.\r\n\r\nThis project will build on the success and popularity of block-based programming, a highly effective pedagogical tool for introductory learners. The research team will investigate software quality in the context of block-based programming and how the proven, real-world software engineering practice of refactoring, a semantics-preserving program transformation that improves code and design quality, can be introduced to promote the culture of quality in introductory CS curriculum. This project will develop a novel educational intervention for teaching software quality concepts to introductory students, including teaching strategies and learning materials. This work will also help create a conceptual foundation of refactoring for block-based languages, concretely realized as refactoring support for block-based programming environments. Finally, the project team will systematically evaluate the developed educational intervention to determine its effectiveness in fostering student knowledge, skills, and practices, required to improve software quality.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "EDU",
 "org_dir_long_name": "Directorate for STEM Education",
 "div_abbr": "DUE",
 "org_div_long_name": "Division Of Undergraduate Education",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Eli",
   "pi_last_name": "Tilevich",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Eli Tilevich",
   "pi_email_addr": "tilevich@cs.vt.edu",
   "nsf_id": "000187843",
   "pi_start_date": "2017-07-28",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Virginia Polytechnic Institute and State University",
  "inst_street_address": "300 TURNER ST NW",
  "inst_street_address_2": "STE 4200",
  "inst_city_name": "BLACKSBURG",
  "inst_state_code": "VA",
  "inst_state_name": "Virginia",
  "inst_phone_num": "5402315281",
  "inst_zip_code": "240603359",
  "inst_country_name": "United States",
  "cong_dist_code": "09",
  "st_cong_dist_code": "VA09",
  "org_lgl_bus_name": "VIRGINIA POLYTECHNIC INSTITUTE & STATE UNIVERSITY",
  "org_prnt_uei_num": "X6KEFGLHSJX7",
  "org_uei_num": "QDE5UHE5XD16"
 },
 "perf_inst": {
  "perf_inst_name": "Virginia Polytechnic Institute and State University",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "VA",
  "perf_st_name": "Virginia",
  "perf_zip_code": "240610001",
  "perf_ctry_code": "US",
  "perf_cong_dist": "09",
  "perf_st_cong_dist": "VA09",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "199800",
   "pgm_ele_name": "IUSE"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "8209",
   "pgm_ref_txt": "Improv Undergrad STEM Ed(IUSE)"
  },
  {
   "pgm_ref_code": "9178",
   "pgm_ref_txt": "UNDERGRADUATE EDUCATION"
  }
 ],
 "app_fund": [
  {
   "app_code": "0417",
   "app_name": "NSF Education & Human Resource",
   "app_symb_id": "040106",
   "fund_code": "04001718DB",
   "fund_name": "NSF Education & Human Resource",
   "fund_symb_id": "040106"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 300000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-d0f6a241-7fff-3ceb-bdfe-2141a99af014\"> </span></p>\n<p dir=\"ltr\"><span>The proper functioning of modern society?s infrastructure critically depends on the quality of its software systems. Introductory computing education has a unique role to play in ensuring the future of software systems is in good hands by preparing next-generation computing professionals who care deeply about software quality. Instead of postponing the teaching of software quality concepts until later in the curriculum, the goal of this project was to make it possible to introduce them as soon as computing students enter the discipline. To concretely realize this goal, we carried out our research and development in the context of Scratch, a highly successful programming language and platform for introductory computing education. We see the most significant outcomes of this project as follows: (1) It helped raise the research community?s awareness of code quality problems in Scratch and how they can negatively impact the educational effectiveness of its communal learning. We identified and documented a catalog of recurring quality problems, thus providing the necessary vocabulary for educators and learners to start reasoning about and addressing the issues of code quality in this domain.&nbsp;</span>(2) It pioneered the introduction of refactoring tools--automated transformation of source code while preserving its functionality--to block-based languages. Because manual refactoring can be tedious and error-prone, particularly for novice programmers, our project introduced novice-tailored refactoring support as a way to encourage systematic code quality improvement.</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 09/27/2021<br>\n\t\t\t\t\tModified by: Eli&nbsp;Tilevich</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n \nThe proper functioning of modern society?s infrastructure critically depends on the quality of its software systems. Introductory computing education has a unique role to play in ensuring the future of software systems is in good hands by preparing next-generation computing professionals who care deeply about software quality. Instead of postponing the teaching of software quality concepts until later in the curriculum, the goal of this project was to make it possible to introduce them as soon as computing students enter the discipline. To concretely realize this goal, we carried out our research and development in the context of Scratch, a highly successful programming language and platform for introductory computing education. We see the most significant outcomes of this project as follows: (1) It helped raise the research community?s awareness of code quality problems in Scratch and how they can negatively impact the educational effectiveness of its communal learning. We identified and documented a catalog of recurring quality problems, thus providing the necessary vocabulary for educators and learners to start reasoning about and addressing the issues of code quality in this domain. (2) It pioneered the introduction of refactoring tools--automated transformation of source code while preserving its functionality--to block-based languages. Because manual refactoring can be tedious and error-prone, particularly for novice programmers, our project introduced novice-tailored refactoring support as a way to encourage systematic code quality improvement.\n\n \n\n\t\t\t\t\tLast Modified: 09/27/2021\n\n\t\t\t\t\tSubmitted by: Eli Tilevich"
 }
}