{
 "awd_id": "1703541",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CSR: SHF: Medium: Collaborative Research: New Horizons in Deterministic Execution",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Matt Mutka",
 "awd_eff_date": "2017-07-01",
 "awd_exp_date": "2021-06-30",
 "tot_intn_awd_amt": 423441.0,
 "awd_amount": 423441.0,
 "awd_min_amd_letter_date": "2017-05-26",
 "awd_max_amd_letter_date": "2020-07-27",
 "awd_abstract_narration": "If you have ever thought to yourself \"huh, my computer didn't do that last time\", you may have experienced what computer scientists call non-determinism. Today, most computer hardware executes programs in a non-deterministic fashion: a program may yield different output or behavior in different runs, given the exact same input, sometimes with disastrous consequences. Recent research enforces deterministic execution in inherently non-deterministic systems. Unfortunately, this often comes at a steep performance price. Also, until now determinism is only available for non-interactive programs. The goal of this project is to improve the efficiency of deterministic execution of concurrent programs, and to include a large class of interactive programs in the scope of deterministic execution. Longer term, the goal is to make deterministic computing a viable choice, where nondeterminism is the only option today. This would likely improve both the safety and quality of the vast number of multithreaded programs running on today's and tomorrow's multicore devices.\r\n\r\nTo bring the benefits of deterministic execution to real-world programs, this project investigates algorithms, runtime systems, operating systems and hardware support to improve the performance and applicability of determinism. The project is organized along three major thrusts: combating the clock skew in deterministic logical clocks that imposes unnecessary waiting on threads, using speculation to break the serial bottleneck that current systems impose on synchronization operations, and extending the scope of determinism to encompass interactive applications. The researchers plan to openly distribute the systems built for this project to facilitate examination by other researchers and integration with computer systems education.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Joseph",
   "pi_last_name": "Devietti",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Joseph Devietti",
   "pi_email_addr": "devietti@cis.upenn.edu",
   "nsf_id": "000642229",
   "pi_start_date": "2017-05-26",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Pennsylvania",
  "inst_street_address": "3451 WALNUT ST STE 440A",
  "inst_street_address_2": "",
  "inst_city_name": "PHILADELPHIA",
  "inst_state_code": "PA",
  "inst_state_name": "Pennsylvania",
  "inst_phone_num": "2158987293",
  "inst_zip_code": "191046205",
  "inst_country_name": "United States",
  "cong_dist_code": "03",
  "st_cong_dist_code": "PA03",
  "org_lgl_bus_name": "TRUSTEES OF THE UNIVERSITY OF PENNSYLVANIA, THE",
  "org_prnt_uei_num": "GM1XX56LEP58",
  "org_uei_num": "GM1XX56LEP58"
 },
 "perf_inst": {
  "perf_inst_name": "Trustees of the University of Pennsylvania",
  "perf_str_addr": "3330 Walnut Street",
  "perf_city_name": "Philadelphia",
  "perf_st_code": "PA",
  "perf_st_name": "Pennsylvania",
  "perf_zip_code": "191046205",
  "perf_ctry_code": "US",
  "perf_cong_dist": "03",
  "perf_st_cong_dist": "PA03",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 208197.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 106342.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 108902.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>To achieve high performance, every modern computing system, from mobile phones to laptops and servers, contains multiple cores to compute many things at the same time. Coordinating this parallel computation so that it runs quickly and correctly has proven to be a significant and ongoing challenge for software developers.</p>\n<p>In this project, we explored techniques to make parallel programming simpler via deterministic execution. Historically, parallel computation runs nondeterministically, meaning that the result of the computation can vary each time it is run. This can lead to sporadic program crashes, or different decisions from a machine learning model, even when the inputs to these computations are the same. Deterministic execution for a parallel program means that the program always computes the same result. This makes it easier to understand what the program is doing, and fix the program if it computes incorrectly.</p>\n<p>In this project, we explored ways to make deterministic execution faster by speculating on synchronization operations, and by accelerating deterministic atomic operations with novel GPU hardware support. We also investigated ways to bring deterministic execution closer to real-world impact by tackling systems-level issues. We explored new systems abstractions like deterministic process groups and a deterministic version of Docker containers. Our work on deterministic containers led to the creation of a startup company, Cloudseal, to commercialize the technology. Cloudseal's&nbsp;container technology, which benefited from NSF Small Business Innovation Research&nbsp;funding, improves the quality and utility of software testing by eliminating \"flaky\", nondeterministic tests.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 10/31/2021<br>\n\t\t\t\t\tModified by: Joseph&nbsp;Devietti</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nTo achieve high performance, every modern computing system, from mobile phones to laptops and servers, contains multiple cores to compute many things at the same time. Coordinating this parallel computation so that it runs quickly and correctly has proven to be a significant and ongoing challenge for software developers.\n\nIn this project, we explored techniques to make parallel programming simpler via deterministic execution. Historically, parallel computation runs nondeterministically, meaning that the result of the computation can vary each time it is run. This can lead to sporadic program crashes, or different decisions from a machine learning model, even when the inputs to these computations are the same. Deterministic execution for a parallel program means that the program always computes the same result. This makes it easier to understand what the program is doing, and fix the program if it computes incorrectly.\n\nIn this project, we explored ways to make deterministic execution faster by speculating on synchronization operations, and by accelerating deterministic atomic operations with novel GPU hardware support. We also investigated ways to bring deterministic execution closer to real-world impact by tackling systems-level issues. We explored new systems abstractions like deterministic process groups and a deterministic version of Docker containers. Our work on deterministic containers led to the creation of a startup company, Cloudseal, to commercialize the technology. Cloudseal's container technology, which benefited from NSF Small Business Innovation Research funding, improves the quality and utility of software testing by eliminating \"flaky\", nondeterministic tests.\n\n\t\t\t\t\tLast Modified: 10/31/2021\n\n\t\t\t\t\tSubmitted by: Joseph Devietti"
 }
}