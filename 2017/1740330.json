{
 "awd_id": "1740330",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SI2-SSE: Software Elements to Enable Immersive Simulation",
 "cfda_num": "47.070",
 "org_code": "05090000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Seung-Jong Park",
 "awd_eff_date": "2017-09-01",
 "awd_exp_date": "2021-08-31",
 "tot_intn_awd_amt": 499997.0,
 "awd_amount": 499997.0,
 "awd_min_amd_letter_date": "2017-08-28",
 "awd_max_amd_letter_date": "2017-08-28",
 "awd_abstract_narration": "Parallel computers have grown so powerful that they are now able to solve extremely complex fluid flow or structures problems in seconds.  Unfortunately, it may take a researcher many hours or even days to set up a complex problem before it can be solved.  Furthermore it may take hours or often weeks to extract insight from the volume of data the simulation produces, if using standard techniques. For discovery and design questions, where the next variant of the problem requires a change to the problem definition, these delays disrupt the flow of experimentation and the associated intuition and learning about how the change in the problem definition relates to a change in the solution. To address this issue, a paradigm shift, referred to here as \"immersive simulation\", is planned to enable new approaches to problem definition editing that allow practitioners to interact with the simulations (visual model iteration) in a manner where they can dynamically experience the influence of parameter variations from a single, live, and ongoing simulation.  Examples include a surgeon virtually altering the shape of a bypass graft on one computer monitor and then virtually observing the change in the blood flow patterns not only within the bypass but throughout the vascular system. Likewise, an engineer altering the shape of a virtual car to see if the flow pattern improves or worsens. These applied research examples have parallels in fundamental research where live insight into the flow physics of unsteady, turbulent flows and their sensitivity to live parameter changes will be made available to researchers for the first time. Visually connecting the solution change to the visually iterated geometry and/or parameter change will enable a new age of intuition-driven discovery and design. This paradigm shift will also be incorporated into foundational undergraduate and graduate courses to enable deeper, experiential-based learning.  \r\n\r\nThe central goal of this project is to advance state-of-the-art tools into generic components that, when integrated, will make the following capabilities available to any partial differential equation solver: 1) live, reconfigurable visualization of ongoing simulations, 2) live, reconfigurable problem definition to allow the dynamic solution insight to guide the choice of key problem parameters, 3) real-time parameter sensitivity feedback, 4) adaptive simulation control to account for discretization errors and geometry changes, and 5) integration and demonstration of reliable, immersive simulation. The first communities that these software components will be developed with include cardiovascular flow and aerodynamic flow control. They have already articulated a need for software to more rapidly explore the performance of their systems under a broad parameter space with intuitive and quantitative parameter sensitivity. This software will enable not only design (applied research e.g., exploring bypass vs. stent type and placement for a particular patient's diseased vasculature or flow control actuator placement), but also discovery (fundamental research e.g., explore physics of flow response to discover completely new surgical procedures and flow control processes and devices). This twofold and complementary software application will have a similar impact on education, where foundational courses will use the integrated software modules to create immersive simulations that build intuition about flow physics, and then reinforce that learning in an applied nature in capstone design courses.  While the ideas will be prototyped and proven within the field of fluid dynamics, they will be developed generally, with sustainable software engineering, for easy adoption by other fields that make use of simulation. The successful development, integration, and demonstration of these tools at scale will transform massively parallel simulation from a series of I/O-intensive steps to live, reconfigurable discovery using carefully designed interfaces that blaze the trail for all simulation.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "OAC",
 "org_div_long_name": "Office of Advanced Cyberinfrastructure (OAC)",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Kenneth",
   "pi_last_name": "Jansen",
   "pi_mid_init": "E",
   "pi_sufx_name": "",
   "pi_full_name": "Kenneth E Jansen",
   "pi_email_addr": "jansenke@colorado.edu",
   "nsf_id": "000395065",
   "pi_start_date": "2017-08-28",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Kurt",
   "pi_last_name": "Maute",
   "pi_mid_init": "K",
   "pi_sufx_name": "",
   "pi_full_name": "Kurt K Maute",
   "pi_email_addr": "maute@colorado.edu",
   "nsf_id": "000493711",
   "pi_start_date": "2017-08-28",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Alireza",
   "pi_last_name": "Doostan",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Alireza Doostan",
   "pi_email_addr": "doostan@colorado.edu",
   "nsf_id": "000558703",
   "pi_start_date": "2017-08-28",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "John",
   "pi_last_name": "Evans",
   "pi_mid_init": "A",
   "pi_sufx_name": "",
   "pi_full_name": "John A Evans",
   "pi_email_addr": "john.a.evans@colorado.edu",
   "nsf_id": "000661555",
   "pi_start_date": "2017-08-28",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Colorado at Boulder",
  "inst_street_address": "3100 MARINE ST",
  "inst_street_address_2": "STE 481 572 UCB",
  "inst_city_name": "Boulder",
  "inst_state_code": "CO",
  "inst_state_name": "Colorado",
  "inst_phone_num": "3034926221",
  "inst_zip_code": "803090001",
  "inst_country_name": "United States",
  "cong_dist_code": "02",
  "st_cong_dist_code": "CO02",
  "org_lgl_bus_name": "THE REGENTS OF THE UNIVERSITY OF COLORADO",
  "org_prnt_uei_num": "",
  "org_uei_num": "SPVKK1RC2MZ3"
 },
 "perf_inst": {
  "perf_inst_name": "Regents of the University of Colorado",
  "perf_str_addr": "3100 Marine St., 572 UCB",
  "perf_city_name": "Boulder",
  "perf_st_code": "CO",
  "perf_st_name": "Colorado",
  "perf_zip_code": "803090572",
  "perf_ctry_code": "US",
  "perf_cong_dist": "02",
  "perf_st_cong_dist": "CO02",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "800400",
   "pgm_ele_name": "Software Institutes"
  },
  {
   "pgm_ele_code": "808400",
   "pgm_ele_name": "CDS&E"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "029E",
   "pgm_ref_txt": "INFRASTRUCTURE SYSTEMS MGT"
  },
  {
   "pgm_ref_code": "030E",
   "pgm_ref_txt": "CONTROL SYSTEMS"
  },
  {
   "pgm_ref_code": "036E",
   "pgm_ref_txt": "CIVIL INFRASTRUCTURE"
  },
  {
   "pgm_ref_code": "067E",
   "pgm_ref_txt": "DESIGN TOOLS"
  },
  {
   "pgm_ref_code": "7433",
   "pgm_ref_txt": "CyberInfra Frmwrk 21st (CIF21)"
  },
  {
   "pgm_ref_code": "8004",
   "pgm_ref_txt": "Software Institutes"
  },
  {
   "pgm_ref_code": "8005",
   "pgm_ref_txt": "Scientific Software Elements"
  },
  {
   "pgm_ref_code": "9263",
   "pgm_ref_txt": "COMPUTATIONAL SCIENCE & ENGING"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 499997.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-9594012a-7fff-0e5a-28dd-6d8d82699578\"> </span></p>\n<p dir=\"ltr\"><span>In the standard approach to computational fluid dynamics, a simulation is first defined through some pre-processing tools (e.g., generating a mesh and setting boundary conditions), solved&nbsp; with a PDE solver, and subsequently, post-processing is undertaken to visualize and analyze the output data. Large scale computing is becoming increasingly popular, driven in part by increased computer power, but also by the reduced cost of computers. The rise in core count brings significant advantages in model accuracy and the ability to model more complicated physics but also challenges in that the volume of output data dramatically increases.</span><span><br /><br /></span></p>\n<p dir=\"ltr\"><span>The central goal of this project was to advance state of the art tools into more generic components that, when integrated, will make the following capabilities available to any partial differential equation (PDE) solver: 1) live, reconfigurable visualization of ongoing simulations, 2) live, reconfigurable problem definition to allow the dynamic solution insight to guide the choice of key problem parameters, 3) real-time parameter sensitivity feedback, 4) adaptive simulation control to account for discretization errors and geometry changes, and 5) integration and demonstration of reliable, immersive simulation. </span><span>These goals were achieved and delivered as open source software components available on GitHub.&nbsp; The novel technical developments were also presented at conferences and published in journal articles.&nbsp; </span><span><br /></span><span><br /></span><span>Specifically, </span><span>we developed a new system for steering simulations where the parameter of interest is not limited to boundary condition values or material parameters but also includes the physical geometry defining the simulation domain.&nbsp; Our geometry deformation steering system is responsible for managing the full computational domain and triggering the physical simulation to step in time.&nbsp; The client application runs on a user&rsquo;s workstation and is responsible for handling user interaction with the simulation domain.&nbsp; Communication between the server and the client is performed via a low-level Transmission Control Protocol (TCP) connection directly between the two applications.&nbsp; Visualization and interaction take place in the open-source, multi-platform analysis and visualization application Paraview where we have developed a suite of custom plugins to perform mesh deformation actions on the user&rsquo;s workstation.</span><span><br /></span><span><br /></span><span>We also developed bi-fidelity modeling modules to accelerate&nbsp; low-fidelity design. In the simulation of complex problems, it is common to have access to models of differing fidelity. A high-fidelity model, e.g. a fine grid model, accurately computes the QoI, but is computationally expensive to evaluate. Thus, numerous high-fidelity evaluations often become prohibitively expensive. A low-fidelity model, e.g., a coarse grid model, provides a poor estimate of physics but is computationally cheap to run.&nbsp; Bi-fidelity methods seek to exploit both high- and low-fidelity computations to achieve accuracy close to that of a high-fidelity model while having computational expense close to that of a low-fidelity model. When an ensemble of model evaluations are needed, e.g., for sensitivity analysis, bi-fidelity methods have proven effective in reducing the overall simulation time. This project developed, demonstrated, documented&nbsp; and delivered open source modules to apply bi-fidelity modeling to complex CFD simulations.</span><span><br /></span><span><br /></span><span>The next significant outcome was the development and demonstration of solution-based dynamic error estimation and subsequent mesh adaptivity to track multiphase flow interfaces by linking tools from SCOREC/core&nbsp; (developed under a different SSE), This also included integration of in situ visualization tools to monitor the automated adaptivity.</span></p>\n<p dir=\"ltr\"><span>The final and perhaps most significant outcome is that all of these developments were integrated with an existing open source solver (PHASTA) and&nbsp; Kitware&rsquo;s open source co-processing adapter (Catalyst).&nbsp; The linkage to Catalyst was through the open source project&nbsp; SENSEI which will further allow it to be easily linked to other open source visualization and data analytics frameworks such as VisIt, Alpine, Conduit (etc.). The build process was documented in a git repo to enable other researchers, not only in CFD but any domain utilizing PDE simulation to easily follow and extend these tools.&nbsp;&nbsp;</span></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 08/16/2022<br>\n\t\t\t\t\tModified by: Kenneth&nbsp;E&nbsp;Jansen</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n \nIn the standard approach to computational fluid dynamics, a simulation is first defined through some pre-processing tools (e.g., generating a mesh and setting boundary conditions), solved  with a PDE solver, and subsequently, post-processing is undertaken to visualize and analyze the output data. Large scale computing is becoming increasingly popular, driven in part by increased computer power, but also by the reduced cost of computers. The rise in core count brings significant advantages in model accuracy and the ability to model more complicated physics but also challenges in that the volume of output data dramatically increases.\n\n\nThe central goal of this project was to advance state of the art tools into more generic components that, when integrated, will make the following capabilities available to any partial differential equation (PDE) solver: 1) live, reconfigurable visualization of ongoing simulations, 2) live, reconfigurable problem definition to allow the dynamic solution insight to guide the choice of key problem parameters, 3) real-time parameter sensitivity feedback, 4) adaptive simulation control to account for discretization errors and geometry changes, and 5) integration and demonstration of reliable, immersive simulation. These goals were achieved and delivered as open source software components available on GitHub.  The novel technical developments were also presented at conferences and published in journal articles.  \n\nSpecifically, we developed a new system for steering simulations where the parameter of interest is not limited to boundary condition values or material parameters but also includes the physical geometry defining the simulation domain.  Our geometry deformation steering system is responsible for managing the full computational domain and triggering the physical simulation to step in time.  The client application runs on a user\u2019s workstation and is responsible for handling user interaction with the simulation domain.  Communication between the server and the client is performed via a low-level Transmission Control Protocol (TCP) connection directly between the two applications.  Visualization and interaction take place in the open-source, multi-platform analysis and visualization application Paraview where we have developed a suite of custom plugins to perform mesh deformation actions on the user\u2019s workstation.\n\nWe also developed bi-fidelity modeling modules to accelerate  low-fidelity design. In the simulation of complex problems, it is common to have access to models of differing fidelity. A high-fidelity model, e.g. a fine grid model, accurately computes the QoI, but is computationally expensive to evaluate. Thus, numerous high-fidelity evaluations often become prohibitively expensive. A low-fidelity model, e.g., a coarse grid model, provides a poor estimate of physics but is computationally cheap to run.  Bi-fidelity methods seek to exploit both high- and low-fidelity computations to achieve accuracy close to that of a high-fidelity model while having computational expense close to that of a low-fidelity model. When an ensemble of model evaluations are needed, e.g., for sensitivity analysis, bi-fidelity methods have proven effective in reducing the overall simulation time. This project developed, demonstrated, documented  and delivered open source modules to apply bi-fidelity modeling to complex CFD simulations.\n\nThe next significant outcome was the development and demonstration of solution-based dynamic error estimation and subsequent mesh adaptivity to track multiphase flow interfaces by linking tools from SCOREC/core  (developed under a different SSE), This also included integration of in situ visualization tools to monitor the automated adaptivity.\nThe final and perhaps most significant outcome is that all of these developments were integrated with an existing open source solver (PHASTA) and  Kitware\u2019s open source co-processing adapter (Catalyst).  The linkage to Catalyst was through the open source project  SENSEI which will further allow it to be easily linked to other open source visualization and data analytics frameworks such as VisIt, Alpine, Conduit (etc.). The build process was documented in a git repo to enable other researchers, not only in CFD but any domain utilizing PDE simulation to easily follow and extend these tools.  \n\n \n\n \n\n\t\t\t\t\tLast Modified: 08/16/2022\n\n\t\t\t\t\tSubmitted by: Kenneth E Jansen"
 }
}