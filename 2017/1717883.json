{
 "awd_id": "1717883",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Collaborative Research: Automated Numerical Solver EnviRonment (ANSER)",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927498",
 "po_email": "achtchel@nsf.gov",
 "po_sign_block_name": "Almadena Chtchelkanova",
 "awd_eff_date": "2017-08-15",
 "awd_exp_date": "2021-07-31",
 "tot_intn_awd_amt": 224999.0,
 "awd_amount": 224999.0,
 "awd_min_amd_letter_date": "2017-08-04",
 "awd_max_amd_letter_date": "2017-08-04",
 "awd_abstract_narration": "The computational science community is tackling ever larger and more complex applications. The solution of the underlying mathematics problems requires using high-end parallel computing resources effectively, and delivering performance without degrading productivity is critical for the success of scientific computing. Converting mathematics from algorithms to high-quality implementations, however, is a difficult process, whether an application is developed from scratch or by leveraging existing software libraries. Modern numerical packages provide numerous solutions with widely varying performance. Selecting among these possibilities requires expertise in numerical computation, mathematical software, compilers, and computer architecture, but even such broad knowledge does not guarantee the selection of the best-performing method for a particular problem. In response to these challenges, ANSER (Automated Numerical Solver EnviRonment) automates the selection and configuration of algorithms such as sparse linear solvers, eigensolvers, and graph methods in the context of large-scale scientific and engineering applications. The overall approach is generalizable to any situation involving multiple solutions whose performance varies with input problem properties.  ANSER increases developer productivity and promotes effective use of modern parallel architectures to solve large-scale scientific and engineering problems. This work also impacts the training of the next-generation scientific workforce by involving graduate and undergraduate students in this model-guided development of high-performance software. \r\n \r\nANSER, the Automated Numerical Solver EnviRonment, is an open-source web-based platform that supports the development of both scientific applications and high-performance libraries.  It selects, configures and, in some cases, generates implementations of high-performance numerical algorithms.  ANSER defines a methodology for automating the process of identifying problem features, creating performance models (based on combining analytical and machine learning approaches), and employing them in creating and configuring numerical software. ANSER initially targets widely used numerical packages for nonlinear partial differential equations and solution of eigenvalue problems, but it is designed to be extensible to other types of numerical methods, such as graph computations and n-body simulations. In addition to traditional dissemination methods (open-source software releases and publications), ANSER integrates semantic analysis of scientific computing literature to discover numerical methods similar to those provided by the target libraries and to identify and connect with our users. ANSER provides multiple interfaces to support different types of users, including students, computational scientists, and numerical library developers.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Boyana",
   "pi_last_name": "Norris",
   "pi_mid_init": "R",
   "pi_sufx_name": "",
   "pi_full_name": "Boyana R Norris",
   "pi_email_addr": "norris@cs.uoregon.edu",
   "nsf_id": "000385007",
   "pi_start_date": "2017-08-04",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Oregon Eugene",
  "inst_street_address": "1776 E 13TH AVE",
  "inst_street_address_2": "",
  "inst_city_name": "EUGENE",
  "inst_state_code": "OR",
  "inst_state_name": "Oregon",
  "inst_phone_num": "5413465131",
  "inst_zip_code": "974031905",
  "inst_country_name": "United States",
  "cong_dist_code": "04",
  "st_cong_dist_code": "OR04",
  "org_lgl_bus_name": "UNIVERSITY OF OREGON",
  "org_prnt_uei_num": "Z3FGN9MF92U2",
  "org_uei_num": "Z3FGN9MF92U2"
 },
 "perf_inst": {
  "perf_inst_name": "University of Oregon Eugene",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "OR",
  "perf_st_name": "Oregon",
  "perf_zip_code": "974035219",
  "perf_ctry_code": "US",
  "perf_cong_dist": "04",
  "perf_st_cong_dist": "OR04",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7942",
   "pgm_ref_txt": "HIGH-PERFORMANCE COMPUTING"
  },
  {
   "pgm_ref_code": "9102",
   "pgm_ref_txt": "WOMEN, MINORITY, DISABLED, NEC"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 224999.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-aa6b49cd-7fff-c124-6105-e04174a5dcf6\"> </span></p>\n<p dir=\"ltr\"><span>Scientific and engineering computing rely heavily on linear algebra for large-scale data analysis, modeling and simulation, machine learning, and other applied problems. The current high-performance implementations of numerical linear algebra software are based on decades of applied mathematics and computer science research. Hence, application developers who cannot rely on simple implementations because of the size or complexity of the problems they are solving, </span><span>must</span><span> use libraries developed by others. To use these often complex and continuously evolving software packages, application developers must select the appropriate functions and then devise ways to make them run efficiently on the architecture at hand. ANSER, </span><span>the Automated Numerical Solver EnviRonment</span><span>, enables application developers with varied backgrounds to readily discover and effectively apply the best available numerical software for their problems, aiming to maximize both developer productivity and application performance.</span></p>\n<p dir=\"ltr\"><span>ANSER is a comprehensive environment for selecting numerical algorithms and automating the production of efficient and accurate high-performance mathematical software. </span><span>&nbsp;</span><span>ANSER provides a </span><span>scalable and automated approach to </span><span>performance with model-based solution recommendations that result in more effective use of large-scale HPC resources.&nbsp; The models are built automatically using machine learning techniques and are improved analytically to enable software recommendations at different levels of parallelism based on characteristics of the input problems.&nbsp; ANSER is embedded in the web front end of Lighthouse, the first framework that combines a matrix algebra software taxonomy with code generation and tuning capabilities. Lighthouse takes a linear algebra problem from algorithm description to high-performance implementation, offering a selection of interfaces to assist users of different backgrounds in exploiting numerical software and code generation and tuning tools. Lighthouse includes initial support for the LAPACK, PETSc, Trilinos, and SLEPc numerical software packages.</span></p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 12/26/2021<br>\n\t\t\t\t\tModified by: Boyana&nbsp;Norris</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n \nScientific and engineering computing rely heavily on linear algebra for large-scale data analysis, modeling and simulation, machine learning, and other applied problems. The current high-performance implementations of numerical linear algebra software are based on decades of applied mathematics and computer science research. Hence, application developers who cannot rely on simple implementations because of the size or complexity of the problems they are solving, must use libraries developed by others. To use these often complex and continuously evolving software packages, application developers must select the appropriate functions and then devise ways to make them run efficiently on the architecture at hand. ANSER, the Automated Numerical Solver EnviRonment, enables application developers with varied backgrounds to readily discover and effectively apply the best available numerical software for their problems, aiming to maximize both developer productivity and application performance.\nANSER is a comprehensive environment for selecting numerical algorithms and automating the production of efficient and accurate high-performance mathematical software.  ANSER provides a scalable and automated approach to performance with model-based solution recommendations that result in more effective use of large-scale HPC resources.  The models are built automatically using machine learning techniques and are improved analytically to enable software recommendations at different levels of parallelism based on characteristics of the input problems.  ANSER is embedded in the web front end of Lighthouse, the first framework that combines a matrix algebra software taxonomy with code generation and tuning capabilities. Lighthouse takes a linear algebra problem from algorithm description to high-performance implementation, offering a selection of interfaces to assist users of different backgrounds in exploiting numerical software and code generation and tuning tools. Lighthouse includes initial support for the LAPACK, PETSc, Trilinos, and SLEPc numerical software packages.\n\n \n\n\t\t\t\t\tLast Modified: 12/26/2021\n\n\t\t\t\t\tSubmitted by: Boyana Norris"
 }
}