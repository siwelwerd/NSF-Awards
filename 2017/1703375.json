{
 "awd_id": "1703375",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SaTC: CORE: Medium: Collaborative: Taming Web Content Through Automated Reduction in Browser Functionality",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032920000",
 "po_email": "doliveir@nsf.gov",
 "po_sign_block_name": "Daniela Oliveira",
 "awd_eff_date": "2017-09-01",
 "awd_exp_date": "2021-08-31",
 "tot_intn_awd_amt": 406609.0,
 "awd_amount": 406609.0,
 "awd_min_amd_letter_date": "2017-07-05",
 "awd_max_amd_letter_date": "2017-07-05",
 "awd_abstract_narration": "Web-based applications executed via web browsers are ubiquitous in everyday life.  They underlie our banking, communications, shopping, social networking, tax payments, insurance transactions, and health care interactions. Unfortunately, malicious actors can take advantage of vulnerabilities in web browsers to exploit the user's computer.  The consequences of a web browser attack can be severe: web content can execute arbitrary code on the victim's machine. This research project studies how web applications use the features provided by web browsers and how user systems can be protected by restricting unnecessary browser features.\r\n\r\nThis project addresses web browser security by reducing the browser feature footprint, thereby reducing the browser attack surface and mitigating many classes of attacks. The researchers are building a feature-instrumented browser that reports what functionality is used by a web application. Then, they leverage that information to automatically identify when web applications diverge from their expected behavior and attack the user's browser. To enable users to use the most up-to-date browsers, while protecting them from unnecessary and risky browser features, the research team is building a system to decouple features from the browser.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Alexandros",
   "pi_last_name": "Kapravelos",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Alexandros Kapravelos",
   "pi_email_addr": "akaprav@ncsu.edu",
   "nsf_id": "000728212",
   "pi_start_date": "2017-07-05",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "North Carolina State University",
  "inst_street_address": "2601 WOLF VILLAGE WAY",
  "inst_street_address_2": "",
  "inst_city_name": "RALEIGH",
  "inst_state_code": "NC",
  "inst_state_name": "North Carolina",
  "inst_phone_num": "9195152444",
  "inst_zip_code": "276950001",
  "inst_country_name": "United States",
  "cong_dist_code": "02",
  "st_cong_dist_code": "NC02",
  "org_lgl_bus_name": "NORTH CAROLINA STATE UNIVERSITY",
  "org_prnt_uei_num": "U3NVH931QJJ3",
  "org_uei_num": "U3NVH931QJJ3"
 },
 "perf_inst": {
  "perf_inst_name": "North Carolina State University",
  "perf_str_addr": "Campus Box 7514",
  "perf_city_name": "Raleigh",
  "perf_st_code": "NC",
  "perf_st_name": "North Carolina",
  "perf_zip_code": "276958206",
  "perf_ctry_code": "US",
  "perf_cong_dist": "02",
  "perf_st_cong_dist": "NC02",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 406609.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p id=\"docs-internal-guid-58dcb773-7fff-24f9-0a93-e984f177ad55\" style=\"line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">In this project, NEU, ASU, and NCSU investigated techniques for selectively reducing the functionality in modern browsers. Browsers, since their introduction, have started to support a large set of functionality that is accessible by web pages that are being rendered. Unfortunately, this has attracted malicious actors that have started to use security vulnerabilities in all the parts of the browser to successfully launch attacks. Although modern browsers today support many different features, not all of this functionality is always required, or used, by end &shy;users.</span></p>\n<p>&nbsp;</p>\n<p style=\"line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">During this project, we published our work in highly &shy;venues, including USENIX, RAID, CCS, IMC, IEEE Security and Privacy, WWW, ISC, and SAC. We also presented our work at the Mozilla Security Research Summit 2019 and Brave Research Summit 2018, communicating this way directly to browser vendors about our recent research results.</span></p>\n<p>&nbsp;</p>\n<p style=\"line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Specifically, we built a dynamic analysis framework hosted inside Chrome&rsquo;s JavaScript Engine V8, the JS engine of the Chrome browser, that logs native function or property accesses during any JS execution. We call this VisibleV8 (VV8) At less than 600 lines (only 67 of which modify V8&rsquo;s existing behavior), our patches are lightweight and have been maintained from Chrome versions 63 through 72 without difficulty. VV8 consistently outperforms equivalent inline instrumentation, and it intercepts accesses impossible to instrument inline. This comprehensive coverage allows us to isolate and identify 46 JavaScript namespace artifacts used by JS code in the wild to detect automated browsing platforms and to discover that 29% of the Alexa top 50k sites load content which actively probes these artifacts. We released all of our code related to this project here: </span><a style=\"text-decoration: none;\" href=\"https://github.com/wspr-ncsu/visiblev8\"><span style=\"font-size: 11pt; font-family: Arial; color: #1155cc; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;\">https://github.com/wspr-ncsu/visiblev8</span></a><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">&nbsp;</span></p>\n<p>&nbsp;</p>\n<p style=\"line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">We used VisibleV8 in a number of follow-up research projects, such as one published at IMC 2021 to study JavaScript obfuscation techniques in the wild. Our work relies on a simple, but powerful observation: if dynamic analysis of a script&rsquo;s behavior (specifically, how it interacts with browser APIs) reveals browser API feature usage that cannot be reconciled with static analysis of the script&rsquo;s source code, then that behavior is obfuscated. To quantify and test this observation, we create a hybrid analysis platform using instrumented Chromium to log all browser API accesses by the scripts executed when a user visits a page. We filter the API access traces from our dynamic analysis through a static analysis tool that we developed in order to quantify how much and what kind of functionality is hidden on the web. When applying this methodology across the Alexa top 100k domains, we discover that 95.90% of the domains we successfully visited contain at least one script which invokes APIs that cannot be resolved from static analysis.&nbsp;</span></p>\n<p>&nbsp;</p>\n<p style=\"line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">We also used VisibleV8 to study the reproducibility of web measurements. At The Web Conference (WWW) 2021 we investigate how key measurements differ when using naive crawling tool defaults vs. careful attempts to match &ldquo;real&rdquo; users across the Tranco top 25k</span></p>\n<p style=\"line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">web domains. We find web privacy and security measurements significantly affected by vantage point and browser configuration. We conclude that unless researchers ensure their web measurement tools match real world user experience, the research community is likely missing important signals systematically. For example, we find browser configuration alone causing shifts in 19% of known ad and tracking domains encountered and altering the loading frequency of up to 10% of distinct JavaScript code units executed. We find network vantage points having similar, though less dramatic, effects on the same web metrics. To ensure reproducibility, we carefully document our methodology and publish both our code and collected data.</span></p>\n<p>&nbsp;</p>\n<p style=\"line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Overall, the results of this research project have made a significant contribution to improving the security of the web. Furthermore, we expect that the results of this research, which were made open-source, will be used by future researchers to continue improving the security of the web for all.</span></p>\n<p><br /><br /></p><br>\n<p>\n\t\t\t\t      \tLast Modified: 11/09/2021<br>\n\t\t\t\t\tModified by: Alexandros&nbsp;Kapravelos</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "In this project, NEU, ASU, and NCSU investigated techniques for selectively reducing the functionality in modern browsers. Browsers, since their introduction, have started to support a large set of functionality that is accessible by web pages that are being rendered. Unfortunately, this has attracted malicious actors that have started to use security vulnerabilities in all the parts of the browser to successfully launch attacks. Although modern browsers today support many different features, not all of this functionality is always required, or used, by end &shy;users.\n\n \nDuring this project, we published our work in highly &shy;venues, including USENIX, RAID, CCS, IMC, IEEE Security and Privacy, WWW, ISC, and SAC. We also presented our work at the Mozilla Security Research Summit 2019 and Brave Research Summit 2018, communicating this way directly to browser vendors about our recent research results.\n\n \nSpecifically, we built a dynamic analysis framework hosted inside Chrome\u2019s JavaScript Engine V8, the JS engine of the Chrome browser, that logs native function or property accesses during any JS execution. We call this VisibleV8 (VV8) At less than 600 lines (only 67 of which modify V8\u2019s existing behavior), our patches are lightweight and have been maintained from Chrome versions 63 through 72 without difficulty. VV8 consistently outperforms equivalent inline instrumentation, and it intercepts accesses impossible to instrument inline. This comprehensive coverage allows us to isolate and identify 46 JavaScript namespace artifacts used by JS code in the wild to detect automated browsing platforms and to discover that 29% of the Alexa top 50k sites load content which actively probes these artifacts. We released all of our code related to this project here: https://github.com/wspr-ncsu/visiblev8 \n\n \nWe used VisibleV8 in a number of follow-up research projects, such as one published at IMC 2021 to study JavaScript obfuscation techniques in the wild. Our work relies on a simple, but powerful observation: if dynamic analysis of a script\u2019s behavior (specifically, how it interacts with browser APIs) reveals browser API feature usage that cannot be reconciled with static analysis of the script\u2019s source code, then that behavior is obfuscated. To quantify and test this observation, we create a hybrid analysis platform using instrumented Chromium to log all browser API accesses by the scripts executed when a user visits a page. We filter the API access traces from our dynamic analysis through a static analysis tool that we developed in order to quantify how much and what kind of functionality is hidden on the web. When applying this methodology across the Alexa top 100k domains, we discover that 95.90% of the domains we successfully visited contain at least one script which invokes APIs that cannot be resolved from static analysis. \n\n \nWe also used VisibleV8 to study the reproducibility of web measurements. At The Web Conference (WWW) 2021 we investigate how key measurements differ when using naive crawling tool defaults vs. careful attempts to match \"real\" users across the Tranco top 25k\nweb domains. We find web privacy and security measurements significantly affected by vantage point and browser configuration. We conclude that unless researchers ensure their web measurement tools match real world user experience, the research community is likely missing important signals systematically. For example, we find browser configuration alone causing shifts in 19% of known ad and tracking domains encountered and altering the loading frequency of up to 10% of distinct JavaScript code units executed. We find network vantage points having similar, though less dramatic, effects on the same web metrics. To ensure reproducibility, we carefully document our methodology and publish both our code and collected data.\n\n \nOverall, the results of this research project have made a significant contribution to improving the security of the web. Furthermore, we expect that the results of this research, which were made open-source, will be used by future researchers to continue improving the security of the web for all.\n\n\n\n\n\n\t\t\t\t\tLast Modified: 11/09/2021\n\n\t\t\t\t\tSubmitted by: Alexandros Kapravelos"
 }
}