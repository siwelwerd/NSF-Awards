{
 "awd_id": "1712067",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF:Small:Analysis, Repair, and Synthesis for k-Safety",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032922585",
 "po_email": "pprabhak@nsf.gov",
 "po_sign_block_name": "Pavithra Prabhakar",
 "awd_eff_date": "2017-09-01",
 "awd_exp_date": "2023-08-31",
 "tot_intn_awd_amt": 499993.0,
 "awd_amount": 515993.0,
 "awd_min_amd_letter_date": "2017-06-06",
 "awd_max_amd_letter_date": "2022-08-17",
 "awd_abstract_narration": "This project aims to eradicate a broad class of software bugs, called k-safety errors, that arise from multiple inconsistent executions of the same procedure. While there is relatively little work on automated detection of such errors, the investigators have found dozens of such errors in widely-used software projects. This project develops semantic reasoning techniques that help software engineers implement correct programs that do not exhibit k-safety errors. In addition to improving the security and reliability of many kinds of software, these techniques make it easier for software engineers to develop, maintain, and debug their projects. The tools and techniques generated in this project will open-source and incorporated into the educational curriculum whenever possible. The project includes graduate and undergraduate students in this research. \r\n\r\nThe project develops a comprehensive theoretical framework  for  reasoning about arbitrary k-safety properties, including associativity, determinism,  transitivity, and others. Based on preliminary work on Cartesian Hoare Logic (CHL), the investigators explore a wide range of semantic reasoning tools for k-safety, ranging from static and dynamic analysis to automated repair and synthesis. On the analysis side, the project explores precise and scalable static analysis techniques that can automatically prove the absence of k-safety violations using automatically inferred relational program invariants. The project also investigates combined static and dynamic program analysis techniques that can provide witnesses to k-safety violations.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Isil",
   "pi_last_name": "Dillig",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Isil Dillig",
   "pi_email_addr": "isil@cs.utexas.edu",
   "nsf_id": "000674237",
   "pi_start_date": "2017-06-06",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Ruben",
   "pi_last_name": "Goncalves Martins",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Ruben Goncalves Martins",
   "pi_email_addr": "rubenm@andrew.cmu.edu",
   "nsf_id": "000732534",
   "pi_start_date": "2017-06-06",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Texas at Austin",
  "inst_street_address": "110 INNER CAMPUS DR",
  "inst_street_address_2": "",
  "inst_city_name": "AUSTIN",
  "inst_state_code": "TX",
  "inst_state_name": "Texas",
  "inst_phone_num": "5124716424",
  "inst_zip_code": "787121139",
  "inst_country_name": "United States",
  "cong_dist_code": "25",
  "st_cong_dist_code": "TX25",
  "org_lgl_bus_name": "UNIVERSITY OF TEXAS AT AUSTIN",
  "org_prnt_uei_num": "",
  "org_uei_num": "V6AFQPN18437"
 },
 "perf_inst": {
  "perf_inst_name": "University of Texas at Austin",
  "perf_str_addr": "101 E. 27th Street, Suite 5.300",
  "perf_city_name": "Austin",
  "perf_st_code": "TX",
  "perf_st_name": "Texas",
  "perf_zip_code": "787121532",
  "perf_ctry_code": "US",
  "perf_cong_dist": "25",
  "perf_st_cong_dist": "TX25",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "8206",
   "pgm_ref_txt": "Formal Methods and Verification"
  },
  {
   "pgm_ref_code": "9102",
   "pgm_ref_txt": "WOMEN, MINORITY, DISABLED, NEC"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 499993.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 16000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-d13d1263-7fff-7924-2ac7-0e7302c4ad0c\">\n<p dir=\"ltr\"><span>This project developed techniques for addressing so-called k-safety properties that generalize safety specifications. In contrast to a safety property whose violation is a single run of a program, the violation of a k-safety property consists of k different executions. Such k-safety properties have important security implications; for example, side channel vulnerabilities are caused by a violation of a 2-safety property.&nbsp;&nbsp;</span></p>\n<br />\n<p dir=\"ltr\"><span>During this project, we developed techniques for verifying (and refuting) such properties and applied these techniques to real-world programs and security applications (such as side channels). We also developed techniques that can be used to synthesize programs that, by construction, satisfy k-safety specifications. The verification and synthesis techniques that we developed advanced the state-of-the-art in this field and resulted in several publications at conferences and journals on Programming Languages, Software Engineering, and Security. The project was also instrumental in training graduate and undergraduate students at UT Austin. Many students who worked on this project became co-authors on publications and released open-source software that can be used by other researchers.</span></p>\n<br />\n<p dir=\"ltr\"><span>In more detail, the project led to the following contributions:</span></p>\n<br /> \n<ul>\n<li dir=\"ltr\">\n<p dir=\"ltr\"><span>We developed program logics (CHL and QCHL) that can be used to verify k-safety properties and their quantitative versions.&nbsp;</span></p>\n</li>\n<li dir=\"ltr\">\n<p dir=\"ltr\"><span>We developed synthesis techniques that can be used to automatically generate programs that by-construction satisfy k-safety properties. This enables synthesizing programs that are secure (e.g., obeying non-interference) or correctly implement total orders (e.g., needed for correct comparators)</span></p>\n</li>\n<li dir=\"ltr\">\n<p dir=\"ltr\"><span>We proposed a more scalable verification technique that combines our proposed program logics with reinforcement learning to accelerate verification.</span></p>\n</li>\n<li dir=\"ltr\">\n<p dir=\"ltr\"><span>We worked on repair techniques for fixing violations of k-safety properties.</span></p>\n</li>\n</ul>\n</span></p>\n<p>&nbsp;</p><br>\n<p>\n Last Modified: 12/30/2023<br>\nModified by: Isil&nbsp;Dillig</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\n\n\n\nThis project developed techniques for addressing so-called k-safety properties that generalize safety specifications. In contrast to a safety property whose violation is a single run of a program, the violation of a k-safety property consists of k different executions. Such k-safety properties have important security implications; for example, side channel vulnerabilities are caused by a violation of a 2-safety property.\n\n\n\n\nDuring this project, we developed techniques for verifying (and refuting) such properties and applied these techniques to real-world programs and security applications (such as side channels). We also developed techniques that can be used to synthesize programs that, by construction, satisfy k-safety specifications. The verification and synthesis techniques that we developed advanced the state-of-the-art in this field and resulted in several publications at conferences and journals on Programming Languages, Software Engineering, and Security. The project was also instrumental in training graduate and undergraduate students at UT Austin. Many students who worked on this project became co-authors on publications and released open-source software that can be used by other researchers.\n\n\n\n\nIn more detail, the project led to the following contributions:\n\n \n\n\n\n\nWe developed program logics (CHL and QCHL) that can be used to verify k-safety properties and their quantitative versions.\n\n\n\n\nWe developed synthesis techniques that can be used to automatically generate programs that by-construction satisfy k-safety properties. This enables synthesizing programs that are secure (e.g., obeying non-interference) or correctly implement total orders (e.g., needed for correct comparators)\n\n\n\n\nWe proposed a more scalable verification technique that combines our proposed program logics with reinforcement learning to accelerate verification.\n\n\n\n\nWe worked on repair techniques for fixing violations of k-safety properties.\n\n\n\n\n\n\t\t\t\t\tLast Modified: 12/30/2023\n\n\t\t\t\t\tSubmitted by: IsilDillig\n"
 }
}