{
 "awd_id": "1718581",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "III: Small: Multi-Version Concurrency Control on Modern Hardware",
 "cfda_num": "47.070",
 "org_code": "05020000",
 "po_phone": "7032924481",
 "po_email": "hmunoz@nsf.gov",
 "po_sign_block_name": "Hector Munoz-Avila",
 "awd_eff_date": "2017-08-15",
 "awd_exp_date": "2022-07-31",
 "tot_intn_awd_amt": 500000.0,
 "awd_amount": 516000.0,
 "awd_min_amd_letter_date": "2017-08-04",
 "awd_max_amd_letter_date": "2020-07-28",
 "awd_abstract_narration": "Database systems generally fall into two categories with respect to how they update data: either they overwrite the old value with the new value, or they store (and make accessible) both the old version and new version of the data. Most early database systems fall in the first category (overwriting data) because storage was expensive and limited. However, as compliance, auditing, reporting, back-up, and disaster recovery use-cases increasingly rely on reading database snapshots and data that may have been later updated, the ability of a database system to maintain recent versions of record values in near-line access modes has become increasingly important. Furthermore, maintaining multiple versions of record values potentially enables the database to improve its throughput of handling transaction requests - reads and writes of the same record can potentially occur concurrently instead of delaying transactions to avoid inconsistent reads. Therefore, the trend in database system architecture is towards the second category: keeping around multiple versions of data values. Existing multi-versioned database systems have done an adequate job in handling the compliance, auditing, reporting, back-up, and disaster recovery use-cases that exist today. However, in many cases they provide no protection against snapshot isolation anomalies that violates the correctness of the data in the database and can result in bugs in application code written on top of the database system. The few existing systems that avoid these anomalies only do so at significant costs to throughput and database performance. Furthermore, most existing multi-versioned database systems\r\nare designed for disk-storage, and struggle to perform well under main-memory workloads.\r\n\r\nWe are building a completely redesigned multi-versioned database system, designed for main-memory deployments. It is architected to achieve extremely high throughput, while avoiding the fundamental write skew anomalies that have existed in previous systems affecting both application developers and database users. We are integrating novel techniques for database recoverability and transaction chopping into the multi-versioned database system architecture in order to improve transaction throughput by at least an order of magnitude. We are also investigating techniques for continuous snapshot replication and serving consistent read queries from geo-distributed replicas with bounded staleness. Furthermore, we are performing extensive experimental studies that both motivate the design of our system, and also motivate the use of multi-versioned database systems in general vs. single-versioned systems.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "IIS",
 "org_div_long_name": "Division of Information & Intelligent Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Daniel",
   "pi_last_name": "Abadi",
   "pi_mid_init": "J",
   "pi_sufx_name": "",
   "pi_full_name": "Daniel J Abadi",
   "pi_email_addr": "abadi@umd.edu",
   "nsf_id": "000508003",
   "pi_start_date": "2017-08-04",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Maryland, College Park",
  "inst_street_address": "3112 LEE BUILDING",
  "inst_street_address_2": "",
  "inst_city_name": "COLLEGE PARK",
  "inst_state_code": "MD",
  "inst_state_name": "Maryland",
  "inst_phone_num": "3014056269",
  "inst_zip_code": "207425100",
  "inst_country_name": "United States",
  "cong_dist_code": "04",
  "st_cong_dist_code": "MD04",
  "org_lgl_bus_name": "UNIVERSITY OF MARYLAND, COLLEGE PARK",
  "org_prnt_uei_num": "NPU8ULVAAS23",
  "org_uei_num": "NPU8ULVAAS23"
 },
 "perf_inst": {
  "perf_inst_name": "University of Maryland College Park",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "MD",
  "perf_st_name": "Maryland",
  "perf_zip_code": "207425103",
  "perf_ctry_code": "US",
  "perf_cong_dist": "04",
  "perf_st_cong_dist": "MD04",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "736400",
   "pgm_ele_name": "Info Integration & Informatics"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7364",
   "pgm_ref_txt": "INFO INTEGRATION & INFORMATICS"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 500000.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 16000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Intellectual merit:</p>\n<p>The research contributions of this project included:</p>\n<p>(1)&nbsp;&nbsp; A novel system that performs &ldquo;advanced planning&rdquo; to optimize concurrency control. Multiple shards combine to form a \"zone\". The shards within a zone collect input transaction requests to the system in batches and participate in a zone-local consensus protocol to order and plan the batches within the zone. Thus, each zone agrees on a single log of input transactions to that zone and their corresponding plans. This log may include transactions that touch data not located in that zone. The second level of the hierarchy involves the creation of a cross-zone log which interleaves the logs of each zone. For scalability and low-latency, this interleaving must happen without centralized (cross-zone) coordination. Instead, each zone broadcasts its log (asynchronously) to all other zones, and each zone can independently decide how it wants to interleave the logs from different zones. However, transactions that touch data in more than one zone must all appear in the same order in each zone relative to each other after this interleaving process. <br /> <br /> We found that this approach allows transactions in a database system to scale arbitrarily even under extremely high contention conditions. The key insight that enables this scalability is the advanced planning that is done prior to execution, which plans out the processing of conflicting transactions to avoid long delays during processing. The net result is orders of magnitude higher throughput under high contention.<br /> <br /> (2) The implementation and publication of the Bullfrog work, which deals with multi-version schemas. Bullfrog introduces innovative technology that supports&nbsp;single-step schema migrations across schema versions --- even those that are backwards incompatible --- without downtime, and without need for advanced warning. When a schema migration is submitted, BullFrog initiates a logical switch to the new schema, but physically migrates affected data lazily, as it is accessed by incoming transactions. BullFrog's internal concurrency control algorithms and data structures enable concurrent processing of schema migration operations with post-migration transactions, while ensuring exactly-once migration of all old data into the physical layout required by the new schema.</p>\n<p><br /> This approach is contrasted with the well-known multi-step approach to schema migration. In such approaches, the database system migrates a copy of the data to the new schema in the background, before the front-end instances can switch over to it. During this migration window, writes to the old schema must be propagated to the new copy, typically via triggers or log shipping of updates. Aside from the obvious side effect that such approaches approximately double the resource requirements of the system (which typically has a substantial effect on transaction throughput), the requirement to delay the front-end application migration until the database is ready is fundamentally antithetical to the spirit of the continuous deployment movement. The single-step schema migration approach funded by this grant thus presents a promising path forward to performing schema migration within the context of continuous deployment methodology.</p>\n<p>&nbsp;</p>\n<p>Broader impacts:</p>\n<p>(1)&nbsp;&nbsp;&nbsp;A component of the research developed for this grant was given as a project at \"Tech + Research: Welcoming Women to Computing Research\"&nbsp;<strong>---</strong>&nbsp;a three day research workshop geared towards engaging undergraduate and underrepresented women in computing.</p>\n<p>(2)&nbsp;&nbsp;&nbsp;A series of blog posts/programming assignments were published that serves as educational resources for people training in the field of data management. They have been cumulatively been accessed over 43,000 times as of the end date of the grant.</p>\n<p>(3)&nbsp;&nbsp;&nbsp;Training of a post-doc, along with graduate and undergraduate students.</p>\n<p>(4)&nbsp;&nbsp;Release of an open source database prototype upon which other research groups can build upon in their work on multi-version concurrency control. &nbsp;</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 11/07/2022<br>\n\t\t\t\t\tModified by: Daniel&nbsp;J&nbsp;Abadi</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nIntellectual merit:\n\nThe research contributions of this project included:\n\n(1)   A novel system that performs \"advanced planning\" to optimize concurrency control. Multiple shards combine to form a \"zone\". The shards within a zone collect input transaction requests to the system in batches and participate in a zone-local consensus protocol to order and plan the batches within the zone. Thus, each zone agrees on a single log of input transactions to that zone and their corresponding plans. This log may include transactions that touch data not located in that zone. The second level of the hierarchy involves the creation of a cross-zone log which interleaves the logs of each zone. For scalability and low-latency, this interleaving must happen without centralized (cross-zone) coordination. Instead, each zone broadcasts its log (asynchronously) to all other zones, and each zone can independently decide how it wants to interleave the logs from different zones. However, transactions that touch data in more than one zone must all appear in the same order in each zone relative to each other after this interleaving process. \n \n We found that this approach allows transactions in a database system to scale arbitrarily even under extremely high contention conditions. The key insight that enables this scalability is the advanced planning that is done prior to execution, which plans out the processing of conflicting transactions to avoid long delays during processing. The net result is orders of magnitude higher throughput under high contention.\n \n (2) The implementation and publication of the Bullfrog work, which deals with multi-version schemas. Bullfrog introduces innovative technology that supports single-step schema migrations across schema versions --- even those that are backwards incompatible --- without downtime, and without need for advanced warning. When a schema migration is submitted, BullFrog initiates a logical switch to the new schema, but physically migrates affected data lazily, as it is accessed by incoming transactions. BullFrog's internal concurrency control algorithms and data structures enable concurrent processing of schema migration operations with post-migration transactions, while ensuring exactly-once migration of all old data into the physical layout required by the new schema.\n\n\n This approach is contrasted with the well-known multi-step approach to schema migration. In such approaches, the database system migrates a copy of the data to the new schema in the background, before the front-end instances can switch over to it. During this migration window, writes to the old schema must be propagated to the new copy, typically via triggers or log shipping of updates. Aside from the obvious side effect that such approaches approximately double the resource requirements of the system (which typically has a substantial effect on transaction throughput), the requirement to delay the front-end application migration until the database is ready is fundamentally antithetical to the spirit of the continuous deployment movement. The single-step schema migration approach funded by this grant thus presents a promising path forward to performing schema migration within the context of continuous deployment methodology.\n\n \n\nBroader impacts:\n\n(1)   A component of the research developed for this grant was given as a project at \"Tech + Research: Welcoming Women to Computing Research\" --- a three day research workshop geared towards engaging undergraduate and underrepresented women in computing.\n\n(2)   A series of blog posts/programming assignments were published that serves as educational resources for people training in the field of data management. They have been cumulatively been accessed over 43,000 times as of the end date of the grant.\n\n(3)   Training of a post-doc, along with graduate and undergraduate students.\n\n(4)  Release of an open source database prototype upon which other research groups can build upon in their work on multi-version concurrency control.  \n\n \n\n\t\t\t\t\tLast Modified: 11/07/2022\n\n\t\t\t\t\tSubmitted by: Daniel J Abadi"
 }
}