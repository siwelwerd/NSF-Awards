{
 "awd_id": "1739674",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CPS: Small: Collaborative Research: Towards Secure, Privacy-Preserving, Verifiable Cyberphysical Systems",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032928950",
 "po_email": "rwachter@nsf.gov",
 "po_sign_block_name": "Ralph Wachter",
 "awd_eff_date": "2017-10-01",
 "awd_exp_date": "2021-09-30",
 "tot_intn_awd_amt": 311447.0,
 "awd_amount": 311447.0,
 "awd_min_amd_letter_date": "2017-09-09",
 "awd_max_amd_letter_date": "2019-11-22",
 "awd_abstract_narration": "Cyber-physical and Internet-of-Things (CPS/IoT) systems offer dramatic potential for revolutionizing many aspects of modern life by facilitating collection, analysis, and action on fine-grained sensor data.  In both consumer-facing systems (e.g. smart locks, cameras, and thermostats) as well as infrastructure and industrial settings (e.g. devices to monitor factories or electricity distribution systems), CPS/IoT systems are already responsible for a wide range of safety-critical functions with significant security implications. CPS/IoT systems' correctness and security shortcomings have implications both for device users themselves, and more broadly across the Internet, due to malware attacks hosted by these devices. This project attacks the problem of verifying the correctness and security of CPS/IoT systems by developing design-time verification techniques to be used prior to deployment, as well as run-time verification techniques for systems in use.  The project includes components to engage undergraduate students in research, and to improve the diversity of the computing workforce.\r\n\r\nThe proposed research has two main thrusts.  The first develops efficient, formal verification techniques for CPS/IoT Systems. These can be employed statically at design time or compile-time to comprehensively assess that state updates will occur in correct orderings based on design specifications provided by the designer or gleaned automatically from hardware design languages and software.  The second explores hardware support for formal, dynamic IoT system verification. In particular, so-called ``lifeguard'' techniques can be employed to watch state updates in real-time and react to them with hardware or software error handlers as needed. This allows systems to maintain oversight over arbitrary CPS/IoT applications and help ensure their appropriate operation.  A set of CPS/IoT verification tools to support design-time and compile-time verification and all hardware support designs and techniques developed will be released for broad open-source use.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Esin",
   "pi_last_name": "Tureci",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Esin Tureci",
   "pi_email_addr": "esin.tureci@princeton.edu",
   "nsf_id": "000813245",
   "pi_start_date": "2019-11-22",
   "pi_end_date": null
  },
  {
   "pi_role": "Former Principal Investigator",
   "pi_first_name": "Margaret",
   "pi_last_name": "Martonosi",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Margaret Martonosi",
   "pi_email_addr": "martonosi@princeton.edu",
   "nsf_id": "000395997",
   "pi_start_date": "2017-09-09",
   "pi_end_date": "2019-11-22"
  }
 ],
 "inst": {
  "inst_name": "Princeton University",
  "inst_street_address": "1 NASSAU HALL",
  "inst_street_address_2": "",
  "inst_city_name": "PRINCETON",
  "inst_state_code": "NJ",
  "inst_state_name": "New Jersey",
  "inst_phone_num": "6092583090",
  "inst_zip_code": "085442001",
  "inst_country_name": "United States",
  "cong_dist_code": "12",
  "st_cong_dist_code": "NJ12",
  "org_lgl_bus_name": "THE TRUSTEES OF PRINCETON UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "NJ1YPQXQG7U5"
 },
 "perf_inst": {
  "perf_inst_name": "Princeton University",
  "perf_str_addr": "35 Olden St.",
  "perf_city_name": "Princeton",
  "perf_st_code": "NJ",
  "perf_st_name": "New Jersey",
  "perf_zip_code": "085405233",
  "perf_ctry_code": "US",
  "perf_cong_dist": "12",
  "perf_st_cong_dist": "NJ12",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "791800",
   "pgm_ele_name": "CPS-Cyber-Physical Systems"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 311447.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Cyberphysical systems (CPS) and Internet of Things (IoT) systems have enabled agriculture, manufacturing, consumer products, and other domains to use internet connected devices to sense changes in the physical environment and take actions in response to those changes. An example of an IoT system is the use of smart devices in homes to control thermostats, lights, and door locks.</p>\n<p>These systems allow users to control actions taken by these devices even when the user is not at home. &nbsp;An important challenge to deploying these systems is ensuring they operate correctly as incorrect functioning can lead to a variety of vulnerabilities, including those related to security. For example, some consumers of commercial IoT systems have experienced situations where home sensing devices did not correctly alert users to burglars despite the smart devices in the home sensing and recording the intruders.</p>\n<p>The goal of this project was to build tools and design techniques for verifying that CPS and IoT systems were functioning correctly. As part of this work, we evaluated the correctness of applications written for a commercial smart home platform and discovered that the platform made it difficult to write correct applications due to limitations in how data was updated in the cloud infrastructure and due to limited software mechanisms for specifying the ordering of concurrent data updates. We created a tool, called Okapi, that can be used by software developers writing applications for this platform (or similar IoT platforms) to enable specification of ordering guarantees for handling data accesses. We demonstrated how this approach could be deployed for the commercial platform we had studied and also implemented the approach in an opensource IoT platform.</p>\n<p>We also created tools that analyze applications written for two commercial smart home platforms and detect when an application's failure to specify precise ordering of data updates and device commands could lead to incorrect execution.</p>\n<p>In addition to designing tools that help ensure applications are written correctly, we also designed several approaches for testing whether the underlying physical systems storing data were correctly implementing the ordering guarantees promised by those systems. One of our approaches, called perpetual litmus tests, significantly speeds up the process of repeatedly testing a system for correct behavior while also increasing the likelihood of exposing a wider variety of behaviors during testing. In another approach, we take a well-known testing technique from the multiprocessor computer processor domain that tests repeatedly for specific behaviors in updating data and reconfigure it for use in distributed systems, which contain many processors and data storage locations distributed over a large geographic location and which are used to build CPS and IoT systems.</p>\n<p>Finally, as part of this work, we mentored undergraduate and graduate students working on these research projects, teaching them about the research process while also exposing them to the many challenges to be tackled in ensuring correct operation of CPS and IoT systems.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 01/30/2022<br>\n\t\t\t\t\tModified by: Esin&nbsp;Tureci</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nCyberphysical systems (CPS) and Internet of Things (IoT) systems have enabled agriculture, manufacturing, consumer products, and other domains to use internet connected devices to sense changes in the physical environment and take actions in response to those changes. An example of an IoT system is the use of smart devices in homes to control thermostats, lights, and door locks.\n\nThese systems allow users to control actions taken by these devices even when the user is not at home.  An important challenge to deploying these systems is ensuring they operate correctly as incorrect functioning can lead to a variety of vulnerabilities, including those related to security. For example, some consumers of commercial IoT systems have experienced situations where home sensing devices did not correctly alert users to burglars despite the smart devices in the home sensing and recording the intruders.\n\nThe goal of this project was to build tools and design techniques for verifying that CPS and IoT systems were functioning correctly. As part of this work, we evaluated the correctness of applications written for a commercial smart home platform and discovered that the platform made it difficult to write correct applications due to limitations in how data was updated in the cloud infrastructure and due to limited software mechanisms for specifying the ordering of concurrent data updates. We created a tool, called Okapi, that can be used by software developers writing applications for this platform (or similar IoT platforms) to enable specification of ordering guarantees for handling data accesses. We demonstrated how this approach could be deployed for the commercial platform we had studied and also implemented the approach in an opensource IoT platform.\n\nWe also created tools that analyze applications written for two commercial smart home platforms and detect when an application's failure to specify precise ordering of data updates and device commands could lead to incorrect execution.\n\nIn addition to designing tools that help ensure applications are written correctly, we also designed several approaches for testing whether the underlying physical systems storing data were correctly implementing the ordering guarantees promised by those systems. One of our approaches, called perpetual litmus tests, significantly speeds up the process of repeatedly testing a system for correct behavior while also increasing the likelihood of exposing a wider variety of behaviors during testing. In another approach, we take a well-known testing technique from the multiprocessor computer processor domain that tests repeatedly for specific behaviors in updating data and reconfigure it for use in distributed systems, which contain many processors and data storage locations distributed over a large geographic location and which are used to build CPS and IoT systems.\n\nFinally, as part of this work, we mentored undergraduate and graduate students working on these research projects, teaching them about the research process while also exposing them to the many challenges to be tackled in ensuring correct operation of CPS and IoT systems.\n\n\t\t\t\t\tLast Modified: 01/30/2022\n\n\t\t\t\t\tSubmitted by: Esin Tureci"
 }
}