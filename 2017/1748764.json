{
 "awd_id": "1748764",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "EAGER: A Python Program Analysis Infrastructure to Facilitate Better Data Processing",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2017-09-15",
 "awd_exp_date": "2019-08-31",
 "tot_intn_awd_amt": 147000.0,
 "awd_amount": 147000.0,
 "awd_min_amd_letter_date": "2017-09-11",
 "awd_max_amd_letter_date": "2017-09-11",
 "awd_abstract_narration": "Python is the third most popular programming language, after C and Java,\u00a0 and the most widely used language in Machine Learning and Data Science. Applications in Python are prone to human errors as much as those in other languages, or maybe more so due to the dynamic nature of Python. Therefore, tools to analyze, test, verify, and optimize Python applications are in a pressing need. Such tools are lagging or non-existent for Python. The root cause is the lack of infrastructure to support building practical and effective tools, which entails addressing the dynamic features of Python, such as dynamic typing, dynamic code loading/execution, and pervasive invocations to external library functions implemented in other languages.\r\n\u00a0\r\nThis project aims to explore the feasibility of building a Python program analysis infrastructure by developing two sample tools that rely upon a common set of infrastructural capabilities including the instrumentation, static analysis and symbolic analysis capabilities. The two sample tools are a data provenance tracking tool for machine learning applications and a bug finding tool to detect data format inconsistencies, which are the most dominant type of bugs in data processing. The provenance tool will demonstrate the importance of static analysis and program instrumentation, and the bug finding tool will demonstrate the importance of symbolic analysis. Both tools will illustrate the great benefits that can be brought to data\u00a0scientists by advanced tools. In addition, they will illustrate that the aforementioned capabilities cannot be simply ported from existing infrastructures for other languages such as C and Java. The infrastructure will meet the pressing need of comprehensive tool building support for Python. A lot of cutting-edge synergistic research will be enabled across the CISE research community to serve data application programmers, data scientists and even end users.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Xiangyu",
   "pi_last_name": "Zhang",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Xiangyu Zhang",
   "pi_email_addr": "xyzhang@cs.purdue.edu",
   "nsf_id": "000494973",
   "pi_start_date": "2017-09-11",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Purdue University",
  "inst_street_address": "2550 NORTHWESTERN AVE # 1100",
  "inst_street_address_2": "",
  "inst_city_name": "WEST LAFAYETTE",
  "inst_state_code": "IN",
  "inst_state_name": "Indiana",
  "inst_phone_num": "7654941055",
  "inst_zip_code": "479061332",
  "inst_country_name": "United States",
  "cong_dist_code": "04",
  "st_cong_dist_code": "IN04",
  "org_lgl_bus_name": "PURDUE UNIVERSITY",
  "org_prnt_uei_num": "YRXVL4JYCEF5",
  "org_uei_num": "YRXVL4JYCEF5"
 },
 "perf_inst": {
  "perf_inst_name": "Purdue University",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "IN",
  "perf_st_name": "Indiana",
  "perf_zip_code": "479062849",
  "perf_ctry_code": "US",
  "perf_cong_dist": "04",
  "perf_st_cong_dist": "IN04",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "689200",
   "pgm_ele_name": "CI REUSE"
  },
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7433",
   "pgm_ref_txt": "CyberInfra Frmwrk 21st (CIF21)"
  },
  {
   "pgm_ref_code": "7916",
   "pgm_ref_txt": "EAGER"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  },
  {
   "pgm_ref_code": "8004",
   "pgm_ref_txt": "Software Institutes"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 147000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><div class=\"tinyMCEContent\">\n<p>Python is the third most popular programming language, after C and Java, and the most widely used language in Machine Learning and Data Science. Applications in Python are prone to human errors as much  as those in other languages, or maybe more so due to the dynamic nature  of Python. Therefore, tools to analyze, test, verify, and optimize  Python applications are in a pressing need. However, the efforts to  build such tools are substantially lagging behind. The number of tools  available for Python applications is substantially lower than that for  other mainstream languages. Moreover, the effectiveness of existing  tools for Python is hardly satisfactory. The root cause is the lack of infrastructure to support building practical and effective tools, which  entails addressing the dynamic features of Python, such as dynamic  typing, dynamic code loading/execution, and pervasive invocations to  external library functions implemented in other languages.</p>\n<p>Through this project, the PI and his group built a number of Python program analysis primitives and downstream tools. The analysis primitives  include the following: (1) Python program instrumentation capabilities  to support tracing and monitoring Python program execution; (2) Python  symbolic analysis capabilities that can be used to generate inputs to  cover paths and expose bugs; (3) Python static analysis capabilities  based on probabilistic inference that is particularly suited for Python.  The downstream tools include two debugging tools for Deep Learning Models (implemented in Python) and two security tools that detect security vulnerabilities in Deep Learning Models.</p>\n<p>The research outcomes were published on top-tier venues in Software Engineering and Security, including ICSE, FSE, CCS, and NDSS. Tools are released on Github. One student and two Post-docs worked in the project graduated and became professors in universities. Two of them are female.</p>\n</div><br>\n<p>\n\t\t\t\t      \tLast Modified: 03/15/2020<br>\n\t\t\t\t\tModified by: Xiangyu&nbsp;Zhang</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n\nPython is the third most popular programming language, after C and Java, and the most widely used language in Machine Learning and Data Science. Applications in Python are prone to human errors as much  as those in other languages, or maybe more so due to the dynamic nature  of Python. Therefore, tools to analyze, test, verify, and optimize  Python applications are in a pressing need. However, the efforts to  build such tools are substantially lagging behind. The number of tools  available for Python applications is substantially lower than that for  other mainstream languages. Moreover, the effectiveness of existing  tools for Python is hardly satisfactory. The root cause is the lack of infrastructure to support building practical and effective tools, which  entails addressing the dynamic features of Python, such as dynamic  typing, dynamic code loading/execution, and pervasive invocations to  external library functions implemented in other languages.\n\nThrough this project, the PI and his group built a number of Python program analysis primitives and downstream tools. The analysis primitives  include the following: (1) Python program instrumentation capabilities  to support tracing and monitoring Python program execution; (2) Python  symbolic analysis capabilities that can be used to generate inputs to  cover paths and expose bugs; (3) Python static analysis capabilities  based on probabilistic inference that is particularly suited for Python.  The downstream tools include two debugging tools for Deep Learning Models (implemented in Python) and two security tools that detect security vulnerabilities in Deep Learning Models.\n\nThe research outcomes were published on top-tier venues in Software Engineering and Security, including ICSE, FSE, CCS, and NDSS. Tools are released on Github. One student and two Post-docs worked in the project graduated and became professors in universities. Two of them are female.\n\n\n\t\t\t\t\tLast Modified: 03/15/2020\n\n\t\t\t\t\tSubmitted by: Xiangyu Zhang"
 }
}