{
 "awd_id": "1723571",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CAPA: Collaborative Research: Lightweight Abstract Memory Features",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2017-09-01",
 "awd_exp_date": "2021-08-31",
 "tot_intn_awd_amt": 250000.0,
 "awd_amount": 250000.0,
 "awd_min_amd_letter_date": "2017-08-31",
 "awd_max_amd_letter_date": "2019-06-12",
 "awd_abstract_narration": "The memory subsystem of modern computing systems has seen tremendous innovations, incorporating new features to aid programmers in creating fast, secure, correct, and power-efficient software.  Unfortunately, harnessing these features is a challenge, as programming languages do not expose advanced abilities of the memory subsystem to programmers.  This project focuses on the interface between programming languages and memory hardware. The intellectual merits include the creation of a rigorous semantics for memory features, so that programmers can reason about individual features and their composition; and the creation of compilation tools and run-time systems that allow programmers to use new memory features, in isolation or combination, for maximum gain.  The project's broader significance and importance are its impact on the software and hardware industry, by facilitating rapid adoption of new memory features; the education and training of graduate students; and the creation of a tutorial to aid in dissemination and adoption of the developed tools and techniques.\r\n\r\nHardware implementations of memory features are typically fast but limited by physical capacity, and the precise semantics of features are often vendor-specific.  The theoretical portion of the work will create rigorous semantics for memory features, which transcend individual implementation and allow programmers and static analysis tools to reason about a program's interaction with memory.  The research will construct virtualized run-time systems to overcome hardware constraints, and to emulate features when they are not present.  Its implementations will employ run-time adaptivity to fine-tune themselves to a given system's feature availability, support for composition of features, and hardware/workload characteristics.  A custom compiler infrastructure, built atop the LLVM system, will provide a lightweight syntax through which programmers can easily add support for memory features to their existing codes.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Gang",
   "pi_last_name": "Tan",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Gang Tan",
   "pi_email_addr": "gtan@psu.edu",
   "nsf_id": "000193259",
   "pi_start_date": "2017-08-31",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Pennsylvania State Univ University Park",
  "inst_street_address": "201 OLD MAIN",
  "inst_street_address_2": "",
  "inst_city_name": "UNIVERSITY PARK",
  "inst_state_code": "PA",
  "inst_state_name": "Pennsylvania",
  "inst_phone_num": "8148651372",
  "inst_zip_code": "168021503",
  "inst_country_name": "United States",
  "cong_dist_code": "15",
  "st_cong_dist_code": "PA15",
  "org_lgl_bus_name": "THE PENNSYLVANIA STATE UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "NPM2J7MSCF61"
 },
 "perf_inst": {
  "perf_inst_name": "Pennsylvania State Univ University Park",
  "perf_str_addr": "346C IST Building",
  "perf_city_name": "University Park",
  "perf_st_code": "PA",
  "perf_st_name": "Pennsylvania",
  "perf_zip_code": "168021400",
  "perf_ctry_code": "US",
  "perf_cong_dist": "15",
  "perf_st_cong_dist": "PA15",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "021Z",
   "pgm_ref_txt": "Industry Partnerships"
  },
  {
   "pgm_ref_code": "026Z",
   "pgm_ref_txt": "NSCI: National Strategic Computing Initi"
  },
  {
   "pgm_ref_code": "7798",
   "pgm_ref_txt": "SOFTWARE & HARDWARE FOUNDATION"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  },
  {
   "pgm_ref_code": "8585",
   "pgm_ref_txt": "NSF/Intel Partnership Projects"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 83333.0
  },
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 83333.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 83334.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>This project studied fundamental challenges involved in employing newhardware features, with a specific focus on new types of memory thatare emerging in cutting-edge systems.&nbsp; The project considered fourprimary types of memory: non-volatile memories, which preserve theircontents after power is lost; transactional memories, which can beaccessed by multiple processors simultaneously; secure memories, whichprotect against malicious attacks; and scratchpad memories, whichenable programmers to optimize performance when they know thatfeatures of a primary memory, like persistence and write-back, are notneeded.&nbsp; This research project looked across the entire \"systems\"stack, considering applications, programming languages, compilers, andthe hardware itself.</p>\n<p><br />Among the most significant outcomes of this research were programmingand analysis support for secure memory and techniques for identifyingside-channel attacks in software, which were the focus of the PennState team. Furthermore, in collaboration with the Lehigh and theArizona State team, we also created the design and simulation of a newscratchpad memory that can be attached to existing general-purposeprocessors.</p>\n<p>During the course of this research, many research papers werepublished in journals and highly selective conferences.&nbsp; Thealgorithms and software artifacts developed during this research havebeen released as open-source software, available worldwide, and havebeen shared with several companies, including Intel and PerspectaLabs. Two Ph.D. students and two M.S. students were directly supportedduring portions of their education through this research.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 10/03/2021<br>\n\t\t\t\t\tModified by: Gang&nbsp;Tan</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThis project studied fundamental challenges involved in employing newhardware features, with a specific focus on new types of memory thatare emerging in cutting-edge systems.  The project considered fourprimary types of memory: non-volatile memories, which preserve theircontents after power is lost; transactional memories, which can beaccessed by multiple processors simultaneously; secure memories, whichprotect against malicious attacks; and scratchpad memories, whichenable programmers to optimize performance when they know thatfeatures of a primary memory, like persistence and write-back, are notneeded.  This research project looked across the entire \"systems\"stack, considering applications, programming languages, compilers, andthe hardware itself.\n\n\nAmong the most significant outcomes of this research were programmingand analysis support for secure memory and techniques for identifyingside-channel attacks in software, which were the focus of the PennState team. Furthermore, in collaboration with the Lehigh and theArizona State team, we also created the design and simulation of a newscratchpad memory that can be attached to existing general-purposeprocessors.\n\nDuring the course of this research, many research papers werepublished in journals and highly selective conferences.  Thealgorithms and software artifacts developed during this research havebeen released as open-source software, available worldwide, and havebeen shared with several companies, including Intel and PerspectaLabs. Two Ph.D. students and two M.S. students were directly supportedduring portions of their education through this research.\n\n\t\t\t\t\tLast Modified: 10/03/2021\n\n\t\t\t\t\tSubmitted by: Gang Tan"
 }
}