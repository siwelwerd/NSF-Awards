{
 "awd_id": "1714699",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Supporting Regular Expression Testing, Search, Repair, Comprehension, and Maintenance",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2017-08-15",
 "awd_exp_date": "2022-07-31",
 "tot_intn_awd_amt": 499996.0,
 "awd_amount": 499996.0,
 "awd_min_amd_letter_date": "2017-08-10",
 "awd_max_amd_letter_date": "2017-08-10",
 "awd_abstract_narration": "In software development, regular expressions are a common programming construct used for many purposes, including querying databases, searching documents, validating user input, and parsing files. Most programming languages have standard libraries or built-in support for regular expression processing. Despite their frequent appearance in software development activities, regular expressions are prone to programming errors. When a regular expression is responsible for a software bug, the impact can be severe, possibly resulting in corrupted data, security vulnerabilities, denial of service attacks, or website outages. This research develops new techniques to test, understand, reuse, and maintain regular expressions, in an effort to improve developer comprehension and reduce related bugs.\r\n\r\nThe approach is to develop coverage criteria for test suites, similarity metrics, and semantics-preserving transformations for regular expressions. The coverage criteria apply to the automata representation of the regular expression and are used to automatically generate test inputs to help developers adequately test regular expressions. The similarity metrics allow developers to find regular expressions that are similar to a buggy regular expression, as well as explain how the behavior differs among them. The semantics-preserving transformations enhance comprehension and maintenance, and also support the migration of regular expressions between languages.\u00a0\u00a0The broader impacts come primarily from the goal of reducing bugs related to regular expressions, which creates more reliable software for all.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Kathryn",
   "pi_last_name": "Stolee",
   "pi_mid_init": "T",
   "pi_sufx_name": "",
   "pi_full_name": "Kathryn T Stolee",
   "pi_email_addr": "ktstolee@ncsu.edu",
   "nsf_id": "000654754",
   "pi_start_date": "2017-08-10",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "North Carolina State University",
  "inst_street_address": "2601 WOLF VILLAGE WAY",
  "inst_street_address_2": "",
  "inst_city_name": "RALEIGH",
  "inst_state_code": "NC",
  "inst_state_name": "North Carolina",
  "inst_phone_num": "9195152444",
  "inst_zip_code": "276950001",
  "inst_country_name": "United States",
  "cong_dist_code": "02",
  "st_cong_dist_code": "NC02",
  "org_lgl_bus_name": "NORTH CAROLINA STATE UNIVERSITY",
  "org_prnt_uei_num": "U3NVH931QJJ3",
  "org_uei_num": "U3NVH931QJJ3"
 },
 "perf_inst": {
  "perf_inst_name": "North Carolina State University",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "NC",
  "perf_st_name": "North Carolina",
  "perf_zip_code": "276958206",
  "perf_ctry_code": "US",
  "perf_cong_dist": "02",
  "perf_st_cong_dist": "NC02",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  },
  {
   "pgm_ref_code": "9102",
   "pgm_ref_txt": "WOMEN, MINORITY, DISABLED, NEC"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 499996.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-9cedcaf6-7fff-6559-a49e-df0e98089db1\"> <span id=\"docs-internal-guid-da11cc9c-7fff-8e6b-7fb0-5fbf10d3c874\"> </span></span></p>\n<p><span id=\"docs-internal-guid-88814f89-7fff-511f-a469-c77f18436622\"> <span id=\"docs-internal-guid-875a192a-7fff-250d-ace1-89833bb78da7\">\n<p dir=\"ltr\"><span>Software errors are common and can be costly to companies and society. Some of the culprits of software errors are regular expressions, which are frequently-used programming constructs for matching and querying strings or documents. Regular expressions are famously difficult to write, difficult to understand, and error-prone, thus causing problems for those who write or maintain software systems. This research led to the development of approaches to test, better understand, and classify software errors related to regular expressions.&nbsp;</span></p>\n<p dir=\"ltr\"><span>Intellectual merit: This project led to new techniques for testing and improving regular expressions. The innovations include structural code coverage metrics to ensure regular expressions are sufficiently tested and guidelines for writing regular expressions that improve their understandability.&nbsp; It also increased our understanding of regular expression errors and when they occur through the development of a classification framework. This framework was built by investigating real-world software defects caused by incorrect regular expressions.&nbsp;</span></p>\n<p dir=\"ltr\"><span>Broader impact: This project supported the training of multiple PhD students, all of whom are members of groups historically underrepresented in computer science. It also led to the creation of instructional materials related to regular expression authoring and testing, so students can apply the techniques developed and knowledge gained through this research.</span></p>\n</span></span></p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 12/09/2022<br>\n\t\t\t\t\tModified by: Kathryn&nbsp;T&nbsp;Stolee</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n  \n\n \nSoftware errors are common and can be costly to companies and society. Some of the culprits of software errors are regular expressions, which are frequently-used programming constructs for matching and querying strings or documents. Regular expressions are famously difficult to write, difficult to understand, and error-prone, thus causing problems for those who write or maintain software systems. This research led to the development of approaches to test, better understand, and classify software errors related to regular expressions. \nIntellectual merit: This project led to new techniques for testing and improving regular expressions. The innovations include structural code coverage metrics to ensure regular expressions are sufficiently tested and guidelines for writing regular expressions that improve their understandability.  It also increased our understanding of regular expression errors and when they occur through the development of a classification framework. This framework was built by investigating real-world software defects caused by incorrect regular expressions. \nBroader impact: This project supported the training of multiple PhD students, all of whom are members of groups historically underrepresented in computer science. It also led to the creation of instructional materials related to regular expression authoring and testing, so students can apply the techniques developed and knowledge gained through this research.\n\n\n \n\n\t\t\t\t\tLast Modified: 12/09/2022\n\n\t\t\t\t\tSubmitted by: Kathryn T Stolee"
 }
}