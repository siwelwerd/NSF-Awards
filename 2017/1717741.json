{
 "awd_id": "1717741",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CCF-SHF: Small: CRONUS: High-Level Reasoning of Low-Level Isolation",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032922585",
 "po_email": "pprabhak@nsf.gov",
 "po_sign_block_name": "Pavithra Prabhakar",
 "awd_eff_date": "2017-09-15",
 "awd_exp_date": "2022-07-31",
 "tot_intn_awd_amt": 450000.0,
 "awd_amount": 450000.0,
 "awd_min_amd_letter_date": "2017-08-30",
 "awd_max_amd_letter_date": "2021-09-02",
 "awd_abstract_narration": "Many real-world widely-used web services, like those built and maintained by Amazon, Facebook, and others, encapsulate complex program logic within transactions.  Although serializability is the gold standard used to reason about the behavior of concurrently executing transactions, its enforcement cost has led many commercial database systems to provide support for, and encourage the use of, weaker variants, in which a transaction may witness effects from other transactions as it executes, weakening the strong isolation guarantees provided by serializability.  Weak isolation, while improving availability complicates program reasoning, making it challenging to verify database application correctness, or implement useful program transformations, optimizations, and testing/debugging tools.  Safety and security are thus compromised.  Further complicating matters is the interplay between the database and weak consistency, a property of the underlying data store that exploits replication among geo-distributed mirrored sites to improve throughput and availability.  \r\n\r\nNot surprisingly, weak isolation and weak consistency interact in subtle and non-trivial ways.  To better understand this interaction, this project develops new foundational principles and new language abstractions and implementation techniques sensitive to the different behaviors possible when strong isolation and consistency guarantees are loosened. The project investigates new infrastructure for verifying and implementing high-level programs on modern replicated data stores that support only weak enforcement of consistency among replicas and isolation among transactions. Results from this effort will increase the robustness of many widely-used Web services and systems, and lower the effort, risk, and cost associated with developing and certifying modern distributed database applications. The investigators will involve graduate and undergraduate students in this research.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Suresh",
   "pi_last_name": "Jagannathan",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Suresh Jagannathan",
   "pi_email_addr": "suresh@cs.purdue.edu",
   "nsf_id": "000181308",
   "pi_start_date": "2017-08-30",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Purdue University",
  "inst_street_address": "2550 NORTHWESTERN AVE # 1100",
  "inst_street_address_2": "",
  "inst_city_name": "WEST LAFAYETTE",
  "inst_state_code": "IN",
  "inst_state_name": "Indiana",
  "inst_phone_num": "7654941055",
  "inst_zip_code": "479061332",
  "inst_country_name": "United States",
  "cong_dist_code": "04",
  "st_cong_dist_code": "IN04",
  "org_lgl_bus_name": "PURDUE UNIVERSITY",
  "org_prnt_uei_num": "YRXVL4JYCEF5",
  "org_uei_num": "YRXVL4JYCEF5"
 },
 "perf_inst": {
  "perf_inst_name": "Purdue University",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "IN",
  "perf_st_name": "Indiana",
  "perf_zip_code": "479072114",
  "perf_ctry_code": "US",
  "perf_cong_dist": "04",
  "perf_st_cong_dist": "IN04",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7942",
   "pgm_ref_txt": "HIGH-PERFORMANCE COMPUTING"
  },
  {
   "pgm_ref_code": "8206",
   "pgm_ref_txt": "Formal Methods and Verification"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 450000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The overarching goal of this project is the development of new foundational principles and corresponding infrastructure to enable the construction of composable and verified software components capable of providing high-assurance of applications expressed using weakly-isolated distributed transactions, executing in weakly-consistent geo-replicated environments. Results from this effort include (i) advances in specialized program logics for weak isolation; (ii) model-checking and program analysis frameworks for validating application correctness; (iii) testing tools tuned for distributed geo-replicated applications; and, (iv) transpilation methods that seamlessly enable applications written with serializability and strong consistency semantics in mind to be translated into a form that can be safely executed in weaker (more performant) environments.</p>\n<p><br />Our results build upon recent advances in program verification that have made it possible to envision trusted implementations of real-world language implementations. &nbsp;Reasoning about highly-available distributed applications and transactions raise significant technical challenges, however, that stem in large part from a lack of understanding of how best to specify and prove properties about these applications in an automated, scalable, and compositional way. &nbsp;Our results provide an important first step towards placing programs that leverage distributed transactions written with performance in mind to be on the same formal footing as their sequential and concurrent counterparts.</p>\n<p><br />Prior to the outcomes of this project, writing correct weakly-isolated applications has been traditionally viewed as a complex, error-prone endeavor because existing approaches rely on programmers to manually explore possible behaviors expressed in terms of low-level read and write operations to distributed state. &nbsp;Thus, isolation behavior has been typically described in terms of mechanisms and anomalies, and not in terms of more useful application-centric abstractions. &nbsp;An important contribution made by this project was to devise analysis tools that allow automated reasoning to guage the consequences of using weak isolation and consistency in terms of application-centric properties, rather than low-level operational events, thereby giving programmers more meaningful visibility into the impact these mechanisms have on the preservation of desired program invariants.</p>\n<p>Beyond providing isolation-aware verification and analysis tools, our investigation also developed new language abstractions and associated compilation techniques that provide a principled integration of weak isolation and consistency into a high-level programming language design setting. Notably, our devised abstractions enable the automatic and seamless derivation of correct distributed (replicated) variants of sequential data types even when executed in weakly-isolated environments.</p>\n<p><br />Collectively, these results provide a pathway to enabling the construction of (automated) provably-correct distributed applications executing on realistic replicated storage platforms that provide weak consistency and isolation guarantees. &nbsp;We anticipate these outcomes will spur renewed interest and development of principles and tools for this increasingly important application class.<br /><br /><br /><br /><br /><br /></p><br>\n<p>\n\t\t\t\t      \tLast Modified: 01/10/2023<br>\n\t\t\t\t\tModified by: Suresh&nbsp;Jagannathan</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThe overarching goal of this project is the development of new foundational principles and corresponding infrastructure to enable the construction of composable and verified software components capable of providing high-assurance of applications expressed using weakly-isolated distributed transactions, executing in weakly-consistent geo-replicated environments. Results from this effort include (i) advances in specialized program logics for weak isolation; (ii) model-checking and program analysis frameworks for validating application correctness; (iii) testing tools tuned for distributed geo-replicated applications; and, (iv) transpilation methods that seamlessly enable applications written with serializability and strong consistency semantics in mind to be translated into a form that can be safely executed in weaker (more performant) environments.\n\n\nOur results build upon recent advances in program verification that have made it possible to envision trusted implementations of real-world language implementations.  Reasoning about highly-available distributed applications and transactions raise significant technical challenges, however, that stem in large part from a lack of understanding of how best to specify and prove properties about these applications in an automated, scalable, and compositional way.  Our results provide an important first step towards placing programs that leverage distributed transactions written with performance in mind to be on the same formal footing as their sequential and concurrent counterparts.\n\n\nPrior to the outcomes of this project, writing correct weakly-isolated applications has been traditionally viewed as a complex, error-prone endeavor because existing approaches rely on programmers to manually explore possible behaviors expressed in terms of low-level read and write operations to distributed state.  Thus, isolation behavior has been typically described in terms of mechanisms and anomalies, and not in terms of more useful application-centric abstractions.  An important contribution made by this project was to devise analysis tools that allow automated reasoning to guage the consequences of using weak isolation and consistency in terms of application-centric properties, rather than low-level operational events, thereby giving programmers more meaningful visibility into the impact these mechanisms have on the preservation of desired program invariants.\n\nBeyond providing isolation-aware verification and analysis tools, our investigation also developed new language abstractions and associated compilation techniques that provide a principled integration of weak isolation and consistency into a high-level programming language design setting. Notably, our devised abstractions enable the automatic and seamless derivation of correct distributed (replicated) variants of sequential data types even when executed in weakly-isolated environments.\n\n\nCollectively, these results provide a pathway to enabling the construction of (automated) provably-correct distributed applications executing on realistic replicated storage platforms that provide weak consistency and isolation guarantees.  We anticipate these outcomes will spur renewed interest and development of principles and tools for this increasingly important application class.\n\n\n\n\n\n\n\n\t\t\t\t\tLast Modified: 01/10/2023\n\n\t\t\t\t\tSubmitted by: Suresh Jagannathan"
 }
}