{
 "awd_id": "1714431",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF:Small:The Power of ``Why?'': Using Provenance for Disciplined Exploration in Model Finding",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032922585",
 "po_email": "pprabhak@nsf.gov",
 "po_sign_block_name": "Pavithra Prabhakar",
 "awd_eff_date": "2017-07-01",
 "awd_exp_date": "2022-06-30",
 "tot_intn_awd_amt": 450000.0,
 "awd_amount": 482000.0,
 "awd_min_amd_letter_date": "2017-06-06",
 "awd_max_amd_letter_date": "2021-05-19",
 "awd_abstract_narration": "Software reliability is increasingly vital in modern life. The power grid, the cars we drive, our hospitals, and even our food production rely heavily on software to function. The risk of errors can be mitigated by tools, called model finders, that produce concrete examples to help software developers understand their system. However, most such tools suffer from the principle that you get precisely what you ask for, but sometimes not what you really want or need. This project works to improve the effectiveness of model-finding tools, both by increasing their explanatory power and improving presentation of examples. The tools developed in the project will be applicable to a wide range of users and domains, including formal-methods education.\r\n\r\nThis project explores a unique melding of model-search and proof-search that has henceforth been unexplored. The contributions of this project include: (1) well defined notions of \"Must this be here?\" and \"Why is this here?\" for model finding in first-order logic with transitive closure, along with algorithms for answering these questions; (2) novel approaches to navigating between models and selecting which models to present, based on the concept of coverage from other formal methods sub-fields; and (3) extensions to the widely-used Alloy Analyzer that realize these ideas and make them available to the community.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Shriram",
   "pi_last_name": "Krishnamurthi",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Shriram Krishnamurthi",
   "pi_email_addr": "sk+17@cs.brown.edu",
   "nsf_id": "000280993",
   "pi_start_date": "2017-06-06",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Timothy",
   "pi_last_name": "Nelson",
   "pi_mid_init": "B",
   "pi_sufx_name": "",
   "pi_full_name": "Timothy B Nelson",
   "pi_email_addr": "timothy_nelson@brown.edu",
   "nsf_id": "000738605",
   "pi_start_date": "2017-06-06",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Brown University",
  "inst_street_address": "1 PROSPECT ST",
  "inst_street_address_2": "",
  "inst_city_name": "PROVIDENCE",
  "inst_state_code": "RI",
  "inst_state_name": "Rhode Island",
  "inst_phone_num": "4018632777",
  "inst_zip_code": "029129100",
  "inst_country_name": "United States",
  "cong_dist_code": "01",
  "st_cong_dist_code": "RI01",
  "org_lgl_bus_name": "BROWN UNIVERSITY",
  "org_prnt_uei_num": "E3FDXZ6TBHW3",
  "org_uei_num": "E3FDXZ6TBHW3"
 },
 "perf_inst": {
  "perf_inst_name": "Brown University",
  "perf_str_addr": "Office of Sponsored Projects",
  "perf_city_name": "Providence",
  "perf_st_code": "RI",
  "perf_st_name": "Rhode Island",
  "perf_zip_code": "029129093",
  "perf_ctry_code": "US",
  "perf_cong_dist": "01",
  "perf_st_cong_dist": "RI01",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "8206",
   "pgm_ref_txt": "Formal Methods and Verification"
  },
  {
   "pgm_ref_code": "9178",
   "pgm_ref_txt": "UNDERGRADUATE EDUCATION"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0121",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 450000.0
  },
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 16000.0
  },
  {
   "fund_oblg_fiscal_yr": 2021,
   "fund_oblg_amt": 16000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>These are many situations in computer science where a problem can be reduced to statements in a formal mathematical logic. Given such statements, a <em>model-finding solver</em> is a tool that can automatically generate concrete examples that make the formula true. The widespread applicability of logics, combined with the automation of these solvers, makes them widely-used in numerous applications in academia and industry.</p>\n<p>However, a solver can produce <em>any</em>&nbsp;set of examples that are consistent with the logical statements; there are no further restrictions on its output. While this is mathematically sufficient, it may not produce the best outcomes for a human user, who has to reason about these outputs. For this reason, research has paid growing attention to the idea of <em>principled</em>&nbsp;model-finding, where the outputs enjoy some additional mathematical properties (such as being the smallest examples).</p>\n<p>This project builds on the idea of principled model-finding. Its results have three forms of <strong>intellectual merit</strong>:</p>\n<ol>\n<li>It identifies richer forms of principled model-finding. These ideas are inspired by concepts borrowed from databases and software testing, and result in novel algorithms and tools, as well as their evaluation.</li>\n<li>It notes that the effectiveness of principled model-finding cannot be determined simply by mathematics: instead, it must be subjected to rigorous evaluation by humans. The project conducted some of the very first studies in this regard. The results are sobering: some principled methods were successful while others demonstrated that mathematical strength does not translate into better outcomes for humans. The project has also begun the application of cognitive science principles in this space.</li>\n<li>It notes the importance of principled approaches to system configuration, which is a widespread, error-prone activity in all of computing. The project adapts, improves on, and applies algorithms from program synthesis to the field of configuration synthesis, again with human factors kept firmly in view.</li>\n</ol>\n<p>In terms of <strong>broader impact</strong>, the project contributes software tools and artifacts to the broader community. Beyond this, it makes three specific contributions:</p>\n<ol>\n<li>The project has resulted in the creation of a new model-finding tool, Forge, which is specifically designed with students in mind. Forge applies innovative ideas from computing education research to enhance formal methods education.</li>\n<li>Conversely, the project also applies ideas from formal methods to introductory programming. This has again resulted in a tool, Examplar, that makes several novel contributions to computing education.</li>\n<li>Finally, the project has made several improvements to formal methods pedagogy. In particular, it has created a gradual pathway from tests to specifications designed to appeal to students who do not already feel drawn to formal methods. This work has also been subjected to rigorous evaluation.</li>\n</ol>\n<p>Most of all, these results show that there is enormous need for applying human factors research to formal methods. The project has made early advances in this space, but also demonstrates that there is enormous scope for future work.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 07/02/2022<br>\n\t\t\t\t\tModified by: Shriram&nbsp;Krishnamurthi</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThese are many situations in computer science where a problem can be reduced to statements in a formal mathematical logic. Given such statements, a model-finding solver is a tool that can automatically generate concrete examples that make the formula true. The widespread applicability of logics, combined with the automation of these solvers, makes them widely-used in numerous applications in academia and industry.\n\nHowever, a solver can produce any set of examples that are consistent with the logical statements; there are no further restrictions on its output. While this is mathematically sufficient, it may not produce the best outcomes for a human user, who has to reason about these outputs. For this reason, research has paid growing attention to the idea of principled model-finding, where the outputs enjoy some additional mathematical properties (such as being the smallest examples).\n\nThis project builds on the idea of principled model-finding. Its results have three forms of intellectual merit:\n\nIt identifies richer forms of principled model-finding. These ideas are inspired by concepts borrowed from databases and software testing, and result in novel algorithms and tools, as well as their evaluation.\nIt notes that the effectiveness of principled model-finding cannot be determined simply by mathematics: instead, it must be subjected to rigorous evaluation by humans. The project conducted some of the very first studies in this regard. The results are sobering: some principled methods were successful while others demonstrated that mathematical strength does not translate into better outcomes for humans. The project has also begun the application of cognitive science principles in this space.\nIt notes the importance of principled approaches to system configuration, which is a widespread, error-prone activity in all of computing. The project adapts, improves on, and applies algorithms from program synthesis to the field of configuration synthesis, again with human factors kept firmly in view.\n\n\nIn terms of broader impact, the project contributes software tools and artifacts to the broader community. Beyond this, it makes three specific contributions:\n\nThe project has resulted in the creation of a new model-finding tool, Forge, which is specifically designed with students in mind. Forge applies innovative ideas from computing education research to enhance formal methods education.\nConversely, the project also applies ideas from formal methods to introductory programming. This has again resulted in a tool, Examplar, that makes several novel contributions to computing education.\nFinally, the project has made several improvements to formal methods pedagogy. In particular, it has created a gradual pathway from tests to specifications designed to appeal to students who do not already feel drawn to formal methods. This work has also been subjected to rigorous evaluation.\n\n\nMost of all, these results show that there is enormous need for applying human factors research to formal methods. The project has made early advances in this space, but also demonstrates that there is enormous scope for future work.\n\n\t\t\t\t\tLast Modified: 07/02/2022\n\n\t\t\t\t\tSubmitted by: Shriram Krishnamurthi"
 }
}