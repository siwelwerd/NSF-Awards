{
 "awd_id": "1736323",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Automating Improvement of Development Environments for Cyber-Physical Systems (AIDE-CPS)",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927991",
 "po_email": "namla@nsf.gov",
 "po_sign_block_name": "Nina Amla",
 "awd_eff_date": "2016-08-16",
 "awd_exp_date": "2019-08-31",
 "tot_intn_awd_amt": 457424.0,
 "awd_amount": 457424.0,
 "awd_min_amd_letter_date": "2017-03-29",
 "awd_max_amd_letter_date": "2017-03-29",
 "awd_abstract_narration": "People and society depend on cyber physical systems in diverse domains from transportation systems, such as automotive and aerospace, to medical devices. Due to the safety-critical nature of these cyber-physical systems, their safe and reliable operation is essential. The reliable and correct operation of development tools used to design cyber-physical systems is also vital, since defects in development tools have the capability to culminate in defects in cyber-physical systems themselves. While extensive research efforts exist to address problems such as state-space explosion for models of cyber-physical systems, less effort has been invested in developing methods to ensure correctness of development environments for cyber-physical systems. The design and engineering process for cyber-physical systems (CPS) relies on numerous artifacts, model translation layers, programming languages, and development tools, which are often assumed to be correct but are in fact not. \r\n\r\nThis project develops randomized differential testing and fuzzing methods to automatically find candidate defects in CPS development environments. The project investigates new formal methods and testing approaches to automate improvement of CPS development environments. This framework relies on three primary efforts: randomly generating CPS models, translating CPS models between different development tools, and comparing both dynamic and symbolic executions of CPS models. The framework increases confidence in the correctness of development environments which aids in realizing the societal benefits of cyber-physical systems.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Taylor",
   "pi_last_name": "Johnson",
   "pi_mid_init": "T",
   "pi_sufx_name": "",
   "pi_full_name": "Taylor T Johnson",
   "pi_email_addr": "taylor.johnson@gmail.com",
   "nsf_id": "000663375",
   "pi_start_date": "2017-03-29",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Vanderbilt University",
  "inst_street_address": "110 21ST AVE S",
  "inst_street_address_2": "",
  "inst_city_name": "NASHVILLE",
  "inst_state_code": "TN",
  "inst_state_name": "Tennessee",
  "inst_phone_num": "6153222631",
  "inst_zip_code": "372032416",
  "inst_country_name": "United States",
  "cong_dist_code": "05",
  "st_cong_dist_code": "TN05",
  "org_lgl_bus_name": "VANDERBILT UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "GTNBNWXJ12D5"
 },
 "perf_inst": {
  "perf_inst_name": "Vanderbilt University",
  "perf_str_addr": "PMB 407749 2301 Vanderbilt Place",
  "perf_city_name": "Nashville",
  "perf_st_code": "TN",
  "perf_st_name": "Tennessee",
  "perf_zip_code": "372350002",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "TN07",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "689200",
   "pgm_ele_name": "CI REUSE"
  },
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7433",
   "pgm_ref_txt": "CyberInfra Frmwrk 21st (CIF21)"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "8206",
   "pgm_ref_txt": "Formal Methods and Verification"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 457423.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>People and society depend on cyber&shy;-physical systems (CPS) in diverse domains from transportation systems, such as automotive and aerospace, to medical devices. Due to the safety&shy;-critical nature of these cyber&shy;-physical systems, their safe and reliable operation is essential. The reliable and correct operation of development tools used to design cyber&shy;-physical systems is also vital, since defects in development tools have the capability to culminate in defects in cyber&shy;-physical systems themselves.</p>\n<p>While extensive research efforts exist to address problems such as state&shy;space explosion for models of cyber-&shy;physical systems, less effort has been invested in developing methods to ensure correctness of development environments for cyber&shy;-physical systems. The design and engineering process for cyber&shy;-physical systems relies on numerous artifacts, model translation layers, programming languages, and development tools, which are often assumed to be correct, but like any software, may have defects and bugs in them.</p>\n<p>This project developed randomized differential testing and fuzzing methods to automatically find candidate defects in cyber-physical systems development environments. The project developed new formal methods and testing approaches to automate improvement of cyber-physical systems development environments. This framework relied on three primary efforts: randomly generating cyber-physical systems models, translating cyber-physical systems models between different development tools, and comparing both dynamic and symbolic executions of cyber-physical systems models. The framework increases confidence in the correctness of development environments to aid in realizing the societal benefits of cyber&shy;physical systems.</p>\n<p>For intellectual merit, the primary outcomes of the project include several publicly available software frameworks implementing the core ideas for identifying defects in cyber-physical systems development environments, specifically SLEMI, SLForge, CyFuzz, HyST, and HyRG. SLEMI, SLForge, and CyFuzz integrate with the MathWorks' Simulink cyber-physical systems development environment, and together have identified around two dozen confirmed bugs/defects in these industry-grade tools used in the cyber-physical systems development process. The HyST and HyRG tools have been used to perform model transformation between different formal representations of cyber-physical systems models, and together have identified defects/bugs in several hybrid systems model checkers. Together, these testing environments have served to improve the reliability of existing cyber-physical systems development environments, and the underlying intellectual techniques may improve the testing process for future development tools, as illustrated in part with the project participants' engagement with the MathWorks and their Simulink development environment.</p>\n<p>For broader impacts, this project also was essential in the development of the first three iterations in 2017, 2018, and 2019, of the hybrid systems verification competition (ARCH-COMP) held in conjunction with the Workshop on Applied Verification for Continuous and Hybrid Systems (ARCH), in which a broad swath of the cyber-physical systems verification community participated (increasing from around a dozen participants in 2017 to over three dozen in 2019).</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 12/03/2019<br>\n\t\t\t\t\tModified by: Taylor&nbsp;T&nbsp;Johnson</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nPeople and society depend on cyber&shy;-physical systems (CPS) in diverse domains from transportation systems, such as automotive and aerospace, to medical devices. Due to the safety&shy;-critical nature of these cyber&shy;-physical systems, their safe and reliable operation is essential. The reliable and correct operation of development tools used to design cyber&shy;-physical systems is also vital, since defects in development tools have the capability to culminate in defects in cyber&shy;-physical systems themselves.\n\nWhile extensive research efforts exist to address problems such as state&shy;space explosion for models of cyber-&shy;physical systems, less effort has been invested in developing methods to ensure correctness of development environments for cyber&shy;-physical systems. The design and engineering process for cyber&shy;-physical systems relies on numerous artifacts, model translation layers, programming languages, and development tools, which are often assumed to be correct, but like any software, may have defects and bugs in them.\n\nThis project developed randomized differential testing and fuzzing methods to automatically find candidate defects in cyber-physical systems development environments. The project developed new formal methods and testing approaches to automate improvement of cyber-physical systems development environments. This framework relied on three primary efforts: randomly generating cyber-physical systems models, translating cyber-physical systems models between different development tools, and comparing both dynamic and symbolic executions of cyber-physical systems models. The framework increases confidence in the correctness of development environments to aid in realizing the societal benefits of cyber&shy;physical systems.\n\nFor intellectual merit, the primary outcomes of the project include several publicly available software frameworks implementing the core ideas for identifying defects in cyber-physical systems development environments, specifically SLEMI, SLForge, CyFuzz, HyST, and HyRG. SLEMI, SLForge, and CyFuzz integrate with the MathWorks' Simulink cyber-physical systems development environment, and together have identified around two dozen confirmed bugs/defects in these industry-grade tools used in the cyber-physical systems development process. The HyST and HyRG tools have been used to perform model transformation between different formal representations of cyber-physical systems models, and together have identified defects/bugs in several hybrid systems model checkers. Together, these testing environments have served to improve the reliability of existing cyber-physical systems development environments, and the underlying intellectual techniques may improve the testing process for future development tools, as illustrated in part with the project participants' engagement with the MathWorks and their Simulink development environment.\n\nFor broader impacts, this project also was essential in the development of the first three iterations in 2017, 2018, and 2019, of the hybrid systems verification competition (ARCH-COMP) held in conjunction with the Workshop on Applied Verification for Continuous and Hybrid Systems (ARCH), in which a broad swath of the cyber-physical systems verification community participated (increasing from around a dozen participants in 2017 to over three dozen in 2019).\n\n\t\t\t\t\tLast Modified: 12/03/2019\n\n\t\t\t\t\tSubmitted by: Taylor T Johnson"
 }
}