{
 "awd_id": "1718235",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Stabilizing Numeric Programs Against Platform Uncertainties",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927991",
 "po_email": "namla@nsf.gov",
 "po_sign_block_name": "Nina Amla",
 "awd_eff_date": "2017-07-15",
 "awd_exp_date": "2021-06-30",
 "tot_intn_awd_amt": 498021.0,
 "awd_amount": 498021.0,
 "awd_min_amd_letter_date": "2017-07-14",
 "awd_max_amd_letter_date": "2017-07-14",
 "awd_abstract_narration": "Most computer programs process vast amounts of numerical data. Unfortunately, due to space and performance demands, computer arithmetic comes with its own rules. Making matters worse, different computers have different rules: while there are standardization efforts, efficiency considerations give hardware and compiler designers much freedom to bend the rules to their taste. As a result, the outcome of a computer calculation depends not only on the input, but also on the particular machine and environment in which the calculation takes place. This makes programs brittle and un-portable, and causes them to produce untrusted results. This project addresses these problems, by designing methods to detect inputs to computer programs that exhibit too much platform dependence, and to repair such programs, by making their behavior more robust.\r\n\r\nTechnical goals of this project include: (i) automatically warning users of disproportionately platform-dependent results of their numeric algorithms; (ii) repairing programs with platform instabilities; and (iii) proving programs stable against platform variations. Platform-independence of numeric computations is a form of robustness whose lack undermines the portability of program semantics. This project is one of the few to tackle the question of non-determinism in the specification (IEEE 754) of the theory (floating-point arithmetic) that machines are using today. This work requires new abstractions that soundly approximate the set of values of a program variable against a variety of compiler and hardware behaviors and features that may not even be known at analysis time. The project involves graduate and undergraduate students.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Thomas",
   "pi_last_name": "Wahl",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Thomas Wahl",
   "pi_email_addr": "wahl@ccs.neu.edu",
   "nsf_id": "000608439",
   "pi_start_date": "2017-07-14",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Northeastern University",
  "inst_street_address": "360 HUNTINGTON AVE",
  "inst_street_address_2": "",
  "inst_city_name": "BOSTON",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "6173735600",
  "inst_zip_code": "021155005",
  "inst_country_name": "United States",
  "cong_dist_code": "07",
  "st_cong_dist_code": "MA07",
  "org_lgl_bus_name": "NORTHEASTERN UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "HLTMVS2JZBS6"
 },
 "perf_inst": {
  "perf_inst_name": "Northeastern University",
  "perf_str_addr": "360 Huntington, Ave",
  "perf_city_name": "Boston",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "021155005",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "MA07",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "8206",
   "pgm_ref_txt": "Formal Methods and Verification"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 498021.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Although by no means the only task of computers today, the manipulation of numeric data remains one of their primary uses and is in fact seeing renewed significance in our times of Big Data. Since computers do not have the granularity or the memory to be able to represent <em>all</em> real numbers <em>exactly</em>, they work with approximations, such as floating-point numbers, that try to capture a reasonable compromise regarding range and precision of number approximations.</p>\n<p>Floating-point arithmetic invariably introduces uncertainty into numeric software, due among others to variations in the hardware on which it is implemented, and to the freedom given to implementers (despite far-reaching and very successful standardization efforts). These uncertainties lead to hard-to-reproduce numeric results when migrating programs from one platform to another, or even just when translating code into executables using different compilers. Irreproducible computational outcomes result in a loss of trust in those computations by the user community, i.e., by all of us.</p>\n<p>This project undertook the task of assessing the susceptibility of the results computed by a program to platform dependencies, and the task of stabilizing programs with significant such susceptibilities, without unreasonably jeopardizing other program features, such as its numeric accuracy and its efficiency.</p>\n<p>A major general outcome of this project is that, while analyzing platform dependence with 100% accuracy is computationally extremely expensive, it is very well possible to obtain good estimates of a program's platform dependence, and to stabilize it against platform variations. More precisely, the following (reasonable) task specification formalizes one of the goals of this project:</p>\n<ul>\n<li>Given: a program <em>P</em>, an input interval <em>I</em> and a threshold <em>eps</em>.</li>\n<li>Question: does there exist an input <em>i</em> in <em>I</em> such that executing <em>P</em> on a variety of platforms that implement (semi-standardized) floating-point arithmetic leads to numeric results that differ by more than <em>eps</em>?</li>\n</ul>\n<p>In an ideal world, we want&nbsp;<em>compilers</em> to be able to answer questions of this nature in a matter of seconds, or minutes at most. This project has designed techniques to do so, and implemented these techniques, but not without compromises. Most notably, such techniques typically answer the above question in a <em>sound</em> way, guaranteeing that an answer \"No such (unstable) input exists\" guarantees that this is the case. But there will be programs where the technique cannot reliably confirm this fact even if it is true: the technique comes with <em>false positives</em>.</p>\n<p>The second compromise we had to make is the efficiency of the technique. There is a trade-off here: highly accurate answers can be given efficiently only for moderate input intervals <em>I</em>. For large intervals, we have to content with many false positives, or with computationally very expensive analyses that programmers are generally not willing to accommodate, especially in a compiler context.</p>\n<p>We summarize that this project successfully demonstrated the principal feasibility of building analyses answering questions like the one above. Such analyses increase both the usability of, and the trust in, numeric algorithms. Work remains to be done to efficiently scale the techniques up to larger and more realistic programs, while maintaining the techniques' predictive value.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 08/29/2021<br>\n\t\t\t\t\tModified by: Thomas&nbsp;Wahl</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nAlthough by no means the only task of computers today, the manipulation of numeric data remains one of their primary uses and is in fact seeing renewed significance in our times of Big Data. Since computers do not have the granularity or the memory to be able to represent all real numbers exactly, they work with approximations, such as floating-point numbers, that try to capture a reasonable compromise regarding range and precision of number approximations.\n\nFloating-point arithmetic invariably introduces uncertainty into numeric software, due among others to variations in the hardware on which it is implemented, and to the freedom given to implementers (despite far-reaching and very successful standardization efforts). These uncertainties lead to hard-to-reproduce numeric results when migrating programs from one platform to another, or even just when translating code into executables using different compilers. Irreproducible computational outcomes result in a loss of trust in those computations by the user community, i.e., by all of us.\n\nThis project undertook the task of assessing the susceptibility of the results computed by a program to platform dependencies, and the task of stabilizing programs with significant such susceptibilities, without unreasonably jeopardizing other program features, such as its numeric accuracy and its efficiency.\n\nA major general outcome of this project is that, while analyzing platform dependence with 100% accuracy is computationally extremely expensive, it is very well possible to obtain good estimates of a program's platform dependence, and to stabilize it against platform variations. More precisely, the following (reasonable) task specification formalizes one of the goals of this project:\n\nGiven: a program P, an input interval I and a threshold eps.\nQuestion: does there exist an input i in I such that executing P on a variety of platforms that implement (semi-standardized) floating-point arithmetic leads to numeric results that differ by more than eps?\n\n\nIn an ideal world, we want compilers to be able to answer questions of this nature in a matter of seconds, or minutes at most. This project has designed techniques to do so, and implemented these techniques, but not without compromises. Most notably, such techniques typically answer the above question in a sound way, guaranteeing that an answer \"No such (unstable) input exists\" guarantees that this is the case. But there will be programs where the technique cannot reliably confirm this fact even if it is true: the technique comes with false positives.\n\nThe second compromise we had to make is the efficiency of the technique. There is a trade-off here: highly accurate answers can be given efficiently only for moderate input intervals I. For large intervals, we have to content with many false positives, or with computationally very expensive analyses that programmers are generally not willing to accommodate, especially in a compiler context.\n\nWe summarize that this project successfully demonstrated the principal feasibility of building analyses answering questions like the one above. Such analyses increase both the usability of, and the trust in, numeric algorithms. Work remains to be done to efficiently scale the techniques up to larger and more realistic programs, while maintaining the techniques' predictive value.\n\n\t\t\t\t\tLast Modified: 08/29/2021\n\n\t\t\t\t\tSubmitted by: Thomas Wahl"
 }
}