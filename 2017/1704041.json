{
 "awd_id": "1704041",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "SHF: MEDIUM: Collaborative Research: The Theory and Practice of Dependent Types in Haskell",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2017-07-01",
 "awd_exp_date": "2021-06-30",
 "tot_intn_awd_amt": 311303.0,
 "awd_amount": 311303.0,
 "awd_min_amd_letter_date": "2017-05-15",
 "awd_max_amd_letter_date": "2020-10-16",
 "awd_abstract_narration": "This project's overarching goal is to prevent bugs in software by extending the Haskell programming language to support dependent types. Haskell is used by researchers and programmers in industry to build a variety of software  systems, such as financial analysis tools, interactive websites, data visualizations, and automated vehicle software. Dependent types are an up-and-coming technology that allows programmers to avoid bugs in their software, allowing them to include mathematical proofs of correctness in their code. These proofs are checked before the software ever runs, ruling out the possibility of failures, such as a crashed website. The intellectual merits are insights into the integration of advanced mathematical theories with an industrial-strength development tool (Haskell) and a deeper understanding of the mathematical principles that underlie the creation of correct software. The project's broader significance and importance are to give the technology industry access to dependent types for the first time, while creating opportunities for students (including those at one principal investigator's undergraduate women's college) to engage with this technology.\r\n\r\nThe project includes both practical and foundational components. The  Haskell type system, as implemented in the Glasgow Haskell Compiler (GHC) version 8.0, is able to simulate dependent types through the use of many language extensions. However, this use requires awkward encodings, and the extensions that support them complicate the language. In contrast, the Haskell type system envisioned by this project is based on a uniform approach to dependently typed programming that subsumes prior extensions. Part of this project involves replacing the core language of GHC with one based on dependent type theory, using relevance annotations to ensure that these extensions are backwards compatible. Furthermore, the project also introduces matchable functions, a qualifier that determines whether function applications can be analyzed via pattern matching, enabling the integration of dependent types with GHC's current type inference algorithm.  Finally, this project includes an examination of the semantics of dependently typed programming languages with partiality.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Former Principal Investigator",
   "pi_first_name": "Richard",
   "pi_last_name": "Eisenberg",
   "pi_mid_init": "A",
   "pi_sufx_name": "",
   "pi_full_name": "Richard A Eisenberg",
   "pi_email_addr": "rae@cs.brynmawr.edu",
   "nsf_id": "000732971",
   "pi_start_date": "2017-05-15",
   "pi_end_date": "2020-10-16"
  },
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Christian",
   "pi_last_name": "Murphy",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Christian Murphy",
   "pi_email_addr": "cmurphy1@brynmawr.edu",
   "nsf_id": "000839996",
   "pi_start_date": "2020-10-16",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Bryn Mawr College",
  "inst_street_address": "101 N MERION AVE",
  "inst_street_address_2": "",
  "inst_city_name": "BRYN MAWR",
  "inst_state_code": "PA",
  "inst_state_name": "Pennsylvania",
  "inst_phone_num": "6105265496",
  "inst_zip_code": "190102899",
  "inst_country_name": "United States",
  "cong_dist_code": "05",
  "st_cong_dist_code": "PA05",
  "org_lgl_bus_name": "BRYN MAWR COLLEGE",
  "org_prnt_uei_num": "",
  "org_uei_num": "K6QTMYRRT6S5"
 },
 "perf_inst": {
  "perf_inst_name": "Bryn Mawr College",
  "perf_str_addr": "101 N. Merion Avenue",
  "perf_city_name": "Bryn Mawr",
  "perf_st_code": "PA",
  "perf_st_name": "Pennsylvania",
  "perf_zip_code": "190102899",
  "perf_ctry_code": "US",
  "perf_cong_dist": "05",
  "perf_st_cong_dist": "PA05",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 311303.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The goal of this project was to support the further design and implementation of dependent types in the general-purpose programming language called Haskell. Haskell is an innovative language, used modestly throughout several industries, that has been at the forefront of programming language design since its creation thirty years ago. Dependent types allow Haskell programmers to describe the intent of their programs separately from the programs themselves: software can then check whether the programs actually do what the programmer intended. This is a powerful technique that should reduce the number of bugs in programs and can be used to increase the speed of running programs. No programming language with an uptake in industry supports full dependent types; a goal of this project is to get this powerful technique in the hands of professional programmers.</p>\n<p>Though this project ends without dependent types fully implemented, we are well on our way, and the future is bright. The research supported by the National Science Foundation produced 10 peer-reviewed, published papers focusing on the design and implementation of dependent types in Haskell, including the challenge of integrating this new feature with many existing ones. Many of these papers contain thorny proofs of correctness: not only must we figure out how features should work together, but we must also mathematically prove that the combination works as desired.</p>\n<p>The project also supported our work in producing many <a href=\"https://github.com/ghc-proposals/ghc-proposals/\">formal, public proposals</a> for new features in Haskell. Haskell is embodied in its compiler, the Glasgow Haskell Compiler, or GHC. This project is an open-source collaborative project, with contributors worldwide. In order to add a new feature, we must propose the new feature, and it must be accepted by the community. The <a href=\"https://github.com/ghc-proposals/ghc-proposals/pull/378\">capstone proposal</a> for this project is one to actually add dependent types; it was accepted on May 26, 2021.</p>\n<p>Implementation work continues, both by people supported by this NSF grant and a growing number of collaborators, eager to use the outcome of this research.</p>\n<p>During the lifetime of this grant, a number of students ? both undergraduate and graduate ? were given critical support for their work.</p>\n<!-- P { margin-bottom: 0.08in }A:link { so-language: zxx } --><br>\n<p>\n\t\t\t\t      \tLast Modified: 10/14/2021<br>\n\t\t\t\t\tModified by: Christian&nbsp;Murphy</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThe goal of this project was to support the further design and implementation of dependent types in the general-purpose programming language called Haskell. Haskell is an innovative language, used modestly throughout several industries, that has been at the forefront of programming language design since its creation thirty years ago. Dependent types allow Haskell programmers to describe the intent of their programs separately from the programs themselves: software can then check whether the programs actually do what the programmer intended. This is a powerful technique that should reduce the number of bugs in programs and can be used to increase the speed of running programs. No programming language with an uptake in industry supports full dependent types; a goal of this project is to get this powerful technique in the hands of professional programmers.\n\nThough this project ends without dependent types fully implemented, we are well on our way, and the future is bright. The research supported by the National Science Foundation produced 10 peer-reviewed, published papers focusing on the design and implementation of dependent types in Haskell, including the challenge of integrating this new feature with many existing ones. Many of these papers contain thorny proofs of correctness: not only must we figure out how features should work together, but we must also mathematically prove that the combination works as desired.\n\nThe project also supported our work in producing many formal, public proposals for new features in Haskell. Haskell is embodied in its compiler, the Glasgow Haskell Compiler, or GHC. This project is an open-source collaborative project, with contributors worldwide. In order to add a new feature, we must propose the new feature, and it must be accepted by the community. The capstone proposal for this project is one to actually add dependent types; it was accepted on May 26, 2021.\n\nImplementation work continues, both by people supported by this NSF grant and a growing number of collaborators, eager to use the outcome of this research.\n\nDuring the lifetime of this grant, a number of students ? both undergraduate and graduate ? were given critical support for their work.\n\n\n\t\t\t\t\tLast Modified: 10/14/2021\n\n\t\t\t\t\tSubmitted by: Christian Murphy"
 }
}