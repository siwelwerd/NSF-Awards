{
 "awd_id": "1704253",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "SaTC: CORE: Medium: Augmenting Automated Vulnerability Analysis with Human Activity",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2017-08-01",
 "awd_exp_date": "2023-07-31",
 "tot_intn_awd_amt": 1101634.0,
 "awd_amount": 1101634.0,
 "awd_min_amd_letter_date": "2017-08-01",
 "awd_max_amd_letter_date": "2020-05-25",
 "awd_abstract_narration": "Traditionally, human analysts have carried out the core analysis tasks when checking software programs for vulnerabilities, while using automated techniques as an aid. In this case, the humans are the orchestrators of the analysis process, and they delegate specific tasks to specific tools (such as a disassembler or a symbolic execution system), taking care of combining and composing the results of multiple tools.  Because the automated analysis of binary programs has advanced to sophisticated techniques that scale to large sets of real-world binary programs, it is now proposed that we move to a new paradigm in which automated tools orchestrate the process, with tasks being delegated to humans when appropriate. The research investigates this new approach, in which human actions are leveraged when automated techniques are unable to deal with the semantically rich, application-specific aspects of applications, which are tasks that humans can carry out with little effort. The overall goal is to improve the capabilities of automated vulnerability analysis and patching.  The research will develop a well-defined framework in which subtasks are modeled and assigned to actors in a principled way. \r\n\r\nFor example, fuzzing is a technique commonly used in automated vulnerability analysis. This approach requires, as input, a set of test cases, or seeds, that exercise the functionality of the target binary. These seeds are then mutated to explore more and more of the code base and increase the chance of triggering bugs.  The seed quality, in terms of how well they exercise the target program, has a scaling effect on the effectiveness of a fuzzer: the more coverage these test cases provide, the more code will be explored by mutating them. Unfortunately, the creation of high-quality test case seeds is a complicated problem, and this is generally seen as a human-provided input into a system.\r\nBecause humans have an excellent understanding of the semantics of software, they are very effective at creating high-quality test cases.  The proposed framework starts the analysis and then generates well-defined \"seeding tasklet\" to integrate human efforts in a systematic way that does not require expert-level human analysts.\r\nThese simple tasks represent staged interactions with an application that an unskilled human can carry out (e.g., by executing a transaction or filling a form).\r\nTherefore, these tasks can be crowdsourced through various channels (such as Amazon's Mechanical Turk), and their results automatically merged into the overall vulnerability analysis process.\r\nThe reliance on a formal, well-defined framework supports the discovery of unanticipated combinations of automation and actions performed by humans with different skill levels.\r\nBy improving the state-of-the-art in binary analysis it is possible to analyze a larger number of binaries in a more complete way.\r\nAs a result, more vulnerabilities are identified before deployment, contributing to the overall security of software applications, including those that are part of the critical infrastructure.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Giovanni",
   "pi_last_name": "Vigna",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Giovanni Vigna",
   "pi_email_addr": "vigna@cs.ucsb.edu",
   "nsf_id": "000486635",
   "pi_start_date": "2017-08-01",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Christopher",
   "pi_last_name": "Kruegel",
   "pi_mid_init": "I",
   "pi_sufx_name": "",
   "pi_full_name": "Christopher I Kruegel",
   "pi_email_addr": "chris@cs.ucsb.edu",
   "nsf_id": "000502531",
   "pi_start_date": "2017-08-01",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of California-Santa Barbara",
  "inst_street_address": "3227 CHEADLE HALL",
  "inst_street_address_2": "",
  "inst_city_name": "SANTA BARBARA",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "8058934188",
  "inst_zip_code": "931060001",
  "inst_country_name": "United States",
  "cong_dist_code": "24",
  "st_cong_dist_code": "CA24",
  "org_lgl_bus_name": "UNIVERSITY OF CALIFORNIA, SANTA BARBARA",
  "org_prnt_uei_num": "",
  "org_uei_num": "G9QBQDH39DF4"
 },
 "perf_inst": {
  "perf_inst_name": "University of California - Santa Barbara",
  "perf_str_addr": "",
  "perf_city_name": "Santa Barbara",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "931065110",
  "perf_ctry_code": "US",
  "perf_cong_dist": "24",
  "perf_st_cong_dist": "CA24",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "171400",
   "pgm_ele_name": "Special Projects - CNS"
  },
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  },
  {
   "pgm_ref_code": "9178",
   "pgm_ref_txt": "UNDERGRADUATE EDUCATION"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 237966.0
  },
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 266632.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 298017.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 299019.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Software permeates every aspect of our world, from our homes to critical infrastructure.</p>\n<p>As the size and complexity of software systems increase, the number and sophistication of software security flaws increase as well. Because of the potentially catastrophic effect of the exploitation of these vulnerabilities, a substantial amount of resources is devoted to finding these flaws before they are discovered by attackers and exploited in the wild.</p>\n<p>A particularly challenging task is the identification of vulnerabilities in binary programs. The current state-of-the-art in vulnerability analysis and patching of binaries provides support to a human analyst through a number of tools. However, this approach requires highly skilled humans to orchestrate the application of tools and compose their results. Therefore, recently there has been a shift towards the complete automation of the program analysis process, to improve the scale of the analysis. However, current approaches are limited, as it is difficult to model the overall logic of an application.</p>\n<p><strong>This research brings forward a paradigm shift, from human-centric/tool-assisted analysis to tool-centric/human-assisted analysis.</strong>&nbsp;In this framework, human actions are leveraged in order to improve the capabilities of automated vulnerability analysis systems. By harvesting, in a principled, well-defined way the ability of humans with different skill sets to carry out specific tasks, it is possible to dramatically improve the effectiveness of the program analysis process.</p>\n<p>One of the main outcomes of this research was the development of novel techniques for human-assisted reverse engineering and decompilation. As part of the research efforts on this front, two large-scale competitions were organized, which allow for the collection of the largest datasets on human reverse engineering ever collected. These datasets were made available to the public (https://github.com/decompetition/data), together with the software for running the competitions (https://github.com/decompetition/server).</p>\n<p>A second main result was the use of humans to analyze the kernel crashes created by automated vulnerability analysis tools, with the goal of determining which data structures were involved (e.g., were corrupted) as part of the crash. This type of root-cause analysis is particularly hard to do automatically, as it often requires evaluating the side effects of operations in parts of the kernel that are logically disconnected (or \"far away\" semantically). This research effort produced a novel approach to kernel-focused vulnerability analysis that discovered dozens of previously unknown vulnerabilities in current Linux kernel versions.</p>\n<p>In summary, the approaches developed as part of this research effort innovate the field of vulnerability analysis by introducing a novel paradigm in which humans assist autonomous analysis systems in their tasks.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 09/01/2023<br>\n\t\t\t\t\tModified by: Giovanni&nbsp;Vigna</p>\n</div>\n<div class=\"porSideCol\">\n<div class=\"each-gallery\">\n<div class=\"galContent\" id=\"gallery0\">\n<div class=\"photoCount\" id=\"photoCount0\">\n\t\t\t\t\t\t\t\t\tImage\n\t\t\t\t\t\t\t\t</div>\n<div class=\"galControls onePhoto\" id=\"controls0\"></div>\n<div class=\"galSlideshow\" id=\"slideshow0\"></div>\n<div class=\"galEmbox\" id=\"embox\">\n<div class=\"image-title\"></div>\n</div>\n</div>\n<div class=\"galNavigation onePhoto\" id=\"navigation0\">\n<ul class=\"thumbs\" id=\"thumbs0\">\n<li>\n<a href=\"/por/images/Reports/POR/2023/1704253/1704253_10509641_1693600669665_mechaman--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2023/1704253/1704253_10509641_1693600669665_mechaman--rgov-800width.jpg\" title=\"The Mechaman Approach\"><img src=\"/por/images/Reports/POR/2023/1704253/1704253_10509641_1693600669665_mechaman--rgov-66x44.jpg\" alt=\"The Mechaman Approach\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Tool-assisted Human-centric Analysis vs. Human-assisted Automated Analysis</div>\n<div class=\"imageCredit\">Giovanni Vigna</div>\n<div class=\"imagePermisssions\">Royalty-free (unrestricted use)</div>\n<div class=\"imageSubmitted\">Giovanni&nbsp;Vigna</div>\n<div class=\"imageTitle\">The Mechaman Approach</div>\n</div>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>",
  "por_txt_cntn": "\nSoftware permeates every aspect of our world, from our homes to critical infrastructure.\n\nAs the size and complexity of software systems increase, the number and sophistication of software security flaws increase as well. Because of the potentially catastrophic effect of the exploitation of these vulnerabilities, a substantial amount of resources is devoted to finding these flaws before they are discovered by attackers and exploited in the wild.\n\nA particularly challenging task is the identification of vulnerabilities in binary programs. The current state-of-the-art in vulnerability analysis and patching of binaries provides support to a human analyst through a number of tools. However, this approach requires highly skilled humans to orchestrate the application of tools and compose their results. Therefore, recently there has been a shift towards the complete automation of the program analysis process, to improve the scale of the analysis. However, current approaches are limited, as it is difficult to model the overall logic of an application.\n\nThis research brings forward a paradigm shift, from human-centric/tool-assisted analysis to tool-centric/human-assisted analysis. In this framework, human actions are leveraged in order to improve the capabilities of automated vulnerability analysis systems. By harvesting, in a principled, well-defined way the ability of humans with different skill sets to carry out specific tasks, it is possible to dramatically improve the effectiveness of the program analysis process.\n\nOne of the main outcomes of this research was the development of novel techniques for human-assisted reverse engineering and decompilation. As part of the research efforts on this front, two large-scale competitions were organized, which allow for the collection of the largest datasets on human reverse engineering ever collected. These datasets were made available to the public (https://github.com/decompetition/data), together with the software for running the competitions (https://github.com/decompetition/server).\n\nA second main result was the use of humans to analyze the kernel crashes created by automated vulnerability analysis tools, with the goal of determining which data structures were involved (e.g., were corrupted) as part of the crash. This type of root-cause analysis is particularly hard to do automatically, as it often requires evaluating the side effects of operations in parts of the kernel that are logically disconnected (or \"far away\" semantically). This research effort produced a novel approach to kernel-focused vulnerability analysis that discovered dozens of previously unknown vulnerabilities in current Linux kernel versions.\n\nIn summary, the approaches developed as part of this research effort innovate the field of vulnerability analysis by introducing a novel paradigm in which humans assist autonomous analysis systems in their tasks.\n\n\t\t\t\t\tLast Modified: 09/01/2023\n\n\t\t\t\t\tSubmitted by: Giovanni Vigna"
 }
}