{
 "awd_id": "1657204",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CRII: SHF: Certified Byzantine Fault-tolerant Systems",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2017-02-15",
 "awd_exp_date": "2023-01-31",
 "tot_intn_awd_amt": 174999.0,
 "awd_amount": 190999.0,
 "awd_min_amd_letter_date": "2017-02-09",
 "awd_max_amd_letter_date": "2021-12-07",
 "awd_abstract_narration": "This project investigates a new approach to verification of reliability and security of distributed systems where faulty or malicious nodes exhibit arbitrary or misleading behavior. Distributed systems are widely used in increasingly important applications ranging from finance to aircraft control to gain fault-tolerance, throughput and responsiveness. Unfortunately, they are notoriously complicated and prone to bugs. Nodes may not only crash but also be hacked and controlled by malicious agents. The so-called Byzantine nodes can impersonate other nodes or send confusing messages. Formal security guarantees of Byzantine fault-tolerant systems have not been specified and verified yet. This project undertakes research leading to such guarantees through a novel programming, verification and runtime framework. The intellectual merits of the project are fundamental advances in the semantics of networks and representation, composition, and proof methodologies for distributed systems. The project's broader significance is a publicly available open-source library of certified distributed systems that can lead to faster evolution of secure and trustworthy distributed systems.\r\n\r\nThis project includes the following key components: (1) Precise representation and composition of layers of distributed implementations. An event-based model represents and composes layers of distributed implementations. An implementation is programmed and verified modularly against the specification of the lower-level implementation. (2) The semantics of the Byzantine synchronous network and the specifications of implementations. This project presents a novel operational semantics for Byzantine synchronous networks that is parametric in terms of the implementation. Hence, the safety and liveness specification of an implementation can be stated as conditions on the external traces of the semantics when instantiated with the implementation. (3) Proof principles for the Byzantine semantics and proof automation. This research develops proof principles for the semantics that abstract the common parts of the proofs and facilitate proof automation. To automate the proofs, this project searches for decision and semi-decision procedures for the proof obligations of the principles. (4) Building of accessible Byzantine fault-tolerant replicated objects. This project builds a certified library of executable Byzantine fault-tolerant replicated objects and makes it available to a wide range of researchers and practitioners through an accessible interface.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Mohsen",
   "pi_last_name": "Lesani",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Mohsen Lesani",
   "pi_email_addr": "lesani@cs.ucr.edu",
   "nsf_id": "000728236",
   "pi_start_date": "2017-02-09",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of California-Riverside",
  "inst_street_address": "200 UNIVERSTY OFC BUILDING",
  "inst_street_address_2": "",
  "inst_city_name": "RIVERSIDE",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "9518275535",
  "inst_zip_code": "925210001",
  "inst_country_name": "United States",
  "cong_dist_code": "39",
  "st_cong_dist_code": "CA39",
  "org_lgl_bus_name": "REGENTS OF THE UNIVERSITY OF CALIFORNIA AT RIVERSIDE",
  "org_prnt_uei_num": "",
  "org_uei_num": "MR5QC5FCAVH5"
 },
 "perf_inst": {
  "perf_inst_name": "University of California-Riverside",
  "perf_str_addr": "200 University Office Building",
  "perf_city_name": "Riverside",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "925210001",
  "perf_ctry_code": "US",
  "perf_cong_dist": "39",
  "perf_st_cong_dist": "CA39",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "026Y00",
   "pgm_ele_name": "CRII CISE Research Initiation"
  },
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7798",
   "pgm_ref_txt": "SOFTWARE & HARDWARE FOUNDATION"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  },
  {
   "pgm_ref_code": "8228",
   "pgm_ref_txt": "CISE Resrch Initiatn Initiatve"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 174999.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 16000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>This project investigates a new approach to synthesis and verification of reliability and security of distributed systems. Distributed systems are widely used in increasingly important applications ranging from finance to aircraft control to gain fault-tolerance, throughput and responsiveness. Unfortunately, they are notoriously complicated and prone to bugs. Nodes may not only crash but also be hacked and controlled by malicious agents. This project undertakes research leading to formal guarantees of correctness through automatic synthesis and verification. The intellectual merits of the project are fundamental advances in the semantics of distributed systems, and representation, composition, synthesis, and proof methodologies for distributed systems. The project's broader significance is a publicly available open-source synthesis frameworks, and library of certified distributed systems that can lead to faster evolution of secure and trustworthy distributed systems.<br /><br />Given a sequential class with the declaration of its integrity and recency requirements, this project automatically synthesizes a correct-by-construction replicated class that simultaneously guarantees integrity, convergence and recency, and avoids coordination as much as possible. Traditional strong consistency maintains the same total order of operations across replicas, that is the immediate source of the above desirable properties. However, maintaining the total order has proven to inhibit availability, responsiveness and scalability. Weaker notions exhibit these properties; however, they forfeit the total order and hence its favorable properties. Thus, application programmers face non-trivial choices between a spectrum of consistency notions. This project automatically decides the required coordination, and synthesizes replicated objects. The approach is based on novel sufficient conditions for integrity, convergence and recency, which require certain orders between conflicting and dependent operations, and restrict the set of pending operations. To decide the validity of these conditions, the Hamsaz and Hampa tools apply automatic solvers to analyze both the given class statically and its method calls dynamically. They then reduce the coordination avoidance problem to classical graph minimization problems, and use the results to instantiate parametric coordination protocols, and synthesize replicated systems.<br /><br />In order to build certified distributed middleware, we present a compositional approach to verification of distributed system stacks. Network middleware has been traditionally composed as a layered stack of components. This project modularly verifies each component based on only the implementation of the component itself and the specification of lower components. It presents TLC (Temporal Logic of Components), a novel temporal program logic that offers intuitive inference rules for verification of both safety and liveness properties of functional implementations of distributed components. Layers can be verified separately and composed to build verified stacks of distributed systems. TLC is proven sound with respect to a novel operational semantics for stacks of composed components in partially synchronous networks. TLC is mechanized in a Coq framework.<br /><br />The project from this project lead to training of not only PhD students but also exposed undergraduate students to research. In particular, the first author of our TLC paper was an undergraduate student.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 05/25/2023<br>\n\t\t\t\t\tModified by: Mohsen&nbsp;Lesani</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThis project investigates a new approach to synthesis and verification of reliability and security of distributed systems. Distributed systems are widely used in increasingly important applications ranging from finance to aircraft control to gain fault-tolerance, throughput and responsiveness. Unfortunately, they are notoriously complicated and prone to bugs. Nodes may not only crash but also be hacked and controlled by malicious agents. This project undertakes research leading to formal guarantees of correctness through automatic synthesis and verification. The intellectual merits of the project are fundamental advances in the semantics of distributed systems, and representation, composition, synthesis, and proof methodologies for distributed systems. The project's broader significance is a publicly available open-source synthesis frameworks, and library of certified distributed systems that can lead to faster evolution of secure and trustworthy distributed systems.\n\nGiven a sequential class with the declaration of its integrity and recency requirements, this project automatically synthesizes a correct-by-construction replicated class that simultaneously guarantees integrity, convergence and recency, and avoids coordination as much as possible. Traditional strong consistency maintains the same total order of operations across replicas, that is the immediate source of the above desirable properties. However, maintaining the total order has proven to inhibit availability, responsiveness and scalability. Weaker notions exhibit these properties; however, they forfeit the total order and hence its favorable properties. Thus, application programmers face non-trivial choices between a spectrum of consistency notions. This project automatically decides the required coordination, and synthesizes replicated objects. The approach is based on novel sufficient conditions for integrity, convergence and recency, which require certain orders between conflicting and dependent operations, and restrict the set of pending operations. To decide the validity of these conditions, the Hamsaz and Hampa tools apply automatic solvers to analyze both the given class statically and its method calls dynamically. They then reduce the coordination avoidance problem to classical graph minimization problems, and use the results to instantiate parametric coordination protocols, and synthesize replicated systems.\n\nIn order to build certified distributed middleware, we present a compositional approach to verification of distributed system stacks. Network middleware has been traditionally composed as a layered stack of components. This project modularly verifies each component based on only the implementation of the component itself and the specification of lower components. It presents TLC (Temporal Logic of Components), a novel temporal program logic that offers intuitive inference rules for verification of both safety and liveness properties of functional implementations of distributed components. Layers can be verified separately and composed to build verified stacks of distributed systems. TLC is proven sound with respect to a novel operational semantics for stacks of composed components in partially synchronous networks. TLC is mechanized in a Coq framework.\n\nThe project from this project lead to training of not only PhD students but also exposed undergraduate students to research. In particular, the first author of our TLC paper was an undergraduate student.\n\n\t\t\t\t\tLast Modified: 05/25/2023\n\n\t\t\t\t\tSubmitted by: Mohsen Lesani"
 }
}