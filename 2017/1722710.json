{
 "awd_id": "1722710",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Program Analysis-based Makeover for HPC Application Resilience",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927498",
 "po_email": "achtchel@nsf.gov",
 "po_sign_block_name": "Almadena Chtchelkanova",
 "awd_eff_date": "2016-01-15",
 "awd_exp_date": "2021-08-31",
 "tot_intn_awd_amt": 420000.0,
 "awd_amount": 420000.0,
 "awd_min_amd_letter_date": "2016-12-20",
 "awd_max_amd_letter_date": "2016-12-20",
 "awd_abstract_narration": "HPC resilience in the presence of increased system failures is a major technical hurdle for realizing the vision of the US National Research Council for conducting exascale science. Existing techniques, based primarily on checkpoint and replay, are no longer effective for emerging systems with orders-of-magnitude more hardware and software components. This project aims to overcome the main limitation of existing techniques: the detection and mitigation of silent errors by developing and leveraging automated software analysis and synthesis techniques.\r\nThe new methods under development can compile a tunable degree of resilience into the application software code, and have potential to transform the development of future generations of HPC applications. By treating the software code as white-boxes, as opposed to black-boxes, these new methods can provide significantly more economical solutions to the HPC resilience problem compared to existing techniques. The project will help realize the US NRC's vision of conducting exascale science, which is crucial for addressing the nation?s urgent needs in frontiers such as new energy, health care, and national security.\r\nThis project develops automated program analysis techniques for identifying invariants from software code, and leveraging these invariants to detect and mitigate silent errors at run time. By treating the application software code as white-boxes, it seeks to generate invariants that capture the expected program behavior. By leveraging the invariants as correctness conditions, it overcomes the major hurdle in detecting silent errors, which is the lack of visible symptoms. In addition to detecting errors, the invariants are also used by runtime monitors to intelligently perturb the execution order or memory state to proactively avoid failures at run time. When the rollback recovery becomes inevitable, the invariants are used as guidance to minimize the re-execution overhead.\r\nThe proposed methods and software tools are evaluated on real applications from the research community as well as sources such as SciDAC.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Chao",
   "pi_last_name": "Wang",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Chao Wang",
   "pi_email_addr": "wang626@usc.edu",
   "nsf_id": "000596776",
   "pi_start_date": "2016-12-20",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Southern California",
  "inst_street_address": "3720 S FLOWER ST FL 3",
  "inst_street_address_2": "",
  "inst_city_name": "LOS ANGELES",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "2137407762",
  "inst_zip_code": "90033",
  "inst_country_name": "United States",
  "cong_dist_code": "34",
  "st_cong_dist_code": "CA34",
  "org_lgl_bus_name": "UNIVERSITY OF SOUTHERN CALIFORNIA",
  "org_prnt_uei_num": "",
  "org_uei_num": "G88KLJR3KYT5"
 },
 "perf_inst": {
  "perf_inst_name": "University of Southern California",
  "perf_str_addr": "3720 S. Flower St.",
  "perf_city_name": "Los Angeles",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "900890001",
  "perf_ctry_code": "US",
  "perf_cong_dist": "37",
  "perf_st_cong_dist": "CA37",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7942",
   "pgm_ref_txt": "HIGH-PERFORMANCE COMPUTING"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 420000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>This NSF grant allowed the principal investigator and students at the University of Southern California to conduct cutting-edge research on static, dynamic, and symbolic program analysis techniques, and leverage these techniques to detect faults and improve the resilience of software systems.&nbsp; As a result, a number of new program analysis techniques have been developed. The project has led to nine publications, most of which are papers appeared in prestigious journals and conferences in the broad area of software engineering. Software code implementing the prosed techniques and benchmarks used to them have also been released to the public. The grant also supported the doctoral dissertation research of several PhD students at the University of Southern California, including one PhD student who graduated in 2020 and two other PhD students who are close to graduation. Research findings have also been integrated into the undergraduate- and graduate-level courses taught by the principal investigator in the Department of Computer Science of the University of Southern California.</p>\n<p>&nbsp;</p>\n<p>Selected Publications:</p>\n<ol>\n<li>Chungha Sung, Markus Kusano, and Chao Wang. Modular verification of interrupt-driven software. IEEE/ACM International Conference on Automated Software Engineering (ASE), 2017</li>\n<li>Markus Kusano, and Chao Wang. Thread-modular static analysis for relaxed memory models. ACM SIGSOFT Symposium on the Foundations of Software Engineering (FSE), 2017</li>\n<li>Tingting Yu, Tarannum Zaman, and Chao Wang. DESCRY: Reproducing system-level concurrency failures. ACM SIGSOFT Symposium on the Foundations of Software Engineering (FSE), 2017</li>\n<li>Chungha Sung, Shuvendu Lahiri, Constantin Enea, and Chao Wang. Datalog-based scalable semantic diffing of concurrent programs. IEEE/ACM International Conference on Automated Software Engineering (ASE), 2018</li>\n<li>Meng Wu, Jingbo Wang, Jyotirmoy Deshmukh, and Chao Wang. Shield synthesis for real: Enforcing safety in cyber-physical systems. International Conference on Formal Methods in Computer-Aided Design (FMCAD), 2019</li>\n<li>Tingting Yu, Zunchen Huang, and Chao Wang. ConTesa: Directed Test Suite Augmentation for Concurrent Software. IEEE Transactions on Software Engineering (TSE), 2020</li>\n<li>Zunchen Huang and Chao Wang. Symbolic Predictive Cache Analysis for Out-of-Order Execution. International Conference on Fundamental Approaches to Software Engineering (FASE), 2022</li>\n<li>Brandon Paulsen and Chao Wang. LinSyn: Synthesizing Tight Linear Bounds for Arbitrary Neural Network Activation Functions. International Conference on Tools and Algorithms for the Construction and Analysis of Systems (TACAS), 2022</li>\n<li>Brandon Paulsen and Chao Wang. Example Guided Synthesis of Linear Approximations for Neural Network Verification. International Conference on Computer Aided Verification (CAV), 2022</li>\n</ol>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 05/27/2022<br>\n\t\t\t\t\tModified by: Chao&nbsp;Wang</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThis NSF grant allowed the principal investigator and students at the University of Southern California to conduct cutting-edge research on static, dynamic, and symbolic program analysis techniques, and leverage these techniques to detect faults and improve the resilience of software systems.  As a result, a number of new program analysis techniques have been developed. The project has led to nine publications, most of which are papers appeared in prestigious journals and conferences in the broad area of software engineering. Software code implementing the prosed techniques and benchmarks used to them have also been released to the public. The grant also supported the doctoral dissertation research of several PhD students at the University of Southern California, including one PhD student who graduated in 2020 and two other PhD students who are close to graduation. Research findings have also been integrated into the undergraduate- and graduate-level courses taught by the principal investigator in the Department of Computer Science of the University of Southern California.\n\n \n\nSelected Publications:\n\nChungha Sung, Markus Kusano, and Chao Wang. Modular verification of interrupt-driven software. IEEE/ACM International Conference on Automated Software Engineering (ASE), 2017\nMarkus Kusano, and Chao Wang. Thread-modular static analysis for relaxed memory models. ACM SIGSOFT Symposium on the Foundations of Software Engineering (FSE), 2017\nTingting Yu, Tarannum Zaman, and Chao Wang. DESCRY: Reproducing system-level concurrency failures. ACM SIGSOFT Symposium on the Foundations of Software Engineering (FSE), 2017\nChungha Sung, Shuvendu Lahiri, Constantin Enea, and Chao Wang. Datalog-based scalable semantic diffing of concurrent programs. IEEE/ACM International Conference on Automated Software Engineering (ASE), 2018\nMeng Wu, Jingbo Wang, Jyotirmoy Deshmukh, and Chao Wang. Shield synthesis for real: Enforcing safety in cyber-physical systems. International Conference on Formal Methods in Computer-Aided Design (FMCAD), 2019\nTingting Yu, Zunchen Huang, and Chao Wang. ConTesa: Directed Test Suite Augmentation for Concurrent Software. IEEE Transactions on Software Engineering (TSE), 2020\nZunchen Huang and Chao Wang. Symbolic Predictive Cache Analysis for Out-of-Order Execution. International Conference on Fundamental Approaches to Software Engineering (FASE), 2022\nBrandon Paulsen and Chao Wang. LinSyn: Synthesizing Tight Linear Bounds for Arbitrary Neural Network Activation Functions. International Conference on Tools and Algorithms for the Construction and Analysis of Systems (TACAS), 2022\nBrandon Paulsen and Chao Wang. Example Guided Synthesis of Linear Approximations for Neural Network Verification. International Conference on Computer Aided Verification (CAV), 2022\n\n\n \n\n\t\t\t\t\tLast Modified: 05/27/2022\n\n\t\t\t\t\tSubmitted by: Chao Wang"
 }
}