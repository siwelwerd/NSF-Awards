{
 "awd_id": "1731612",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF:Small:Scalable Scheduling for Program Transformations in Heterogeneous Computing",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2016-09-01",
 "awd_exp_date": "2018-09-30",
 "tot_intn_awd_amt": 159222.0,
 "awd_amount": 159222.0,
 "awd_min_amd_letter_date": "2017-03-06",
 "awd_max_amd_letter_date": "2017-03-06",
 "awd_abstract_narration": "Optimizing compilers are asked to automatically achieve good performance over an increasingly larger and heterogeneous set of architectures. Complex high-level program transformations are required to address this problem, to map the proper grain of independent computation and the proper data locality to a complex hierarchy of memory, computing and interconnection resources. The polyhedral compilation framework is one of the most powerful and flexible loop transformation system, with numerous compelling results achieved in recent years in terms of automatic program optimization (CPUs, GPUs and FPGAs). But a difficult challenge remains the deployment of those research results to larger-scale programs. Indeed, this framework uses complex mathematical algorithms that are the reason for the better program performance achieved, but which are often too time consuming for production use.\r\n\r\nThe goal of this project is to significantly improve the scalability and effectiveness of polyhedral optimizations, through the design of exact optimization methods and their associated approximation heuristics for increased scalability. We will develop novel program transformation algorithms operating under hardware resources constraints, for a variety of devices currently available on heterogeneous computing systems: for multi-core CPUs using short-vector SIMD units; for FPGAs with the help of high-level synthesis tool-chain; and for GPUs.  The proposed work has the potential to significantly enhance the effectiveness of optimizing compilers thereby reducing the manual performance tuning required, with significant cost savings. The developed tools will be made publicly and freely available to the research community.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Louis-Noel",
   "pi_last_name": "Pouchet",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Louis-Noel Pouchet",
   "pi_email_addr": "pouchet@cs.colostate.edu",
   "nsf_id": "000637181",
   "pi_start_date": "2017-03-06",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Colorado State University",
  "inst_street_address": "601 S HOWES ST",
  "inst_street_address_2": "",
  "inst_city_name": "FORT COLLINS",
  "inst_state_code": "CO",
  "inst_state_name": "Colorado",
  "inst_phone_num": "9704916355",
  "inst_zip_code": "805212807",
  "inst_country_name": "United States",
  "cong_dist_code": "02",
  "st_cong_dist_code": "CO02",
  "org_lgl_bus_name": "COLORADO STATE UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "LT9CXX8L19G1"
 },
 "perf_inst": {
  "perf_inst_name": "Colorado State University",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "CO",
  "perf_st_name": "Colorado",
  "perf_zip_code": "805232002",
  "perf_ctry_code": "US",
  "perf_cong_dist": "02",
  "perf_st_cong_dist": "CO02",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "794300",
   "pgm_ele_name": "PROGRAMMING LANGUAGES"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0113",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001314DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2013,
   "fund_oblg_amt": 159222.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Compilers are tasked with generating programs achieving solid performance that is portable over an increasingly larger and more heterogeneous set of architectures. Despite five decades of intense research and development, program optimization remains a challenging task for compiler designers, and a frustrating experience for the programmers of high-performance applications. &nbsp;Complex high-level program transformations are required to address this problem, to map the proper grain of independent computations and the proper data locality to a complex hierarchy of memory, computing and interconnection resources. The polyhedral compilation framework is one of the most powerful and flexible loop transformation system, with numerous compelling results achieved in terms of automatic high-performance program generation for CPUs, GPUs and FPGAs.</p>\n<p>The main technical objective of this project was to design efficient polyhedral compilation techniques for impactful performance optimization problems on heterogeneous architectures comprising CPUs, GPUs and FPGAs. The objective was to significantly enhance the effectiveness of optimizing compilers, thereby reducing the manual performance tuning required leading to significant development cost savings. We also aimed to make all our development publicly and freely available as open-source software.</p>\n<p>Our project has been very successful, and we have delivered numerous novel techniques to effectively transform simple programs to an efficient implementation on a specific hardware. In particular, we followed a domain/pattern-specific and target-specific approach, designing compilation algorithms that are specialized to a particular computation domain, and to a particular hardware target. By specializing for different classes of applications handled as input, we were able to deliver fully automated push-button systems to generate very high-performance programs for multi-core CPUs, GPUs and also FPGAs. The gains in productivity achieved are very high: no manual/human effort is needed to obtain high-performance programs for several key computation patterns.&nbsp;</p>\n<p>The results have been disseminated through numerous conference and journal publications, and received one best paper award at the CODES+ISSS'13 conference. We have also provided free and publicly available software implementing all our research. This includes multiple releases of the Polyhedral Compiler Collection (PoCC), a complete source-to-source compiler based on polyhedral techniques; and of the PolyBench/C benchmarking suite. PolyBench/C, authored by Pouchet and supported by this project, has already been used in more than 150 publications as of 2019. The PoCC compiler is integrated in the LLNL Rose compiler toolset, and is to date the only open-source compiler implementing multidimensional polyhedral scheduling.</p>\n<p>This project has supported a total of four graduate research assistants (part time), who each were trained on compilation research using the polyhedral model, and were able to contribute very significantly to the body of research completed. This project has also been instrumental to the professional development of the PI. It has supported national and international travels to disseminate the research and present numerous tutorials on polyhedral compilation. Pouchet heavily benefited from this award from the U.S. National Science Foundation as it kickstarted his academic career in the US. Numerous collaborations and subsequent federal funding from the U.S. Department of Energy and NSF were established as a result of the work conducted in this project.</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 03/06/2019<br>\n\t\t\t\t\tModified by: Louis-Noel&nbsp;Pouchet</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nCompilers are tasked with generating programs achieving solid performance that is portable over an increasingly larger and more heterogeneous set of architectures. Despite five decades of intense research and development, program optimization remains a challenging task for compiler designers, and a frustrating experience for the programmers of high-performance applications.  Complex high-level program transformations are required to address this problem, to map the proper grain of independent computations and the proper data locality to a complex hierarchy of memory, computing and interconnection resources. The polyhedral compilation framework is one of the most powerful and flexible loop transformation system, with numerous compelling results achieved in terms of automatic high-performance program generation for CPUs, GPUs and FPGAs.\n\nThe main technical objective of this project was to design efficient polyhedral compilation techniques for impactful performance optimization problems on heterogeneous architectures comprising CPUs, GPUs and FPGAs. The objective was to significantly enhance the effectiveness of optimizing compilers, thereby reducing the manual performance tuning required leading to significant development cost savings. We also aimed to make all our development publicly and freely available as open-source software.\n\nOur project has been very successful, and we have delivered numerous novel techniques to effectively transform simple programs to an efficient implementation on a specific hardware. In particular, we followed a domain/pattern-specific and target-specific approach, designing compilation algorithms that are specialized to a particular computation domain, and to a particular hardware target. By specializing for different classes of applications handled as input, we were able to deliver fully automated push-button systems to generate very high-performance programs for multi-core CPUs, GPUs and also FPGAs. The gains in productivity achieved are very high: no manual/human effort is needed to obtain high-performance programs for several key computation patterns. \n\nThe results have been disseminated through numerous conference and journal publications, and received one best paper award at the CODES+ISSS'13 conference. We have also provided free and publicly available software implementing all our research. This includes multiple releases of the Polyhedral Compiler Collection (PoCC), a complete source-to-source compiler based on polyhedral techniques; and of the PolyBench/C benchmarking suite. PolyBench/C, authored by Pouchet and supported by this project, has already been used in more than 150 publications as of 2019. The PoCC compiler is integrated in the LLNL Rose compiler toolset, and is to date the only open-source compiler implementing multidimensional polyhedral scheduling.\n\nThis project has supported a total of four graduate research assistants (part time), who each were trained on compilation research using the polyhedral model, and were able to contribute very significantly to the body of research completed. This project has also been instrumental to the professional development of the PI. It has supported national and international travels to disseminate the research and present numerous tutorials on polyhedral compilation. Pouchet heavily benefited from this award from the U.S. National Science Foundation as it kickstarted his academic career in the US. Numerous collaborations and subsequent federal funding from the U.S. Department of Energy and NSF were established as a result of the work conducted in this project.\n\n \n\n \n\n\t\t\t\t\tLast Modified: 03/06/2019\n\n\t\t\t\t\tSubmitted by: Louis-Noel Pouchet"
 }
}