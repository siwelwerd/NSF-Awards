{
 "awd_id": "1762015",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CSR: Small: Client-Centric Consistency",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Erik Brunvand",
 "awd_eff_date": "2017-09-01",
 "awd_exp_date": "2021-08-31",
 "tot_intn_awd_amt": 400000.0,
 "awd_amount": 400000.0,
 "awd_min_amd_letter_date": "2017-09-21",
 "awd_max_amd_letter_date": "2017-09-21",
 "awd_abstract_narration": "The isolation guarantees offered by a storage system regulate how multiple transactions executing concurrently read and write data correctly. Similarly, when data is replicated and updated at geographically-distinct locations (as do Facebook and Twitter), consistency guarantees specify which data is visible to clients that access different replicas. This project will develop a new programmer-centric model for expressing rigorously, in a single framework, the isolation and consistency guarantees offered by geo-replicated storage systems. It will then leverage the new model to seek more efficient ways to implement these guarantees.\r\n\r\nThe project will proceed along three thrusts. First, it will seek to express isolation and consistency guarantees as properties of states that applications can observe, instead of relying on invisible histories of low-level read/write operations. Second, it will seek to overcome the current scalability bottlenecks that arise with slow or faulty servers, which have, to date, stifled industry's interest in deploying causally-consistent geo-replicated data stores. Third, it will leverage its unified treatment of consistency and isolation to support, for the first time, generic read/write transactions on top of a scalable consistent data store.\r\n\r\nThe project directly addresses the growing interest in both research and industry towards large-scale, transactional distributed systems.  By confronting key obstacles to scalability, it will contribute to  bring to industrial fruition over two decades of academic research on causal consistency.  Further, by establishing a common language to discuss consistency and isolation, it will enable more fruitful exchanges  between the systems and database research communities, who, because of their primary focus on, respectively, consistency and isolation, have often been talking past each other. The project, with its tight integration of both theoretical and experimental research, is ideally suited to introducing graduate and undergraduate students to research, and  will offer a new approach to teaching consistency and isolation in graduate and undergraduate courses in distributed computing.\r\n\r\nThe project outcomes (papers published, presentations, and a repository of the software and workloads used to demonstrate the results of the project) will be made available for download at the address http://www.cs.utexas.edu/users/lorenzo/projects/CCC/, where they will be kept for five years.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Lorenzo",
   "pi_last_name": "Alvisi",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Lorenzo Alvisi",
   "pi_email_addr": "la13@cornell.edu",
   "nsf_id": "000217257",
   "pi_start_date": "2017-09-21",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Cornell University",
  "inst_street_address": "341 PINE TREE RD",
  "inst_street_address_2": "",
  "inst_city_name": "ITHACA",
  "inst_state_code": "NY",
  "inst_state_name": "New York",
  "inst_phone_num": "6072555014",
  "inst_zip_code": "148502820",
  "inst_country_name": "United States",
  "cong_dist_code": "19",
  "st_cong_dist_code": "NY19",
  "org_lgl_bus_name": "CORNELL UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "G56PUALJ3KT5"
 },
 "perf_inst": {
  "perf_inst_name": "Cornell University",
  "perf_str_addr": "413A Gates Hall",
  "perf_city_name": "Ithaca",
  "perf_st_code": "NY",
  "perf_st_name": "New York",
  "perf_zip_code": "148535169",
  "perf_ctry_code": "US",
  "perf_cong_dist": "19",
  "perf_st_cong_dist": "NY19",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 400000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><div class=\"page\" title=\"Page 2\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<p><span>Large-scale applications (e.g., &nbsp;Facebook&nbsp;</span><span>or Twitter)&nbsp;</span><span>offload the managing of data at scale to replicated and/or distributed systems. These systems, which often span multiple regions or continents, must sustain high-throughput, guarantee low-latency, and remain available across failures.&nbsp;</span></p>\n<p><span>This project has produced &nbsp;three key contributions to the dependability and performance of distributed storage systems and of the applications they support. </span></p>\n<p><span>First, it has defined a new, more intuitive way to rigorously express the correctness guarantees that these storage systems can offer to the applications that use them. With this new approach, these guarantees are expressed from the perspective of their users:&nbsp;<span>the new clarity afforded by our model yields both conceptual and tangible benefits. &nbsp;In particular we demonstrated that a client-centric perspective can result in &nbsp;more scalable and robust data store implementations. Concretely, this effort has led us to building two compelling system prototypes: one demonstrates how to design high robustness, high performance storage systems that guarantee <em>causal consistency, </em>which, in a context like Facebook, would ensure that, when reading a comment, one is guaranteed to having seen all comments that causally preceded it; the other shows how to build a cloud-based storage system that can hide from the cloud provider (e.g., Amazon, Google, or Microsoft) not just the data that their clients are storing, but also which data they are accessing, and whether they are accessing it for reading or writing---and at the same time offer support for transaction processing.</span></span></p>\n<p>Second, it has introduced a novel approach to building totally ordered shared logs that can sustain a much higher <em>throughput </em>(the&nbsp;rate of writes per unit of time) than previous systems---over two orders of magnitude higher! This is important because totally ordered shared logs underlie some of the key logical building blocks in distributed computing, including state machine replication, atomic transactions, accountability, stream processing, and deterministic replay. Their simplicity and generality makes them popular building blocks for developing reliable cloud applications based on microservices or serverless computing. Indeed, blockchains essentially provide the shared log abstraction for decentralized finance applications, record keeping. provenance, and more. Concretely, the approach introduce in this project, which was instantiated in a system prototype, has already been embraced by followup work from researchers at both Facebook and other academic institutions.&nbsp;</p>\n<p>Finally, we have tackled the fundamental tension that exists between (i) allowing multiple clients to modify concurrently the content of a storage system and (ii) guarantee that those modifications are <em>serializable</em>, in the sense that, though being executed concurrently, their outcome is equivalent to what would be produced by an execution that performed them one at a time.&nbsp; To capture this tension, and resolve it optimally, this project introduced two novel and related notions (those of&nbsp;<em>conflict window</em>&nbsp;and <em>recoverability window</em>) and used them to drive the design of a system prototype that uses uses transaction re-execution to optimally align these windows. Depending on the degree to which these updates conflict (i.e., try to concurrently modify the same objects), the prototype's &nbsp;throughput is &nbsp;anywhere from 70% to almost two orders of magnitude higher that today's &nbsp;state-of-art systems.</p>\n<p>Research conducted as part of this project constitutes the core of the ongoing Ph.D. research of Matthew Burke and of the &nbsp;completed Ph.D. dissertations of Natacha Crooks (now an Assistant Professor in EECS at the University of California, Berkeley) and COng Ding, currently a software engineer at Confluent. Dr. Crooks' dissertation -- \"<span>A Client-Centric Approach to Transactional Datastores.\" -- received the 2020 ACM SIGOPS Dennis M. Ritchie Dissertation Award and was a runner up for the ACM SIGMOD Jim Gray Dissertation award. &nbsp;In addition, it has offered research opportunities for 10 undergraduates, three of whom have earned co-authorship in research papers detailing work supported by this project published in the flagship publication venues for this research field.</span></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n</div>\n</div>\n</div>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 12/21/2021<br>\n\t\t\t\t\tModified by: Lorenzo&nbsp;Alvisi</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n\n\n\nLarge-scale applications (e.g.,  Facebook or Twitter) offload the managing of data at scale to replicated and/or distributed systems. These systems, which often span multiple regions or continents, must sustain high-throughput, guarantee low-latency, and remain available across failures. \n\nThis project has produced  three key contributions to the dependability and performance of distributed storage systems and of the applications they support. \n\nFirst, it has defined a new, more intuitive way to rigorously express the correctness guarantees that these storage systems can offer to the applications that use them. With this new approach, these guarantees are expressed from the perspective of their users: the new clarity afforded by our model yields both conceptual and tangible benefits.  In particular we demonstrated that a client-centric perspective can result in  more scalable and robust data store implementations. Concretely, this effort has led us to building two compelling system prototypes: one demonstrates how to design high robustness, high performance storage systems that guarantee causal consistency, which, in a context like Facebook, would ensure that, when reading a comment, one is guaranteed to having seen all comments that causally preceded it; the other shows how to build a cloud-based storage system that can hide from the cloud provider (e.g., Amazon, Google, or Microsoft) not just the data that their clients are storing, but also which data they are accessing, and whether they are accessing it for reading or writing---and at the same time offer support for transaction processing.\n\nSecond, it has introduced a novel approach to building totally ordered shared logs that can sustain a much higher throughput (the rate of writes per unit of time) than previous systems---over two orders of magnitude higher! This is important because totally ordered shared logs underlie some of the key logical building blocks in distributed computing, including state machine replication, atomic transactions, accountability, stream processing, and deterministic replay. Their simplicity and generality makes them popular building blocks for developing reliable cloud applications based on microservices or serverless computing. Indeed, blockchains essentially provide the shared log abstraction for decentralized finance applications, record keeping. provenance, and more. Concretely, the approach introduce in this project, which was instantiated in a system prototype, has already been embraced by followup work from researchers at both Facebook and other academic institutions. \n\nFinally, we have tackled the fundamental tension that exists between (i) allowing multiple clients to modify concurrently the content of a storage system and (ii) guarantee that those modifications are serializable, in the sense that, though being executed concurrently, their outcome is equivalent to what would be produced by an execution that performed them one at a time.  To capture this tension, and resolve it optimally, this project introduced two novel and related notions (those of conflict window and recoverability window) and used them to drive the design of a system prototype that uses uses transaction re-execution to optimally align these windows. Depending on the degree to which these updates conflict (i.e., try to concurrently modify the same objects), the prototype's  throughput is  anywhere from 70% to almost two orders of magnitude higher that today's  state-of-art systems.\n\nResearch conducted as part of this project constitutes the core of the ongoing Ph.D. research of Matthew Burke and of the  completed Ph.D. dissertations of Natacha Crooks (now an Assistant Professor in EECS at the University of California, Berkeley) and COng Ding, currently a software engineer at Confluent. Dr. Crooks' dissertation -- \"A Client-Centric Approach to Transactional Datastores.\" -- received the 2020 ACM SIGOPS Dennis M. Ritchie Dissertation Award and was a runner up for the ACM SIGMOD Jim Gray Dissertation award.  In addition, it has offered research opportunities for 10 undergraduates, three of whom have earned co-authorship in research papers detailing work supported by this project published in the flagship publication venues for this research field.\n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n\n\n\n \n\n\t\t\t\t\tLast Modified: 12/21/2021\n\n\t\t\t\t\tSubmitted by: Lorenzo Alvisi"
 }
}