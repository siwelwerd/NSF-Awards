{
 "awd_id": "1714593",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Efficient Verification of Nonlinear Arithmetic",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927991",
 "po_email": "namla@nsf.gov",
 "po_sign_block_name": "Nina Amla",
 "awd_eff_date": "2017-09-01",
 "awd_exp_date": "2021-08-31",
 "tot_intn_awd_amt": 450000.0,
 "awd_amount": 458000.0,
 "awd_min_amd_letter_date": "2017-08-30",
 "awd_max_amd_letter_date": "2018-04-25",
 "awd_abstract_narration": "In recent decades, formal methods have produced many successes in proving  properties of hardware and software artifacts. However, the lack of general efficient methods to verify designs that involve nonlinear arithmetic --   arithmetic that involves integer multiplication -- has been a major impediment to the effectiveness of verification methods in a broad array of applications. Among many other applications, computations that depend on nonlinear arithmetic are at the heart of CPU designs, cryptography, and structures for efficient storage of data for easy retrieval. This project is focused on achieving efficient verification of hardware and software designs that include nonlinear arithmetic.  \r\n\r\nThis project explores methods for extending the most widely effective class of current verification methods, which at their heart use Boolean satisfiability (SAT) solvers, to handle designs that include integer multiplication. The investigators have shown that certain properties of integer multiplication circuits that have been conjectured to be representative of the difficulty of verifying nonlinear arithmetic can be efficiently verified in systems of inference that capture the capabilities of state-of-the-art SAT solvers.  This project leverages and extends these theoretical insights to develop practical methods that will succeed in a broad range of verification tasks for software and hardware artifacts that use nonlinear arithmetic. The research results will be widely disseminated in open source tools for people to use for verification leading to software and hardware with a higher level of trustworthiness, including in safety-critical applications that people rely on every day.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Paul",
   "pi_last_name": "Beame",
   "pi_mid_init": "W",
   "pi_sufx_name": "",
   "pi_full_name": "Paul W Beame",
   "pi_email_addr": "beame@cs.washington.edu",
   "nsf_id": "000169746",
   "pi_start_date": "2017-08-30",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Washington",
  "inst_street_address": "4333 BROOKLYN AVE NE",
  "inst_street_address_2": "",
  "inst_city_name": "SEATTLE",
  "inst_state_code": "WA",
  "inst_state_name": "Washington",
  "inst_phone_num": "2065434043",
  "inst_zip_code": "981951016",
  "inst_country_name": "United States",
  "cong_dist_code": "07",
  "st_cong_dist_code": "WA07",
  "org_lgl_bus_name": "UNIVERSITY OF WASHINGTON",
  "org_prnt_uei_num": "",
  "org_uei_num": "HD1WMN6945W6"
 },
 "perf_inst": {
  "perf_inst_name": "University of Washington",
  "perf_str_addr": "185 Stevens Way",
  "perf_city_name": "Seattle",
  "perf_st_code": "WA",
  "perf_st_name": "Washington",
  "perf_zip_code": "981952350",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "WA07",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7798",
   "pgm_ref_txt": "SOFTWARE & HARDWARE FOUNDATION"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "8206",
   "pgm_ref_txt": "Formal Methods and Verification"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 450000.0
  },
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 8000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The research supported by this award has advanced the state of the art in verification of nonlinear arithmetic, in particular integer multipliers which are at the heart of such verification, in several ways.&nbsp; Verification of nonlinear arithmetic is a critical missing component in our ability to verify complex hardware and software.&nbsp; Prior attempts at this using standard verification tools (which are based on CDCL SAT solvers) had exhibited exponential scaling with the number of bits for the integers involved and were impractical even at very modest numbers of bits.<br /><br />The research of this project showed that a wide variety of properties of multipliers can, in principle, be verified by CDCL SAT solvers in polynomial time using a resolution proof strategy.&nbsp;&nbsp; This refuted a conjecture that exponential size resolution proofs of the properties was a limiting factor that explained poor CDCL SAT solver behavior; however, the proof sizes, though growing only polynomially in the number of bits, still proved to be too inefficient in practice to be used on the sizes of integers that computers usually represent.<br /><br />This research also showed that two other approaches from proof complexity can be extended to yield efficient verification of properties of multipliers circuits at practical integer sizes.&nbsp; One method, using pseudo-Boolean solvers based on cutting planes proofs with large integer coefficients, verifies properties of multipliers expressed as combinations of 1-bit adders.&nbsp;&nbsp; The second method, based on an extension of Grobner basis algorithms to make effective use of dual variables, verifies properties of multipliers expressed in terms of arbitrary gates.&nbsp; Both methods produce certificates of correctness that are verifiable in linear time.<br /><br />This award supported the training and PhD of a graduate student who completed his doctoral dissertation focused on the work described above.&nbsp; It also supported the research training of three undergraduate students, including two who were financially supported by this award, one of whom has now begun her PhD research in a top computer science PhD program.<br /><br /><br /></p><br>\n<p>\n\t\t\t\t      \tLast Modified: 12/15/2021<br>\n\t\t\t\t\tModified by: Paul&nbsp;W&nbsp;Beame</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThe research supported by this award has advanced the state of the art in verification of nonlinear arithmetic, in particular integer multipliers which are at the heart of such verification, in several ways.  Verification of nonlinear arithmetic is a critical missing component in our ability to verify complex hardware and software.  Prior attempts at this using standard verification tools (which are based on CDCL SAT solvers) had exhibited exponential scaling with the number of bits for the integers involved and were impractical even at very modest numbers of bits.\n\nThe research of this project showed that a wide variety of properties of multipliers can, in principle, be verified by CDCL SAT solvers in polynomial time using a resolution proof strategy.   This refuted a conjecture that exponential size resolution proofs of the properties was a limiting factor that explained poor CDCL SAT solver behavior; however, the proof sizes, though growing only polynomially in the number of bits, still proved to be too inefficient in practice to be used on the sizes of integers that computers usually represent.\n\nThis research also showed that two other approaches from proof complexity can be extended to yield efficient verification of properties of multipliers circuits at practical integer sizes.  One method, using pseudo-Boolean solvers based on cutting planes proofs with large integer coefficients, verifies properties of multipliers expressed as combinations of 1-bit adders.   The second method, based on an extension of Grobner basis algorithms to make effective use of dual variables, verifies properties of multipliers expressed in terms of arbitrary gates.  Both methods produce certificates of correctness that are verifiable in linear time.\n\nThis award supported the training and PhD of a graduate student who completed his doctoral dissertation focused on the work described above.  It also supported the research training of three undergraduate students, including two who were financially supported by this award, one of whom has now begun her PhD research in a top computer science PhD program.\n\n\n\n\n\t\t\t\t\tLast Modified: 12/15/2021\n\n\t\t\t\t\tSubmitted by: Paul W Beame"
 }
}