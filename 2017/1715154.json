{
 "awd_id": "1715154",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SaTC: CORE: Small: Formal End-to-End Verification of Information-Flow Security for Complex Systems",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2017-08-01",
 "awd_exp_date": "2020-07-31",
 "tot_intn_awd_amt": 500000.0,
 "awd_amount": 500000.0,
 "awd_min_amd_letter_date": "2017-07-21",
 "awd_max_amd_letter_date": "2017-07-21",
 "awd_abstract_narration": "Protecting the confidentiality of information manipulated by a computing system is one of the most important challenges facing today's cybersecurity community. Many complex systems, such as operating systems, hypervisors, web browsers, and distributed systems, require a user to trust that private information is properly isolated from other users. Real-world systems are full of bugs, however, so this assumption of trust is not reasonable.  The goal of this proposed research is to apply formal methods to complex security-sensitive systems, in such a way that we can guarantee to users that these systems really are trustworthy. Unfortunately, there are numerous prohibitive challenges standing in the way of achieving this goal. One challenge is how to specify the desired security policy of a complex system. In the real world, pure noninterference is too strong to be useful. It is crucial to support more lenient security policies that allow for certain well-specified information flows between users, such as explicit declassifications. A second challenge is that real-world systems are usually written in low-level languages like C and assembly, but these languages are traditionally difficult to reason about. A third challenge is how to actually go about conducting a security proof over low-level code and then link everything together into a system-wide guarantee.\r\n\r\nIn this effort, the PI proposes to design and implement a new set of formal techniques and tools for overcoming all of these challenges. First, the PI will develop a new methodology for formally specifying, proving, and propagating information-flow security policies using a single unifying mechanism, called the \"observation function.\" A policy is specified in terms of an expressive generalization of classical noninterference, proved using a general method that subsumes both security-label proofs and information-hiding proofs, and propagated across layers of abstraction using a special kind of simulation that is guaranteed to preserve security.  Second, to demonstrate the effectiveness of the new methodology, the PI will build an actual end-to-end security proof, fully formalized and machine-checked in the Coq proof assistant, of a nontrivial concurrent operating system kernel.  Third, the PI will also demonstrate the generality and extensibility of the methodology by extending the kernel with a virtualized time feature allowing user processes to time their own executions. The goal is to prove that user processes cannot exploit virtualized time as an information channel. The technology for building certified secure system software will dramatically improve the reliability and security of many key components in the world's critical infrastructure.  It will advance human knowledge in the specification and understanding of software and catalyze a cultural change in U.S. universities by pushing new courses on formal methods into the existing cybersecurity curriculum.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Zhong",
   "pi_last_name": "Shao",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Zhong Shao",
   "pi_email_addr": "zhong.shao@yale.edu",
   "nsf_id": "000201856",
   "pi_start_date": "2017-07-21",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Yale University",
  "inst_street_address": "150 MUNSON ST",
  "inst_street_address_2": "",
  "inst_city_name": "NEW HAVEN",
  "inst_state_code": "CT",
  "inst_state_name": "Connecticut",
  "inst_phone_num": "2037854689",
  "inst_zip_code": "065113572",
  "inst_country_name": "United States",
  "cong_dist_code": "03",
  "st_cong_dist_code": "CT03",
  "org_lgl_bus_name": "YALE UNIV",
  "org_prnt_uei_num": "FL6GV84CKN57",
  "org_uei_num": "FL6GV84CKN57"
 },
 "perf_inst": {
  "perf_inst_name": "Yale University",
  "perf_str_addr": "51 Prospect Street",
  "perf_city_name": "New Haven",
  "perf_st_code": "CT",
  "perf_st_name": "Connecticut",
  "perf_zip_code": "065208285",
  "perf_ctry_code": "US",
  "perf_cong_dist": "03",
  "perf_st_cong_dist": "CT03",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 500000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The security verification project funded by this research grant focuses on applying formal methods to complex security-sensitive systems in such a way that we can guarantee to users that these systems are really are trustworthy. Real-time systems are prevalent in today's world. They often power safety-critical applications, such as avionics and automobile control systems, where stringent timing constraints must be satisfied.&nbsp; This requires a systematic way of multiplexing the processor time among the multiple real-time applications while guaranteeing each of them still meets their timing constraints, that is, different components enjoy temporal isolation between each other.</p>\n<p>Traditionally, real-time systems rely on a worst-case execution time (WCET) analysis on all tasks to guarantee that they are all schedulable (able to finish the iteration within each period) under a certain scheduling algorithm.&nbsp; However, complex microarchitectural-level interactions on modern hardware make it extremely challenging to obtain tight bounds on WCET, if possible at all.</p>\n<p>Instead, emerging real-time systems proactively enforce budget constraints on tasks or groups of tasks (by encapsulating them in real-time partitions) so that temporal interferences between components are properly contained.&nbsp; This enables a broad range of task-level and partition-level scheduling schemes which allow flexible parameter assignment and high schedulable utilization.&nbsp; However, the dynamic nature of these scheduling algorithms make it challenging to ensure the proper isolation between components.&nbsp; Further, the complexity of the concrete implementation add to the vulnerability of such real-time OS kernels.</p>\n<p>Thus, formal verification is the only way to ensure strong isolation between different components.&nbsp; Further, such verification cannot stop at an abstract model.&nbsp; They must hold on the assembly code level. This research tackles the formal verification of a real-time OS kernel, focusing on isolation properties between components.</p>\n<p>Under this research grant, PI Shao and his team at Yale University have significantly advanced the state-of-the-art in supporting formal end-to-end verification of information-flow security for complex real-time systems.&nbsp;</p>\n<p>A major outcome of their work is a novel compositional framework for reasoning about algorithmic properties of the concrete implementation of preemptive schedulers. In particular, they use virtual timeline, a variant of the supply bound function used in the real-time scheduling analysis, to specify and reason about the scheduling of each component in isolation. They show that the properties proved on this abstraction carry down to the generated assembly code of the OS kernel. Using this framework, They successfully verify a real-time OS kernel, which extends CertiKOS, a single-processor non-preemptive kernel, with a verified timer interrupt handler and a verified real-time scheduler. They prove that in the absence of microarchitectural-level timing channels, this new kernel enjoys temporal and spatial isolation on top of the functional correctness guarantee.&nbsp; They have also extended the verification of real-time OS kernels with dynamic priority assignment, e.g. the earliest-deadline-first (EDF) scheduling.&nbsp; EDF permits a simple and efficient runtime admission control and achieves 100% total processor utilization without imposing any restriction on tasks' parameters.</p>\n<p>This funded research was highly visible and influential. It contributed to 13 peer-reviewed publications in conference proceedings and journals; including 7 publications at the prestigious programming language conferences POPL, PLDI, OOPSLA, CAV, and LICS. It also added to the development of the certified operating-system kernel CertiKOS and resulted in the design and implementation of a prototype certified real-time OS kernel. Moreover, the CertiKOS work was also featured as a Research Highlight in the October 2019 issue of Communications of ACM, the flagship magazine of the computing community.&nbsp; Finally, the CertiKOS research was incorporated into the undergraduate- and graduate-level courses on \"Operating Systems\" and \"Language-Based Security\" taught at Yale University and has supported graduate students at Yale University.</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 10/02/2020<br>\n\t\t\t\t\tModified by: Zhong&nbsp;Shao</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThe security verification project funded by this research grant focuses on applying formal methods to complex security-sensitive systems in such a way that we can guarantee to users that these systems are really are trustworthy. Real-time systems are prevalent in today's world. They often power safety-critical applications, such as avionics and automobile control systems, where stringent timing constraints must be satisfied.  This requires a systematic way of multiplexing the processor time among the multiple real-time applications while guaranteeing each of them still meets their timing constraints, that is, different components enjoy temporal isolation between each other.\n\nTraditionally, real-time systems rely on a worst-case execution time (WCET) analysis on all tasks to guarantee that they are all schedulable (able to finish the iteration within each period) under a certain scheduling algorithm.  However, complex microarchitectural-level interactions on modern hardware make it extremely challenging to obtain tight bounds on WCET, if possible at all.\n\nInstead, emerging real-time systems proactively enforce budget constraints on tasks or groups of tasks (by encapsulating them in real-time partitions) so that temporal interferences between components are properly contained.  This enables a broad range of task-level and partition-level scheduling schemes which allow flexible parameter assignment and high schedulable utilization.  However, the dynamic nature of these scheduling algorithms make it challenging to ensure the proper isolation between components.  Further, the complexity of the concrete implementation add to the vulnerability of such real-time OS kernels.\n\nThus, formal verification is the only way to ensure strong isolation between different components.  Further, such verification cannot stop at an abstract model.  They must hold on the assembly code level. This research tackles the formal verification of a real-time OS kernel, focusing on isolation properties between components.\n\nUnder this research grant, PI Shao and his team at Yale University have significantly advanced the state-of-the-art in supporting formal end-to-end verification of information-flow security for complex real-time systems. \n\nA major outcome of their work is a novel compositional framework for reasoning about algorithmic properties of the concrete implementation of preemptive schedulers. In particular, they use virtual timeline, a variant of the supply bound function used in the real-time scheduling analysis, to specify and reason about the scheduling of each component in isolation. They show that the properties proved on this abstraction carry down to the generated assembly code of the OS kernel. Using this framework, They successfully verify a real-time OS kernel, which extends CertiKOS, a single-processor non-preemptive kernel, with a verified timer interrupt handler and a verified real-time scheduler. They prove that in the absence of microarchitectural-level timing channels, this new kernel enjoys temporal and spatial isolation on top of the functional correctness guarantee.  They have also extended the verification of real-time OS kernels with dynamic priority assignment, e.g. the earliest-deadline-first (EDF) scheduling.  EDF permits a simple and efficient runtime admission control and achieves 100% total processor utilization without imposing any restriction on tasks' parameters.\n\nThis funded research was highly visible and influential. It contributed to 13 peer-reviewed publications in conference proceedings and journals; including 7 publications at the prestigious programming language conferences POPL, PLDI, OOPSLA, CAV, and LICS. It also added to the development of the certified operating-system kernel CertiKOS and resulted in the design and implementation of a prototype certified real-time OS kernel. Moreover, the CertiKOS work was also featured as a Research Highlight in the October 2019 issue of Communications of ACM, the flagship magazine of the computing community.  Finally, the CertiKOS research was incorporated into the undergraduate- and graduate-level courses on \"Operating Systems\" and \"Language-Based Security\" taught at Yale University and has supported graduate students at Yale University.\n\n \n\n\t\t\t\t\tLast Modified: 10/02/2020\n\n\t\t\t\t\tSubmitted by: Zhong Shao"
 }
}