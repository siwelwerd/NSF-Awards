{
 "awd_id": "1719175",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SaTC: CORE: Small: Towards Robust and Scalable Search of Binary Code and Data",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2017-09-15",
 "awd_exp_date": "2022-08-31",
 "tot_intn_awd_amt": 476756.0,
 "awd_amount": 508756.0,
 "awd_min_amd_letter_date": "2017-08-18",
 "awd_max_amd_letter_date": "2020-05-29",
 "awd_abstract_narration": "The problem of binary code and data search concerns how to glean valuable information from binary code and binary data in an accurate, scalable and robust fashion. This concern is central to  many security problems, including vulnerability scanning, code plagiarism detection, software lineage, malware classification, memory forensics, virtual machine introspection, malicious document detection, etc. Although this problem is not new and a great deal of solutions have been proposed, no solutions can achieve the requirements of accuracy, scalability and robustness simultaneously. There are bottlenecks for binary code and data search due to the search schemes: pair-wise comparison for binary code search does not scale, and rule-based binary data search is too rigid and thus not robust against changes caused by different platform versions and malicious manipulations.\r\n\r\nThe proposed work takes a novel approach to the problem of binary code and data search, one that mimics how the human brain recognizes interesting objects from an enormous amount of visual information. There are two research thrusts: 1) scalable cross-platform binary code search, which aims to quickly identify semantically equivalent or similar code from a large binary code base in different architectures, by automatically learning high-level features from binary code via clustering and deep learning; and 2) adaptive, efficient and robust binary data analysis, which aims to accurately identify objects from binary data such as memory dumps and documents, by constructing deep neural network models. Because binary code and data search are foundational for many security applications, advances to these foundations can push the boundary for all the security applications built on top. Moreover, successful application of deep learning onto binary code and data search will revolutionize how we solve many security problems in general and stimulate more research in the direction of security by deep learning.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Heng",
   "pi_last_name": "Yin",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Heng Yin",
   "pi_email_addr": "heng@cs.ucr.edu",
   "nsf_id": "000546221",
   "pi_start_date": "2017-08-18",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of California-Riverside",
  "inst_street_address": "200 UNIVERSTY OFC BUILDING",
  "inst_street_address_2": "",
  "inst_city_name": "RIVERSIDE",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "9518275535",
  "inst_zip_code": "925210001",
  "inst_country_name": "United States",
  "cong_dist_code": "39",
  "st_cong_dist_code": "CA39",
  "org_lgl_bus_name": "REGENTS OF THE UNIVERSITY OF CALIFORNIA AT RIVERSIDE",
  "org_prnt_uei_num": "",
  "org_uei_num": "MR5QC5FCAVH5"
 },
 "perf_inst": {
  "perf_inst_name": "University of California-Riverside",
  "perf_str_addr": "316 Winston Chung Hall",
  "perf_city_name": "Riverside",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "925210001",
  "perf_ctry_code": "US",
  "perf_cong_dist": "39",
  "perf_st_cong_dist": "CA39",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "171400",
   "pgm_ele_name": "Special Projects - CNS"
  },
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "9178",
   "pgm_ref_txt": "UNDERGRADUATE EDUCATION"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 476756.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 8000.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 24000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-3ba90f0e-7fff-74ed-fc62-965763ee19f5\">\n<p dir=\"ltr\"><span>This project aims to develop novel algorithms and systems to search valuable information in binary code and data in an accurate, scalable, and robust fashion. There are two research thrusts: 1) scalable cross-platform binary code search, which aims to quickly identify semantically equivalent or similar code from a large binary code base in different architectures; and 2) adaptive efficient and robust binary data analysis, which aims to accurately identify objects from binary data such as memory dumps and documents.</span></p>\n<p dir=\"ltr\"><span>For the first research thrust (binary code search), we have accomplished a series of research efforts. We started with a fast disassembler. Since all the following processing on binary code is on disassembly, a fast disassembler is indispensable. However, the existing disassemblers are either inefficient or inaccurate. We developed a GPU-powered fast disassembler called DeepDi, which is hundreds of times faster than the existing ones. Then given the disassembly as input, we developed numerous deep neural network models, which convert the disassembly code into an embedding for efficient search of binary code. The first model we proposed is called Gemini, which is a pioneer work in this space. We later proposed an assembly language model for instruction embedding (called PalmTree) to further improve the performance of Gemini. Moreover, PalmTree can be used in the input to other deep learning models to solve other binary analysis problems.</span></p>\n<p dir=\"ltr\"><span>In addition to the problem of searching a code snippet in a large code base, we also investigated a related problem, binary code diffing, which compares two binary programs and identifies differences. We noticed that the existing binary diffing solutions are heuristic-based, and their accuracy is unsatisfactory. To this end, we proposed a representation learning algorithm for binary diffing, called DeepBinDiff, which is context and semantics aware. The experiments showed that DeepBinDiff could significantly outperform existing tools (e.g., BinDiff).</span></p>\n<p dir=\"ltr\"><span>For the second research thrust (binary data search), we specifically investigated the scenario of memory forensics, which is concerned with finding interesting objects in a memory dump. We first proposed a deep learning-based system, called DeepMem, to detect kernel objects in memory dumps. We showed that DeepMem is very accurate and efficient. Moreover, DeepMem is more robust than the existing tools like Volatility, in defeating various adversarial attacks. Moreover, we developed a logic inference-based system for automatic profile generation. A profile describes the offsets of important data structure fields, and is unique per operating system version. It is cumbersome and sometimes impossible to obtain the profile for a given memory dump. So our proposed system LogicMem can be very helpful in these scenarios.&nbsp;</span></p>\n<p dir=\"ltr\"><span>These research products have been published in top security conferences, and related artifacts, source codes, and datasets have also been released to facilitate follow-up research.</span></p>\n</span></p><br>\n<p>\n\t\t\t\t      \tLast Modified: 01/03/2023<br>\n\t\t\t\t\tModified by: Heng&nbsp;Yin</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n\nThis project aims to develop novel algorithms and systems to search valuable information in binary code and data in an accurate, scalable, and robust fashion. There are two research thrusts: 1) scalable cross-platform binary code search, which aims to quickly identify semantically equivalent or similar code from a large binary code base in different architectures; and 2) adaptive efficient and robust binary data analysis, which aims to accurately identify objects from binary data such as memory dumps and documents.\nFor the first research thrust (binary code search), we have accomplished a series of research efforts. We started with a fast disassembler. Since all the following processing on binary code is on disassembly, a fast disassembler is indispensable. However, the existing disassemblers are either inefficient or inaccurate. We developed a GPU-powered fast disassembler called DeepDi, which is hundreds of times faster than the existing ones. Then given the disassembly as input, we developed numerous deep neural network models, which convert the disassembly code into an embedding for efficient search of binary code. The first model we proposed is called Gemini, which is a pioneer work in this space. We later proposed an assembly language model for instruction embedding (called PalmTree) to further improve the performance of Gemini. Moreover, PalmTree can be used in the input to other deep learning models to solve other binary analysis problems.\nIn addition to the problem of searching a code snippet in a large code base, we also investigated a related problem, binary code diffing, which compares two binary programs and identifies differences. We noticed that the existing binary diffing solutions are heuristic-based, and their accuracy is unsatisfactory. To this end, we proposed a representation learning algorithm for binary diffing, called DeepBinDiff, which is context and semantics aware. The experiments showed that DeepBinDiff could significantly outperform existing tools (e.g., BinDiff).\nFor the second research thrust (binary data search), we specifically investigated the scenario of memory forensics, which is concerned with finding interesting objects in a memory dump. We first proposed a deep learning-based system, called DeepMem, to detect kernel objects in memory dumps. We showed that DeepMem is very accurate and efficient. Moreover, DeepMem is more robust than the existing tools like Volatility, in defeating various adversarial attacks. Moreover, we developed a logic inference-based system for automatic profile generation. A profile describes the offsets of important data structure fields, and is unique per operating system version. It is cumbersome and sometimes impossible to obtain the profile for a given memory dump. So our proposed system LogicMem can be very helpful in these scenarios. \nThese research products have been published in top security conferences, and related artifacts, source codes, and datasets have also been released to facilitate follow-up research.\n\n\n\t\t\t\t\tLast Modified: 01/03/2023\n\n\t\t\t\t\tSubmitted by: Heng Yin"
 }
}