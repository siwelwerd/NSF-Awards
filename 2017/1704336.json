{
 "awd_id": "1704336",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "NeTS: Medium: Collaborative Research: Network Configuration Synthesis: A Path to Practical Deployment",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Darleen Fisher",
 "awd_eff_date": "2017-07-01",
 "awd_exp_date": "2021-06-30",
 "tot_intn_awd_amt": 630000.0,
 "awd_amount": 630000.0,
 "awd_min_amd_letter_date": "2017-06-08",
 "awd_max_amd_letter_date": "2020-06-15",
 "awd_abstract_narration": "All sectors of society depend on properly functioning computer networks. For example, every day, millions of citizens order prescription drug refills, pay their electricity bills, book hotels, shop for groceries, and participate in thousands more activities online, through the cloud.   But none of these services will work if the networks that deliver information are down. Moreover, modern business, healthcare, the military and the government are just as dependent on reliable networks as everyday citizens.   Many network outages are caused by operators manually (and incorrectly) programming the 'configuration files' that manage the ways that network devices forward information.  While the flexibility allowed by configuration files is essential, network outages are often caused by operators using hundreds of low-level directives at each network device to create network-wide policy.  Because the global consequences of making even small configuration changes is so drastic, many organizations take several weeks to audit even small changes, limiting their ability to respond effectively to traffic fluctuations, business opportunities, security threats and hardware failures.\r\n                                                                                  \r\nA natural solution to these problems -- analogous to the trend in programming languages for software development over the last several decades as programmers have moved from machine code to Java -- is to define more robust, higher-level programming languages for implementing network policies.  However, there are technical and pragmatic hurdles to surmount before it will be possible to deploy new languages in industrial settings on a large scale.  In particular, existing network-wide policy languages are not expressive enough for many desired network policies and often require wholesale migration to new networking platforms.  Hence, the overarching goal of this project is to surmount the technical challenges that impede practical deployment of high-level network programming languages. The project is developing the core technology necessary to efficiently support and incrementally deploy high-level network policies.  The project leverages connections to two major cloud providers as a means to test the resulting languages and systems on real industrial networks, identify pragmatic barriers to adoption, and ultimately deploy the technology where possible.\r\n\r\nThe project builds on the PIs' recent work on Propane, a new network programming language that allows users to describe end-to-end paths for intra- and inter-domain routing, along with a compiler that produces configurations for the industry-standard BGP protocol.  The results of this project will extend Propane in several ways to support practical deployment:   First, users will be able to declare device roles (e.g., top-of-rack switch) and the connectivity invariants related to them to enable concise specifications. A new compiler will verify safety properties of policies in the presence of such declarations and generate parameterized templates that make compiler outputs more intelligible for operators.  Second, users will specify financial contracts that govern transit costs using a new declarative language and the compiler will optimize routes automatically by generating refined policies that meet objectives.  Third, the Butane compiler will target and exploit the benefits of heterogeneous back-end protocols and platforms.  Fourth, tools will help network operators infer new high-level configurations from existing low-level configurations and to verify that new configurations are equivalent to old ones.  Finally, Butane will support mixed mode (legacy- and high-level network operations) so engineers can migrate their networks slowly over time and test partial deployment on small fractions of their live traffic.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Todd",
   "pi_last_name": "Millstein",
   "pi_mid_init": "D",
   "pi_sufx_name": "",
   "pi_full_name": "Todd D Millstein",
   "pi_email_addr": "todd@cs.ucla.edu",
   "nsf_id": "000229495",
   "pi_start_date": "2017-06-08",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "George",
   "pi_last_name": "Varghese",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "George Varghese",
   "pi_email_addr": "varghese@cs.ucla.edu",
   "nsf_id": "000250977",
   "pi_start_date": "2017-06-08",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of California-Los Angeles",
  "inst_street_address": "10889 WILSHIRE BLVD STE 700",
  "inst_street_address_2": "",
  "inst_city_name": "LOS ANGELES",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "3107940102",
  "inst_zip_code": "900244200",
  "inst_country_name": "United States",
  "cong_dist_code": "36",
  "st_cong_dist_code": "CA36",
  "org_lgl_bus_name": "UNIVERSITY OF CALIFORNIA, LOS ANGELES",
  "org_prnt_uei_num": "",
  "org_uei_num": "RN64EPNH8JC6"
 },
 "perf_inst": {
  "perf_inst_name": "University of California-Los Angeles",
  "perf_str_addr": "420 Westwood Plaza",
  "perf_city_name": "Los Angeles",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "900951596",
  "perf_ctry_code": "US",
  "perf_cong_dist": "36",
  "perf_st_cong_dist": "CA36",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "736300",
   "pgm_ele_name": "Networking Technology and Syst"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 165914.0
  },
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 149166.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 154968.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 159952.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>All sectors of society depend on properly functioning computer networks. For example, every day, millions of people order prescription drug refills, pay their electricity bills, book hotels, shop for groceries, and participate in thousands more activities online, through the cloud. But none of these services will work if the networks that deliver information are down. Many network outages are caused by operators manually (and incorrectly) programming the <em>configuration files</em> that manage the ways that network devices send and receive information. Further, because the global consequences of making even small configuration changes is so drastic, many organizations take several weeks to audit even small changes, limiting their ability to respond effectively to traffic fluctuations, business opportunities, security threats and hardware failures.<br /><br />A natural solution to these problems -- analogous to the trend in programming languages for software development over the last several decades -- is to define more robust, higher-level programming languages for implementing network policies. However, there are technical and pragmatic hurdles to surmount before it will be possible to deploy new languages in industrial settings on a large scale. The overarching goal of this project was to surmount the technical challenges that impede practical deployment of high-level network programming languages and network abstractions, and more generally to craft tools that will lead to more reliable network operation.<br /><br />One way to support the transition from low-level configurations to higher-level<br />programming languages is to develop tools capable of automatically inferring<br />high-level intent from low-level configuration.&nbsp; This task was a focus of the research efforts in this project.&nbsp; Two complementary techniques and associated tools were developed. Longer-term these tools can support migration of configurations to a network programming language, but they also have immediate value in identifying configuration errors and have been used for that purpose in the networks of major corporations.<br /><br />First, the SelfStarter tool automatically infers <em>configuration templates</em> from a given set of configurations.&nbsp; By design many nodes' configurations are intended to be highly similar to one another (e.g., all nodes playing the same role in the network). However, these configurations often have a variety of intentional policy differences across nodes (e.g., the treatment of local hosts or services). SelfStarter automatically infers a set of parameterized configuration templates that succinctly capture the similarities and differences among these configurations. Its results make it easy to identify configuration <em>outliers</em> -- a small number of configurations that differ from most others.&nbsp; SelfStarter identified dozens of configuration errors in real-world networks.<br /><br />Second, the Campion tool automatically identifies semantic differences between two configurations and localizes the causes of those differences to the relevant configuration lines. The task of comparing configurations for equivalence arises often in large networks. For example, it is common for pairs of routers from different manufacturers (to avoid replicating implementation bugs) to serve as backups for one another. Whenever one router in the pair is updated, the other must be consistently updated, which is non-trivial if they use different configuration formats. A second important case is router replacement. Routers are periodically upgraded from one manufacturer to another with better features or cost. Campion's results make it easy to identify and localize configuration errors -- unintended semantic differences between routers' configurations -- and it has successfully identified important errors in real-world networks.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 07/13/2021<br>\n\t\t\t\t\tModified by: Todd&nbsp;D&nbsp;Millstein</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nAll sectors of society depend on properly functioning computer networks. For example, every day, millions of people order prescription drug refills, pay their electricity bills, book hotels, shop for groceries, and participate in thousands more activities online, through the cloud. But none of these services will work if the networks that deliver information are down. Many network outages are caused by operators manually (and incorrectly) programming the configuration files that manage the ways that network devices send and receive information. Further, because the global consequences of making even small configuration changes is so drastic, many organizations take several weeks to audit even small changes, limiting their ability to respond effectively to traffic fluctuations, business opportunities, security threats and hardware failures.\n\nA natural solution to these problems -- analogous to the trend in programming languages for software development over the last several decades -- is to define more robust, higher-level programming languages for implementing network policies. However, there are technical and pragmatic hurdles to surmount before it will be possible to deploy new languages in industrial settings on a large scale. The overarching goal of this project was to surmount the technical challenges that impede practical deployment of high-level network programming languages and network abstractions, and more generally to craft tools that will lead to more reliable network operation.\n\nOne way to support the transition from low-level configurations to higher-level\nprogramming languages is to develop tools capable of automatically inferring\nhigh-level intent from low-level configuration.  This task was a focus of the research efforts in this project.  Two complementary techniques and associated tools were developed. Longer-term these tools can support migration of configurations to a network programming language, but they also have immediate value in identifying configuration errors and have been used for that purpose in the networks of major corporations.\n\nFirst, the SelfStarter tool automatically infers configuration templates from a given set of configurations.  By design many nodes' configurations are intended to be highly similar to one another (e.g., all nodes playing the same role in the network). However, these configurations often have a variety of intentional policy differences across nodes (e.g., the treatment of local hosts or services). SelfStarter automatically infers a set of parameterized configuration templates that succinctly capture the similarities and differences among these configurations. Its results make it easy to identify configuration outliers -- a small number of configurations that differ from most others.  SelfStarter identified dozens of configuration errors in real-world networks.\n\nSecond, the Campion tool automatically identifies semantic differences between two configurations and localizes the causes of those differences to the relevant configuration lines. The task of comparing configurations for equivalence arises often in large networks. For example, it is common for pairs of routers from different manufacturers (to avoid replicating implementation bugs) to serve as backups for one another. Whenever one router in the pair is updated, the other must be consistently updated, which is non-trivial if they use different configuration formats. A second important case is router replacement. Routers are periodically upgraded from one manufacturer to another with better features or cost. Campion's results make it easy to identify and localize configuration errors -- unintended semantic differences between routers' configurations -- and it has successfully identified important errors in real-world networks.\n\n\t\t\t\t\tLast Modified: 07/13/2021\n\n\t\t\t\t\tSubmitted by: Todd D Millstein"
 }
}