{
 "awd_id": "1718713",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SaTC: CORE: Small: Relational Verification for Information Assurance and Privacy",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2017-08-01",
 "awd_exp_date": "2023-07-31",
 "tot_intn_awd_amt": 451931.0,
 "awd_amount": 451931.0,
 "awd_min_amd_letter_date": "2017-07-20",
 "awd_max_amd_letter_date": "2022-06-11",
 "awd_abstract_narration": "The project investigates how flows of information through cybersystems can be accurately detected, controlled, and explained.  Methods from programming languages and mathematical logic are being extended to enable the analysis of information flow, that is, to address data confidentiality and integrity requirements that must be met to achieve security and privacy goals. These analyses are the basis for making systems transparent in the sense that stakeholders will be able to see and understand the flows of information in cyberspace.  The research has the potential to transform computing practice by ensuring accountability of system designers and builders through evidence that includes mathematically precise specifications and proofs.  By advancing the science of security, and bringing that science into K-12 education, this project is helping to broaden society's understanding of computational thinking to include principle-based models of security and privacy. This in turn will reduce security risks due to user behaviors, and increase the adoption of beneficial IT systems while protecting individual privacy.\r\n\r\nBy formulating inference and verification problems in terms of relational logic, wherein pairs of programs and program executions are compared, the research addresses core problems such as translating programs in high level domain-specific languages into lower level language with good performance and without risk of security vulnerabilities and privacy violations.  Another problem addressed is correctness by construction, through instrumentation that monitors information flow within and across abstraction layers.  This research is helping to make it possible for cybersystems to be designed and evaluated on the basis of evidence including formal specification and proof for end-to-end requirements, resting on machine-checked formal proofs of system components and their compositions.  The project is making possible programming frameworks that enable building security in, and enabling tool developers and security analysts to more quickly address new concerns -- threats, platforms, languages -- with benefit of reusable modular theories and techniques.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "David",
   "pi_last_name": "Naumann",
   "pi_mid_init": "A",
   "pi_sufx_name": "",
   "pi_full_name": "David A Naumann",
   "pi_email_addr": "naumann@cs.stevens.edu",
   "nsf_id": "000331140",
   "pi_start_date": "2017-07-20",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Stevens Institute of Technology",
  "inst_street_address": "ONE CASTLE POINT ON HUDSON",
  "inst_street_address_2": "",
  "inst_city_name": "HOBOKEN",
  "inst_state_code": "NJ",
  "inst_state_name": "New Jersey",
  "inst_phone_num": "2012168762",
  "inst_zip_code": "070305906",
  "inst_country_name": "United States",
  "cong_dist_code": "08",
  "st_cong_dist_code": "NJ08",
  "org_lgl_bus_name": "THE TRUSTEES OF THE STEVENS INSTITUTE OF TECHNOLOGY",
  "org_prnt_uei_num": "",
  "org_uei_num": "JJ6CN5Y5A2R5"
 },
 "perf_inst": {
  "perf_inst_name": "Stevens Institute of Technology",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "NJ",
  "perf_st_name": "New Jersey",
  "perf_zip_code": "070305991",
  "perf_ctry_code": "US",
  "perf_cong_dist": "08",
  "perf_st_cong_dist": "NJ08",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "9178",
   "pgm_ref_txt": "UNDERGRADUATE EDUCATION"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 451931.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The aim of this project was to investigate how flows of information through cybersystems can be detected, controlled, and explained.&nbsp; The ultimate goal is to make it possible for cybersystems to be designed and evaluated on the basis of evidence including formal specifications of end-to-end security and privacy requirements, resting on formal proofs of system components and their compositions.&nbsp; The research supports programming frameworks that enable tool developers and security analysts to quickly address new concerns -- threats, platforms, languages -- with benefit of reusable modular theories and techniques. &nbsp;<br /><br />Intellectual merit: <br /><br />The primary technical focus of the project is relational program logics, which are deductive systems for proving properties that involve two program executions.&nbsp; One such property is behavioral equivalence between two programs, for example between an improved program and its predecessor, or between a source program and a version that has been hardened with security mechanisms.&nbsp; Another two-execution property, nonintereference, the basis to specify confidentiality and integrity requirements. &nbsp;<br /><br />One major outcome is a deductive system, relational region logic (RelRL), its&nbsp; formal validation with respect to program semantics, and its experimental validation using a prototype tool based on the logic.&nbsp; RelRL advances the state of the art by effectively handling pointer-based dynamically allocated data structures, which are pervasive in practice and which pose challenges for formalization.&nbsp; Using RelRL, researchers settled an open problem dating from 1972: proofs of equivalence of data representations for pointer programs.&nbsp; Data abstraction is essential for modular software development.&nbsp; Evaluations of RelRL demonstrated its effectiveness on representative programs beyond the scope of state of the art automated reasoning systems.&nbsp; A key feature of RelRL supports reasoning by \"aligning\" related subprograms.<br /><br />From prior work it was known that, for successful relational verification, good alignment is crucial.&nbsp; The standard notion of logical completeness failed to account for this.&nbsp; One project outcome is a new theory called alignment completeness which is applicable to any relational logic and which shed light on the limitations of prior work.&nbsp; One finding of the project is that for alignment completeness, a relational logic should include means to rewrite program control structure.&nbsp; The well established algebraic theory of control structure called Kleene Algebra with Tests (KAT) serves this purpose well. &nbsp;<br /><br />Another outcome of this project is the development of an algebraic theory, BiKAT,&nbsp; which extends KAT to explicit reasoning about alignment.&nbsp; Its development led to discovery of proof rules for \"forall-exists properties\" that capture security and other requirements for nondeterministic programs.&nbsp; This in turn led to development of a new deductive system that is alignment complete for such properties.&nbsp; It also led to development of a complete automata-based method for proving such properties.<br /><br />High level system security requirements may best be formulated in terms of knowledge: what can an adversary learn from observing the system.&nbsp; Mathematically, knowledge is a so-called hyperproperty, formulated in terms of multiple system executions.&nbsp; One outcome of this project formulates knowledge-based security properties in a way that accounts for confidentiality policies that allow downgrading of sensitive information under specific conditions.&nbsp; This formulation serves as basis for enforcement by means of runtime monitoring as well as statically by modular verification using relational logics.&nbsp; This approach has been realized in a verification tool for C programs that has been used to prove security of programs including a sealed-bid auction server and a differentially-private location service.<br /><br />Tools based on deductive logics require verification expertise on the part of their users.&nbsp; Type systems are within the expertise of ordinary software developers, and basic confidentiality policies can be enforced on source programs by means of special-purpose type systems.&nbsp; One outcome of this project is a way to encode security policy using a standard type system that supports data abstraction, and to establish the security guaranteed by this encoding based on the existing data abstraction property. &nbsp;<br /><br />Broader impact: &nbsp;<br /><br />This research advanced the science needed for static and dynamic techniques for achieving strong assurance of information flow security.&nbsp; The ultimate impact will be improved security and privacy for software systems. &nbsp;<br /><br />These outcomes are documented in a number of peer-reviewed publications.&nbsp; Publically available artifacts from the project include prototype tools for relational verification, a malloc/free system verified using the Verified Software Toolchain, and several verification case studies.<br /><br />The award supported research training for a post-doctoral researcher, two PhD students, and several undergraduates.&nbsp; Drawing on results from the project, the PI developed a new course on Formal Verification of Hyperproperties.</p><br>\n<p>\n Last Modified: 11/29/2023<br>\nModified by: David&nbsp;A&nbsp;Naumann</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nThe aim of this project was to investigate how flows of information through cybersystems can be detected, controlled, and explained. The ultimate goal is to make it possible for cybersystems to be designed and evaluated on the basis of evidence including formal specifications of end-to-end security and privacy requirements, resting on formal proofs of system components and their compositions. The research supports programming frameworks that enable tool developers and security analysts to quickly address new concerns -- threats, platforms, languages -- with benefit of reusable modular theories and techniques. \n\nIntellectual merit: \n\nThe primary technical focus of the project is relational program logics, which are deductive systems for proving properties that involve two program executions. One such property is behavioral equivalence between two programs, for example between an improved program and its predecessor, or between a source program and a version that has been hardened with security mechanisms. Another two-execution property, nonintereference, the basis to specify confidentiality and integrity requirements. \n\nOne major outcome is a deductive system, relational region logic (RelRL), its formal validation with respect to program semantics, and its experimental validation using a prototype tool based on the logic. RelRL advances the state of the art by effectively handling pointer-based dynamically allocated data structures, which are pervasive in practice and which pose challenges for formalization. Using RelRL, researchers settled an open problem dating from 1972: proofs of equivalence of data representations for pointer programs. Data abstraction is essential for modular software development. Evaluations of RelRL demonstrated its effectiveness on representative programs beyond the scope of state of the art automated reasoning systems. A key feature of RelRL supports reasoning by \"aligning\" related subprograms.\n\nFrom prior work it was known that, for successful relational verification, good alignment is crucial. The standard notion of logical completeness failed to account for this. One project outcome is a new theory called alignment completeness which is applicable to any relational logic and which shed light on the limitations of prior work. One finding of the project is that for alignment completeness, a relational logic should include means to rewrite program control structure. The well established algebraic theory of control structure called Kleene Algebra with Tests (KAT) serves this purpose well. \n\nAnother outcome of this project is the development of an algebraic theory, BiKAT, which extends KAT to explicit reasoning about alignment. Its development led to discovery of proof rules for \"forall-exists properties\" that capture security and other requirements for nondeterministic programs. This in turn led to development of a new deductive system that is alignment complete for such properties. It also led to development of a complete automata-based method for proving such properties.\n\nHigh level system security requirements may best be formulated in terms of knowledge: what can an adversary learn from observing the system. Mathematically, knowledge is a so-called hyperproperty, formulated in terms of multiple system executions. One outcome of this project formulates knowledge-based security properties in a way that accounts for confidentiality policies that allow downgrading of sensitive information under specific conditions. This formulation serves as basis for enforcement by means of runtime monitoring as well as statically by modular verification using relational logics. This approach has been realized in a verification tool for C programs that has been used to prove security of programs including a sealed-bid auction server and a differentially-private location service.\n\nTools based on deductive logics require verification expertise on the part of their users. Type systems are within the expertise of ordinary software developers, and basic confidentiality policies can be enforced on source programs by means of special-purpose type systems. One outcome of this project is a way to encode security policy using a standard type system that supports data abstraction, and to establish the security guaranteed by this encoding based on the existing data abstraction property. \n\nBroader impact: \n\nThis research advanced the science needed for static and dynamic techniques for achieving strong assurance of information flow security. The ultimate impact will be improved security and privacy for software systems. \n\nThese outcomes are documented in a number of peer-reviewed publications. Publically available artifacts from the project include prototype tools for relational verification, a malloc/free system verified using the Verified Software Toolchain, and several verification case studies.\n\nThe award supported research training for a post-doctoral researcher, two PhD students, and several undergraduates. Drawing on results from the project, the PI developed a new course on Formal Verification of Hyperproperties.\t\t\t\t\tLast Modified: 11/29/2023\n\n\t\t\t\t\tSubmitted by: DavidANaumann\n"
 }
}