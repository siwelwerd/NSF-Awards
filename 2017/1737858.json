{
 "awd_id": "1737858",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: New Frontiers in Constraint-Based Program Analysis",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2017-01-15",
 "awd_exp_date": "2019-08-31",
 "tot_intn_awd_amt": 425540.0,
 "awd_amount": 425540.0,
 "awd_min_amd_letter_date": "2017-03-21",
 "awd_max_amd_letter_date": "2017-03-21",
 "awd_abstract_narration": "Title: SHF:Small:New Frontiers in Constraint-Based Program Analysis\r\n\r\nConstraint-based analysis is a popular approach to program analysis: it allows to separate analysis specification from analysis implementation, it enables sophisticated implementations by leveraging advances in off-the-shelf solvers, and it provides natural program specifications as constraints.  This project proposes Dominoes, a framework that extends the benefits of constraint-based analysis by enabling automatic synthesis of common and emerging use-cases of program analyses, such as finding good abstractions, analyzing incomplete programs, and incorporating user feedback.  The intellectual merit of this project is to fundamentally advance demand-driven, compositional, and learning-based analysis techniques. By automatically synthesizing use-cases once and for all, Dominoes amplifies the traditional benefits of constraint-based analysis, liberating analysis designers from having to re-implement those use-cases for their analyses.  The project's broader significance and importance lies in enhancing the applicability and usefulness of program analyses by making them more automated, scalable, and flexible.  Artifacts embodying these analyses will improve software quality in aspects of reliability, security, performance, and energy efficiency.  Dominoes will also improve the productivity of analysis users by allowing them to adapt analyses to their feedback.\r\n\r\nDominoes automatically synthesizes implementations of use-cases for any program analysis expressed in Datalog, a popular declarative logic programming language.  Existing constraint-based analysis frameworks predominantly focus on solving hard constraints, whereas Dominoes also accommodates soft constraints that arise naturally in diverse use-cases of program analysis, e.g., to model various tradeoffs, intuitions of analysis users, and missing program specifications.  The versatility of Dominoes is demonstrated by applying it to three important use-cases: client-driven analysis, summary-based analysis, and user-guided analysis.  Despite their diversity, all three use-cases entail solving instances of the maximum satisfiability (MaxSAT) problem, which consists of a combination of hard (inviolable) constraints and soft (violable) constraints.  Solving such mixed constraints is not only computationally hard but also poses the problem of specifying weights or confidences of soft constraints.  Dominoes develops MaxSAT optimizations comprising demand-driven, compositional, and learning-based methods that are general and independent of any analysis, use-case, or solver, and aim to scale to instances well beyond the reach of existing MaxSAT solvers.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Mayur",
   "pi_last_name": "Naik",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Mayur Naik",
   "pi_email_addr": "mhnaik@cis.upenn.edu",
   "nsf_id": "000601297",
   "pi_start_date": "2017-03-21",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Pennsylvania",
  "inst_street_address": "3451 WALNUT ST STE 440A",
  "inst_street_address_2": "",
  "inst_city_name": "PHILADELPHIA",
  "inst_state_code": "PA",
  "inst_state_name": "Pennsylvania",
  "inst_phone_num": "2158987293",
  "inst_zip_code": "191046205",
  "inst_country_name": "United States",
  "cong_dist_code": "03",
  "st_cong_dist_code": "PA03",
  "org_lgl_bus_name": "TRUSTEES OF THE UNIVERSITY OF PENNSYLVANIA, THE",
  "org_prnt_uei_num": "GM1XX56LEP58",
  "org_uei_num": "GM1XX56LEP58"
 },
 "perf_inst": {
  "perf_inst_name": "University of Pennsylvania",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "PA",
  "perf_st_name": "Pennsylvania",
  "perf_zip_code": "191046205",
  "perf_ctry_code": "US",
  "perf_cong_dist": "03",
  "perf_st_cong_dist": "PA03",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 425540.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p class=\"p1\"><span class=\"s1\">Program analysis is a dominant approach to ensuring software quality in aspects spanning reliability, security, and performance.&nbsp;</span>This project developed a general and extensible framework called Dominoes to enhance the applicability and usefulness of program analyses by making them more automated, scalable, and flexible.<br /><span class=\"s1\"><br />The Dominoes framework builds upon the popular paradigm of constraint-based program analysis wherein&nbsp;</span>the analysis specification is separated from the analysis implementation. This paradigm provides numerous benefits such as simplifying reasoning about the analysis correctness and leveraging off-the-shelf solvers for executing the analysis efficiently. The Dominoes framework extends these benefits by enabling to automatically synthesize common and emerging use-cases of program analysis, such as finding good abstractions, analyzing incomplete programs, and incorporating user feedback. It thereby alleviates the need for analysis designers to re-implement these use-cases for different analyses.</p>\n<p class=\"p1\"><br />The Dominoes framework comprises two parts: 1) a front-end wherein use-cases are automatically synthesized for arbitrary analyses expressed in Datalog, a declarative logic programming language, and 2) a back-end wherein MaxSAT-based optimizations are applied to scale the use-cases to large programs.&nbsp; MaxSAT, the optimization extension of the classic Boolean Satisfiability (SAT) problem, is a natural fit since the use-cases induce a combination of hard constraints and soft constraints: the hard constraints allow to encode analysis integrity constraints, such as soundness or completeness, while the soft constraints allow to encode objective functions, such as minimizing user effort or abstraction cost.<br /><br />The methodology is demonstrated for realistic analyses implemented for the C and Java programming languages, such as checkers for memory-safety, concurrency-safety, type-state properties, and secure information flow. These analyses are evaluated on widely-used open-source programs such as UNIX coreutil C programs and the Dacapo suite of enterprise Java programs.<br /><br />Doctoral students and postdoctoral scholars were trained in conducting the research.&nbsp;All software artifacts developed in the project are open source and publicly available. The research results have been incorporated into online and on-campus courses for undergraduate and graduate students. These courses impart valuable hands-on experience with developing constraint-based analyses atop the LLVM compiler infrastructure and the Z3 constraint solver.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 12/24/2019<br>\n\t\t\t\t\tModified by: Mayur&nbsp;Naik</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "Program analysis is a dominant approach to ensuring software quality in aspects spanning reliability, security, and performance. This project developed a general and extensible framework called Dominoes to enhance the applicability and usefulness of program analyses by making them more automated, scalable, and flexible.\n\nThe Dominoes framework builds upon the popular paradigm of constraint-based program analysis wherein the analysis specification is separated from the analysis implementation. This paradigm provides numerous benefits such as simplifying reasoning about the analysis correctness and leveraging off-the-shelf solvers for executing the analysis efficiently. The Dominoes framework extends these benefits by enabling to automatically synthesize common and emerging use-cases of program analysis, such as finding good abstractions, analyzing incomplete programs, and incorporating user feedback. It thereby alleviates the need for analysis designers to re-implement these use-cases for different analyses.\n\nThe Dominoes framework comprises two parts: 1) a front-end wherein use-cases are automatically synthesized for arbitrary analyses expressed in Datalog, a declarative logic programming language, and 2) a back-end wherein MaxSAT-based optimizations are applied to scale the use-cases to large programs.  MaxSAT, the optimization extension of the classic Boolean Satisfiability (SAT) problem, is a natural fit since the use-cases induce a combination of hard constraints and soft constraints: the hard constraints allow to encode analysis integrity constraints, such as soundness or completeness, while the soft constraints allow to encode objective functions, such as minimizing user effort or abstraction cost.\n\nThe methodology is demonstrated for realistic analyses implemented for the C and Java programming languages, such as checkers for memory-safety, concurrency-safety, type-state properties, and secure information flow. These analyses are evaluated on widely-used open-source programs such as UNIX coreutil C programs and the Dacapo suite of enterprise Java programs.\n\nDoctoral students and postdoctoral scholars were trained in conducting the research. All software artifacts developed in the project are open source and publicly available. The research results have been incorporated into online and on-campus courses for undergraduate and graduate students. These courses impart valuable hands-on experience with developing constraint-based analyses atop the LLVM compiler infrastructure and the Z3 constraint solver.\n\n\t\t\t\t\tLast Modified: 12/24/2019\n\n\t\t\t\t\tSubmitted by: Mayur Naik"
 }
}