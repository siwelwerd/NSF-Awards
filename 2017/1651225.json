{
 "awd_id": "1651225",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CAREER:  The Next 700 Solver-Aided Languages",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2017-02-01",
 "awd_exp_date": "2022-01-31",
 "tot_intn_awd_amt": 498577.0,
 "awd_amount": 498577.0,
 "awd_min_amd_letter_date": "2017-02-08",
 "awd_max_amd_letter_date": "2021-05-19",
 "awd_abstract_narration": "Software is a critical part of modern infrastructure, and programming is an essential part of knowledge work in many fields, from physics to biology to social science. Yet translating algorithms and ideas into code is no easy task, and mistakes can be costly. A bug in a script can invalidate scientific results, and a bug in a file system can cause catastrophic loss of data. This project makes programming easier for systems programmers and scientists alike, through a novel approach to programming that automates domain-specific languages (DSLs) with solver-aided tools for program verification and synthesis. The intellectual merits are to advance knowledge in programming support for domain-specific verification and synthesis, in co-design of languages and tools, and in applying solver-aided programming to new domains. The project's broader significance and importance are to extend the reach of solver-aided programming by orders of magnitude and to thousands of programmers, facilitating new applications with societal, educational, and industrial impact.\r\n\r\nThe project's key idea is to make verification and synthesis tools, which are usually hand-crafted by computer science PhDs, as simple to build as DSLs, which are developed by a broad spectrum of programmers. The PI's prior work on solver-aided languages has demonstrated that this is possible, enabling a wide range of programmers, from professional developers to high-school students, to rapidly construct synthesis and verification tools for a variety of domains, from radiation therapy software to low-power computing to K-12 education. The resulting tools are based on reduction to Satisfiability Modulo Theories (SMT) solving, and as such, rely on technology that is (1) fundamentally intractable and (2) requires years of experience and training to use effectively. The goal of this proposal is thus to address the central challenge of solver-aided programming: enabling non-experts to diagnose and optimize the performance of solver-aided tools. To achieve this goal, the project develops automatic techniques for (1) symbolic profiling to provide diagnostic information about the causes of scalability bottlenecks across the solver-aided stack; (2) symbolic optimization to mitigate the identified scalability bottlenecks via code refactoring, (meta)sketch mining, and combination of solving engines; and (3) applications to serve as new challenge problems for evaluating symbolic profiling and optimization, and as demos for attracting a diverse population of users, from computer architects to education experts.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Emina",
   "pi_last_name": "Torlak",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Emina Torlak",
   "pi_email_addr": "emina@cs.washington.edu",
   "nsf_id": "000642956",
   "pi_start_date": "2017-02-08",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Washington",
  "inst_street_address": "4333 BROOKLYN AVE NE",
  "inst_street_address_2": "",
  "inst_city_name": "SEATTLE",
  "inst_state_code": "WA",
  "inst_state_name": "Washington",
  "inst_phone_num": "2065434043",
  "inst_zip_code": "981951016",
  "inst_country_name": "United States",
  "cong_dist_code": "07",
  "st_cong_dist_code": "WA07",
  "org_lgl_bus_name": "UNIVERSITY OF WASHINGTON",
  "org_prnt_uei_num": "",
  "org_uei_num": "HD1WMN6945W6"
 },
 "perf_inst": {
  "perf_inst_name": "University of Washington",
  "perf_str_addr": "Box 352350",
  "perf_city_name": "Seattle",
  "perf_st_code": "WA",
  "perf_st_name": "Washington",
  "perf_zip_code": "981952350",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "WA07",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "1045",
   "pgm_ref_txt": "CAREER-Faculty Erly Career Dev"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0121",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 92035.0
  },
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 95862.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 99604.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 103504.0
  },
  {
   "fund_oblg_fiscal_yr": 2021,
   "fund_oblg_amt": 107572.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><div id=\"titlearea\">\n<div class=\"title\">\n<div id=\"titlearea\">\n<div class=\"title\">2022 CAREER Project Outcomes</div>\n</div>\n<div id=\"contentarea\">\n<div class=\"cell markdown-cell\">\n<p>The goal of this project was to advance knowledge in programming support for domain-specific verification and synthesis, in co-design of languages and tools, and in applying solver-aided programming to new domains. We also aimed to extend the reach of solver-aided programming and facilitate new applications with societal, educational, and industrial impact.</p>\n<p><strong>Intellectual merit.</strong>&nbsp;To meet these goals, we developed new tools for improving the performance of solver-aided programs (OOPSLA'18 and VMCAI'20), a new type system (POPL'17) and symbolic semantics (POPL'22) for solver-aided host languages, a way to develop verified solver-aided tools within a proof assistant (ICFP'17), and new applications of solver-aided programming that cover a wide range of domains. These applications include both synthesis and verification tools. We developed tools for synthesizing memory consistency models (PLDI'17), algebra tutoring rules (VMCAI'18), puzzles solving strategies (FDG'17), fast GPU kernels (ASPLOS'19), and just-in-time (JIT) compilers for DSLs used in OS kernels (CAV'20). We also developed tools for verifying smart contracts (ASE'20), systems software such as security monitors (SOSP'19), and the JIT compilers for the Berkeley Packet Filter language embedded in the Linux kernel (OSDI'20). All of our tools are publicly available on GitHub, along with a new version of the Rosette solver-aided host language that has been developed as part of this project.</p>\n<p><strong>Broader impacts.</strong>&nbsp;This project provided research opportunities and assistantships to several PhD students. The students conducted original research in a broad range of disciplines, including formal methods, language design, compilers, operating systems, and game design. The tools and ideas developed in this project are actively used in education and in industry. Rosette is used in teaching formal methods, systems, architecture, programming languages, and database courses, both at the PI's institution and at other universities. Rosette has also been used at several companies to develop new verification and synthesis tools. The JIT verifier developed as part of this project has been used to verify all eBPF JIT compilers in the Linux kernels and to build a new verified JIT compiler from scratch. We used the verifier to find bugs in the JITs, develop patches, and develop new optimizations. All of these results have been upstreamed to Linux.</p>\n</div>\n</div>\n</div>\n</div><br>\n<p>\n\t\t\t\t      \tLast Modified: 05/12/2022<br>\n\t\t\t\t\tModified by: Emina&nbsp;Torlak</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n\n\n2022 CAREER Project Outcomes\n\n\n\n\nThe goal of this project was to advance knowledge in programming support for domain-specific verification and synthesis, in co-design of languages and tools, and in applying solver-aided programming to new domains. We also aimed to extend the reach of solver-aided programming and facilitate new applications with societal, educational, and industrial impact.\n\nIntellectual merit. To meet these goals, we developed new tools for improving the performance of solver-aided programs (OOPSLA'18 and VMCAI'20), a new type system (POPL'17) and symbolic semantics (POPL'22) for solver-aided host languages, a way to develop verified solver-aided tools within a proof assistant (ICFP'17), and new applications of solver-aided programming that cover a wide range of domains. These applications include both synthesis and verification tools. We developed tools for synthesizing memory consistency models (PLDI'17), algebra tutoring rules (VMCAI'18), puzzles solving strategies (FDG'17), fast GPU kernels (ASPLOS'19), and just-in-time (JIT) compilers for DSLs used in OS kernels (CAV'20). We also developed tools for verifying smart contracts (ASE'20), systems software such as security monitors (SOSP'19), and the JIT compilers for the Berkeley Packet Filter language embedded in the Linux kernel (OSDI'20). All of our tools are publicly available on GitHub, along with a new version of the Rosette solver-aided host language that has been developed as part of this project.\n\nBroader impacts. This project provided research opportunities and assistantships to several PhD students. The students conducted original research in a broad range of disciplines, including formal methods, language design, compilers, operating systems, and game design. The tools and ideas developed in this project are actively used in education and in industry. Rosette is used in teaching formal methods, systems, architecture, programming languages, and database courses, both at the PI's institution and at other universities. Rosette has also been used at several companies to develop new verification and synthesis tools. The JIT verifier developed as part of this project has been used to verify all eBPF JIT compilers in the Linux kernels and to build a new verified JIT compiler from scratch. We used the verifier to find bugs in the JITs, develop patches, and develop new optimizations. All of these results have been upstreamed to Linux.\n\n\n\n\n\n\t\t\t\t\tLast Modified: 05/12/2022\n\n\t\t\t\t\tSubmitted by: Emina Torlak"
 }
}