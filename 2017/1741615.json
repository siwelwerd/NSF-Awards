{
 "awd_id": "1741615",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CAREER: Common Links in Algorithms and Complexity",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "A. Funda Ergun",
 "awd_eff_date": "2017-01-20",
 "awd_exp_date": "2021-11-30",
 "tot_intn_awd_amt": 503312.0,
 "awd_amount": 503312.0,
 "awd_min_amd_letter_date": "2017-04-30",
 "awd_max_amd_letter_date": "2020-02-11",
 "awd_abstract_narration": "The field of algorithm design builds clever programs that can quickly solve computational problems of interest. The field of complexity theory mathematically proves \"lower bounds,\" showing that no such clever program exists for (other) core problems. Intuitively, it appears that these two fields work on polar-opposite tasks. The major goal of this project is to discover counter-intuitive new connections between algorithm design and complexity theory, and to study the scientific consequences of the bridges built by these connections. It is hard to overestimate the potential impact---societal, scientific, and otherwise---of a theoretical framework which would lead to a fine-grained understanding of what computers can and cannot do. This project is focused on exploring concrete steps towards a better understanding, via studying links between the seemingly opposite tasks of algorithms and lower bounds. Another goal of the project is to bring complexity research closer to real-world computing, and to introduce practitioners to aspects of complexity that will impact their work. A final goal is educational outreach, through online forums dedicated to learning computer science, teaching summer school courses, and collaboration with the media on communicating theoretical computer science (including links between algorithms and lower bounds) to the public.\r\n\r\nThe PI seeks common links between algorithms and complexity: counter-intuitive similarities and bridges which will lead to greater insight into both areas. A central question in computer science is the famous P versus NP open problem, which is about the difficulty of combinatorial problems which admit short solutions. Such problems can always be solved via ?brute force?, trying all possible solutions. Can brute force always be replaced with a cleverer search method? This question is a major one; no satisfactory answers are known, and concrete answers seem far away. The conventional wisdom is that in general, brute force cannot be entirely avoided, but it is still mathematically possible that most natural search problems can be solved extremely rapidly, without any brute force. \r\n\r\nComputational lower bounds are among the great scientific mysteries of our time: there are many conjectures and beliefs about them, but concrete results are few. Moreover, the theory is hampered by ?complexity barriers? which show that most known proof methods are incapable of proving strong lower bounds. The PI's long-term objective is to help discover and develop new ways of thinking that will demystify lower bounds, and elucidate the limits of possibilities of computing. The PI hypothesizes that an algorithmic perspective on lower bounds is the key: for example, earlier work of the PI shows that algorithms for the circuit satisfiability problem (which slightly beat brute force search) imply circuit complexity lower bounds. The PI has developed several new links within the past few years, and has proposed many more to be investigated. Among the various angles explored in this project, the potential scientific applications are vast, ranging from logical circuit design, to network algorithms, to improved hardware and software testing, to better nearest-neighbor search (with its own applications in computer vision, DNA sequencing, and machine learning), and to cryptography and security.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Ryan",
   "pi_last_name": "Williams",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Ryan Williams",
   "pi_email_addr": "rrw@mit.edu",
   "nsf_id": "000606346",
   "pi_start_date": "2017-04-30",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Massachusetts Institute of Technology",
  "inst_street_address": "77 MASSACHUSETTS AVE",
  "inst_street_address_2": "",
  "inst_city_name": "CAMBRIDGE",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "6172531000",
  "inst_zip_code": "021394301",
  "inst_country_name": "United States",
  "cong_dist_code": "07",
  "st_cong_dist_code": "MA07",
  "org_lgl_bus_name": "MASSACHUSETTS INSTITUTE OF TECHNOLOGY",
  "org_prnt_uei_num": "E2NYLCDML6V1",
  "org_uei_num": "E2NYLCDML6V1"
 },
 "perf_inst": {
  "perf_inst_name": "Massachusetts Institute of Technology",
  "perf_str_addr": "77 Massachusetts Avenue",
  "perf_city_name": "Cambridge",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "021394307",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "MA07",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779600",
   "pgm_ele_name": "Algorithmic Foundations"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7927",
   "pgm_ref_txt": "COMPLEXITY & CRYPTOGRAPHY"
  },
  {
   "pgm_ref_code": "7926",
   "pgm_ref_txt": "ALGORITHMS"
  },
  {
   "pgm_ref_code": "1045",
   "pgm_ref_txt": "CAREER-Faculty Erly Career Dev"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 163013.0
  },
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 109889.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 113395.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 117015.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>What tasks can be solved efficiently with computers? What tasks cannot be solved in the lifetime of the universe? These are the basic questions of computational complexity theory, a branch of mathematics that studies the limits and possibilities of computing. A central question in the field (and central to all of computer science and mathematics) is the P versus NP problem, which informally asks: given an efficient method for recognizing good solutions to a problem, are there efficient methods for generating good solutions? (More formally, is P = NP?) Conventional wisdom says that the answer should be no: the ability to check solutions should not imply the ability to find them: finding should be much harder than checking. Much of cybersecurity?cryptography in particular?relies on the conventional wisdom being true. Nevertheless the question and many others like it remain unanswered. In general, the true power of efficient computation is one of the great scientific mysteries of our time.<br /><br />The goal of this project was to find new counterintuitive connections between algorithm design and complexity theory, and to develop critical new knowledge from the bridges built. At a high level, the idea was to turn computer science's considerable algorithmic knowledge on its head, utilizing this knowledge to prove limitations on computing. This project considered different ways of thinking -- via the design of particular algorithms --&nbsp; to significantly advance knowledge in complexity theory and lower bounds. Throughout the duration of this award, many new theorems were proved across theoretical computer science (algorithm design and complexity theory), showing how faster algorithms for various circuit verification problem can be used to prove lower bounds on the power of circuits. <br /><br />The project also addressed questions like \"What could a proof of P != NP (and its related problems) look like?\" (Interestingly, complexity theorists know a lot about what a proof of P != NP would NOT look like; these are the so-called \"barrier results\" in complexity theory.) Counterintuitive phenomena were discovered in 2019 and 2020, with various theorems of the form \"extremely weak-looking limitations on data compression would already imply P != NP\". The form of data compression being considered is much stronger than what is used in practice, and cryptographers widely believe that much stronger limitations on compression are possible. Time will tell whether such approaches will actually lead to proving P != NP.<br /><br />Intriguing methods for solving computational tasks were also discovered, which may well have future practical impact. To give one example from 2021, a problem that was long believed to be strongly computationally intractable (the so-called \"MAJORITY-3SAT\" problem) was in fact discovered to have a rather strange and very efficient method for solving it. Roughly speaking, MAJORITY-3SAT asks to count up the solutions to a particular NP problem and decide whether at least half of the possible solutions are in fact actual solutions. One would think that determining such a property would be much harder than finding one solution, as one has to potentially reason about vastly many possible solutions. Nevertheless, this \"counting\" problem is rather easy, while the related NP problems remain intractable, as far as we know! <br /><br />Undergraduates and graduate students were mentored in significant and successful research roles in the project, with several becoming professors themselves. New methods of teaching complexity theory and automata theory at the undergraduate and graduate level were developed. New courses were designed, and the PI plans to write monographs based on lecture notes from these courses.<br /><br />It is hard to overestimate the potential impact -- societal, scientific, and otherwise -- of a coherent mathematical framework which helps us broadly understand the limits of computing power. This project took concrete steps towards a better understanding, via studying the links between algorithmic<br />methods and lower bounds on solving problems. The project also built new bridges between algorithm design, complexity theory, and other related areas such as logic and circuit verification.<br /><br />The PI was committed to educational outreach throughout the project, through nurturing participation in online forums dedicated to algorithms and complexity, teaching summer school courses, giving invited talks far and wide, and interviews with the media to help communicate the wild ideas of theoretical computer science to the public.The course materials, research results, lecture notes, and videos developed during this project have be disseminated publicly for all.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 03/31/2022<br>\n\t\t\t\t\tModified by: Ryan&nbsp;Williams</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nWhat tasks can be solved efficiently with computers? What tasks cannot be solved in the lifetime of the universe? These are the basic questions of computational complexity theory, a branch of mathematics that studies the limits and possibilities of computing. A central question in the field (and central to all of computer science and mathematics) is the P versus NP problem, which informally asks: given an efficient method for recognizing good solutions to a problem, are there efficient methods for generating good solutions? (More formally, is P = NP?) Conventional wisdom says that the answer should be no: the ability to check solutions should not imply the ability to find them: finding should be much harder than checking. Much of cybersecurity?cryptography in particular?relies on the conventional wisdom being true. Nevertheless the question and many others like it remain unanswered. In general, the true power of efficient computation is one of the great scientific mysteries of our time.\n\nThe goal of this project was to find new counterintuitive connections between algorithm design and complexity theory, and to develop critical new knowledge from the bridges built. At a high level, the idea was to turn computer science's considerable algorithmic knowledge on its head, utilizing this knowledge to prove limitations on computing. This project considered different ways of thinking -- via the design of particular algorithms --  to significantly advance knowledge in complexity theory and lower bounds. Throughout the duration of this award, many new theorems were proved across theoretical computer science (algorithm design and complexity theory), showing how faster algorithms for various circuit verification problem can be used to prove lower bounds on the power of circuits. \n\nThe project also addressed questions like \"What could a proof of P != NP (and its related problems) look like?\" (Interestingly, complexity theorists know a lot about what a proof of P != NP would NOT look like; these are the so-called \"barrier results\" in complexity theory.) Counterintuitive phenomena were discovered in 2019 and 2020, with various theorems of the form \"extremely weak-looking limitations on data compression would already imply P != NP\". The form of data compression being considered is much stronger than what is used in practice, and cryptographers widely believe that much stronger limitations on compression are possible. Time will tell whether such approaches will actually lead to proving P != NP.\n\nIntriguing methods for solving computational tasks were also discovered, which may well have future practical impact. To give one example from 2021, a problem that was long believed to be strongly computationally intractable (the so-called \"MAJORITY-3SAT\" problem) was in fact discovered to have a rather strange and very efficient method for solving it. Roughly speaking, MAJORITY-3SAT asks to count up the solutions to a particular NP problem and decide whether at least half of the possible solutions are in fact actual solutions. One would think that determining such a property would be much harder than finding one solution, as one has to potentially reason about vastly many possible solutions. Nevertheless, this \"counting\" problem is rather easy, while the related NP problems remain intractable, as far as we know! \n\nUndergraduates and graduate students were mentored in significant and successful research roles in the project, with several becoming professors themselves. New methods of teaching complexity theory and automata theory at the undergraduate and graduate level were developed. New courses were designed, and the PI plans to write monographs based on lecture notes from these courses.\n\nIt is hard to overestimate the potential impact -- societal, scientific, and otherwise -- of a coherent mathematical framework which helps us broadly understand the limits of computing power. This project took concrete steps towards a better understanding, via studying the links between algorithmic\nmethods and lower bounds on solving problems. The project also built new bridges between algorithm design, complexity theory, and other related areas such as logic and circuit verification.\n\nThe PI was committed to educational outreach throughout the project, through nurturing participation in online forums dedicated to algorithms and complexity, teaching summer school courses, giving invited talks far and wide, and interviews with the media to help communicate the wild ideas of theoretical computer science to the public.The course materials, research results, lecture notes, and videos developed during this project have be disseminated publicly for all.\n\n\t\t\t\t\tLast Modified: 03/31/2022\n\n\t\t\t\t\tSubmitted by: Ryan Williams"
 }
}