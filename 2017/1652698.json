{
 "awd_id": "1652698",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CAREER: Stateless Network Functions: Building a Better Network Through Disaggregation",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032922935",
 "po_email": "dmedhi@nsf.gov",
 "po_sign_block_name": "Deepankar Medhi",
 "awd_eff_date": "2017-07-01",
 "awd_exp_date": "2023-06-30",
 "tot_intn_awd_amt": 627999.0,
 "awd_amount": 627999.0,
 "awd_min_amd_letter_date": "2017-04-14",
 "awd_max_amd_letter_date": "2021-07-19",
 "awd_abstract_narration": "To improve performance, security, and reliability, network practitioners have moved away from the principle of a stateless network and added stateful processing to devices such as internet firewalls, load balancers, and intrusion detection systems.  In doing so, networks have become increasingly complex and brittle.  The research objective of this proposal is to provide the foundation for a transformative network architecture based on disaggregated virtual network functions. Developing this capability will improve the performance and operation of virtualized computing systems, including compute clouds, and ultimately make US information technology capabilities more competitive.\r\n\r\nThis project will introduce the new systems and algorithms to make a disaggregated network function architecture possible, leveraging recent advances in distributed systems in low-latency data stores, and the unique properties of network processing that can be used to optimize the interface between the processing and state.  Specifically, this proposal will: 1) develop the algorithmic and system underpinnings that overcome the challenges in achieving the needed performance in the face of added latency, overhead in accessing state, and concurrent execution; and 2) create novel network management capabilities that leverage disaggregated network functions to realize a network function infrastructure that is efficient and robust to load changes, component failures, and software or configuration updates.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Eric",
   "pi_last_name": "Keller",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Eric Keller",
   "pi_email_addr": "eric.keller@colorado.edu",
   "nsf_id": "000601292",
   "pi_start_date": "2017-04-14",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Colorado at Boulder",
  "inst_street_address": "3100 MARINE ST",
  "inst_street_address_2": "STE 481 572 UCB",
  "inst_city_name": "Boulder",
  "inst_state_code": "CO",
  "inst_state_name": "Colorado",
  "inst_phone_num": "3034926221",
  "inst_zip_code": "803090001",
  "inst_country_name": "United States",
  "cong_dist_code": "02",
  "st_cong_dist_code": "CO02",
  "org_lgl_bus_name": "THE REGENTS OF THE UNIVERSITY OF COLORADO",
  "org_prnt_uei_num": "",
  "org_uei_num": "SPVKK1RC2MZ3"
 },
 "perf_inst": {
  "perf_inst_name": "University of Colorado at Boulder",
  "perf_str_addr": "425 UCB",
  "perf_city_name": "Boulder",
  "perf_st_code": "CO",
  "perf_st_name": "Colorado",
  "perf_zip_code": "803090425",
  "perf_ctry_code": "US",
  "perf_cong_dist": "02",
  "perf_st_cong_dist": "CO02",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "736300",
   "pgm_ele_name": "Networking Technology and Syst"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "1045",
   "pgm_ref_txt": "CAREER-Faculty Erly Career Dev"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0121",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 143911.0
  },
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 129014.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 133713.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 114716.0
  },
  {
   "fund_oblg_fiscal_yr": 2021,
   "fund_oblg_amt": 106645.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The high-level goal of this project is to provide the foundation for a transformative network architecture based on disaggregated network functions. This new architecture breaks the underlying assumption that state needs to be tightly coupled to a specific device, and instead proposes that the state is maintained separately and the network functions can access that state from anywhere and at any time through a well defined interface &ndash; creating a highly flexible network.&nbsp; Throughout this project, we built out the systems around this fundamental new architecture.&nbsp;We highlight two specific areas here, homing and container auto-scaling, but note advances in network analytics, accelerated network packet processing, and memory disaggregation.</p>\n<p>Homing: Homing, or placement, of virtual network functions on cloud infrastructures is a crucial step in the orchestration of network services, involving complex interactions with the cloud, SDN and service controllers.&nbsp; Traditionally, homing involves a laborious off-line process where Network Service Providers (NSPs) hand-craft service-specific homing heuristics, and pre-provision resources based on expected service load.&nbsp;&nbsp; What is becoming apparent after years of experience in production, however, is that this approach leads to a rigid approach with a reliance on excessively querying controllers for their state.&nbsp; We introduced StepNet and StepNet+, a novel compositional framework where homing instances of a service can be described through a declarative template that enables service-designers to create new homing requests with considerable ease, and an optimization framework which significantly reduces the load placed on resource controllers.</p>\n<p>Container Scaling:&nbsp; With the emergence of containerization of virtual network functions, the automated deployment, scaling, management, and failure handling of network function clusters become important issues.&nbsp;&nbsp; Recent works set container CPU and memory limits by automatically scaling containers based on resource usage. However, these systems are heavy weight and run on coarse-grained time scales, resulting in poor performance when predictions are incorrect. We introduced Escra, a container orchestrator that enables fine-grained, event-based resource allocation for a single container and distributed resource allocation to manage a collection of containers. We found resource allocation can easily adapt to sub-second intervals within and across hosts, meaning operators can cost-effectively scale resources without performance penalty. We showed Escra to be effective by comparing its slack, out of memory (OOM), and throttle performance with recently proposed systems. The overhead from our central controller is minimal, while reducing the throttle rate by anywhere from 1.8x to 7.4x and the OOM rate by 100% over the state of the art container orchestrator. We achieve these low throttle and OOM rates while also reducing the 70% CPU and memory slack by over 2.5x and 2.3x, respectively.</p>\n<p>In summary, this project successfully developed foundational techniques to enable a disaggregated architecture for network functions, and developed novel management capabilities that leverage disaggregation to create a more robust and easier to manage network infrastructure.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 10/30/2023<br>\n\t\t\t\t\tModified by: Eric&nbsp;Keller</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThe high-level goal of this project is to provide the foundation for a transformative network architecture based on disaggregated network functions. This new architecture breaks the underlying assumption that state needs to be tightly coupled to a specific device, and instead proposes that the state is maintained separately and the network functions can access that state from anywhere and at any time through a well defined interface &ndash; creating a highly flexible network.  Throughout this project, we built out the systems around this fundamental new architecture. We highlight two specific areas here, homing and container auto-scaling, but note advances in network analytics, accelerated network packet processing, and memory disaggregation.\n\nHoming: Homing, or placement, of virtual network functions on cloud infrastructures is a crucial step in the orchestration of network services, involving complex interactions with the cloud, SDN and service controllers.  Traditionally, homing involves a laborious off-line process where Network Service Providers (NSPs) hand-craft service-specific homing heuristics, and pre-provision resources based on expected service load.   What is becoming apparent after years of experience in production, however, is that this approach leads to a rigid approach with a reliance on excessively querying controllers for their state.  We introduced StepNet and StepNet+, a novel compositional framework where homing instances of a service can be described through a declarative template that enables service-designers to create new homing requests with considerable ease, and an optimization framework which significantly reduces the load placed on resource controllers.\n\nContainer Scaling:  With the emergence of containerization of virtual network functions, the automated deployment, scaling, management, and failure handling of network function clusters become important issues.   Recent works set container CPU and memory limits by automatically scaling containers based on resource usage. However, these systems are heavy weight and run on coarse-grained time scales, resulting in poor performance when predictions are incorrect. We introduced Escra, a container orchestrator that enables fine-grained, event-based resource allocation for a single container and distributed resource allocation to manage a collection of containers. We found resource allocation can easily adapt to sub-second intervals within and across hosts, meaning operators can cost-effectively scale resources without performance penalty. We showed Escra to be effective by comparing its slack, out of memory (OOM), and throttle performance with recently proposed systems. The overhead from our central controller is minimal, while reducing the throttle rate by anywhere from 1.8x to 7.4x and the OOM rate by 100% over the state of the art container orchestrator. We achieve these low throttle and OOM rates while also reducing the 70% CPU and memory slack by over 2.5x and 2.3x, respectively.\n\nIn summary, this project successfully developed foundational techniques to enable a disaggregated architecture for network functions, and developed novel management capabilities that leverage disaggregation to create a more robust and easier to manage network infrastructure.\n\n\t\t\t\t\tLast Modified: 10/30/2023\n\n\t\t\t\t\tSubmitted by: Eric Keller"
 }
}