{
 "awd_id": "1700810",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CAREER: Beyond Virtual Hardware: VMM/OS Co-Design for Lightweight, Flexible Virtualization",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032925197",
 "po_email": "mmcclure@nsf.gov",
 "po_sign_block_name": "Marilyn McClure",
 "awd_eff_date": "2016-08-23",
 "awd_exp_date": "2017-05-31",
 "tot_intn_awd_amt": 51955.0,
 "awd_amount": 51955.0,
 "awd_min_amd_letter_date": "2016-10-24",
 "awd_max_amd_letter_date": "2016-10-24",
 "awd_abstract_narration": "Virtualization is an increasingly popular strategy for users to run applications designed for one platform on another platform---the holy grail of write once, run anywhere. The caveat for virtualization is that 'anywhere' has to be a powerful system with resources to spare. In a virtual machine, users can bundle an application with all of its operating system dependences in an easily-migrated environment---as long as users are willing to drag along duplicate networking stacks, CPU schedulers, virus scanners, swapping heuristics, and so on. \r\n\r\nThis project investigates a radical restructuring of the operating system in order to reduce these redundancies and overheads.\r\n\r\nThis project is driven by a vision of the future where each application and system service runs in a dedicated virtual machine; moreover, the operating system is no longer a single piece of software running on bare hardware, but its functionality is decomposed into several independent layers between the virtual machine monitor and the unmodified application. \r\n\r\nThis project investigates previously unstudied classes of applications and host services, as well as new system layers for hardware management and storage, with the end goal of making per-application virtual machines practical on mobile devices.  If successful, this research will establish a richer scientific understanding of the trade-offs in computer system design and dramatically improve the efficiency and flexibility of modern computer systems.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Donald",
   "pi_last_name": "Porter",
   "pi_mid_init": "E",
   "pi_sufx_name": "",
   "pi_full_name": "Donald E Porter",
   "pi_email_addr": "porter@cs.unc.edu",
   "nsf_id": "000569931",
   "pi_start_date": "2016-10-24",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of North Carolina at Chapel Hill",
  "inst_street_address": "104 AIRPORT DR STE 2200",
  "inst_street_address_2": "",
  "inst_city_name": "CHAPEL HILL",
  "inst_state_code": "NC",
  "inst_state_name": "North Carolina",
  "inst_phone_num": "9199663411",
  "inst_zip_code": "275995023",
  "inst_country_name": "United States",
  "cong_dist_code": "04",
  "st_cong_dist_code": "NC04",
  "org_lgl_bus_name": "UNIVERSITY OF NORTH CAROLINA AT CHAPEL HILL",
  "org_prnt_uei_num": "D3LHU66KBLD5",
  "org_uei_num": "D3LHU66KBLD5"
 },
 "perf_inst": {
  "perf_inst_name": "University of North Carolina at Chapel Hill",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "NC",
  "perf_st_name": "North Carolina",
  "perf_zip_code": "275993175",
  "perf_ctry_code": "US",
  "perf_cong_dist": "04",
  "perf_st_cong_dist": "NC04",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "1045",
   "pgm_ref_txt": "CAREER-Faculty Erly Career Dev"
  },
  {
   "pgm_ref_code": "1187",
   "pgm_ref_txt": "PECASE- eligible"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 51955.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Virtualization is the cornerstone of modern computing<br />infrastructure---from cloud computing to mobile devices.&nbsp; A key<br />feature of virtualization is the ability to run code developed for one<br />system on another.&nbsp; The primary downside of classic virtualization is<br />the overheads; for instance, opening an 11KB spreadsheet in a virtual<br />machine (VM) requires hundreds of MB of RAM.&nbsp; In cloud computing,<br />where customers commonly run a single application in a virtual<br />machine, these overheads can harm profitability and energy efficiency,<br />by limiting how many customers can be consolidated onto a single<br />physical machine.<br /><br />This project innovated techniques to reduce these overheads for<br />unmodified application binaries.&nbsp; The flagship effort of this project<br />is the open-source Graphene library operating system (OS)---an OS<br />designed to run a single Linux application inside of a VM.&nbsp; A key<br />insight behind the Graphene design is identifying a<br />functionally-narrow \"pinch point\" in a typical OS kernel, between the<br />hardware-management functionality and the application-facing code.&nbsp; By<br />pushing most of application-facing code into a dynamically-loaded<br />library, the resulting interface between the application and virtual<br />machine monitor (VMM) can be greatly simplified---easily implemented<br />on a range of platforms.&nbsp; Graphene also contributed techniques for<br />coordinating shared abstractions across multiple library OSes.<br /><br />We note that, since this project was proposed, this work has become<br />even more relevant.&nbsp; Motivated by security, CPU vendors have been<br />introducing secure computation environments, such as Intel SGX.<br />Because of these security constraints, existing code does not work<br />without SGX-specific modifications.&nbsp; Second, cloud providers have been<br />shifting to a \"serverless\" model (e.g., Amazon Lambda), where<br />individual code snippets can be run more efficiently and at lower cost<br />than a complete virtual machine.&nbsp; Finally, a number of additional<br />engineering constraints are likely to introduce computing hardware<br />that breaks backward compatibility with applications.&nbsp; Thus, it will<br />only be more important in the future to quickly bring-up existing code<br />on new systems, possibly with subsequent modifications to address<br />performance problems or incorporate new features.<br /><br />This project also developed novel courseware to teach virtualization.<br />Despite being a cornerstone of modern computing, the interested<br />student or professional has surprisingly few resources for learning<br />how virtual machines work.&nbsp; We developed a simple virtual<br />machine monitor by adding about 1,000 lines of source code to the MIT<br />JOS pedagogical operating system (a simple OS of about 14,000 lines of<br />code).&nbsp; Students can do guided implementation exercises for<br />hands-on learning of essential concepts, including trap-and-emulate,<br />nested paging, and paravirtualization.&nbsp; This courseware has been used<br />in two dedicated virtualization courses taught by the PI, and in<br />several OS courses at multiple universities.<br /><br />Another contribution of this work is a new technique to optimize an OS<br />cache mapping human-readable names (directories) to in-memory<br />information about files.&nbsp; Our optimized directory caching scheme can<br />improve file access times in Linux by up to 26%, which, in turn, can<br />improve file system heavy workloads such as the Dovecot email server<br />by 12% or the git version control system by 29%.<br /><br />The core intellectual merit of this project is that we have<br />demonstrated the feasibility of the library OS approach to support a<br />wider range of applications than previously known.&nbsp; We have shown that<br />some overheads, such as memory, can be lowered dramatically, whereas<br />others, such as CPU, can be acceptable.&nbsp; Further, we have demonstrated<br />the portability benefits by running unmodified Linux applications on<br />Intel SGX and FreeBSD.&nbsp; We have contributed techniques for efficiently<br />coordinating shared abstractions across multiple library OSes over<br />message passing---a likely useful feature for expected future systems<br />without coherent shared memory.&nbsp; We have also contributed a new metric<br />and principles for measuring compatibility---an idea that has not been<br />formally defined and is typically treated as a binary, despite the<br />fact that many systems offer incomplete compatibility with<br />applications developed for other systems, or prior versions of the<br />same system.&nbsp; Finally, Graphene has proved useful to enable additional<br />research; several external research groups are extending, benchmarking<br />against, and contributing to the Graphene open source project.<br /><br />The broader impacts of this work are ongoing, as computer system<br />design has increasingly become a moving target.&nbsp; This project has<br />contributed a number of techniques to improve the efficiency of<br />current and future computing systems without foregoing the ability to<br />run existing applications.&nbsp; Inasmuch as these techniques can make<br />computing more efficient and less expensive, these developments will<br />unlock future discoveries and economic growth.&nbsp; The project has<br />trained a number of students in key virtualization technologies,<br />secure hardware, and operating system development, and made<br />educational materials available to many more.&nbsp; Several students<br />involved in the project are now employed by relevant technology<br />companies or will shortly begin faculty positions in computer science.<br /><br /></p><br>\n<p>\n\t\t\t\t      \tLast Modified: 06/25/2017<br>\n\t\t\t\t\tModified by: Donald&nbsp;E&nbsp;Porter</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nVirtualization is the cornerstone of modern computing\ninfrastructure---from cloud computing to mobile devices.  A key\nfeature of virtualization is the ability to run code developed for one\nsystem on another.  The primary downside of classic virtualization is\nthe overheads; for instance, opening an 11KB spreadsheet in a virtual\nmachine (VM) requires hundreds of MB of RAM.  In cloud computing,\nwhere customers commonly run a single application in a virtual\nmachine, these overheads can harm profitability and energy efficiency,\nby limiting how many customers can be consolidated onto a single\nphysical machine.\n\nThis project innovated techniques to reduce these overheads for\nunmodified application binaries.  The flagship effort of this project\nis the open-source Graphene library operating system (OS)---an OS\ndesigned to run a single Linux application inside of a VM.  A key\ninsight behind the Graphene design is identifying a\nfunctionally-narrow \"pinch point\" in a typical OS kernel, between the\nhardware-management functionality and the application-facing code.  By\npushing most of application-facing code into a dynamically-loaded\nlibrary, the resulting interface between the application and virtual\nmachine monitor (VMM) can be greatly simplified---easily implemented\non a range of platforms.  Graphene also contributed techniques for\ncoordinating shared abstractions across multiple library OSes.\n\nWe note that, since this project was proposed, this work has become\neven more relevant.  Motivated by security, CPU vendors have been\nintroducing secure computation environments, such as Intel SGX.\nBecause of these security constraints, existing code does not work\nwithout SGX-specific modifications.  Second, cloud providers have been\nshifting to a \"serverless\" model (e.g., Amazon Lambda), where\nindividual code snippets can be run more efficiently and at lower cost\nthan a complete virtual machine.  Finally, a number of additional\nengineering constraints are likely to introduce computing hardware\nthat breaks backward compatibility with applications.  Thus, it will\nonly be more important in the future to quickly bring-up existing code\non new systems, possibly with subsequent modifications to address\nperformance problems or incorporate new features.\n\nThis project also developed novel courseware to teach virtualization.\nDespite being a cornerstone of modern computing, the interested\nstudent or professional has surprisingly few resources for learning\nhow virtual machines work.  We developed a simple virtual\nmachine monitor by adding about 1,000 lines of source code to the MIT\nJOS pedagogical operating system (a simple OS of about 14,000 lines of\ncode).  Students can do guided implementation exercises for\nhands-on learning of essential concepts, including trap-and-emulate,\nnested paging, and paravirtualization.  This courseware has been used\nin two dedicated virtualization courses taught by the PI, and in\nseveral OS courses at multiple universities.\n\nAnother contribution of this work is a new technique to optimize an OS\ncache mapping human-readable names (directories) to in-memory\ninformation about files.  Our optimized directory caching scheme can\nimprove file access times in Linux by up to 26%, which, in turn, can\nimprove file system heavy workloads such as the Dovecot email server\nby 12% or the git version control system by 29%.\n\nThe core intellectual merit of this project is that we have\ndemonstrated the feasibility of the library OS approach to support a\nwider range of applications than previously known.  We have shown that\nsome overheads, such as memory, can be lowered dramatically, whereas\nothers, such as CPU, can be acceptable.  Further, we have demonstrated\nthe portability benefits by running unmodified Linux applications on\nIntel SGX and FreeBSD.  We have contributed techniques for efficiently\ncoordinating shared abstractions across multiple library OSes over\nmessage passing---a likely useful feature for expected future systems\nwithout coherent shared memory.  We have also contributed a new metric\nand principles for measuring compatibility---an idea that has not been\nformally defined and is typically treated as a binary, despite the\nfact that many systems offer incomplete compatibility with\napplications developed for other systems, or prior versions of the\nsame system.  Finally, Graphene has proved useful to enable additional\nresearch; several external research groups are extending, benchmarking\nagainst, and contributing to the Graphene open source project.\n\nThe broader impacts of this work are ongoing, as computer system\ndesign has increasingly become a moving target.  This project has\ncontributed a number of techniques to improve the efficiency of\ncurrent and future computing systems without foregoing the ability to\nrun existing applications.  Inasmuch as these techniques can make\ncomputing more efficient and less expensive, these developments will\nunlock future discoveries and economic growth.  The project has\ntrained a number of students in key virtualization technologies,\nsecure hardware, and operating system development, and made\neducational materials available to many more.  Several students\ninvolved in the project are now employed by relevant technology\ncompanies or will shortly begin faculty positions in computer science.\n\n\n\n\t\t\t\t\tLast Modified: 06/25/2017\n\n\t\t\t\t\tSubmitted by: Donald E Porter"
 }
}