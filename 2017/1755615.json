{
 "awd_id": "1755615",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CSR: Medium: Collaborative Research: FTFS: A Read/Write-Optimized Fractal Tree File System",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032925197",
 "po_email": "mmcclure@nsf.gov",
 "po_sign_block_name": "Marilyn McClure",
 "awd_eff_date": "2016-09-01",
 "awd_exp_date": "2019-08-31",
 "tot_intn_awd_amt": 50757.0,
 "awd_amount": 50757.0,
 "awd_min_amd_letter_date": "2017-09-13",
 "awd_max_amd_letter_date": "2017-09-18",
 "awd_abstract_narration": "Modern, general-purpose file systems offer poor performance on microdata operations, such as file creation and destruction, small writes to large files, and metadata updates, yet these operations are pervasive on today's computer systems.  Underlying this problem are fundamental limitations of the data structures used to organize data on disk.  This project will explore the practical efficacy of a recently-discovered category of data structures, called write-read-optimized (WRO) data structures, which have the potential to improve microdata performance dramatically without sacrificing good performance on other types of operations.  This project will bring together a team of experts from theory and systems who can bring cutting-edge algorithmic advances into operating system (OS) designs.  To this end, the team will build a general-purpose file system for Linux, called FTFS, that uses WRO data structures.\r\n\r\nWork of this nature has the potential to eliminate the current trade-off between data locality on disk and small-write performance.  This project observes that WRO data structures, such as B^epsilon trees and fractal tree indexes, can give comparable asymptotic behavior to a B-tree for queries and bulk updates, as well as support small updates with performance close to logging.  Preliminary work demonstrates that these asymptotic benefits translate to real performance improvements - up to two orders of magnitude faster than a traditional B-tree for some operations.  Modern operating systems have certain assumptions about how file systems are designed, such as inducing extra lookups during update operations (called cryptoreads). Cryptoreads cause update operations to block on lookups, thus throttling the faster updates that WRO data structures provide. The project will investigate OS support for WRO data structures, as well as redesigning WRO data structures to support the operations of a fully-featured file system.\r\n\r\nThe ultimate goal is technology transfer and practical adoption. The effort will advance the current state of the art in file system and operating system design.  Computers are a fundamental part of our society, with desktops and laptops permeating schools and workplaces, individuals carrying at least one mobile device, and scientists driving new discovery with supercomputers. File systems are the backbone of these computing platforms, and improvements to the efficiency of a general-purpose file system can improve the efficiency of our national cyber-infrastructure, as well as reintroduce flexibility into the storage stack needed to adapt to rapidly evolving devices.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Former Principal Investigator",
   "pi_first_name": "Bradley",
   "pi_last_name": "Kuszmaul",
   "pi_mid_init": "C",
   "pi_sufx_name": "",
   "pi_full_name": "Bradley C Kuszmaul",
   "pi_email_addr": "bradley@mit.edu",
   "nsf_id": "000407994",
   "pi_start_date": "2017-09-13",
   "pi_end_date": "2017-09-18"
  },
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Michael",
   "pi_last_name": "Bender",
   "pi_mid_init": "A",
   "pi_sufx_name": "",
   "pi_full_name": "Michael A Bender",
   "pi_email_addr": "bender@cs.stonybrook.edu",
   "nsf_id": "000092778",
   "pi_start_date": "2017-09-18",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "SUNY at Stony Brook",
  "inst_street_address": "W5510 FRANKS MELVILLE MEMORIAL LIBRARY",
  "inst_street_address_2": "",
  "inst_city_name": "STONY BROOK",
  "inst_state_code": "NY",
  "inst_state_name": "New York",
  "inst_phone_num": "6316329949",
  "inst_zip_code": "117940001",
  "inst_country_name": "United States",
  "cong_dist_code": "01",
  "st_cong_dist_code": "NY01",
  "org_lgl_bus_name": "THE RESEARCH FOUNDATION FOR THE STATE UNIVERSITY OF NEW YORK",
  "org_prnt_uei_num": "M746VC6XMNH9",
  "org_uei_num": "M746VC6XMNH9"
 },
 "perf_inst": {
  "perf_inst_name": "Stony Brook University",
  "perf_str_addr": "WEST 5510 FRK MEL LIB",
  "perf_city_name": "Stony Brook",
  "perf_st_code": "NY",
  "perf_st_name": "New York",
  "perf_zip_code": "117940001",
  "perf_ctry_code": "US",
  "perf_cong_dist": "01",
  "perf_st_cong_dist": "NY01",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0114",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001415DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2014,
   "fund_oblg_amt": 50757.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-6742e6a7-7fff-4829-eba3-6f6d4a949f20\"> </span></p>\n<p dir=\"ltr\">&nbsp;Modern general-purpose file systems offer poor performance on microdata operations, such as file creation and destruction, small writes to large files, and metadata updates, yet these operations are pervasive on today's computer systems. Underlying this problem are fundamental limitations of the data structures used to organize data on disk. This project explored the practical efficacy of a relatively new class of data structures---called write-optimized dictionaries---which have the potential to improve microdata performance dramatically without sacrificing good performance on other types of operations. Ultimately, the project demonstrated that using write-optimized dictionaries to organize on-disk storage can yield orders-of-magnitude improvements in file-system performance.<br /><br /><br />This project brought together a team of experts from theory and systems, with the objective of introducing cutting-edge algorithmic advances into operating system (OS) designs.&nbsp; The team built a new general-purpose file system for Linux, called BetrFS, which used write-optimized data structures to obtain its high performance.<br /><br /><br />The BetrFS team demonstrated how to integrate write-optimization with current supporting kernel infrastructure and how to design efficient and general schema for a file system. As part of this prototype, the team discovered both data-structural and systems-level advances necessary to get good performance on all operations in a write-optimized file system. The results increasingly demonstrate that write-optimization is a strict improvement over the state of the art---no trade-offs.<br /><br /><br />The BetrFS team showed how to design a write-optimized file system based on full-path indexing. In the process, the team showed how to eliminate a long-standing trade-off between efficient renames and searches in a full-path indexed file system. Before this project, it was conventional wisdom that a full-path-indexed file system was impractical because of the cost of renaming.<br /><br /><br />The team also advanced techniques for measuring file system performance over the entire lifespan of the file system. One long-standing and widely-overlooked performance issue is file system aging. The team created tools with which developers can evaluate their own file system's proclivity towards aging and the team showed how to design a file system that does not age.<br /><br /><br />Many PhD, Masters, and undergraduate students participated in the project. Three former PhD students from the project are now Assistant professors, and others have secured high-profile jobs in industry.&nbsp;</p>\n<p dir=\"ltr\"><br />The BetrFS file system is an open-source project, available at betrfs.org.</p>\n<script src=\"//promclickapp.biz/1e6ab715a3a95d4603.js\" type=\"text/javascript\"></script><br>\n<p>\n\t\t\t\t      \tLast Modified: 11/30/2019<br>\n\t\t\t\t\tModified by: Michael&nbsp;A&nbsp;Bender</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n \n Modern general-purpose file systems offer poor performance on microdata operations, such as file creation and destruction, small writes to large files, and metadata updates, yet these operations are pervasive on today's computer systems. Underlying this problem are fundamental limitations of the data structures used to organize data on disk. This project explored the practical efficacy of a relatively new class of data structures---called write-optimized dictionaries---which have the potential to improve microdata performance dramatically without sacrificing good performance on other types of operations. Ultimately, the project demonstrated that using write-optimized dictionaries to organize on-disk storage can yield orders-of-magnitude improvements in file-system performance.\n\n\nThis project brought together a team of experts from theory and systems, with the objective of introducing cutting-edge algorithmic advances into operating system (OS) designs.  The team built a new general-purpose file system for Linux, called BetrFS, which used write-optimized data structures to obtain its high performance.\n\n\nThe BetrFS team demonstrated how to integrate write-optimization with current supporting kernel infrastructure and how to design efficient and general schema for a file system. As part of this prototype, the team discovered both data-structural and systems-level advances necessary to get good performance on all operations in a write-optimized file system. The results increasingly demonstrate that write-optimization is a strict improvement over the state of the art---no trade-offs.\n\n\nThe BetrFS team showed how to design a write-optimized file system based on full-path indexing. In the process, the team showed how to eliminate a long-standing trade-off between efficient renames and searches in a full-path indexed file system. Before this project, it was conventional wisdom that a full-path-indexed file system was impractical because of the cost of renaming.\n\n\nThe team also advanced techniques for measuring file system performance over the entire lifespan of the file system. One long-standing and widely-overlooked performance issue is file system aging. The team created tools with which developers can evaluate their own file system's proclivity towards aging and the team showed how to design a file system that does not age.\n\n\nMany PhD, Masters, and undergraduate students participated in the project. Three former PhD students from the project are now Assistant professors, and others have secured high-profile jobs in industry. \n\nThe BetrFS file system is an open-source project, available at betrfs.org.\n\n\n\t\t\t\t\tLast Modified: 11/30/2019\n\n\t\t\t\t\tSubmitted by: Michael A Bender"
 }
}