{
 "awd_id": "1743116",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CAREER: Adaptive Large-Scale Program Analysis",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2017-01-15",
 "awd_exp_date": "2018-12-31",
 "tot_intn_awd_amt": 297757.0,
 "awd_amount": 297757.0,
 "awd_min_amd_letter_date": "2017-04-25",
 "awd_max_amd_letter_date": "2017-04-25",
 "awd_abstract_narration": "Automated program analyses developed over the last three decades have demonstrated the ability to prove non-trivial properties of real-world programs.  This ability, in turn, has applications to emerging software challenges in security, software-defined networking, cyber-physical systems, and beyond.  The diversity of such applications necessitates adapting the underlying program analyses to client needs, in aspects of scalability, applicability, and accuracy.  Today's program analyses, however, do not provide useful tuning knobs.  The goal of this research is a general computer-assisted approach to effectively adapt program analyses to diverse clients.  It bridges the gap between decades of program analysis research on one hand and diverse artifacts built atop them to address emerging software challenges on the other.  In doing so, it broadens and enhances the benefits of program analysis to its users, as well as users of software whose quality is impacted by program analysis.\r\n\r\nThe research has three key ingredients.  First, it poses optimization problems that expose a large set of choices to adapt various aspects of a program analysis, such as its cost, the accuracy of its result, and the assumptions it makes about missing information.  Second, it solves those optimization problems by new search algorithms that efficiently navigate large search spaces, reason in the presence of noise, interact with users, and learn across programs.  Third, it builds a program analysis platform that facilitates users to specify and compose analyses, enables search algorithms to reason about analyses, and allows using large-scale computing resources to parallelize analyses.  The approach is demonstrated in the context of analyzing mobile apps -- programs that run on advanced mobile devices such as smartphones and tablets.  Mobile apps represent an increasing use of non-expert programmers and they are likely to be used across a wide range of users in heterogeneous and demanding conditions that can benefit from what-if analyses that program analysis can offer.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Mayur",
   "pi_last_name": "Naik",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Mayur Naik",
   "pi_email_addr": "mhnaik@cis.upenn.edu",
   "nsf_id": "000601297",
   "pi_start_date": "2017-04-25",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Pennsylvania",
  "inst_street_address": "3451 WALNUT ST STE 440A",
  "inst_street_address_2": "",
  "inst_city_name": "PHILADELPHIA",
  "inst_state_code": "PA",
  "inst_state_name": "Pennsylvania",
  "inst_phone_num": "2158987293",
  "inst_zip_code": "191046205",
  "inst_country_name": "United States",
  "cong_dist_code": "03",
  "st_cong_dist_code": "PA03",
  "org_lgl_bus_name": "TRUSTEES OF THE UNIVERSITY OF PENNSYLVANIA, THE",
  "org_prnt_uei_num": "GM1XX56LEP58",
  "org_uei_num": "GM1XX56LEP58"
 },
 "perf_inst": {
  "perf_inst_name": "University of Pennsylvania",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "PA",
  "perf_st_name": "Pennsylvania",
  "perf_zip_code": "191046205",
  "perf_ctry_code": "US",
  "perf_cong_dist": "03",
  "perf_st_cong_dist": "PA03",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  },
  {
   "pgm_ele_code": "794300",
   "pgm_ele_name": "PROGRAMMING LANGUAGES"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "1045",
   "pgm_ref_txt": "CAREER-Faculty Erly Career Dev"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0113",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001314DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2013,
   "fund_oblg_amt": 18084.0
  },
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 92365.0
  },
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 92365.0
  },
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 94942.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-6d972e5b-7fff-a010-7390-8132a9ab157b\"> </span></p>\n<p dir=\"ltr\"><span>The Prism project advanced the foundations and applications of program analysis by addressing the central challenge of how to adapt a given program analysis to diverse clients. &nbsp;It developed a general methodology to solve this problem based on a new constraint-based formulation that combines hard and soft constraints: hard constraints enable to capture soundness conditions whereas soft constraints enable to capture client objectives such as abstraction cost, user effort, or analysis imprecision.</span></p>\n<p dir=\"ltr\"><span>A framework realizing this methodology was developed for analyzing Java bytecode programs using analyses expressed in the popular logic programming language Datalog. &nbsp;The usefulness of the framework was demonstrated on a wide range of analyses, including information-flow analysis, concurrency safety analysis, and type-state analysis.&nbsp; These analyses were evaluated on a variety of Java benchmark programs, notably the Dacapo suite comprising widely-used open-source enterprise Java applications each spanning hundreds of thousands of lines of code, and a suite of malicious Android apps developed by Symantec as part of an automated analysis grand challenge in cyber-security.</span></p>\n<p dir=\"ltr\"><span>The project developed efficient techniques to solve mixed hard and soft constraints in order to scale program analysis tasks to large, complex code bases. &nbsp;These techniques built upon emerging solvers for the MaxSAT problem, an optimization extension of the classic Boolean satisfiability problem, and helped to enhance the scalability of MaxSAT solvers to instances that are orders of magnitude larger. &nbsp;These instances were also contributed to the annual MaxSAT competition.&nbsp; Furthermore, the applicability of these techniques was demonstrated in domains beyond program analysis, such as Big Data analytics and statistical relational learning.</span></p>\n<p dir=\"ltr\"><span>The Prism framework was open-sourced and the research results were incorporated into a freely disseminated graduate course titled &ldquo;Software Analysis and Testing&rdquo;. &nbsp;The course is regularly offered as part of Georgia Tech&rsquo;s Online Masters in Computer Science degree program since 2016.&nbsp; It has imparted over a thousand students with hands-on experience in program analysis technology. &nbsp;Additionally, the project directly trained six PhD students to conduct research in areas spanning formal methods, programming systems, machine learning, and cyber-security.  The project thereby contributed extensively to training engineers in areas of strategic importance.</span></p>\n<div><span><br /></span></div>\n<p>&nbsp;</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 06/03/2019<br>\n\t\t\t\t\tModified by: Mayur&nbsp;Naik</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n \nThe Prism project advanced the foundations and applications of program analysis by addressing the central challenge of how to adapt a given program analysis to diverse clients.  It developed a general methodology to solve this problem based on a new constraint-based formulation that combines hard and soft constraints: hard constraints enable to capture soundness conditions whereas soft constraints enable to capture client objectives such as abstraction cost, user effort, or analysis imprecision.\nA framework realizing this methodology was developed for analyzing Java bytecode programs using analyses expressed in the popular logic programming language Datalog.  The usefulness of the framework was demonstrated on a wide range of analyses, including information-flow analysis, concurrency safety analysis, and type-state analysis.  These analyses were evaluated on a variety of Java benchmark programs, notably the Dacapo suite comprising widely-used open-source enterprise Java applications each spanning hundreds of thousands of lines of code, and a suite of malicious Android apps developed by Symantec as part of an automated analysis grand challenge in cyber-security.\nThe project developed efficient techniques to solve mixed hard and soft constraints in order to scale program analysis tasks to large, complex code bases.  These techniques built upon emerging solvers for the MaxSAT problem, an optimization extension of the classic Boolean satisfiability problem, and helped to enhance the scalability of MaxSAT solvers to instances that are orders of magnitude larger.  These instances were also contributed to the annual MaxSAT competition.  Furthermore, the applicability of these techniques was demonstrated in domains beyond program analysis, such as Big Data analytics and statistical relational learning.\nThe Prism framework was open-sourced and the research results were incorporated into a freely disseminated graduate course titled \"Software Analysis and Testing\".  The course is regularly offered as part of Georgia Tech?s Online Masters in Computer Science degree program since 2016.  It has imparted over a thousand students with hands-on experience in program analysis technology.  Additionally, the project directly trained six PhD students to conduct research in areas spanning formal methods, programming systems, machine learning, and cyber-security.  The project thereby contributed extensively to training engineers in areas of strategic importance.\n\n\n\n \n\n \n\n\t\t\t\t\tLast Modified: 06/03/2019\n\n\t\t\t\t\tSubmitted by: Mayur Naik"
 }
}