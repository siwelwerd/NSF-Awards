{
 "awd_id": "1651794",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CAREER: Direct Manipulation Programming Systems",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2017-03-01",
 "awd_exp_date": "2022-02-28",
 "tot_intn_awd_amt": 525578.0,
 "awd_amount": 525578.0,
 "awd_min_amd_letter_date": "2017-03-01",
 "awd_max_amd_letter_date": "2021-05-19",
 "awd_abstract_narration": "Computer programming is an increasingly vital and powerful tool, but two realities inhibit even greater impact. First, programming consists of an \"Edit-Run-View\" workflow that slows the pace of the creative process; only in latter stages can the results be visualized, at which point the programmer must return to text-editing to make subsequent changes. Furthermore, programming is limited to experts. Ideally, users would be aided in the programming process by interactive graphical user interfaces (GUIs), akin to those available for domains such as word processing, spreadsheets, and graphic design. The goal of this research is to develop theoretical and practical foundations to integrate the expressive power of programming with the ease-of-use of direct manipulation GUIs. The intellectual merits of this research are to answer several open questions about computer programming: (1) How can interactions with the output of a program be used to determine the user's intended modifications to the program? (2) How can interactions with the source code of a program be used to determine the user's intended, higher-level modifications to the program? (3) How can user interfaces integrate the expressiveness of general-purpose programming languages with the intuitive workflow of direct manipulation systems? The project's broader significance and importance are to incorporate answers to these questions into innovative software technology that will (a) be released freely to the public for use by expert and non-expert users, (b) support university-level curricular activities that help bridge computer science with other disciplines such as visual arts, and (c) support middle- and high-school curricular activities that help promote interest in programming and computational thinking.\r\n\r\nThe project blends and advances techniques in program synthesis, semi-automated refactoring, and human-computer interaction. Three primary activities are pursued: (1) Develop program synthesis algorithms that monitor the previous execution of a program and allow users to specify program modifications by directly manipulating program output. (2) Develop program synthesis algorithms that allow users to specify program modifications by visually and structurally manipulating program text. (3) Design semi-automated programming systems that enable expert and non-expert users to create a variety of digital objects with less text-based editing than in existing programming languages and less mouse-based editing than in existing direct manipulation systems.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Ravi",
   "pi_last_name": "Chugh",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Ravi Chugh",
   "pi_email_addr": "rchugh@cs.uchicago.edu",
   "nsf_id": "000677688",
   "pi_start_date": "2017-03-01",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Chicago",
  "inst_street_address": "5801 S ELLIS AVE",
  "inst_street_address_2": "",
  "inst_city_name": "CHICAGO",
  "inst_state_code": "IL",
  "inst_state_name": "Illinois",
  "inst_phone_num": "7737028669",
  "inst_zip_code": "606375418",
  "inst_country_name": "United States",
  "cong_dist_code": "01",
  "st_cong_dist_code": "IL01",
  "org_lgl_bus_name": "UNIVERSITY OF CHICAGO",
  "org_prnt_uei_num": "ZUE9HKT2CLC9",
  "org_uei_num": "ZUE9HKT2CLC9"
 },
 "perf_inst": {
  "perf_inst_name": "University of Chicago",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "IL",
  "perf_st_name": "Illinois",
  "perf_zip_code": "606375418",
  "perf_ctry_code": "US",
  "perf_cong_dist": "01",
  "perf_st_cong_dist": "IL01",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "1045",
   "pgm_ref_txt": "CAREER-Faculty Erly Career Dev"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0121",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 106873.0
  },
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 109701.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 99972.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 102971.0
  },
  {
   "fund_oblg_fiscal_yr": 2021,
   "fund_oblg_amt": 106061.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Several techniques for enhancing text-based programming environments with various forms of direct manipulation interactions were produced by this project. Many of the results below, as well as other recent developments in live programming with direct manipulation, were highlighted in a keynote address at ICFP 2021.</p>\n<p><strong>Output-Directed Programming:</strong> Programming-by-demonstration techniques often generate imperative programs, and also tend to deemphasize the role of programs as artifacts for subsequent manipulation. In this project, we sought to enable bimodal programming, where readable, well-factored code in a high-level functional language is generated and maintained while the user interacts with the live values produced by the (work-in-progress) program. With output-directed programming techniques in Sketch-n-Sketch [UIST 2019], we demonstrated this paradigm for programs that generate vector graphic drawings. With output-directed programming techniques in Maniposynth [ECOOP 2022], we demonstrated this paradigm for data-structure manipulating programs.</p>\n<p><strong>Bidirectional Evaluation:</strong> Techniques for running programs \"in reverse\" often require bidirectional transformations to be programmed in restricted or domain-specific languages. In this project, we developed an approach for bidirectional evaluation [OOPSLA 2018] that embeds bidirectional transformations in an otherwise standard, unrestricted functional programming language. Bidirectional evaluation was implemented in a version of Sketch-n-Sketch configured for programming HTML and used to make a variety of bidirectional documents as examples.</p>\n<p><strong>Lightweight Structure Editing:</strong> To augment text-based editing of source code with benefits of graphical and structure editing, we developed a lightweight user interface&nbsp;[ICSE 2018] for displaying the abstract syntax of a program as blocks drawn on top of the concrete, textual syntax. We pursued a similar user interaction model in a system that, using a dynamic tracing algorithm, automatically generates simple structure editors for manipulating values rendered as text generated by toString functions [VL/HCC 2020].</p>\n<p><strong>Live Programming by Example:</strong> This project, in conjunction with NSF awards 1814900 and 1817145, also produced a new program synthesis algorithm [ICFP 2020] that fills holes according to user-specified input-output examples. Compared to the prior state-of-the-art in example-based synthesis, this algorithm (a) often reduces the number of examples required to synthesize a desired program, by alleviating an existing requirement for inductive specifications called trace-completeness, and (b) can simultaneously solve multiple interdependent tasks that appear in a sketch, or partial program.</p>\n<p><strong>Creative Coding Course:</strong> This project supported the development of a new introductory programming and creative coding course at the University of Chicago. The course has been taught to college students from a broad variety of degree programs, as well as to high school students in two University summer programs.</p>\n<p><strong>Studying Editor Features in a Creative Coding Classroom:</strong> Many live- and direct-manipulation programming techniques seem particularly appealing for settings with an emphasis on pedagogy or creative expression. We have begun to study how novice creative coding students use and perceive different features and aspects of programming environments.</p>\n<p>See <a href=\"http://people.cs.uchicago.edu/~rchugh/funding/nsf-career/index.html\">this project page</a> for more information and resources.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 05/13/2022<br>\n\t\t\t\t\tModified by: Ravi&nbsp;Chugh</p>\n</div>\n<div class=\"porSideCol\">\n<div class=\"each-gallery\">\n<div class=\"galContent\" id=\"gallery0\">\n<div class=\"photoCount\" id=\"photoCount0\">\n\t\t\t\t\t\t\t\t\tImages (<span id=\"selectedPhoto0\">1</span> of <span class=\"totalNumber\"></span>)\t\t\n\t\t\t\t\t\t\t\t</div>\n<div class=\"galControls\" id=\"controls0\"></div>\n<div class=\"galSlideshow\" id=\"slideshow0\"></div>\n<div class=\"galEmbox\" id=\"embox\">\n<div class=\"image-title\"></div>\n</div>\n</div>\n<div class=\"galNavigation\" id=\"navigation0\">\n<ul class=\"thumbs\" id=\"thumbs0\">\n<li>\n<a href=\"/por/images/Reports/POR/2022/1651794/1651794_10475290_1652291414984_SnS-Sketch-and-Sketch--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2022/1651794/1651794_10475290_1652291414984_SnS-Sketch-and-Sketch--rgov-800width.jpg\" title=\"Sketch-n-Sketch: Sketch the Code + Sketch the Output\"><img src=\"/por/images/Reports/POR/2022/1651794/1651794_10475290_1652291414984_SnS-Sketch-and-Sketch--rgov-66x44.jpg\" alt=\"Sketch-n-Sketch: Sketch the Code + Sketch the Output\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Sketch-n-Sketch is a programming environment that augments a text-based source code editor with GUIs for structure editing as well as direct manipulation of output values.</div>\n<div class=\"imageCredit\">Ravi Chugh</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Ravi&nbsp;Chugh</div>\n<div class=\"imageTitle\">Sketch-n-Sketch: Sketch the Code + Sketch the Output</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2022/1651794/1651794_10475290_1652291936274_sns-koch-uist-2019--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2022/1651794/1651794_10475290_1652291936274_sns-koch-uist-2019--rgov-800width.jpg\" title=\"Output-Directed Programming in Sketch-n-Sketch\"><img src=\"/por/images/Reports/POR/2022/1651794/1651794_10475290_1652291936274_sns-koch-uist-2019--rgov-66x44.jpg\" alt=\"Output-Directed Programming in Sketch-n-Sketch\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Sketch-n-Sketch resembles a simple GUI drawing editor, where user actions are codified in the text-based program. Here, several helper functions were built and used to generate a Koch snowflake.</div>\n<div class=\"imageCredit\">Brian Hempel, Justin Lubin, Ravi Chugh (Figure 1 of UIST 2019 paper)</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Ravi&nbsp;Chugh</div>\n<div class=\"imageTitle\">Output-Directed Programming in Sketch-n-Sketch</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2022/1651794/1651794_10475290_1652292267770_sns-v070-inspector--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2022/1651794/1651794_10475290_1652292267770_sns-v070-inspector--rgov-800width.jpg\" title=\"Bidirectional Evaluation in Sketch-n-Sketch\"><img src=\"/por/images/Reports/POR/2022/1651794/1651794_10475290_1652292267770_sns-v070-inspector--rgov-66x44.jpg\" alt=\"Bidirectional Evaluation in Sketch-n-Sketch\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">When the user changes a program's output value using the web browser's DOM Inspector GUI, Sketch-n-Sketch suggests corresponding changes to the original program.</div>\n<div class=\"imageCredit\">Mika\ufffdl Mayer, Ravi Chugh (Figure 4 of OOPSLA 2018 paper)</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Ravi&nbsp;Chugh</div>\n<div class=\"imageTitle\">Bidirectional Evaluation in Sketch-n-Sketch</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2022/1651794/1651794_10475290_1652292651789_two-circles-reorder-args--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2022/1651794/1651794_10475290_1652292651789_two-circles-reorder-args--rgov-800width.jpg\" title=\"Lightweight Structure Editing in Sketch-n-Sketch\"><img src=\"/por/images/Reports/POR/2022/1651794/1651794_10475290_1652292651789_two-circles-reorder-args--rgov-66x44.jpg\" alt=\"Lightweight Structure Editing in Sketch-n-Sketch\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Users hover over and select elements in the program's abstract syntax tree, and then Sketch-n-Sketch displays a menu of potentially relevant code actions based on the selections. Here, the user selects two arguments in a function parameter list and a place to reorder them.</div>\n<div class=\"imageCredit\">Brian Hempel, Justin Lubin, Grace Lu, Ravi Chugh (p.3 of ICSE 2018 paper)</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Ravi&nbsp;Chugh</div>\n<div class=\"imageTitle\">Lightweight Structure Editing in Sketch-n-Sketch</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2022/1651794/1651794_10475290_1652292780773_teaser--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2022/1651794/1651794_10475290_1652292780773_teaser--rgov-800width.jpg\" title=\"Maniposynth\"><img src=\"/por/images/Reports/POR/2022/1651794/1651794_10475290_1652292780773_teaser--rgov-66x44.jpg\" alt=\"Maniposynth\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Maniposynth is a bimodal tangible programming system with synthesis for a subset of OCaml.</div>\n<div class=\"imageCredit\">Brian Hempel, Ravi Chugh (Figure 1 of ECOOP 2022 paper)</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Ravi&nbsp;Chugh</div>\n<div class=\"imageTitle\">Maniposynth</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2022/1651794/1651794_10475290_1652292976437_cs111-dept-distro-sp21-wi22--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2022/1651794/1651794_10475290_1652292976437_cs111-dept-distro-sp21-wi22--rgov-800width.jpg\" title=\"Home Departments of Creative Coding Students\"><img src=\"/por/images/Reports/POR/2022/1651794/1651794_10475290_1652292976437_cs111-dept-distro-sp21-wi22--rgov-66x44.jpg\" alt=\"Home Departments of Creative Coding Students\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">The distribution of degree programs represented by students in Creative Coding (CMSC 11111) at the University of Chicago in Spring 2021 and Winter 2022.</div>\n<div class=\"imageCredit\">Andrew McNutt</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Ravi&nbsp;Chugh</div>\n<div class=\"imageTitle\">Home Departments of Creative Coding Students</div>\n</div>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>",
  "por_txt_cntn": "\nSeveral techniques for enhancing text-based programming environments with various forms of direct manipulation interactions were produced by this project. Many of the results below, as well as other recent developments in live programming with direct manipulation, were highlighted in a keynote address at ICFP 2021.\n\nOutput-Directed Programming: Programming-by-demonstration techniques often generate imperative programs, and also tend to deemphasize the role of programs as artifacts for subsequent manipulation. In this project, we sought to enable bimodal programming, where readable, well-factored code in a high-level functional language is generated and maintained while the user interacts with the live values produced by the (work-in-progress) program. With output-directed programming techniques in Sketch-n-Sketch [UIST 2019], we demonstrated this paradigm for programs that generate vector graphic drawings. With output-directed programming techniques in Maniposynth [ECOOP 2022], we demonstrated this paradigm for data-structure manipulating programs.\n\nBidirectional Evaluation: Techniques for running programs \"in reverse\" often require bidirectional transformations to be programmed in restricted or domain-specific languages. In this project, we developed an approach for bidirectional evaluation [OOPSLA 2018] that embeds bidirectional transformations in an otherwise standard, unrestricted functional programming language. Bidirectional evaluation was implemented in a version of Sketch-n-Sketch configured for programming HTML and used to make a variety of bidirectional documents as examples.\n\nLightweight Structure Editing: To augment text-based editing of source code with benefits of graphical and structure editing, we developed a lightweight user interface [ICSE 2018] for displaying the abstract syntax of a program as blocks drawn on top of the concrete, textual syntax. We pursued a similar user interaction model in a system that, using a dynamic tracing algorithm, automatically generates simple structure editors for manipulating values rendered as text generated by toString functions [VL/HCC 2020].\n\nLive Programming by Example: This project, in conjunction with NSF awards 1814900 and 1817145, also produced a new program synthesis algorithm [ICFP 2020] that fills holes according to user-specified input-output examples. Compared to the prior state-of-the-art in example-based synthesis, this algorithm (a) often reduces the number of examples required to synthesize a desired program, by alleviating an existing requirement for inductive specifications called trace-completeness, and (b) can simultaneously solve multiple interdependent tasks that appear in a sketch, or partial program.\n\nCreative Coding Course: This project supported the development of a new introductory programming and creative coding course at the University of Chicago. The course has been taught to college students from a broad variety of degree programs, as well as to high school students in two University summer programs.\n\nStudying Editor Features in a Creative Coding Classroom: Many live- and direct-manipulation programming techniques seem particularly appealing for settings with an emphasis on pedagogy or creative expression. We have begun to study how novice creative coding students use and perceive different features and aspects of programming environments.\n\nSee this project page for more information and resources.\n\n\t\t\t\t\tLast Modified: 05/13/2022\n\n\t\t\t\t\tSubmitted by: Ravi Chugh"
 }
}