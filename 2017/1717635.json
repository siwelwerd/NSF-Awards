{
 "awd_id": "1717635",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF:   Small:   Collaborative Research:  PEGASUS:  ProgrEss GuAranteeS for Universal tranSactions",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2017-08-01",
 "awd_exp_date": "2020-07-31",
 "tot_intn_awd_amt": 233780.0,
 "awd_amount": 249780.0,
 "awd_min_amd_letter_date": "2017-07-12",
 "awd_max_amd_letter_date": "2018-04-23",
 "awd_abstract_narration": "Software scalability and reliability on multi-core systems is a crucial and urgent issue that needs to be addressed. Transactional processing is a promising programming model for developing parallel applications across many domains, including scientific and application software, that simplifies the development of correct concurrent software. This project will develop transactional techniques that overcome many current limitations, and it will explore the optimization of these techniques on systems with support for transactions. The intellectual merits are the development of novel techniques for constructing transactional data structures on systems with and without hardware support for transactions. The project will create a first approach for transactional processing with progress guarantees. The project's broader significance and importance are to make accessible to the industry a set of prototype data structures and programming techniques that furthers the reliability and performance of software on current and future multi-core systems. The project will also develop critical human resources in systems programming.  \r\n \r\nThe project will lead to a number of fundamental and practical outcomes. Transactions have been recognized as a promising alternative to lock-based systems. However, transactions as currently implemented in software or hardware have different drawbacks, with the absence of a progress guarantee being the most fundamental. To overcome this problem, this work further develops the notion of transactional data structures that are based on lock-free techniques, thereby guaranteeing progress. The project will also extend the applicability of commutable transactions to various data structure types including commonly used linked and contiguous memory data structures. The project harnesses transactional hardware to accelerate the execution of common cases and demonstrates the applicability by prototyping  a set of important containers. Finally, this project will evaluate the outcome against",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Peter",
   "pi_last_name": "Pirkelbauer",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Peter Pirkelbauer",
   "pi_email_addr": "pirkelbauer@uab.edu",
   "nsf_id": "000625584",
   "pi_start_date": "2017-07-12",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Alabama at Birmingham",
  "inst_street_address": "701 S 20TH STREET",
  "inst_street_address_2": "",
  "inst_city_name": "BIRMINGHAM",
  "inst_state_code": "AL",
  "inst_state_name": "Alabama",
  "inst_phone_num": "2059345266",
  "inst_zip_code": "352940001",
  "inst_country_name": "United States",
  "cong_dist_code": "07",
  "st_cong_dist_code": "AL07",
  "org_lgl_bus_name": "UNIVERSITY OF ALABAMA AT BIRMINGHAM",
  "org_prnt_uei_num": "",
  "org_uei_num": "YND4PLMC9AN7"
 },
 "perf_inst": {
  "perf_inst_name": "University of Alabama at Birmingham",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "AL",
  "perf_st_name": "Alabama",
  "perf_zip_code": "352940001",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "AL07",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7798",
   "pgm_ref_txt": "SOFTWARE & HARDWARE FOUNDATION"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  },
  {
   "pgm_ref_code": "9150",
   "pgm_ref_txt": "EXP PROG TO STIM COMP RES"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 233780.0
  },
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 16000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Since lock-based and fine-grained concurrency poses many challenges, transactional processing has been found to be a promising alternative that is easier to use and less error-prone. Despite recent innovations in hardware support through the introduction of hardware transactional memory and software design through the use of commutable transactions, the development of non-blocking data structures remains challenging in terms of correctness and portability.<br /><br />To overcome this problem, this research delivered a new method for enabling transactions with progress guarantees for a diverse set of architectures. Prototypes of transactional data structures exhibiting different access characteristics have been developed by the PIs for systems with and without Transactional Memory support in hardware.<br /><br />This research created the first approach for creating transactions with progress guarantees. To achieve this, the PIs explored methods that combine the utilization of modern hardware transactional memory and a recently developed technique for software transactional transformation.<br />Moreover, the PIs enhanced the applicability of commutable transactions to various container types including commonly used linked and contiguous memory data structures and implemented an approach that allows for<br />the support of dynamic trasactions. In addition to allowing for a significant increase in performance and concurrency, the PIs' methodology helped overcome many limitations of existing transactional techniques including lack of progress guarantees, lack of support for dynamic transactions, inability to support transactions on multiple containers of various types, limitations on the size of a transaction, excessive use of memory by supporting auxiliary data structures, and prohibitive cost of rollback and conflict recovery<br />techniques.<br /><br />Additionally, PI Dechev and PI Pirkelbauer explored ways to formally guarantee the progress and correctness conditions provided by the software elements created in this research. This work produced new methods for<br />veryfing progress of non-blocking data structures through the use of theorem provers. To facilities the broader adoption and use of transactional algorithms, PI Dechev created a generic methodology for the automatic transformation of sequential C++ containers into their transactional counterparts.<br /><br />The software components and data structures created in this work have been released as open-source software projects. The findings of this work and the novel techniques and algorithms discovered by the PIs were published in multiple top-tier journal and conference publications.<br /><br />This work supported 3 Ph.D. students at UAB and UCF and resulted in the completion of 1 doctoral<br />dissertation by Christina Peterson at UCF (advised by Dr. Dechev) in August 2019.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 10/19/2020<br>\n\t\t\t\t\tModified by: Peter&nbsp;Pirkelbauer</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nSince lock-based and fine-grained concurrency poses many challenges, transactional processing has been found to be a promising alternative that is easier to use and less error-prone. Despite recent innovations in hardware support through the introduction of hardware transactional memory and software design through the use of commutable transactions, the development of non-blocking data structures remains challenging in terms of correctness and portability.\n\nTo overcome this problem, this research delivered a new method for enabling transactions with progress guarantees for a diverse set of architectures. Prototypes of transactional data structures exhibiting different access characteristics have been developed by the PIs for systems with and without Transactional Memory support in hardware.\n\nThis research created the first approach for creating transactions with progress guarantees. To achieve this, the PIs explored methods that combine the utilization of modern hardware transactional memory and a recently developed technique for software transactional transformation.\nMoreover, the PIs enhanced the applicability of commutable transactions to various container types including commonly used linked and contiguous memory data structures and implemented an approach that allows for\nthe support of dynamic trasactions. In addition to allowing for a significant increase in performance and concurrency, the PIs' methodology helped overcome many limitations of existing transactional techniques including lack of progress guarantees, lack of support for dynamic transactions, inability to support transactions on multiple containers of various types, limitations on the size of a transaction, excessive use of memory by supporting auxiliary data structures, and prohibitive cost of rollback and conflict recovery\ntechniques.\n\nAdditionally, PI Dechev and PI Pirkelbauer explored ways to formally guarantee the progress and correctness conditions provided by the software elements created in this research. This work produced new methods for\nveryfing progress of non-blocking data structures through the use of theorem provers. To facilities the broader adoption and use of transactional algorithms, PI Dechev created a generic methodology for the automatic transformation of sequential C++ containers into their transactional counterparts.\n\nThe software components and data structures created in this work have been released as open-source software projects. The findings of this work and the novel techniques and algorithms discovered by the PIs were published in multiple top-tier journal and conference publications.\n\nThis work supported 3 Ph.D. students at UAB and UCF and resulted in the completion of 1 doctoral\ndissertation by Christina Peterson at UCF (advised by Dr. Dechev) in August 2019.\n\n\t\t\t\t\tLast Modified: 10/19/2020\n\n\t\t\t\t\tSubmitted by: Peter Pirkelbauer"
 }
}