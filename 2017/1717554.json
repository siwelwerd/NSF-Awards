{
 "awd_id": "1717554",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CSR: Small: Protocols and Languages for Low-Coordination Consistent Geodistributed Transactions",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Jason Hallstrom",
 "awd_eff_date": "2017-10-01",
 "awd_exp_date": "2022-09-30",
 "tot_intn_awd_amt": 486797.0,
 "awd_amount": 486797.0,
 "awd_min_amd_letter_date": "2017-08-16",
 "awd_max_amd_letter_date": "2017-08-16",
 "awd_abstract_narration": "The world now runs on applications that operate at global scale, available everywhere. The information that these applications use must also be distributed around the globe so it is close to application users.  However, keeping this geo-distributed information in sync is a major challenge for application developers. They must choose between building software in a way that is slow but correct or fast but error-prone.  This project aims to make it easier for developers to build reliable, high-performance distributed applications. Developers will be able to write code in a manner similar to the way they would when using a database that offers simple reasoning and strong guarantees, but the project will introduce new software architectures and tools that improve performance. The project will demonstrate using real software that its innovations are effective in practice.\r\n\r\nThis project aims for broad impact on the reliability and performance of distributed software.  Its success will enable a larger class of developers to build distributed software systems with rich functionality and tight integration. Currently such systems require expert engineers and can be undertaken only by a few large software companies. Democratizing construction of distributed systems will empower a wide range of developers at government agencies, health care and nonprofit organizations, and medium-sized businesses. The project will release software artifacts embodying the technical advances and will demonstrate their use to build real software.  Developed software will be publicly available at the project home page, www.cs.cornell.edu/projects/proteus, useful not only to researchers but also to developers.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Andrew",
   "pi_last_name": "Myers",
   "pi_mid_init": "C",
   "pi_sufx_name": "",
   "pi_full_name": "Andrew C Myers",
   "pi_email_addr": "andru@cs.cornell.edu",
   "nsf_id": "000385587",
   "pi_start_date": "2017-08-16",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Cornell University",
  "inst_street_address": "341 PINE TREE RD",
  "inst_street_address_2": "",
  "inst_city_name": "ITHACA",
  "inst_state_code": "NY",
  "inst_state_name": "New York",
  "inst_phone_num": "6072555014",
  "inst_zip_code": "148502820",
  "inst_country_name": "United States",
  "cong_dist_code": "19",
  "st_cong_dist_code": "NY19",
  "org_lgl_bus_name": "CORNELL UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "G56PUALJ3KT5"
 },
 "perf_inst": {
  "perf_inst_name": "Cornell University",
  "perf_str_addr": "107 Hoy Road",
  "perf_city_name": "Ithaca",
  "perf_st_code": "NY",
  "perf_st_name": "New York",
  "perf_zip_code": "148537501",
  "perf_ctry_code": "US",
  "perf_cong_dist": "19",
  "perf_st_cong_dist": "NY19",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 486797.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>&nbsp; &nbsp; Modern computer applications operate at global scale. A single application may involve the communication of hundreds of computers that are accessing data stored all over the world: so-called \"geodistributed systems\". Building these applications is extremely challenging and involves knowledge and programming skills that go beyond what can be taught even in an advanced undergraduate curriculum. The goal of this project was to develop new ways to build concurrent, distributed applications that operate at a global scale and with high performance. Toward this end, we explored new software architectures, new programming models, and new distributed protocols. A key challenge of geodistributed systems is that data must be replicated across the world to ensure that it can be accessed quickly when needed. However, these replicas cannot then be kept perfectly in sync with each other, leading to potential inconsistency when the same data is accessed at multiple replicas. A key question of this project was how to offer the high availability and low latency expected by modern distributed applications, while providing consistency guarantees that programmers find easier to work with -- either by making strong guarantees cheaper to enforce or by making weak guarantees easier to reason about.<br />&nbsp; &nbsp; In the project, we developed new programming languages and new programming methodologies that make distributed programming significantly easier. For example, in our work on \"mixed consistency\", we observed that in many applications, no one level of consistency suffices. Geodistributed applications need to accept weaker consistency to obtain low-latency access to replicated data.&nbsp; Modern applications therefore naturally mix data with different consistency guarantees, often persisted at multiple mutually unaware data stores that implement different consistency levels. Once multiple consistency levels are present, however, it is easy for data from one consistency level to influence and violate the consistency of data that requires stronger consistency guarantees. Our MixT programming language and system allows these multiple-database systems to be programmed at a higher level of abstraction, with the compiler automatically detecting these potential consistency violations.<br />&nbsp; &nbsp; In a related line of work, we studied how to achieve strong consistency guarantees more cheaply in distributed systems.&nbsp; Our insight was that data can be allowed to be inconsistent as long as the *observations* of applications are consistent. By capturing these observations as logical predicates, we can provide effectively strong consistency without imposing unnecessary coordination overhead. The challenge is to enforce these global predicates efficiently. In our approach, \"predictive treaties\", a global predicate is enforced locally by defining time-dependent conditions (treaties) that can be enforced mostly locally at the various geodistributed host nodes storing the data over which the predicate is enforced. With this language and runtime support, programmers can significantly reduce the amount of distributed coordination and correspondingly improve average latency.<br />&nbsp; &nbsp; We also designed and implemented a new programming language called Gallifrey, which supports principled development and verification of weakly consistent data abstractions. It is a distributed programming language that supports transparently replicated objects. The goal is that data abstractions should be reusable and compositional, without requiring (as in previous work on CRDTs) that all operations be strictly commutative.<br />&nbsp; &nbsp; Our work on Gallifrey exposed an additional challenge.&nbsp; Gallifrey programs are highly concurrent, with multiple threads working at the same time. But concurrent programming is also difficult and error-prone. Existing languages like Rust make safe concurrent programming much easier, but impose constraints on what kinds of programs can be built. We developed a new type system for concurrent programming languages that supports the kind of safe concurrent programming that Rust does, but without imposing the kinds of restrictions that Rust does.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 01/27/2023<br>\n\t\t\t\t\tModified by: Andrew&nbsp;C&nbsp;Myers</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n    Modern computer applications operate at global scale. A single application may involve the communication of hundreds of computers that are accessing data stored all over the world: so-called \"geodistributed systems\". Building these applications is extremely challenging and involves knowledge and programming skills that go beyond what can be taught even in an advanced undergraduate curriculum. The goal of this project was to develop new ways to build concurrent, distributed applications that operate at a global scale and with high performance. Toward this end, we explored new software architectures, new programming models, and new distributed protocols. A key challenge of geodistributed systems is that data must be replicated across the world to ensure that it can be accessed quickly when needed. However, these replicas cannot then be kept perfectly in sync with each other, leading to potential inconsistency when the same data is accessed at multiple replicas. A key question of this project was how to offer the high availability and low latency expected by modern distributed applications, while providing consistency guarantees that programmers find easier to work with -- either by making strong guarantees cheaper to enforce or by making weak guarantees easier to reason about.\n    In the project, we developed new programming languages and new programming methodologies that make distributed programming significantly easier. For example, in our work on \"mixed consistency\", we observed that in many applications, no one level of consistency suffices. Geodistributed applications need to accept weaker consistency to obtain low-latency access to replicated data.  Modern applications therefore naturally mix data with different consistency guarantees, often persisted at multiple mutually unaware data stores that implement different consistency levels. Once multiple consistency levels are present, however, it is easy for data from one consistency level to influence and violate the consistency of data that requires stronger consistency guarantees. Our MixT programming language and system allows these multiple-database systems to be programmed at a higher level of abstraction, with the compiler automatically detecting these potential consistency violations.\n    In a related line of work, we studied how to achieve strong consistency guarantees more cheaply in distributed systems.  Our insight was that data can be allowed to be inconsistent as long as the *observations* of applications are consistent. By capturing these observations as logical predicates, we can provide effectively strong consistency without imposing unnecessary coordination overhead. The challenge is to enforce these global predicates efficiently. In our approach, \"predictive treaties\", a global predicate is enforced locally by defining time-dependent conditions (treaties) that can be enforced mostly locally at the various geodistributed host nodes storing the data over which the predicate is enforced. With this language and runtime support, programmers can significantly reduce the amount of distributed coordination and correspondingly improve average latency.\n    We also designed and implemented a new programming language called Gallifrey, which supports principled development and verification of weakly consistent data abstractions. It is a distributed programming language that supports transparently replicated objects. The goal is that data abstractions should be reusable and compositional, without requiring (as in previous work on CRDTs) that all operations be strictly commutative.\n    Our work on Gallifrey exposed an additional challenge.  Gallifrey programs are highly concurrent, with multiple threads working at the same time. But concurrent programming is also difficult and error-prone. Existing languages like Rust make safe concurrent programming much easier, but impose constraints on what kinds of programs can be built. We developed a new type system for concurrent programming languages that supports the kind of safe concurrent programming that Rust does, but without imposing the kinds of restrictions that Rust does.\n\n\t\t\t\t\tLast Modified: 01/27/2023\n\n\t\t\t\t\tSubmitted by: Andrew C Myers"
 }
}