{
 "awd_id": "1703931",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Medium: Optimistic Static Analysis",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2017-09-01",
 "awd_exp_date": "2022-08-31",
 "tot_intn_awd_amt": 1079989.0,
 "awd_amount": 1079989.0,
 "awd_min_amd_letter_date": "2017-08-30",
 "awd_max_amd_letter_date": "2021-04-09",
 "awd_abstract_narration": "Programs running on computers have become essential to today's society. They enable commerce, operate machinery, control transportation, enhance social interaction, and perform innumerable other important tasks. This research project examines how to ensure that programs run correctly and securely as they carry out their mission by monitoring their execution efficiently. The intellectual merits are developing a new way to monitor programs as they execute, which incurs far less overhead than prior methods. The project's broader significance and importance are in helping programs programs run more correctly and securely as they perform essential functions in society.\r\n\r\nStatic program analysis is a powerful technique for understanding, verifying, optimizing, and transforming programs. Unfortunately, usefulness of those static analyses is greatly hindered by the need to prove their soundness, as soundness requires analysis of all possible executions and sound over-approximations of a program. This research is designing and using optimistic static analyses. They make optimistic assumptions about a program, and are sound only when those assumptions hold true in an execution. The optimistic assumptions, called likely variants, are typically learnt by observing a representative set of executions. At runtime, these assumptions are checked, and if they fail, remedial actions are taken. As optimistic static analysis can prune a large fraction of the state space from consideration, its scalability and precision can be one to two orders of magnitude higher than conventional sound analysis. This project is exploring several applications of optimistic static analysis ranging from security to concurrency to hardware synthesis.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Satish",
   "pi_last_name": "Narayanasamy",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Satish Narayanasamy",
   "pi_email_addr": "nsatish@eecs.umich.edu",
   "nsf_id": "000083847",
   "pi_start_date": "2017-08-30",
   "pi_end_date": null
  },
  {
   "pi_role": "Former Co-Principal Investigator",
   "pi_first_name": "Peter",
   "pi_last_name": "Chen",
   "pi_mid_init": "M",
   "pi_sufx_name": "",
   "pi_full_name": "Peter M Chen",
   "pi_email_addr": "pmchen@umich.edu",
   "nsf_id": "000119730",
   "pi_start_date": "2017-08-30",
   "pi_end_date": "2021-04-09"
  }
 ],
 "inst": {
  "inst_name": "Regents of the University of Michigan - Ann Arbor",
  "inst_street_address": "1109 GEDDES AVE STE 3300",
  "inst_street_address_2": "",
  "inst_city_name": "ANN ARBOR",
  "inst_state_code": "MI",
  "inst_state_name": "Michigan",
  "inst_phone_num": "7347636438",
  "inst_zip_code": "481091015",
  "inst_country_name": "United States",
  "cong_dist_code": "06",
  "st_cong_dist_code": "MI06",
  "org_lgl_bus_name": "REGENTS OF THE UNIVERSITY OF MICHIGAN",
  "org_prnt_uei_num": "",
  "org_uei_num": "GNJ7BBP73WE9"
 },
 "perf_inst": {
  "perf_inst_name": "University of Michigan Ann Arbor",
  "perf_str_addr": "2260 Hayward, Beyster Bldg.",
  "perf_city_name": "Ann Arbor",
  "perf_st_code": "MI",
  "perf_st_name": "Michigan",
  "perf_zip_code": "481092121",
  "perf_ctry_code": "US",
  "perf_cong_dist": "06",
  "perf_st_cong_dist": "MI06",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 1079989.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>This research project developed a new program analysis called optimistic hybrid analysis (OHA) to ensure that programs run correctly and securely by monitoring their execution efficiently.</p>\n<p>Static program analysis is a powerful technique for understanding, verifying, optimizing, and transforming programs. Unfortunately, usefulness of those static analyses is greatly hindered by the need to prove their soundness, as soundness requires analysis of all possible executions and sound over-approximations of a program. This research developed optimistic static analyses, which make optimistic assumptions about a program, and are sound only when those assumptions hold true in an execution. The optimistic assumptions, called likely variants, are learnt by observing a representative set of executions. At runtime, these assumptions are checked, and hence the name optimistic hybrid analysis (OHA).&nbsp;If the assumptions fail, remedial actions are taken. As optimistic static analysis can prune a large fraction of the state space from consideration, its scalability and precision was shown to be two orders of magnitude higher than conventional sound analysis.</p>\n<p><span>This project developed several applications of optimistic hybrid analysis to improve security and reliability of systems. One, a dynamic data-race detector that is 3.5 times faster than one of the best known solution called FastTrack. Two, a dynamic information-flow tracking (DIF) solution called Iodine that is 4.4x times faster than the best known solution and incurs only 9% overhead. Three, a garbage collector for unmanaged C/C++ languages, which unlike prior solutions, guaranteed soundness for all programs for about 16% overhead. Finally, a language-level sequential consistency solution for Java, which incurs only 5% overhead for Spark on commodity x86 hardware.&nbsp;</span></p>\n<p>&nbsp;The project supported several graudate students who later joined academia and industry.&nbsp; The project's solutions have broader significance and importance in helping programs programs run more correctly and securely as they perform essential functions in society.</p>\n<p><span><br /></span></p><br>\n<p>\n Last Modified: 03/04/2024<br>\nModified by: Satish&nbsp;Narayanasamy</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nThis research project developed a new program analysis called optimistic hybrid analysis (OHA) to ensure that programs run correctly and securely by monitoring their execution efficiently.\n\n\nStatic program analysis is a powerful technique for understanding, verifying, optimizing, and transforming programs. Unfortunately, usefulness of those static analyses is greatly hindered by the need to prove their soundness, as soundness requires analysis of all possible executions and sound over-approximations of a program. This research developed optimistic static analyses, which make optimistic assumptions about a program, and are sound only when those assumptions hold true in an execution. The optimistic assumptions, called likely variants, are learnt by observing a representative set of executions. At runtime, these assumptions are checked, and hence the name optimistic hybrid analysis (OHA).If the assumptions fail, remedial actions are taken. As optimistic static analysis can prune a large fraction of the state space from consideration, its scalability and precision was shown to be two orders of magnitude higher than conventional sound analysis.\n\n\nThis project developed several applications of optimistic hybrid analysis to improve security and reliability of systems. One, a dynamic data-race detector that is 3.5 times faster than one of the best known solution called FastTrack. Two, a dynamic information-flow tracking (DIF) solution called Iodine that is 4.4x times faster than the best known solution and incurs only 9% overhead. Three, a garbage collector for unmanaged C/C++ languages, which unlike prior solutions, guaranteed soundness for all programs for about 16% overhead. Finally, a language-level sequential consistency solution for Java, which incurs only 5% overhead for Spark on commodity x86 hardware.\n\n\nThe project supported several graudate students who later joined academia and industry. The project's solutions have broader significance and importance in helping programs programs run more correctly and securely as they perform essential functions in society.\n\n\n\n\t\t\t\t\tLast Modified: 03/04/2024\n\n\t\t\t\t\tSubmitted by: SatishNarayanasamy\n"
 }
}