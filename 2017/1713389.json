{
 "awd_id": "1713389",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: RUI: New Foundations for Indexed Programming",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2017-09-15",
 "awd_exp_date": "2021-08-31",
 "tot_intn_awd_amt": 463504.0,
 "awd_amount": 463504.0,
 "awd_min_amd_letter_date": "2017-05-26",
 "awd_max_amd_letter_date": "2017-05-26",
 "awd_abstract_narration": "Testing of programs has dominated the last 50 years of software development, but the next 50 will see an increased demand for provably correct software. This is partly because modern applications are increasingly safety critical, partly because testing is by its very nature only a partial correctness guarantee, and partly because programming language technology has now advanced to the stage where it is feasible to formally verify critical programs. Language-based verification uses a language's type system to guarantee program correctness, so that type-checking a program becomes tantamount to verifying its correctness. Thus, the more program properties a type system can express, the more the compiler can automatically verify. Indexed programming is a key technique for using a language's type system to express more and more sophisticated properties of programs. Indexed programming uses the extra information present in type indices to help close the so-called \"semantic gap\" between what programmers know about their programs and what type systems can express about them. The intellectual merits of this project lie in providing a principled methodology for transferring knowledge about effective programming and proving between languages supporting type-indexing of types and those supporting term-indexing of types, developing a semantic framework that enhances researchers' and practitioners' understanding of the nature of indexed types in general, and opening the way for new forms of indexing that can enforce even greater correctness guarantees. The broader impact of this project is to use indexed types to develop better and more widely applicable formal program verification methods, and, thereby, to help ensure that even large and sophisticated software systems are safe and reliable. Because it will lead to provably correct and secure software, this project has the potential to impact any application area, and thus any sector of the economy, for which such software is paramount.\r\n\r\nThis project will use the algebraic structure of indexing to guide the way programmers program with indexed types. Specifically, it will advance the state-of-the-art by providing an axiomatic framework for indexed programming that is principled, conceptually simple, comprehensive, uniform, and predictive. It will use the categorical notion of a fibration to ensure that the framework is general enough both to describe traditional type- and term-indexing of types, and to prescribe approaches to indexed programming when indices have more sophisticated and computationally useful algebraic structure. To this end, it will develop analogues of the adjoint structure present in the fibrations underlying traditional type- and term-indexing for more general fibrations interpreting programs, their types, and their properties. Because fibrations can uniformly model very general notions of \"index\" and \"program property\" in very general computational settings, they are indeed a promising foundation for the new framework. The development of the framework will drive both theory and practice forward by transferring knowledge between the traditional type- and term-indexed settings, solving state-of-the-art problems in each of these settings, and providing an understanding of the conceptual essence of indexed programming that allows problem solutions from these traditional settings to be extended to new ones.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Patricia",
   "pi_last_name": "Johann",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Patricia Johann",
   "pi_email_addr": "johannp@appstate.edu",
   "nsf_id": "000659322",
   "pi_start_date": "2017-05-26",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Appalachian State University",
  "inst_street_address": "438 ACADEMY ST",
  "inst_street_address_2": "",
  "inst_city_name": "BOONE",
  "inst_state_code": "NC",
  "inst_state_name": "North Carolina",
  "inst_phone_num": "8282627459",
  "inst_zip_code": "286080001",
  "inst_country_name": "United States",
  "cong_dist_code": "05",
  "st_cong_dist_code": "NC05",
  "org_lgl_bus_name": "APPALACHIAN STATE UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "F1NAKY5L1425"
 },
 "perf_inst": {
  "perf_inst_name": "Appalachian State University",
  "perf_str_addr": "P.O. Box 32174",
  "perf_city_name": "Boone",
  "perf_st_code": "NC",
  "perf_st_name": "North Carolina",
  "perf_zip_code": "286082174",
  "perf_ctry_code": "US",
  "perf_cong_dist": "05",
  "perf_st_cong_dist": "NC05",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 463504.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>In this project we studied type- and term-indexed data types to better understand their syntax and semantics, as well as how the two kinds of indexing relate to one another. The ultimate goal of this line of work is to help programmers think about, and use, indexed types more effectively in practice.</p>\n<p>Postdoc Andrew Polonsky and I first proved a new, fundamental result in pure category theory that we needed to develop semantics of indexed data types. This result was a surprise --- not just to us, but to world experts on the topic, who expected it to be false. The result is reported in our Applied Category Theory (ACT) paper.</p>\n<p>Polonsky and I used our ACT result to develop a fundamentally new syntax and semantics for higher-kinded (type-indexed) types, including (truly) nested types and generalized algebraic data types (GADTs). These are widely used in functional programming to enforce constraints on data. Our results are reported in our LICS'19 paper.</p>\n<p>Polonsky and I then used the semantics for (truly) nested types from our LICS'19 paper to develop an extended theory of induction over them.&nbsp; Our theory made it possible to define the first-ever induction rules for truly nested types. It also delivered new induction rules for nested types that greatly improve those currently generated for all nested types (including algebraic data types) by modern theorem provers. The new rules are reported in our FoSSaCS'20 paper, which is accompanied by a small Agda implementation.</p>\n<p>Postdoc Enrico Ghiorzi, App State Master's student Daniel Jeffries, and I subsequently discovered that the same approach used in the FoSSaCS'20 paper does not support induction rules for GADTs (explaining, perhaps, why no proof assistants currently generate such rules). Despite working on this problem for over a year now, I still know of no semantics for GADTs that support induction rules and specialize to those for algebraic data types (ADTs) and nested types. The reasons for this seem to be very deep. The issue is still very actively under investigation.</p>\n<p>Ghiorzi, Jeffries, and I used the semantics from the LICS'19 paper to give a parametric model for a polymorphic lambda calculus supporting nested types (including truly nested types) as primitive, or native, data types. Parametricity makes it possible to reason uniformly about data at different instances of a data type. Our model is reported in our FoSSaCS'21 paper. Jeffries made good progress on implementing and formally validating our theory of parametricity for nested types in Agda in his (ambitious) Master's thesis.&nbsp; For the same reasons that we haven't been able to extend induction to GADTs, we haven't been able to understand our parametric model to them either. The important parts of our understanding of the situation are summarized in our LFSA'21 paper.</p>\n<p>On the non-technical side, this project brought two successive post-doctoral researchers to App State and supported one Master's student. It created the opportunity for an undergraduate to get involved in internationally leading research, and to stay on for a Master's degree in which they could continue that work. It also provided the second postdoc good training in mentoring a graduate student. The project resulted not just in a Master's degree for the student, but also in two co-authored publications at internationally competitive venues.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 10/25/2021<br>\n\t\t\t\t\tModified by: Patricia&nbsp;Johann</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nIn this project we studied type- and term-indexed data types to better understand their syntax and semantics, as well as how the two kinds of indexing relate to one another. The ultimate goal of this line of work is to help programmers think about, and use, indexed types more effectively in practice.\n\nPostdoc Andrew Polonsky and I first proved a new, fundamental result in pure category theory that we needed to develop semantics of indexed data types. This result was a surprise --- not just to us, but to world experts on the topic, who expected it to be false. The result is reported in our Applied Category Theory (ACT) paper.\n\nPolonsky and I used our ACT result to develop a fundamentally new syntax and semantics for higher-kinded (type-indexed) types, including (truly) nested types and generalized algebraic data types (GADTs). These are widely used in functional programming to enforce constraints on data. Our results are reported in our LICS'19 paper.\n\nPolonsky and I then used the semantics for (truly) nested types from our LICS'19 paper to develop an extended theory of induction over them.  Our theory made it possible to define the first-ever induction rules for truly nested types. It also delivered new induction rules for nested types that greatly improve those currently generated for all nested types (including algebraic data types) by modern theorem provers. The new rules are reported in our FoSSaCS'20 paper, which is accompanied by a small Agda implementation.\n\nPostdoc Enrico Ghiorzi, App State Master's student Daniel Jeffries, and I subsequently discovered that the same approach used in the FoSSaCS'20 paper does not support induction rules for GADTs (explaining, perhaps, why no proof assistants currently generate such rules). Despite working on this problem for over a year now, I still know of no semantics for GADTs that support induction rules and specialize to those for algebraic data types (ADTs) and nested types. The reasons for this seem to be very deep. The issue is still very actively under investigation.\n\nGhiorzi, Jeffries, and I used the semantics from the LICS'19 paper to give a parametric model for a polymorphic lambda calculus supporting nested types (including truly nested types) as primitive, or native, data types. Parametricity makes it possible to reason uniformly about data at different instances of a data type. Our model is reported in our FoSSaCS'21 paper. Jeffries made good progress on implementing and formally validating our theory of parametricity for nested types in Agda in his (ambitious) Master's thesis.  For the same reasons that we haven't been able to extend induction to GADTs, we haven't been able to understand our parametric model to them either. The important parts of our understanding of the situation are summarized in our LFSA'21 paper.\n\nOn the non-technical side, this project brought two successive post-doctoral researchers to App State and supported one Master's student. It created the opportunity for an undergraduate to get involved in internationally leading research, and to stay on for a Master's degree in which they could continue that work. It also provided the second postdoc good training in mentoring a graduate student. The project resulted not just in a Master's degree for the student, but also in two co-authored publications at internationally competitive venues.\n\n\t\t\t\t\tLast Modified: 10/25/2021\n\n\t\t\t\t\tSubmitted by: Patricia Johann"
 }
}