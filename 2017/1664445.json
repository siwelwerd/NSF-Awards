{
 "awd_id": "1664445",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "TWC: Small: Collaborative: An Iterative Approach to Secure Computation",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927991",
 "po_email": "namla@nsf.gov",
 "po_sign_block_name": "Nina Amla",
 "awd_eff_date": "2016-09-15",
 "awd_exp_date": "2019-08-31",
 "tot_intn_awd_amt": 249954.0,
 "awd_amount": 265954.0,
 "awd_min_amd_letter_date": "2016-12-12",
 "awd_max_amd_letter_date": "2017-04-28",
 "awd_abstract_narration": "Secure multi-party computation (MPC) allows several mutually untrusting parties to perform joint computations while keeping their inputs private. This project develops new techniques for constructing two-party secure computation protocols with low communication overhead.   Building on the Principal Investigator's prior work for constructing special-purpose secure MPC protocols for greedy algorithms, this project develops new techniques that exploit the algorithmic structure of a function in order to develop more efficient secure computation protocols. \r\n\r\nThe project develops new methods to achieve security against covert adversaries for linear algebraic tasks, graph matching algorithms, and problems from computational geometry. The investigators broadly disseminate the outcomes of the research and software libraries in order to benefit both theoreticians and practitioners. The project includes various educational and outreach activities such as organizing workshops for high-school students. The project has created a wiki for cryptographic constructions and security notions associated with these constructions.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Abhi",
   "pi_last_name": "Shelat",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Abhi Shelat",
   "pi_email_addr": "a.shelat@northeastern.edu",
   "nsf_id": "000376004",
   "pi_start_date": "2016-12-12",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Northeastern University",
  "inst_street_address": "360 HUNTINGTON AVE",
  "inst_street_address_2": "",
  "inst_city_name": "BOSTON",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "6173735600",
  "inst_zip_code": "021155005",
  "inst_country_name": "United States",
  "cong_dist_code": "07",
  "st_cong_dist_code": "MA07",
  "org_lgl_bus_name": "NORTHEASTERN UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "HLTMVS2JZBS6"
 },
 "perf_inst": {
  "perf_inst_name": "Northeastern University",
  "perf_str_addr": "360 Huntington Ave",
  "perf_city_name": "Boston",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "021155005",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "MA07",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "171400",
   "pgm_ele_name": "Special Projects - CNS"
  },
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "9178",
   "pgm_ref_txt": "UNDERGRADUATE EDUCATION"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 249954.0
  },
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 16000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p id=\"docs-internal-guid-2b40e827-7fff-9b63-f7ee-b5b82be475c8\" style=\"line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">This project has developed new techniques for constructing two-party and multi-party secure computation protocols with low communication overhead.&nbsp; The standard method for designing a secure computation protocol for function $f$ first transforms $f$ into either a circuit or a RAM program and then applies a generic secure computation protocol that either handles boolean gates or translates the RAM program into oblivious RAM instructions. While much progress has been made to reduce the overhead for both circuit and ORAM techniques, the communication overhead remains a substantial bottleneck.</span></p>\n<p>&nbsp;</p>\n<p style=\"line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">One of the main outcomes of our project is a new paradigm for securely computing functions that are ``efficiently verifiable''. A function $f(x,y)$ is efficiently verifiable by another function $g$ if the running time of $g$ is always smaller than $f$ and $g(x,y,z)=1$ if and only if $f(x,y)=z$. For such functions $f$, we show how to construct 2-party secure computation protocols in the 1-bit leak adversary model and the fully malicious adversary model that are asymptotically more efficient than the state-of-the-art techniques. Our techniques apply to problems as varied as matrix multiplication, optimization problems such as max-flow and minimum spanning tree.</span></p>\n<p>&nbsp;</p>\n<p style=\"line-height: 1.2; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">We also&nbsp; extend and generalize the technique by showing how to apply it to any secure protocol that is secure up to additive errors. As another concrete example, we present a novel protocol for computing perfect matching that is secure in the 1-bit leakage model by leveraging the fact that perfect matchings can be efficiently verified.&nbsp;</span></p>\n<p>&nbsp;</p>\n<p style=\"line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Building on these techniques, we also constructed state-of-the-art secure computation protocols for ECDSA key generation and signing for both 2- and n- parties that are secure against n-1 malicious parties.&nbsp; These protocols rely on a new technique for detecting cheating by verifying the output signatures.&nbsp; Similarly, we have designed secure protocols for sampling an RSA modulus that also rely on special verifiability properties of the function in order to protect against malicious parties.</span></p>\n<p>&nbsp;</p>\n<p style=\"line-height: 1.2; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Finally, we introduced a new secure two-party computation for arithmetic circuits and gave the first implementation of a general compiler that takes an arbitrary passively secure protocol for the oblivious linear evaluation functionality (OLE) and uses it in a black-box way to obtain an actively secure protocol for arithmetic circuits.</span></p>\n<p style=\"line-height: 1.2; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\">&nbsp;</p>\n<p style=\"line-height: 1.2; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Overall, we have introduced both new generic techniques for constructing secure computation protocols as well as new techniques that exploit properties of the function that is evaluated in order to improve some aspect of efficiency.  Some of our protocols have been implemented and the source code has been publicly released.<br /></span></p><br>\n<p>\n\t\t\t\t      \tLast Modified: 07/28/2020<br>\n\t\t\t\t\tModified by: Abhi&nbsp;Shelat</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "This project has developed new techniques for constructing two-party and multi-party secure computation protocols with low communication overhead.  The standard method for designing a secure computation protocol for function $f$ first transforms $f$ into either a circuit or a RAM program and then applies a generic secure computation protocol that either handles boolean gates or translates the RAM program into oblivious RAM instructions. While much progress has been made to reduce the overhead for both circuit and ORAM techniques, the communication overhead remains a substantial bottleneck.\n\n \nOne of the main outcomes of our project is a new paradigm for securely computing functions that are ``efficiently verifiable''. A function $f(x,y)$ is efficiently verifiable by another function $g$ if the running time of $g$ is always smaller than $f$ and $g(x,y,z)=1$ if and only if $f(x,y)=z$. For such functions $f$, we show how to construct 2-party secure computation protocols in the 1-bit leak adversary model and the fully malicious adversary model that are asymptotically more efficient than the state-of-the-art techniques. Our techniques apply to problems as varied as matrix multiplication, optimization problems such as max-flow and minimum spanning tree.\n\n \nWe also  extend and generalize the technique by showing how to apply it to any secure protocol that is secure up to additive errors. As another concrete example, we present a novel protocol for computing perfect matching that is secure in the 1-bit leakage model by leveraging the fact that perfect matchings can be efficiently verified. \n\n \nBuilding on these techniques, we also constructed state-of-the-art secure computation protocols for ECDSA key generation and signing for both 2- and n- parties that are secure against n-1 malicious parties.  These protocols rely on a new technique for detecting cheating by verifying the output signatures.  Similarly, we have designed secure protocols for sampling an RSA modulus that also rely on special verifiability properties of the function in order to protect against malicious parties.\n\n \nFinally, we introduced a new secure two-party computation for arithmetic circuits and gave the first implementation of a general compiler that takes an arbitrary passively secure protocol for the oblivious linear evaluation functionality (OLE) and uses it in a black-box way to obtain an actively secure protocol for arithmetic circuits.\n \nOverall, we have introduced both new generic techniques for constructing secure computation protocols as well as new techniques that exploit properties of the function that is evaluated in order to improve some aspect of efficiency.  Some of our protocols have been implemented and the source code has been publicly released.\n\n\n\t\t\t\t\tLast Modified: 07/28/2020\n\n\t\t\t\t\tSubmitted by: Abhi Shelat"
 }
}