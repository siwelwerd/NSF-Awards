{
 "awd_id": "1700723",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: The Loop Chain Abstraction for Balancing Locality and Parallelism",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2016-08-16",
 "awd_exp_date": "2018-01-31",
 "tot_intn_awd_amt": 259994.0,
 "awd_amount": 259994.0,
 "awd_min_amd_letter_date": "2016-10-28",
 "awd_max_amd_letter_date": "2016-10-28",
 "awd_abstract_narration": "Title: SHF: Small: The Loop Chain Abstraction for Balancing Locality and Parallelism\r\n\r\nComputational science, which involves modeling and simulation of phenomena such as combustion in engines, has become the third pillar of science and engineering research. Computer simulations test design parameters much more cheaply than physical experiments.  Also, computer simulations participate in a fortuitous cycle with theory by enabling inexpensive experimentation of theoretical models.  Mapping computer simulations to high performance computer architectures is a challenging computer science problem; constraints include achieving high performance and effective use of computing resources while not overburdening scientific programmers.  This challenge is becoming more severe as architectures continue to evolve in ways that make them ever more difficult to use.  In this project, the PIs will remove programmer burden by developing a programming abstraction called loop chaining, which enables architecture-specific program optimizations by compilers.  This work enables scientists to spend less time dealing with annoying performance programming details and more time evolving their scientific models that help push science and engineering forward.\r\n\r\nExposing opportunities for parallelization while explicitly managing data locality is the primary challenge to porting and optimizing existing computational science simulation codes. The most popular programming models used in these codes such as MPI (Message Passing Interface) require that programmers explicitly determine the data and computation distribution. This has led to good scaling between compute nodes, but parallelism and locality are needed within a node as well. There are many approaches for implementing shared memory parallelism, but with most of them it is the programmer's responsibility to group computations to improve data locality. This project focuses on the development of the loop chain abstraction to provide compilers with sufficient information to automate the parallelism versus data locality tradeoff.  Preliminary results show that using the loop chain abstraction can significantly improve parallel scalability.  The intellectual merits are that the loop chain abstraction will enable existing codes to maintain their software modularity while exposing information critical to performance optimizations that improve parallel scalability.  Some important contributions of this research are the re-casting of existing program optimizations to use the loop chain abstraction as input and the eventual incorporation of the loop chain abstraction into parallel programming languages.  The broader impacts include reducing the burden on scientists developing computational simulations, sharing the developed compiler prototypes as open-source software, and providing tutorials for doing source-to-source loop chain-based tiling transformations in C++ and Fortran code.  The testbed for loop chaining will include atmospheric science, materials, and combustion codes, therefore tunable versions of these applications will be released.  Additionally, a new course module will be developed, through which students will be trained in computational science and specifically, on how to expose loop chains within simulation software.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Catherine",
   "pi_last_name": "Olschanowsky",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Catherine Olschanowsky",
   "pi_email_addr": "cathie@cs.boisestate.edu",
   "nsf_id": "000642763",
   "pi_start_date": "2016-10-28",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Boise State University",
  "inst_street_address": "1910 UNIVERSITY DR",
  "inst_street_address_2": "",
  "inst_city_name": "BOISE",
  "inst_state_code": "ID",
  "inst_state_name": "Idaho",
  "inst_phone_num": "2084261574",
  "inst_zip_code": "837250001",
  "inst_country_name": "United States",
  "cong_dist_code": "02",
  "st_cong_dist_code": "ID02",
  "org_lgl_bus_name": "BOISE STATE UNIVERSITY",
  "org_prnt_uei_num": "HYWTVM5HNFM3",
  "org_uei_num": "HYWTVM5HNFM3"
 },
 "perf_inst": {
  "perf_inst_name": "Boise State University",
  "perf_str_addr": "1910 University Drive",
  "perf_city_name": "Boise",
  "perf_st_code": "ID",
  "perf_st_name": "Idaho",
  "perf_zip_code": "837251135",
  "perf_ctry_code": "US",
  "perf_cong_dist": "02",
  "perf_st_cong_dist": "ID02",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0114",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001415DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2014,
   "fund_oblg_amt": 259994.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Many scientific applications take advantage of leadership class compute resources. These resources vary in their configuration and efficient execution using them depends on configuration-specific optimization. The optimizations cost a great deal of developer time and are typical not portable to other resources causing significant difficulty and cost for computational scientists. This project aimed to develop automated methods to optimize the applications. The methods take advantage of patterns commonly found in scientific applications.&nbsp;</p>\n<p><br />Exposing opportunities for parallelization while explicitly managing data locality is the primary challenge to porting and optimizing existing computational science simulation codes to improve performance and accuracy. The most popular programming models in these codes such as MPI require that programmers explicitly determine the data and computation distribution. This has led to good scaling between nodes, but parallelism and locality are needed within the node as well. There are many approaches for implementing shared memory parallelism, but with most of them it is the programmer's responsibility to group computations to improve data locality. We propose the loop chain abstraction for providing compilers with sufficient information to automate the parallelism versus data locality tradeoff.</p>\n<p><br />This project developed a source-to-source translation pipeline and developed different approaches to optimizing the application. The pipeline depends on annotations that are added to the source code (see figure 1). The annotations provide essential information to the translator. The pipeline involves parsing the annotations into a internal data structure, the loop chain IR. The IR is tool agnostic. For this project we integrated it with the Rose compiler framework. The pipeline transforms the input code according to instructions indicated in the annotations. The output code is then passed to a standard compiler framework.</p>\n<p><br />Enumerating the optimization options and choosing among them are challenging tasks for compiler frameworks. Two forms of dataflow analysis were explored to tackle the enumeration of options. First, a visual macro dataflow technique was explored. This results in static scheduling. Second, a dataflow representation used at runtime was explored. Both techniques resulted in performance improvements and show potential for future work.<br /><br /><strong>Intellectual Merit</strong><br />The loop chain abstraction was inspired by loop sequences that commonly occur in scientific codes from a number of scientific domains. Due to the difficulty and often impossibility of performing precise, inter-procedural pointer and data dependence analysis within these codes, program optimizations that could automatically navigate the parallelism versus data locality tradeoff in these loop sequences have not and probably will not be incorporated into general purpose compilers. The loop chain abstraction enables existing codes to maintain their software modularity while exposing information critical to performance optimizations that improve parallel scalability.&nbsp;<br />The performance experiments performed during this project clearly demonstrate the importance of reducing interactions with all levels of the memory hierarchy. These results will influence ongoing research in optimization as well as how scientific applications are written.</p>\n<p><br /><strong>Broader Impact</strong><br />Boise State University has recently started a PhD in computing program. One of the emphasis areas for this program is computational science. The PI has developed a parallel computing course that will be taken by computer and computational sciences and will use the application exemplar and dataflow programming tools developed by this project.</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 05/03/2018<br>\n\t\t\t\t\tModified by: Catherine&nbsp;Olschanowsky</p>\n</div>\n<div class=\"porSideCol\">\n<div class=\"each-gallery\">\n<div class=\"galContent\" id=\"gallery0\">\n<div class=\"photoCount\" id=\"photoCount0\">\n\t\t\t\t\t\t\t\t\tImage\n\t\t\t\t\t\t\t\t</div>\n<div class=\"galControls onePhoto\" id=\"controls0\"></div>\n<div class=\"galSlideshow\" id=\"slideshow0\"></div>\n<div class=\"galEmbox\" id=\"embox\">\n<div class=\"image-title\"></div>\n</div>\n</div>\n<div class=\"galNavigation onePhoto\" id=\"navigation0\">\n<ul class=\"thumbs\" id=\"thumbs0\">\n<li>\n<a href=\"/por/images/Reports/POR/2018/1700723/1700723_10315321_1525379206339_overview--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2018/1700723/1700723_10315321_1525379206339_overview--rgov-800width.jpg\" title=\"An example of Loop Chain Pragmas being used to inform an internal representation.\"><img src=\"/por/images/Reports/POR/2018/1700723/1700723_10315321_1525379206339_overview--rgov-66x44.jpg\" alt=\"An example of Loop Chain Pragmas being used to inform an internal representation.\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">The Loop Chaining Abstraction communicates information from the programmer to the compiler. In this example the the information is being used to inform a dataflow graph internal representation.</div>\n<div class=\"imageCredit\">Catherine Olschanowsky, Boise State University</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Catherine&nbsp;Olschanowsky</div>\n<div class=\"imageTitle\">An example of Loop Chain Pragmas being used to inform an internal representation.</div>\n</div>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>",
  "por_txt_cntn": "\nMany scientific applications take advantage of leadership class compute resources. These resources vary in their configuration and efficient execution using them depends on configuration-specific optimization. The optimizations cost a great deal of developer time and are typical not portable to other resources causing significant difficulty and cost for computational scientists. This project aimed to develop automated methods to optimize the applications. The methods take advantage of patterns commonly found in scientific applications. \n\n\nExposing opportunities for parallelization while explicitly managing data locality is the primary challenge to porting and optimizing existing computational science simulation codes to improve performance and accuracy. The most popular programming models in these codes such as MPI require that programmers explicitly determine the data and computation distribution. This has led to good scaling between nodes, but parallelism and locality are needed within the node as well. There are many approaches for implementing shared memory parallelism, but with most of them it is the programmer's responsibility to group computations to improve data locality. We propose the loop chain abstraction for providing compilers with sufficient information to automate the parallelism versus data locality tradeoff.\n\n\nThis project developed a source-to-source translation pipeline and developed different approaches to optimizing the application. The pipeline depends on annotations that are added to the source code (see figure 1). The annotations provide essential information to the translator. The pipeline involves parsing the annotations into a internal data structure, the loop chain IR. The IR is tool agnostic. For this project we integrated it with the Rose compiler framework. The pipeline transforms the input code according to instructions indicated in the annotations. The output code is then passed to a standard compiler framework.\n\n\nEnumerating the optimization options and choosing among them are challenging tasks for compiler frameworks. Two forms of dataflow analysis were explored to tackle the enumeration of options. First, a visual macro dataflow technique was explored. This results in static scheduling. Second, a dataflow representation used at runtime was explored. Both techniques resulted in performance improvements and show potential for future work.\n\nIntellectual Merit\nThe loop chain abstraction was inspired by loop sequences that commonly occur in scientific codes from a number of scientific domains. Due to the difficulty and often impossibility of performing precise, inter-procedural pointer and data dependence analysis within these codes, program optimizations that could automatically navigate the parallelism versus data locality tradeoff in these loop sequences have not and probably will not be incorporated into general purpose compilers. The loop chain abstraction enables existing codes to maintain their software modularity while exposing information critical to performance optimizations that improve parallel scalability. \nThe performance experiments performed during this project clearly demonstrate the importance of reducing interactions with all levels of the memory hierarchy. These results will influence ongoing research in optimization as well as how scientific applications are written.\n\n\nBroader Impact\nBoise State University has recently started a PhD in computing program. One of the emphasis areas for this program is computational science. The PI has developed a parallel computing course that will be taken by computer and computational sciences and will use the application exemplar and dataflow programming tools developed by this project.\n\n \n\n \n\n \n\n\t\t\t\t\tLast Modified: 05/03/2018\n\n\t\t\t\t\tSubmitted by: Catherine Olschanowsky"
 }
}