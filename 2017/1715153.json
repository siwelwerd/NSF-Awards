{
 "awd_id": "1715153",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Automated Detection and Repair of Errors in Event-Driven Applications",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2017-07-15",
 "awd_exp_date": "2021-07-31",
 "tot_intn_awd_amt": 443979.0,
 "awd_amount": 451979.0,
 "awd_min_amd_letter_date": "2017-07-07",
 "awd_max_amd_letter_date": "2019-04-04",
 "awd_abstract_narration": "Event-driven software plays an exceedingly important role in modern society, in a variety of domains that include browser-based software for the web, server-side applications, and apps running on mobile devices. In such applications, control flow is driven by events that are triggered by users or by external systems. Writing event-driven software is notoriously error-prone, and when programmers make mistakes, various types of errors manifest themselves that are notoriously difficult to debug. The quality of event-driven web-based software remains a significant challenge, and programming errors undermine confidence in companies and institutions that offer goods or services on-line, and may put them at risk legally and financially. The intellectual merits of this project are the development of practical algorithms and tools for detecting and automatically repairing errors in event-driven software. The project's broader significance and importance follows from improvements in the quality of web-based software that are enabled by practical tools for finding and fixing errors.\r\n \r\nThe technical focus of this project is on the development of well-founded solutions for accommodating event-driven control flow in static and dynamic program analysis algorithms, implementing them in practical tools, and evaluating them on real-world software. Specific research topics under study include the development of: precise interprocedural data flow analysis algorithms that are capable of preventing data flow along infeasible control-flow paths, static analysis algorithms for JavaScript code that makes use of promises, a mechanism for asynchronous computation that is now widely adopted in the JavaScript community, and techniques for automatically repairing event race errors in web applications, by restricting event handler scheduling in the browser according to a specified repair policy. Together, these techniques will facilitate the development of more reliable event-driven software, by enabling programmers to detect and repair errors more quickly.\r\n\r\nThe project is releasing the developed tools as open source and is building a user community around the tools by ensuring that interested researchers are able to contribute to the codebase. This aspect is of special interest to the software cluster in NSF's Office of Advanced Cyberinfrastructure, which provides co-funding for this award.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Frank",
   "pi_last_name": "Tip",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Frank Tip",
   "pi_email_addr": "f.tip@northeastern.edu",
   "nsf_id": "000129422",
   "pi_start_date": "2017-07-07",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Northeastern University",
  "inst_street_address": "360 HUNTINGTON AVE",
  "inst_street_address_2": "",
  "inst_city_name": "BOSTON",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "6173735600",
  "inst_zip_code": "021155005",
  "inst_country_name": "United States",
  "cong_dist_code": "07",
  "st_cong_dist_code": "MA07",
  "org_lgl_bus_name": "NORTHEASTERN UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "HLTMVS2JZBS6"
 },
 "perf_inst": {
  "perf_inst_name": "Northeastern University",
  "perf_str_addr": "360 Huntington Ave",
  "perf_city_name": "Boston",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "021155005",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "MA07",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "689200",
   "pgm_ele_name": "CI REUSE"
  },
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7433",
   "pgm_ref_txt": "CyberInfra Frmwrk 21st (CIF21)"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  },
  {
   "pgm_ref_code": "8004",
   "pgm_ref_txt": "Software Institutes"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 443979.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 8000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Event-driven software is organized as a collection of event handlers that are executed in response to events being triggered. This programming model is pervasive in web-based applications that execute in a browser, where events may consist of mouse-clicks or items being selected in an interactive menu. However, event driven control flow is increasingly common in server-based software as well, where events may correspond to messages arriving via an internet connection, or data being retrieved from a file system or database. Writing event-driven software is challenging, as it involves complex programming language features such as higher-order functions (i.e., functions whose parameters or return values are functions) and asynchronous control flow. As a result, programmers may accidentally introduce bugs, or they may write code in ways that give rise to performance bottlenecks.</p>\n<p>&nbsp;</p>\n<p>This project focused on the development of static and dynamic program analysis techniques for the detection of errors in event-driven software. As part of this project, a formal model for promises, a complex mechanism for asynchronous programming that was recently adopted by the JavaScript programming language, was developed. Based on this model, &nbsp;a program representation called the promise graph was defined, which can be used as the foundation for analysis techniques and bug-finding tools. &nbsp;Another contribution is the development of a formal semantics for React, a popular framework for constructing interactive user-interfaces. These models facilitate the analysis of programs using these features, enabling the construction of better tools for finding bugs and performance bottlenecks.</p>\n<p>&nbsp;</p>\n<p>Several dynamic analysis techniques and tools were developed for finding bugs in promise-based applications, for detecting race conditions in event-driven programs, and for automatically generating tests for programs using higher-order functions. This includes the development of PromiseKeeper, a dynamic analysis tool that constructs promise graphs and alerts programmers at possible bugs in their programs. &nbsp;AjaxRacer is a dynamic analysis tool that was developed for detecting event-race errors in JavaScript applications that rely on AJAX, a popular protocol for client-server communication. LambdaTester is a tool that was developed for generating tests for libraries that define higher-order functions. Furthermore, static analysis techniques were developed for detecting performance bottlenecks in asynchronous JavaScript applications, and for refactoring JavaScript applications to eliminate performance bottlenecks. This includes the development of Resynchronizer, a tool for detecting optimization opportunities in JavaScript applications that rely on the async/await feature for asynchronous programming, and Desynchronizer, a tool for assisting programmers with the migration from synchronous APIs (Application Program Interfaces) to more efficient asynchronous APIs.</p>\n<p>&nbsp;</p>\n<p>The results of this research have been published in premier publication venues in the areas of Programming Languages and Software Engineering, and developed tools have been made available to the public as open-source software. Two of the publications associated with this project have received Distinguished Paper Awards.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 08/13/2021<br>\n\t\t\t\t\tModified by: Frank&nbsp;Tip</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nEvent-driven software is organized as a collection of event handlers that are executed in response to events being triggered. This programming model is pervasive in web-based applications that execute in a browser, where events may consist of mouse-clicks or items being selected in an interactive menu. However, event driven control flow is increasingly common in server-based software as well, where events may correspond to messages arriving via an internet connection, or data being retrieved from a file system or database. Writing event-driven software is challenging, as it involves complex programming language features such as higher-order functions (i.e., functions whose parameters or return values are functions) and asynchronous control flow. As a result, programmers may accidentally introduce bugs, or they may write code in ways that give rise to performance bottlenecks.\n\n \n\nThis project focused on the development of static and dynamic program analysis techniques for the detection of errors in event-driven software. As part of this project, a formal model for promises, a complex mechanism for asynchronous programming that was recently adopted by the JavaScript programming language, was developed. Based on this model,  a program representation called the promise graph was defined, which can be used as the foundation for analysis techniques and bug-finding tools.  Another contribution is the development of a formal semantics for React, a popular framework for constructing interactive user-interfaces. These models facilitate the analysis of programs using these features, enabling the construction of better tools for finding bugs and performance bottlenecks.\n\n \n\nSeveral dynamic analysis techniques and tools were developed for finding bugs in promise-based applications, for detecting race conditions in event-driven programs, and for automatically generating tests for programs using higher-order functions. This includes the development of PromiseKeeper, a dynamic analysis tool that constructs promise graphs and alerts programmers at possible bugs in their programs.  AjaxRacer is a dynamic analysis tool that was developed for detecting event-race errors in JavaScript applications that rely on AJAX, a popular protocol for client-server communication. LambdaTester is a tool that was developed for generating tests for libraries that define higher-order functions. Furthermore, static analysis techniques were developed for detecting performance bottlenecks in asynchronous JavaScript applications, and for refactoring JavaScript applications to eliminate performance bottlenecks. This includes the development of Resynchronizer, a tool for detecting optimization opportunities in JavaScript applications that rely on the async/await feature for asynchronous programming, and Desynchronizer, a tool for assisting programmers with the migration from synchronous APIs (Application Program Interfaces) to more efficient asynchronous APIs.\n\n \n\nThe results of this research have been published in premier publication venues in the areas of Programming Languages and Software Engineering, and developed tools have been made available to the public as open-source software. Two of the publications associated with this project have received Distinguished Paper Awards.\n\n\t\t\t\t\tLast Modified: 08/13/2021\n\n\t\t\t\t\tSubmitted by: Frank Tip"
 }
}