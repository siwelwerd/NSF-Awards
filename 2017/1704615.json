{
 "awd_id": "1704615",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "SaTC: CORE: Medium: Proactive and Reactive Mechanisms for Safer Smart Contracts",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2017-08-01",
 "awd_exp_date": "2022-07-31",
 "tot_intn_awd_amt": 1199947.0,
 "awd_amount": 1199947.0,
 "awd_min_amd_letter_date": "2017-07-26",
 "awd_max_amd_letter_date": "2022-03-11",
 "awd_abstract_narration": "Smart contracts are autonomously executing programs that can manipulate digital assets. Their key capability is the creation of trustworthy transaction environments: They can execute arbitrarily complex agreements in a manner that is fair to all parties. Smart contracts promise to have a transformative societal impact, bringing radical new efficiency to sectors as diverse as finance, digital media, and insurance. An impediment to the successful deployment of smart contracts, however, is their heightened susceptibility to bugs, which can lead directly to violation of contractual obligations and even theft of assets. Thus, new ways of ensuring the trustworthiness of smart contracts are needed.\r\n \r\nThis research project attacks the problem of trustworthiness in smart contracts from two sides. It explores new, proactive, language-based mechanisms for increasing the assurance that contracts are correctly implemented before deployment. Not all errors can be caught prior to deployment, however, so the project also investigates reactive mechanisms for preventing and mitigating the damage caused by incorrectly programmed smart contracts. The reactive methods explored in this research include the principled use of bug bounties to incentivize discovery and reporting of bugs, coupled with built-in mitigation mechanisms that alter contract behavior when bugs are uncovered. The outcomes of this research will include new scientific foundations for smart contract assurance that are applicable to the broader problem of software assurance, as well as practical methods that combine proactive and reactive tools to achieve heightened trustworthiness in deployed smart contracts.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Ari",
   "pi_last_name": "Juels",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Ari Juels",
   "pi_email_addr": "juels@cornell.edu",
   "nsf_id": "000682509",
   "pi_start_date": "2017-07-26",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Andrew",
   "pi_last_name": "Myers",
   "pi_mid_init": "C",
   "pi_sufx_name": "",
   "pi_full_name": "Andrew C Myers",
   "pi_email_addr": "andru@cs.cornell.edu",
   "nsf_id": "000385587",
   "pi_start_date": "2017-07-26",
   "pi_end_date": null
  },
  {
   "pi_role": "Former Co-Principal Investigator",
   "pi_first_name": "Emin",
   "pi_last_name": "Sirer",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Emin Sirer",
   "pi_email_addr": "egs@cs.cornell.edu",
   "nsf_id": "000200512",
   "pi_start_date": "2017-07-26",
   "pi_end_date": "2022-03-11"
  }
 ],
 "inst": {
  "inst_name": "Cornell University",
  "inst_street_address": "341 PINE TREE RD",
  "inst_street_address_2": "",
  "inst_city_name": "ITHACA",
  "inst_state_code": "NY",
  "inst_state_name": "New York",
  "inst_phone_num": "6072555014",
  "inst_zip_code": "148502820",
  "inst_country_name": "United States",
  "cong_dist_code": "19",
  "st_cong_dist_code": "NY19",
  "org_lgl_bus_name": "CORNELL UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "G56PUALJ3KT5"
 },
 "perf_inst": {
  "perf_inst_name": "Cornell Tech",
  "perf_str_addr": "111 8th Ave #302",
  "perf_city_name": "New York",
  "perf_st_code": "NY",
  "perf_st_name": "New York",
  "perf_zip_code": "100115201",
  "perf_ctry_code": "US",
  "perf_cong_dist": "10",
  "perf_st_cong_dist": "NY10",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 589927.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 301108.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 308912.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-3a9fa2e2-7fff-17da-fdd4-983ecfb478ac\">&nbsp;</span></p>\n<p dir=\"ltr\"><span>This award has contributed funding to numerous advances relating to its objective: enhancing the security of smart contracts using both proactive and reactive mechanisms. These include most notably:</span></p>\n<ul>\n<li dir=\"ltr\">\n<p dir=\"ltr\"><span>Hydra contracts: We developed the Hydra Framework, the first general, principled approach to modeling and administering bug bounties for smart contracts. Bug bounties are monetary awards for disclosing software vulnerabilities. They are a popular tool to incentivize bug disclosure and thereby help prevent software exploits. The Hydra Framework is a bug-bounty system based on the concept of N-version programming, which involves execution of multiple variants of a piece of software. The key idea is that a bug bounty is offered for disclosing a bug in one variant. Such disclosure helps secure the software in question; thanks to the existence of other variants, however, the reported bug does not itself pose a security threat. Our work was published in USENIX Security Symposium 2018, a top information security conference. We also published a follow-up article on our work in IEEE Security and Privacy magazine.</span></p>\n</li>\n<li dir=\"ltr\">\n<p dir=\"ltr\"><span>LibSubmarine: As an outgrowth of Hydra contracts, we developed and publicly released a toolkit, called LibSubmarine, that uses a new technique to prevent frontrunning attacks on smart contracts. A website for the project is available here: </span><a href=\"https://libsubmarine.org/\"><span>https://libsubmarine.org/</span></a><span>.&nbsp;</span></p>\n</li>\n<li dir=\"ltr\">\n<p dir=\"ltr\"><span>Flash Boys 2.0: We performed a measurement study of financially exploitive attacks on smart contracts.&nbsp; We introduced the term &ldquo;Miner Extractable Value&rdquo; (MEV) for such attacks. MEV is now an industry-standard term and a significant focus in the blockchain industry. Our work on the topic is widely cited and, for instance, contributed to the creation of Flashbots, a blockchain company playing a significant role in the smart contract ecosystem (and co-founded by the paper&rsquo;s lead author). Our research was published in IEEE Symposium on Security and Privacy 2020, a top security conference.</span></p>\n</li>\n<li dir=\"ltr\">\n<p dir=\"ltr\"><span>Ekiden: We developed a platform for performant and privacy-preserving smart-contract execution using trusted execution environments such as Intel SGX. Called Ekiden, our platform is part of the core technology of Oasis Labs, a blockchain venture whose CEO was a co-author of a paper on the work. We published our work in IEEE European Security and Privacy Symposium 2019, as well as follow-up work in IEEE Security and Privacy magazine in 2020.</span></p>\n</li>\n<li dir=\"ltr\">\n<p dir=\"ltr\"><span>Forsage: We performed a measurement study of the largest smart-contract pyramid scheme, called Forsage. Forsage was at one point the third-largest smart contract in the Ethereum ecosystem (by &ldquo;gas&rdquo; consumption, meaning execution-fee payments). We found evidence that Forsage is fraudulently marketed and that most (around 88%) of users lose money in interacting with it. The U.S. SEC has recently announced that it has filed charges against creators and promoters of the scheme. A paper on our research is currently in submission.</span></p>\n</li>\n<li dir=\"ltr\">\n<p dir=\"ltr\"><span>Heterogeneous Paxos: In highly decentralized systems such as blockchain systems are highly decentralized, it is unreasonable to expect participants to agree on what system components can be trusted. They may disagree on how trustworthy other participants are, in what ways they can fail, and on what guarantees are needed for data integrity and availability. We developed Heterogeneous Paxos, the first consensus protocol that supports such highly heterogeneous systems.&nbsp; Heterogenous Paxos was published in OPODIS'20 and has inspired the Typhon heterogeneous consensus protocol used by heliax.</span></p>\n</li>\n<li dir=\"ltr\">\n<p dir=\"ltr\"><span>Charlotte: We developed a new framework for building composable blockchains, called Charlotte. Unlike conventional blockchains, Charlotte does not specify a consensus protocol, but rather accommodates multiple, interacting blockchains with their own approaches to consensus. We have shown that Charlotte can accommodate classic Proof of Work blockchains as well as our new Heterogeneous Paxos protocol. Charlotte establishes a common framework in which multiple blockchains can coexist and interoperate, allowing transactions to commit atomically to multiple chains.</span></p>\n</li>\n<li dir=\"ltr\">\n<p dir=\"ltr\"><span>SCIF: In FAB'19 and in our award-winning IEEE Security and Privacy paper, we demonstrated that information-flow reasoning can help to secure smart contracts, preventing untrustworthy actors from influencing trusted data. We also showed how to extend existing information-flow methods to provably prevent the reentrancy vulnerabilities that continue to plague smart contracts. We have implemented this new approach to smart-contract programming in a new language called SCIF (Smart Contract Information Flow), which we plan to release publicly in the near future. <br /></span></p>\n</li>\n</ul>\n<p>&nbsp;</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 10/10/2022<br>\n\t\t\t\t\tModified by: Andrew&nbsp;C&nbsp;Myers</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n \nThis award has contributed funding to numerous advances relating to its objective: enhancing the security of smart contracts using both proactive and reactive mechanisms. These include most notably:\n\n\nHydra contracts: We developed the Hydra Framework, the first general, principled approach to modeling and administering bug bounties for smart contracts. Bug bounties are monetary awards for disclosing software vulnerabilities. They are a popular tool to incentivize bug disclosure and thereby help prevent software exploits. The Hydra Framework is a bug-bounty system based on the concept of N-version programming, which involves execution of multiple variants of a piece of software. The key idea is that a bug bounty is offered for disclosing a bug in one variant. Such disclosure helps secure the software in question; thanks to the existence of other variants, however, the reported bug does not itself pose a security threat. Our work was published in USENIX Security Symposium 2018, a top information security conference. We also published a follow-up article on our work in IEEE Security and Privacy magazine.\n\n\nLibSubmarine: As an outgrowth of Hydra contracts, we developed and publicly released a toolkit, called LibSubmarine, that uses a new technique to prevent frontrunning attacks on smart contracts. A website for the project is available here: https://libsubmarine.org/. \n\n\nFlash Boys 2.0: We performed a measurement study of financially exploitive attacks on smart contracts.  We introduced the term \"Miner Extractable Value\" (MEV) for such attacks. MEV is now an industry-standard term and a significant focus in the blockchain industry. Our work on the topic is widely cited and, for instance, contributed to the creation of Flashbots, a blockchain company playing a significant role in the smart contract ecosystem (and co-founded by the paper\u2019s lead author). Our research was published in IEEE Symposium on Security and Privacy 2020, a top security conference.\n\n\nEkiden: We developed a platform for performant and privacy-preserving smart-contract execution using trusted execution environments such as Intel SGX. Called Ekiden, our platform is part of the core technology of Oasis Labs, a blockchain venture whose CEO was a co-author of a paper on the work. We published our work in IEEE European Security and Privacy Symposium 2019, as well as follow-up work in IEEE Security and Privacy magazine in 2020.\n\n\nForsage: We performed a measurement study of the largest smart-contract pyramid scheme, called Forsage. Forsage was at one point the third-largest smart contract in the Ethereum ecosystem (by \"gas\" consumption, meaning execution-fee payments). We found evidence that Forsage is fraudulently marketed and that most (around 88%) of users lose money in interacting with it. The U.S. SEC has recently announced that it has filed charges against creators and promoters of the scheme. A paper on our research is currently in submission.\n\n\nHeterogeneous Paxos: In highly decentralized systems such as blockchain systems are highly decentralized, it is unreasonable to expect participants to agree on what system components can be trusted. They may disagree on how trustworthy other participants are, in what ways they can fail, and on what guarantees are needed for data integrity and availability. We developed Heterogeneous Paxos, the first consensus protocol that supports such highly heterogeneous systems.  Heterogenous Paxos was published in OPODIS'20 and has inspired the Typhon heterogeneous consensus protocol used by heliax.\n\n\nCharlotte: We developed a new framework for building composable blockchains, called Charlotte. Unlike conventional blockchains, Charlotte does not specify a consensus protocol, but rather accommodates multiple, interacting blockchains with their own approaches to consensus. We have shown that Charlotte can accommodate classic Proof of Work blockchains as well as our new Heterogeneous Paxos protocol. Charlotte establishes a common framework in which multiple blockchains can coexist and interoperate, allowing transactions to commit atomically to multiple chains.\n\n\nSCIF: In FAB'19 and in our award-winning IEEE Security and Privacy paper, we demonstrated that information-flow reasoning can help to secure smart contracts, preventing untrustworthy actors from influencing trusted data. We also showed how to extend existing information-flow methods to provably prevent the reentrancy vulnerabilities that continue to plague smart contracts. We have implemented this new approach to smart-contract programming in a new language called SCIF (Smart Contract Information Flow), which we plan to release publicly in the near future. \n\n\n\n\n \n\n \n\n\t\t\t\t\tLast Modified: 10/10/2022\n\n\t\t\t\t\tSubmitted by: Andrew C Myers"
 }
}