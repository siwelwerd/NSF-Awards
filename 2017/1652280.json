{
 "awd_id": "1652280",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CAREER: Securing Applications From Compromised System Software",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2017-04-01",
 "awd_exp_date": "2023-03-31",
 "tot_intn_awd_amt": 512438.0,
 "awd_amount": 512438.0,
 "awd_min_amd_letter_date": "2017-03-21",
 "awd_max_amd_letter_date": "2021-05-03",
 "awd_abstract_narration": "In an ideal world, secure software would be built as a set of mutually distrusting components that work together to accomplish goals.  However, modern software is not built this way; rather, it heavily trusts a component called the operating system kernel. Fortunately, there are new methods of isolating programs from each other and from the OS kernel to minimize the damage caused if an attacker compromises a critical component.  However, such solutions are too slow and are vulnerable to sophisticated implicit information flow attacks.  Also, the effectiveness of current solutions will be verified using formal verification techniques.\r\n\r\nThis project will develop new techniques to solve these deficiencies.  It will investigate the use of new hardware mechanisms that will accelerate the protection of applications from compromised commodity operating system kernels.  It will develop new compiler transformations that will modify existing software to distrust other software components.  It will devise new static information flow analysis methods and run-time checks to keep compromised operating system kernels from stealing application secrets and influencing application behaviors through Iago attacks.  Finally, the project will build a formal model of the system and prove that it protects software as intended.  The project will release open source software so that the techniques and tools can be used by other researchers and can find their way into practice. Educationally, curriculum for OS designers will contain knowledge of this important class of attacks at the point that designers are building the OS.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "John",
   "pi_last_name": "Criswell",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "John Criswell",
   "pi_email_addr": "criswell@cs.rochester.edu",
   "nsf_id": "000677886",
   "pi_start_date": "2017-03-21",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Rochester",
  "inst_street_address": "910 GENESEE ST",
  "inst_street_address_2": "STE 200",
  "inst_city_name": "ROCHESTER",
  "inst_state_code": "NY",
  "inst_state_name": "New York",
  "inst_phone_num": "5852754031",
  "inst_zip_code": "146113847",
  "inst_country_name": "United States",
  "cong_dist_code": "25",
  "st_cong_dist_code": "NY25",
  "org_lgl_bus_name": "UNIVERSITY OF ROCHESTER",
  "org_prnt_uei_num": "",
  "org_uei_num": "F27KDXZMF9Y8"
 },
 "perf_inst": {
  "perf_inst_name": "University of Rochester",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "NY",
  "perf_st_name": "New York",
  "perf_zip_code": "146270140",
  "perf_ctry_code": "US",
  "perf_cong_dist": "25",
  "perf_st_cong_dist": "NY25",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "1045",
   "pgm_ref_txt": "CAREER-Faculty Erly Career Dev"
  },
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0121",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 74642.0
  },
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 67592.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 69018.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 150072.0
  },
  {
   "fund_oblg_fiscal_yr": 2021,
   "fund_oblg_amt": 151114.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The world has become more dangerous for computing systems, and attackers have greater tools at their disposal for stealing or corrupting the data stored on computers. &nbsp;They can take over the software that forms the bedrock of our systems (namely, hypervisors and operating systems). &nbsp;They can then leverage the privileged nature of these software to spy on private data, and they can corrupt or change financial data, personal data, or other sensitive information. &nbsp;Some attackers can even infiltrate organizations that make hardware, jeopardizing the physical foundation of computing.</p>\n<p>This project has explored the methods that attackers can use to subvert security and developed defenses to mitigate those threats. &nbsp;We have explored how attackers can change the hardware to deactivate software-enforced security and have developed methods of making existing circuit-level defenses practical in mitigating such advanced attacks. &nbsp;We have studied how attackers can utilize a comprimised operating system kernel to steal information from unsuspecting users by observing their behavior and developed methods of reigning in the operating system kernel to prevent it from being used to spy on people's private data. &nbsp;We have developed fast and efficient techniques that harden systems from classic attacks that allow an attacker to have free reign on a system, and we have done so both for high-end systems used for cloud computing as well as cheap small systems that are used in everyday smart devices.</p>\n<p>Our research work has leveraged new hardware features in novel, unexpected ways to make security enforcement efficient, affordable, and practical. &nbsp;Our work has also demonstrated the value of using compiler infrastructure, such as LLVM and our Secure Virtual Architecture (SVA), for controlling how software interacts with the hardware. Our key insight is that, instead of using the traditional methods of using hardware to enforce security, we should use a combination of program analysis, control over native code generation, <em>and</em>&nbsp;hardware support to provide inexpensive yet strong security enforcement.</p>\n<p>We have released the source code for many of our research prototypes as open-source software that anyone can use to develop new products, incorporate into existing computing services, or enhance for their own personal or professional research use. &nbsp;We have also developed tutorials on utilizing compiler technology and supplied the contents of these tutorials freely online so that anyone can learn the fundamentals of compiler technology; we hope this will help train a new generation of software engineers and researchers in using compiler technology to tackle the security challenges of the future.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 07/27/2023<br>\n\t\t\t\t\tModified by: John&nbsp;Criswell</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThe world has become more dangerous for computing systems, and attackers have greater tools at their disposal for stealing or corrupting the data stored on computers.  They can take over the software that forms the bedrock of our systems (namely, hypervisors and operating systems).  They can then leverage the privileged nature of these software to spy on private data, and they can corrupt or change financial data, personal data, or other sensitive information.  Some attackers can even infiltrate organizations that make hardware, jeopardizing the physical foundation of computing.\n\nThis project has explored the methods that attackers can use to subvert security and developed defenses to mitigate those threats.  We have explored how attackers can change the hardware to deactivate software-enforced security and have developed methods of making existing circuit-level defenses practical in mitigating such advanced attacks.  We have studied how attackers can utilize a comprimised operating system kernel to steal information from unsuspecting users by observing their behavior and developed methods of reigning in the operating system kernel to prevent it from being used to spy on people's private data.  We have developed fast and efficient techniques that harden systems from classic attacks that allow an attacker to have free reign on a system, and we have done so both for high-end systems used for cloud computing as well as cheap small systems that are used in everyday smart devices.\n\nOur research work has leveraged new hardware features in novel, unexpected ways to make security enforcement efficient, affordable, and practical.  Our work has also demonstrated the value of using compiler infrastructure, such as LLVM and our Secure Virtual Architecture (SVA), for controlling how software interacts with the hardware. Our key insight is that, instead of using the traditional methods of using hardware to enforce security, we should use a combination of program analysis, control over native code generation, and hardware support to provide inexpensive yet strong security enforcement.\n\nWe have released the source code for many of our research prototypes as open-source software that anyone can use to develop new products, incorporate into existing computing services, or enhance for their own personal or professional research use.  We have also developed tutorials on utilizing compiler technology and supplied the contents of these tutorials freely online so that anyone can learn the fundamentals of compiler technology; we hope this will help train a new generation of software engineers and researchers in using compiler technology to tackle the security challenges of the future.\n\n\t\t\t\t\tLast Modified: 07/27/2023\n\n\t\t\t\t\tSubmitted by: John Criswell"
 }
}