{
 "awd_id": "1718997",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SaTC: CORE: Small: Practical Whole Kernel Memory Safety Enforcement",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Jeremy Epstein",
 "awd_eff_date": "2017-08-01",
 "awd_exp_date": "2022-07-31",
 "tot_intn_awd_amt": 474399.0,
 "awd_amount": 474399.0,
 "awd_min_amd_letter_date": "2017-07-18",
 "awd_max_amd_letter_date": "2017-07-18",
 "awd_abstract_narration": "The operating system (OS) kernel is the security-critical foundation of a computer system. Unfortunately, errors in the kernel software of commodity operating systems like Windows and Linux can allow a malicious attacker to take over the whole system. This research project is developing new techniques to eliminate certain types of critical errors from commodity OS kernels in a way that is both mathematically provable and efficient.\r\n\r\nThe researchers are developing a unique combination of static and dynamic techniques to provide practical spatial memory safety for commodity OS kernels. These techniques include a new type system which guarantees that for every kernel module all its memory accesses are within bounds and the corresponding access type (read, write, execute) is allowed by the module's capabilities. This is achieved by automatically inserting necessary runtime checks during compilation. Since these new checks introduce performance overhead, the project includes additional techniques to reduce the overhead. The first optimization approach is utilizing software compartmentalization and model checking to eliminate redundant checks. The second optimization is adopting Intel MPX (memory protection extension), a new and commercially available hardware feature to reduce the cost of runtime checks.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Chengyu",
   "pi_last_name": "Song",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Chengyu Song",
   "pi_email_addr": "csong@cs.ucr.edu",
   "nsf_id": "000728805",
   "pi_start_date": "2017-07-18",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Mohsen",
   "pi_last_name": "Lesani",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Mohsen Lesani",
   "pi_email_addr": "lesani@cs.ucr.edu",
   "nsf_id": "000728236",
   "pi_start_date": "2017-07-18",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of California-Riverside",
  "inst_street_address": "200 UNIVERSTY OFC BUILDING",
  "inst_street_address_2": "",
  "inst_city_name": "RIVERSIDE",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "9518275535",
  "inst_zip_code": "925210001",
  "inst_country_name": "United States",
  "cong_dist_code": "39",
  "st_cong_dist_code": "CA39",
  "org_lgl_bus_name": "REGENTS OF THE UNIVERSITY OF CALIFORNIA AT RIVERSIDE",
  "org_prnt_uei_num": "",
  "org_uei_num": "MR5QC5FCAVH5"
 },
 "perf_inst": {
  "perf_inst_name": "University of California-Riverside",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "925089800",
  "perf_ctry_code": "US",
  "perf_cong_dist": "41",
  "perf_st_cong_dist": "CA41",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "9178",
   "pgm_ref_txt": "UNDERGRADUATE EDUCATION"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 474399.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The operating system (OS) kernel is the security-critical foundation of a computer system. Unfortunately, errors in the kernel software of commodity operating systems like Windows and Linux can allow a malicious attacker to take over the whole system. This research project aim to develop new techniques to eliminate certain types of critical errors from commodity OS kernels in a way that is both mathematically provable and efficient.</p>\n<p>The foundation of this research project is the MemSafe type system. In this system, pointers are assigned with additional qualifiers to ensure their dereferences are safe. One particular security guarantee we would like to enforce is that all pointers are properly initialized before their first use. To this end, the principle investigators (PIs) of this project developed a static analysis tool UBITect based on the LLVM compiler framework. UBITect includes four major components: a call graph analysis to support context-sensitive inter-procedural analysis; a flow-sensitive intra-procedural point-to analysis to support flow-sensitive type inference; a bottom-up context-sensitive and flow-sensitive type inference engine to automatically assign qualifiers to pointers; and a type checking engine to detect violations (i.e., potential dereference of invalid pointers). Applying UBITect on the Linux 4.14 kernel discovered over 80 bugs. UBITect was published at the ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering (FSE'20), and we have open-sourced the tool.</p>\n<p>To allow the security analysis to be integrated into the fast development cycle of Linux (a new release every 9-10 weeks), the PIs extended UBITect to support incremental analysis, such that previous inference results for code that is not changed (which is the majority) can be reused, and only code that has changed needs to be re-analyzed. Evaluation of the tool, IncreLux, showed that while a clean-slate analysis took 106.45 hours, incremental analyses were often completed within minutes, achieving an average 200x speed-up for the mainline kernel and 440x on average, when analyzing stable branches. IncreLux was published at ISOC Network and Distributed System Security Symposium (NDSS'22), and we have open-sourced the tool.</p>\n<p>With the support of this project, Co-PI Lesani has also investigated applications of type systems in other security and safety issues. In this first project, a type system is designed to check the safety of chemical assays. This work was published at the ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA'18) and won the Distinguished paper award. In the second project, a type system is designed to prove the soundness of the data structure synthesis process: every synthesized structure supports the expected interface of queries. This shows that the safety of the synthesis tool: generated structures are correct by construction. This work was published in the ACM Machine Learning and Programming Languages Workshop. In the third project, a security-typed object-based language is developed for resilient object partitioning and replication. The type system provably guarantees that well-typed methods enjoy noninterference and that their types quantify their resilience to Byzantine attacks. Type inference results in the automatic placement and replication of fields and methods that lead to the automatic synthesis of trustworthy-by-construction distributed systems. The resulting systems can gracefully tolerate faults that are as strong as their resiliency specifications. This work was published in IEEE Symposium on Security and Privacy (SP'22).</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 11/30/2022<br>\n\t\t\t\t\tModified by: Chengyu&nbsp;Song</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThe operating system (OS) kernel is the security-critical foundation of a computer system. Unfortunately, errors in the kernel software of commodity operating systems like Windows and Linux can allow a malicious attacker to take over the whole system. This research project aim to develop new techniques to eliminate certain types of critical errors from commodity OS kernels in a way that is both mathematically provable and efficient.\n\nThe foundation of this research project is the MemSafe type system. In this system, pointers are assigned with additional qualifiers to ensure their dereferences are safe. One particular security guarantee we would like to enforce is that all pointers are properly initialized before their first use. To this end, the principle investigators (PIs) of this project developed a static analysis tool UBITect based on the LLVM compiler framework. UBITect includes four major components: a call graph analysis to support context-sensitive inter-procedural analysis; a flow-sensitive intra-procedural point-to analysis to support flow-sensitive type inference; a bottom-up context-sensitive and flow-sensitive type inference engine to automatically assign qualifiers to pointers; and a type checking engine to detect violations (i.e., potential dereference of invalid pointers). Applying UBITect on the Linux 4.14 kernel discovered over 80 bugs. UBITect was published at the ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering (FSE'20), and we have open-sourced the tool.\n\nTo allow the security analysis to be integrated into the fast development cycle of Linux (a new release every 9-10 weeks), the PIs extended UBITect to support incremental analysis, such that previous inference results for code that is not changed (which is the majority) can be reused, and only code that has changed needs to be re-analyzed. Evaluation of the tool, IncreLux, showed that while a clean-slate analysis took 106.45 hours, incremental analyses were often completed within minutes, achieving an average 200x speed-up for the mainline kernel and 440x on average, when analyzing stable branches. IncreLux was published at ISOC Network and Distributed System Security Symposium (NDSS'22), and we have open-sourced the tool.\n\nWith the support of this project, Co-PI Lesani has also investigated applications of type systems in other security and safety issues. In this first project, a type system is designed to check the safety of chemical assays. This work was published at the ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA'18) and won the Distinguished paper award. In the second project, a type system is designed to prove the soundness of the data structure synthesis process: every synthesized structure supports the expected interface of queries. This shows that the safety of the synthesis tool: generated structures are correct by construction. This work was published in the ACM Machine Learning and Programming Languages Workshop. In the third project, a security-typed object-based language is developed for resilient object partitioning and replication. The type system provably guarantees that well-typed methods enjoy noninterference and that their types quantify their resilience to Byzantine attacks. Type inference results in the automatic placement and replication of fields and methods that lead to the automatic synthesis of trustworthy-by-construction distributed systems. The resulting systems can gracefully tolerate faults that are as strong as their resiliency specifications. This work was published in IEEE Symposium on Security and Privacy (SP'22).\n\n\t\t\t\t\tLast Modified: 11/30/2022\n\n\t\t\t\t\tSubmitted by: Chengyu Song"
 }
}