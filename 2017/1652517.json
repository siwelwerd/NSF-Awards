{
 "awd_id": "1652517",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CAREER: Advancing Regression Testing: Theory and Practice",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2017-06-01",
 "awd_exp_date": "2023-05-31",
 "tot_intn_awd_amt": 502947.0,
 "awd_amount": 534947.0,
 "awd_min_amd_letter_date": "2017-02-06",
 "awd_max_amd_letter_date": "2021-04-19",
 "awd_abstract_narration": "Software projects constantly evolve due to endless requirement changes despite the risk of introducing new bugs.  Thus, software developers practice regression testing -- running tests at each project revision -- to check that recent project changes do not break any functionality.  Although regression testing is important, it is costly due to the large number of revisions and tests, and the cost is reportedly increasing.  Several techniques -- test selection, test-case prioritization, test-suite reduction, and parallelization -- can reduce regression testing cost, but their applicability and cost reduction depend on software development processes, i.e., the way developers write code, build the projects, and run tests.  These processes are constantly evolving, sometimes making the existing regression-testing techniques inapplicable or ineffective.  The PI identified five emerging trends that impact applicability and effectiveness: use of multiple programming languages, use of various\r\ndevelopment tools, use of cloud-based continuous integration services, increase in the number of revisions and tests, and proliferation of non-deterministic code.\r\n\r\nTo significantly reduce the regression testing costs -- execution time, machine resources, and wasted developers' time caused by delays in detecting bugs -- the PI proposes five research activities that include designing and developing: (1) regression-testing techniques for projects written in multiple programming languages, (2) regression-testing techniques that remove unnecessary inefficiency due to behavior-preserving transformations and inadequate code structure, (3) techniques to reduce the cost of testing in the cloud, (4) techniques to reduce the cost of detecting the bug-introducing revision, and (5) techniques to identify, debug, and control non-determinism in tests.  This proposal has the potential to substantially reduce the cost of software testing, which will reduce financial losses and casualties due to software bugs. The project will integrate research and education by developing new curriculum based on newly developed ideas, along with the development of a new concept called top-teaching, which inserts Software Engineering materials into other courses, where the subject matter and students are dependent on software development and need to be informed about good software development practices.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Milos",
   "pi_last_name": "Gligoric",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Milos Gligoric",
   "pi_email_addr": "gligoric@utexas.edu",
   "nsf_id": "000702992",
   "pi_start_date": "2017-02-06",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Texas at Austin",
  "inst_street_address": "110 INNER CAMPUS DR",
  "inst_street_address_2": "",
  "inst_city_name": "AUSTIN",
  "inst_state_code": "TX",
  "inst_state_name": "Texas",
  "inst_phone_num": "5124716424",
  "inst_zip_code": "787121139",
  "inst_country_name": "United States",
  "cong_dist_code": "25",
  "st_cong_dist_code": "TX25",
  "org_lgl_bus_name": "UNIVERSITY OF TEXAS AT AUSTIN",
  "org_prnt_uei_num": "",
  "org_uei_num": "V6AFQPN18437"
 },
 "perf_inst": {
  "perf_inst_name": "University of Texas at Austin",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "TX",
  "perf_st_name": "Texas",
  "perf_zip_code": "787121532",
  "perf_ctry_code": "US",
  "perf_cong_dist": "25",
  "perf_st_cong_dist": "TX25",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "1045",
   "pgm_ref_txt": "CAREER-Faculty Erly Career Dev"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0121",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 94898.0
  },
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 198154.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 16000.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 103434.0
  },
  {
   "fund_oblg_fiscal_yr": 2021,
   "fund_oblg_amt": 122461.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Regression testing -- running available tests at each project revision<br />-- is an important but costly activity. Several techniques -- test<br />selection, test-case prioritization, test-suite reduction, and<br />parallelization -- can reduce regression testing cost, but their<br />applicability and cost reduction depend on software development<br />processes, i.e., the way developers write code, build the projects,<br />and run tests. These processes are constantly evolving, sometimes<br />making the existing regression-testing techniques inapplicable or<br />ineffective. We identified several emerging trends that impact<br />applicability and effectiveness: use of multiple programming<br />languages, use of various development tools, increase in the number of<br />revisions and tests, and proliferation of non-deterministic<br />code. These emerging trends motivated our work on regression testing<br />into new and unexplored research directions.<br /><br />This project investigated several ways to obtain high quality<br />regression tests and speed up regression testing. (1) We developed<br />several regression test selection (RTS) techniques, including a<br />technique that combines program analysis and machine learning (ML), as<br />well as a technique that speeds up testing by reasoning about<br />semantics-modifying changes that have no impact on test outcomes. (2)<br />We developed the first step towards language-agnostic RTS, which is<br />based on monitoring system calls. (3) We did first work on applying<br />regression testing techniques to proofs written in Coq (i.e.,<br />regression proof selection). (4) We developed the first test<br />generation technique based on template programming for JIT compilers,<br />followed by the first automatic extraction of templates to avoid<br />manual effort. (5) We developed the first set of algorithms for<br />generating tests in parallel using GPUs. (6) We designed and<br />implemented the first set of models for test completion/generation<br />using large language models (LLMs), proposed a methodology for<br />evaluating such models, and introduced ML models ideal for editing<br />tasks (e.g., updating comments). (7) We introduced Inline Testing, a<br />novel testing technology that enables developers to test individual<br />program statements (e.g., a line that contains a regular expression).<br /><br />The grant partially supported 50 papers (including two papers that won<br />ACM SIGSOFT Distinguished Paper Awards), public release of a dozen<br />testing tools and datasets (available at<br />https://github.com/EngineeringSoftware), and training of at least 5<br />PhD students and 15 undergraduate students; the undergraduate students<br />were supported by two REU supplements, and 5 of these students<br />published 6 papers at top Software Engineering conferences. The<br />broader impacts also include detection of dozens of bugs in large<br />software systems (e.g., Oracle JIT compiler). This research is a step<br />towards more robust and efficient regression testing, which has direct<br />impact on software quality and developers' productivity.</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 06/04/2023<br>\n\t\t\t\t\tModified by: Milos&nbsp;Gligoric</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nRegression testing -- running available tests at each project revision\n-- is an important but costly activity. Several techniques -- test\nselection, test-case prioritization, test-suite reduction, and\nparallelization -- can reduce regression testing cost, but their\napplicability and cost reduction depend on software development\nprocesses, i.e., the way developers write code, build the projects,\nand run tests. These processes are constantly evolving, sometimes\nmaking the existing regression-testing techniques inapplicable or\nineffective. We identified several emerging trends that impact\napplicability and effectiveness: use of multiple programming\nlanguages, use of various development tools, increase in the number of\nrevisions and tests, and proliferation of non-deterministic\ncode. These emerging trends motivated our work on regression testing\ninto new and unexplored research directions.\n\nThis project investigated several ways to obtain high quality\nregression tests and speed up regression testing. (1) We developed\nseveral regression test selection (RTS) techniques, including a\ntechnique that combines program analysis and machine learning (ML), as\nwell as a technique that speeds up testing by reasoning about\nsemantics-modifying changes that have no impact on test outcomes. (2)\nWe developed the first step towards language-agnostic RTS, which is\nbased on monitoring system calls. (3) We did first work on applying\nregression testing techniques to proofs written in Coq (i.e.,\nregression proof selection). (4) We developed the first test\ngeneration technique based on template programming for JIT compilers,\nfollowed by the first automatic extraction of templates to avoid\nmanual effort. (5) We developed the first set of algorithms for\ngenerating tests in parallel using GPUs. (6) We designed and\nimplemented the first set of models for test completion/generation\nusing large language models (LLMs), proposed a methodology for\nevaluating such models, and introduced ML models ideal for editing\ntasks (e.g., updating comments). (7) We introduced Inline Testing, a\nnovel testing technology that enables developers to test individual\nprogram statements (e.g., a line that contains a regular expression).\n\nThe grant partially supported 50 papers (including two papers that won\nACM SIGSOFT Distinguished Paper Awards), public release of a dozen\ntesting tools and datasets (available at\nhttps://github.com/EngineeringSoftware), and training of at least 5\nPhD students and 15 undergraduate students; the undergraduate students\nwere supported by two REU supplements, and 5 of these students\npublished 6 papers at top Software Engineering conferences. The\nbroader impacts also include detection of dozens of bugs in large\nsoftware systems (e.g., Oracle JIT compiler). This research is a step\ntowards more robust and efficient regression testing, which has direct\nimpact on software quality and developers' productivity.\n\n \n\n\t\t\t\t\tLast Modified: 06/04/2023\n\n\t\t\t\t\tSubmitted by: Milos Gligoric"
 }
}