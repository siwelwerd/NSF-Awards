{
 "awd_id": "2318738",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SBIR Phase I:  The Development of an Artificial Analysis (AI) Static Code Analysis Platform to Increase Software Developer Productivity",
 "cfda_num": "47.084",
 "org_code": "15030000",
 "po_phone": "7032925198",
 "po_email": "pchundi@nsf.gov",
 "po_sign_block_name": "Parvathi Chundi",
 "awd_eff_date": "2023-09-15",
 "awd_exp_date": "2024-08-31",
 "tot_intn_awd_amt": 246700.0,
 "awd_amount": 266700.0,
 "awd_min_amd_letter_date": "2023-09-08",
 "awd_max_amd_letter_date": "2024-07-15",
 "awd_abstract_narration": "The broader/commercial impact of this Small Business Innovation Research (SBIR) Phase I project is to increase the speed and accuracy of software development in a wide range of industries and to make software developers more productive. The technology will decrease the time spent reviewing code by shipping higher quality and defect free code and will further ensure more secure software that is less prone to outside attacks. This SBIR Phase I project develops a cloud-based artificial intelligence (AI)-based static code analysis tool which can find complex and severe problems early in the process of software development. Unlike existing static analysis tools, the tool developed in this project will learn automatically from bug fixes, explain the errors found, and make recommendations on how to fix them.  Results will help organizations and developers in the finance, healthcare, and defense industries where code reuse is important for security and compliance reasons. Overall, this project fits well with an increasing trend of organizations integrating more AI into their operations and a growing market for software development tools.\r\n\r\nThis SBIR Phase I project combines the latest advancements in machine learning and natural language processing to develop a new, intelligent way to find and explain software errors. The project focuses on developing a software architecture that enables the analysis of a complete model hierarchy, establishing a technique to effectively and quantitatively evaluate the validity of explanations generated for flagged bugs, and integrating the disparate components into a single analysis framework. The project will consist of three models which will be developed and integrated as part of the overarching system architecture: (1) a code fault detection model utilizing a graph attention network, (2) a generative transformer to build explanations and suggestions, and (3) a graph-to-graph transformer to generate mutations to the code architecture to resolve the flagged bugs. The project will leverage recent advancements in transformer-based and graph-based neural networks and therefore propel the current state of research for efficient code review processes forward.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "TIP",
 "org_dir_long_name": "Directorate for Technology, Innovation, and Partnerships",
 "div_abbr": "TI",
 "org_div_long_name": "Translational Impacts",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Massimiliano",
   "pi_last_name": "Genta",
   "pi_mid_init": "",
   "pi_sufx_name": "Sr",
   "pi_full_name": "Massimiliano Genta",
   "pi_email_addr": "massi@metabob.com",
   "nsf_id": "000923866",
   "pi_start_date": "2023-09-08",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "METABOB INC",
  "inst_street_address": "2933 BUNKER HILL LN STE 210",
  "inst_street_address_2": "",
  "inst_city_name": "SANTA CLARA",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "6502721177",
  "inst_zip_code": "950541152",
  "inst_country_name": "United States",
  "cong_dist_code": "17",
  "st_cong_dist_code": "CA17",
  "org_lgl_bus_name": "METABOB INC",
  "org_prnt_uei_num": "",
  "org_uei_num": "GBPJB8WKWB53"
 },
 "perf_inst": {
  "perf_inst_name": "METABOB INC",
  "perf_str_addr": "2933 Bunker Hill Ln",
  "perf_city_name": "Santa Clara",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "950541124",
  "perf_ctry_code": "US",
  "perf_cong_dist": "17",
  "perf_st_cong_dist": "CA17",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "537100",
   "pgm_ele_name": "SBIR Phase I"
  },
  {
   "pgm_ele_code": "809100",
   "pgm_ele_name": "SBIR Outreach & Tech. Assist"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "6856",
   "pgm_ref_txt": "ARTIFICIAL INTELL & COGNIT SCI"
  },
  {
   "pgm_ref_code": "8083",
   "pgm_ref_txt": "Big Data Science &Engineering"
  }
 ],
 "app_fund": [
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01002425DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01AB2324DB",
   "fund_name": "R&RA DRSA DEFC AAB",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2023,
   "fund_oblg_amt": 246700.0
  },
  {
   "fund_oblg_fiscal_yr": 2024,
   "fund_oblg_amt": 20000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-f299630b-7fff-8684-cb7d-91e32b258de1\"> </span></p>\n<p dir=\"ltr\">The Phase I project aimed to significantly improve software development processes by establishing an AI-based software analysis suite that combines the strengths of manual and automated code review. In the last 12 months we made significant progress and developed a prototype for a tool that - unlike existing static analysis tools - is able to detect, explain and resolve bugs quickly and accurately, significantly reducing the time, money, and hours needed for code review processes and improving the profitability of organizations. This is particularly important for large codebases. By leveraging recent advancements in artificial intelligence, this project will contribute to significantly reducing the global annual cost of code refinements, estimated at $312 billion, and free up time for developers to create new and better software.</p>\n<p dir=\"ltr\"><span>We successfully achieved our Phase I key objectives, that is 1) we developed code fault detection and resolution models, 2) created a software architecture to enable the analysis of a complete model hierarchy, 3) established a technique to effectively and quantitatively evaluate the validity of explanations generated for flagged bugs, and 4) integrated the disparate components into a single analysis framework.</span></p>\n<p dir=\"ltr\"><span>The development process involved three major steps: data collection, fault detection, and explanation generation. Phase I resources were allocated to build a custom dataset of code faults paired with change management and procedural documentation. The dataset was used to train the Graph Neural Network (GNN) bug detection model. We applied topic modeling to our training data to classify issues and pull requests to cluster the encountered issues by similar causes and contexts. We implemented a heuristic-based graph simplification algorithm to facilitate the analysis of code property graphs (CPGs). This initial approach partially relied on human intuition and was essential for developing the foundational technique around the early dataset we collected and verified. In order to generate explanations for the found issues, we trained a model to explain code snippets based on a modified T5 model. In the process we used a Topic Model based on Latent Dirichlet Allocation and BERTopic.</span></p>\n<p dir=\"ltr\"><span>Our models show significant advancements in fault detection accuracy. For Python we can show a high reliability in identifying certain runtime and memory management errors, achieving high accuracy (83%), precision (72%), and recall (93%). This led to an F1 score (that combines precision and recall) of 81%. This way we reached our Phase I goal of an F1 score of 75% or higher. Overall, this performance underscores the potential of our approach to address complex, large-scale codebase issues effectively. Additionally, to help commercialization, we deployed a free version of the system on Microsoft&rsquo;s Visual Studio Code, through which to date over 50k users installed our software.</span></p>\n<p dir=\"ltr\"><span>In order to test our commercialization potential, we participated in the NSF I-Corps SBIR Summer 2024 cohort, where we conducted 100 customer interviews to identify our beachhead market, to validate product-market fit, and to confirm a significant market opportunity. This and earlier customer interviews, case studies, proof-of-concept projects, and the analysis of usage behavior of developers who access Metabob through VScode and Github, show proof that Metabob is able to detect, explain, and fix more complex and critical problems than competing products.</span></p>\n<p dir=\"ltr\"><span>Consequently, at the conclusion of Phase I we are confident that our technology has strong commercialization potential. Still, additional technological advancements are needed to establish Metabob as a strong market player.</span></p>\n<p>&nbsp;</p><br>\n<p>\n Last Modified: 09/18/2024<br>\nModified by: Massimiliano&nbsp;Genta</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\n \n\n\nThe Phase I project aimed to significantly improve software development processes by establishing an AI-based software analysis suite that combines the strengths of manual and automated code review. In the last 12 months we made significant progress and developed a prototype for a tool that - unlike existing static analysis tools - is able to detect, explain and resolve bugs quickly and accurately, significantly reducing the time, money, and hours needed for code review processes and improving the profitability of organizations. This is particularly important for large codebases. By leveraging recent advancements in artificial intelligence, this project will contribute to significantly reducing the global annual cost of code refinements, estimated at $312 billion, and free up time for developers to create new and better software.\n\n\nWe successfully achieved our Phase I key objectives, that is 1) we developed code fault detection and resolution models, 2) created a software architecture to enable the analysis of a complete model hierarchy, 3) established a technique to effectively and quantitatively evaluate the validity of explanations generated for flagged bugs, and 4) integrated the disparate components into a single analysis framework.\n\n\nThe development process involved three major steps: data collection, fault detection, and explanation generation. Phase I resources were allocated to build a custom dataset of code faults paired with change management and procedural documentation. The dataset was used to train the Graph Neural Network (GNN) bug detection model. We applied topic modeling to our training data to classify issues and pull requests to cluster the encountered issues by similar causes and contexts. We implemented a heuristic-based graph simplification algorithm to facilitate the analysis of code property graphs (CPGs). This initial approach partially relied on human intuition and was essential for developing the foundational technique around the early dataset we collected and verified. In order to generate explanations for the found issues, we trained a model to explain code snippets based on a modified T5 model. In the process we used a Topic Model based on Latent Dirichlet Allocation and BERTopic.\n\n\nOur models show significant advancements in fault detection accuracy. For Python we can show a high reliability in identifying certain runtime and memory management errors, achieving high accuracy (83%), precision (72%), and recall (93%). This led to an F1 score (that combines precision and recall) of 81%. This way we reached our Phase I goal of an F1 score of 75% or higher. Overall, this performance underscores the potential of our approach to address complex, large-scale codebase issues effectively. Additionally, to help commercialization, we deployed a free version of the system on Microsofts Visual Studio Code, through which to date over 50k users installed our software.\n\n\nIn order to test our commercialization potential, we participated in the NSF I-Corps SBIR Summer 2024 cohort, where we conducted 100 customer interviews to identify our beachhead market, to validate product-market fit, and to confirm a significant market opportunity. This and earlier customer interviews, case studies, proof-of-concept projects, and the analysis of usage behavior of developers who access Metabob through VScode and Github, show proof that Metabob is able to detect, explain, and fix more complex and critical problems than competing products.\n\n\nConsequently, at the conclusion of Phase I we are confident that our technology has strong commercialization potential. Still, additional technological advancements are needed to establish Metabob as a strong market player.\n\n\n\t\t\t\t\tLast Modified: 09/18/2024\n\n\t\t\t\t\tSubmitted by: MassimilianoGenta\n"
 }
}