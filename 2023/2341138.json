{
 "awd_id": "2341138",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CICI: SSC: Horizon: Secure Large-Scale Scientific Cloud Computing",
 "cfda_num": "47.070",
 "org_code": "05090000",
 "po_phone": "7032925147",
 "po_email": "dmassey@nsf.gov",
 "po_sign_block_name": "Daniel F. Massey",
 "awd_eff_date": "2022-10-01",
 "awd_exp_date": "2024-02-29",
 "tot_intn_awd_amt": 999925.0,
 "awd_amount": 75333.0,
 "awd_min_amd_letter_date": "2023-09-18",
 "awd_max_amd_letter_date": "2023-09-18",
 "awd_abstract_narration": "Over the last decade, public and private clouds emerged as de facto platforms for computationally intensive scientific tasks. Today, huge volumes of many types of scientific data are routinely uploaded to the cloud. A large fraction of this data is privacy and/or security sensitive. Unfortunately, despite numerous advances in network and enterprise security, modern clouds remain inherently insecure. Recent experience shows that well-funded, targeted attacks manage to breach network perimeters of both public and private clouds. \r\n\r\nHorizon is a novel cloud architecture aimed at providing data and computation security within a scientific cloud. Horizon builds upon three premises: (1) strong isolation on end-hosts, (2) fine-grained isolation in the cloud network, and (3) cloud-wide information flow control. To protect the end-hosts, Horizon develops a new layered hypervisor, and disaggregated virtualization stack with key features of: language safety, software fault isolation, and integrated software verification. To provide secure cloud network environment, Horizon relies on a new network architecture and implements a distributed network firewall, where all network communication and exchange of rights are mediated and controlled by the rules of the object capability system. To protect the cloud data, Horizon develops a set of abstractions and mechanisms to enforce cloud-wide information flow control. In Horizon all data is labeled. The hypervisor mediates all communication of each virtual machine and enforces propagation of labels and security checks for each cloud computation.\r\n\r\nHorizon aims to provide a practical foundation for developing secure cloud infrastructure suitable for large-scale research workflows that require both speed and security. Horizon will be developed using entirely open-source components, and will be openly available to a broad community of scientists in academia and industry.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "OAC",
 "org_div_long_name": "Office of Advanced Cyberinfrastructure (OAC)",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Anton",
   "pi_last_name": "Burtsev",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Anton Burtsev",
   "pi_email_addr": "aburtsev@flux.utah.edu",
   "nsf_id": "000637182",
   "pi_start_date": "2023-09-18",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Utah",
  "inst_street_address": "201 PRESIDENTS CIR",
  "inst_street_address_2": "",
  "inst_city_name": "SALT LAKE CITY",
  "inst_state_code": "UT",
  "inst_state_name": "Utah",
  "inst_phone_num": "8015816903",
  "inst_zip_code": "841129049",
  "inst_country_name": "United States",
  "cong_dist_code": "01",
  "st_cong_dist_code": "UT01",
  "org_lgl_bus_name": "UNIVERSITY OF UTAH",
  "org_prnt_uei_num": "",
  "org_uei_num": "LL8GLEVH6MG3"
 },
 "perf_inst": {
  "perf_inst_name": "University of Utah",
  "perf_str_addr": "201 PRESIDENTS CIR",
  "perf_city_name": "SALT LAKE CITY",
  "perf_st_code": "UT",
  "perf_st_name": "Utah",
  "perf_zip_code": "841129049",
  "perf_ctry_code": "US",
  "perf_cong_dist": "01",
  "perf_st_cong_dist": "UT01",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "802700",
   "pgm_ele_name": "Cybersecurity Innovation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "8027",
   "pgm_ref_txt": "Cyber Secur - Cyberinfrastruc"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 43333.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 16000.0
  },
  {
   "fund_oblg_fiscal_yr": 2021,
   "fund_oblg_amt": 16000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Horizon explored the possibility of constructing secure cloud architectures in which cloud tenants can control their data. Over the course of the project we developed a range of novel security solutions aimed at improving the cloud stack: mechanisms for practical fine-grained isolation of the virtual machine stack (e.g., automatic isolation of device drivers and kernel extensions), novel principles of protecting against cross-interface vulnerabilities in isolated environments, techniques for secure authentication and measurement of virtual machines, and novel approaches to practical, low-burden verification of low-level systems code.&nbsp;</p>\r\n<p>Arguably, one of the most interesting results was development of support for automated isolation of kernel subsystem in commodity operating systems that are used for implementing modern virtualiztion stacks. Device drivers and other kernel extensions are one of the major sources of vulnerabilities in modern operating systems. As early as 1977, the final Multics report proposed isolating device drivers from the rest of the kernel, which was attempted in a commodity Linux kernel by the Sawmill project. This attempt failed due to performance overheads of hardware isolation mechanisms and the complexityof breaking apart monolithic, shared-memory code. Two decades later our work laid the foundation for a practical, low-overhead, and backward-compatible isolation of kernel subsystems. We developed a whole-kernel static analysisthat enables automated driver isolation hence addressing the daunting complexity of isolation of legacy monolithic code.</p>\r\n<p>Another impactful result was development of novel formal verification techniques for practical, low-burdgen verification of low-level systems code and specifically: hypervisors and device drivers. Despite decades of progress, the development of formally-verified operating systems remained a challenging undertaking that relies on a strong verification expertise and all too often requires years of human effort. In Horizon we argued that recent advances in programming languages and automated formal reasoning change the thresholdof practical development of verified kernel code. Specifically, we demonstrated the possibility of developing a fully-verified microkernel, and verified device drivers in the Linux kernel.</p>\r\n<!-- p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.4px Helvetica; color: #000000} -->\r\n<p>&nbsp;</p>\r\n<!-- p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.4px Helvetica; color: #000000} -->\r\n<p>&nbsp;</p><br>\n<p>\n Last Modified: 03/08/2025<br>\nModified by: Anton&nbsp;Burtsev</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nHorizon explored the possibility of constructing secure cloud architectures in which cloud tenants can control their data. Over the course of the project we developed a range of novel security solutions aimed at improving the cloud stack: mechanisms for practical fine-grained isolation of the virtual machine stack (e.g., automatic isolation of device drivers and kernel extensions), novel principles of protecting against cross-interface vulnerabilities in isolated environments, techniques for secure authentication and measurement of virtual machines, and novel approaches to practical, low-burden verification of low-level systems code.\r\n\n\nArguably, one of the most interesting results was development of support for automated isolation of kernel subsystem in commodity operating systems that are used for implementing modern virtualiztion stacks. Device drivers and other kernel extensions are one of the major sources of vulnerabilities in modern operating systems. As early as 1977, the final Multics report proposed isolating device drivers from the rest of the kernel, which was attempted in a commodity Linux kernel by the Sawmill project. This attempt failed due to performance overheads of hardware isolation mechanisms and the complexityof breaking apart monolithic, shared-memory code. Two decades later our work laid the foundation for a practical, low-overhead, and backward-compatible isolation of kernel subsystems. We developed a whole-kernel static analysisthat enables automated driver isolation hence addressing the daunting complexity of isolation of legacy monolithic code.\r\n\n\nAnother impactful result was development of novel formal verification techniques for practical, low-burdgen verification of low-level systems code and specifically: hypervisors and device drivers. Despite decades of progress, the development of formally-verified operating systems remained a challenging undertaking that relies on a strong verification expertise and all too often requires years of human effort. In Horizon we argued that recent advances in programming languages and automated formal reasoning change the thresholdof practical development of verified kernel code. Specifically, we demonstrated the possibility of developing a fully-verified microkernel, and verified device drivers in the Linux kernel.\r\n\r\n\n\n\r\n\r\n\n\n\t\t\t\t\tLast Modified: 03/08/2025\n\n\t\t\t\t\tSubmitted by: AntonBurtsev\n"
 }
}