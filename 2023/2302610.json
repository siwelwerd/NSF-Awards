{
 "awd_id": "2302610",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SaTC: CORE: Small: Partition-Oblivious Real-Time Hierarchical Scheduling",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032922594",
 "po_email": "kkaravan@nsf.gov",
 "po_sign_block_name": "Karen Karavanic",
 "awd_eff_date": "2022-10-01",
 "awd_exp_date": "2024-03-31",
 "tot_intn_awd_amt": 499905.0,
 "awd_amount": 281629.0,
 "awd_min_amd_letter_date": "2022-11-22",
 "awd_max_amd_letter_date": "2023-01-17",
 "awd_abstract_narration": "With the advancement in modern computing and communication technologies, there is an increasing trend toward integrating many real-time applications from various vendors into a single, larger system, allowing an efficient utilization of common hardware resources. In safety-critical systems, such as avionics, automotive, industrial control systems, it is of utmost importance to provide strong isolation among the applications that require different levels of criticality in order to confine faulty operations to individual components. In particular, time partitioning is a key ingredient for a safe composition of real-time applications whose correctness highly depends on their timings. Real-time hierarchical scheduling facilitates modular reasoning about the temporal behavior of individual real-time applications by abstracting away varying behavior of other applications and, more importantly, by isolating their potential misbehavior. However, conventional time-partitioning mechanisms fail to achieve strong temporal isolation from a security viewpoint; variations in execution timings can be perceived by others, which enables illegitimate information-flow between applications that are completely isolated from each other in the utilization of CPU time. This project addresses the problem of information-flow through real-time hierarchical scheduling in such integrated software environment. The proposed work will allow such systems to employ advanced hardware and software technologies to develop high-end, real-time applications in a secure manner, dramatically improving the utility and reliability of many key components in the world\u2019s critical infrastructure. The project includes significant curriculum development activities and outreach activities to K-12 students as well as women and minority students.\r\n\r\nThis project develops a set of algorithmic solutions that make real-time partitions oblivious of others\u2019 varying temporal behaviors -- achieving non-interference-based security among all partitions. The main challenge is that the mechanisms should be independent from particular scheduling algorithms and non-intrusive to the underlying schedulers. Hence, the project focuses on highly modular and extensible mechanisms that facilitate integration into a wide variety of existing systems without requiring complete reengineering of operating systems. Scheduling analysis techniques that can enable system designers to assess the impact of the improved information-security on the CPU utilization, as well as formal method techniques for the verification of the non-interference property in both algorithmic and implementation levels is developed. The solutions are validated on prototype real-time systems with real workload. On the education side, this project pushes new courses on real-time systems into the existing curriculum and also provides students opportunities for hands-on experience with modern real-time applications. It also aims to broaden the participation of underrepresented groups and give students a unique combination of technical training and experience in this cutting-edge field.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Man-Ki",
   "pi_last_name": "Yoon",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Man-Ki Yoon",
   "pi_email_addr": "man-ki.yoon@ncsu.edu",
   "nsf_id": "000763316",
   "pi_start_date": "2022-11-22",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Jung-Eun",
   "pi_last_name": "Kim",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Jung-Eun Kim",
   "pi_email_addr": "jung-eun.kim@ncsu.edu",
   "nsf_id": "000763314",
   "pi_start_date": "2023-01-17",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "North Carolina State University",
  "inst_street_address": "2601 WOLF VILLAGE WAY",
  "inst_street_address_2": "",
  "inst_city_name": "RALEIGH",
  "inst_state_code": "NC",
  "inst_state_name": "North Carolina",
  "inst_phone_num": "9195152444",
  "inst_zip_code": "276950001",
  "inst_country_name": "United States",
  "cong_dist_code": "02",
  "st_cong_dist_code": "NC02",
  "org_lgl_bus_name": "NORTH CAROLINA STATE UNIVERSITY",
  "org_prnt_uei_num": "U3NVH931QJJ3",
  "org_uei_num": "U3NVH931QJJ3"
 },
 "perf_inst": {
  "perf_inst_name": "North Carolina State University",
  "perf_str_addr": "2601 WOLF VILLAGE WAY",
  "perf_city_name": "RALEIGH",
  "perf_st_code": "NC",
  "perf_st_name": "North Carolina",
  "perf_zip_code": "27607",
  "perf_ctry_code": "US",
  "perf_cong_dist": "02",
  "perf_st_cong_dist": "NC02",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 281629.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>&nbsp;</p>\n<div>\n<div>\n<div>\n<div><span>Modern real-time systems are increasingly integrating applications from various parties, including open-source and third-party vendors. This integration can introduce unforeseen security vulnerabilities, such as illegitimate information flow. This project aimed to secure complex real-time systems by identifying and closing illegitimate information flows among real-time applications through scheduling.</span></div>\n<br />\n<div><span>In this project, the PIs discovered that real-time applications could create hidden communication channels to send and receive arbitrary messages even when temporal isolation among the applications is strictly enforced by real-time hierarchical scheduling. Applications could infer the temporal behavior of other applications by observing the impact that the latter's execution has on their own timings, without using explicit time information. The PIs demonstrated these security vulnerabilities on both open-source and commercial real-time operating systems. They devised techniques that significantly improve the communication accuracy of illegitimate information flow between malicious senders and receivers. As a solution, the PIs developed scheduling algorithms to close these hidden communication channels. These algorithms transform the on-line schedule of local tasks within a real-time application partition to be deterministic, regardless of other applications' behavior. The solution is backward-compatible and has a minimal impact on the responsiveness of real-time tasks, a critical requirement for real-time systems.</span></div>\n<br />\n<div><span>The scheduling solutions were integrated into a variant of CertiKOS, a formally verified operating system, particularly focusing on ensuring temporal non-interference among real-time applications scheduled by a dynamic-priority scheduling method. Leveraging a hardware-enforced trusted execution environment (TEE) and partition-oblivious scheduling, the team developed a secure software architecture that guarantees the availability and liveness of real-time safety-critical enclaves running in the TEE and their communication.</span></div>\n<br />\n<div><span>The PIs also discovered and demonstrated that precise time sources could make it substantially easier for adversaries to observe timing patterns and thus create various types of hidden communication channels over hierarchical scheduling using statistical inference techniques even when the deterministic scheduling solution is employed. To address this for systems with precise time sources, they developed a moving target defense (MTD) technique that reduces the temporal predictability of real-time tasks in application partition schedules, which is what enables the hidden communication channels. This technique significantly reduces the bandwidth of hidden communication channels by randomly inverting priority relations among real-time partitions at runtime. A key merit of this solution is that it ensures real-time applications remain schedulable if they were so before any randomization, thus preserving real-time properties.</span></div>\n<br />\n<div><span>These development and validation efforts were integrated into self-driving robot cars developed as part of the project. These robot vehicles run various perception and control applications on a Linux-based real-time operating system. Extensive experiments on these platforms with real-world workloads demonstrated the effectiveness of the developed solutions in removing or reducing the bandwidth of hidden communication channels, ensuring the availability of real-time applications, and achieving compatibility with legacy real-time applications.</span></div>\n<br />\n<div><span>The project also led to the development of a testbed for the self-driving robot cars, providing students with hands-on experience in robotics programming, embedded systems, and machine learning for autonomous driving. It also provided graduate students with real-world experience in developing real-time operating systems and applying formal methods. Additionally, the project supported undergraduate students through the Research Experiences for Undergraduates program and local high-school students through an outreach program. These student activities contributed to developing both the robot platforms and the testbed, which led to the creation of a new undergraduate course on self-driving cars at their institution.</span></div>\n</div>\n</div>\n</div>\n<p>&nbsp;</p><br>\n<p>\n Last Modified: 07/19/2024<br>\nModified by: Man-Ki&nbsp;Yoon</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\n\n\n\n\nModern real-time systems are increasingly integrating applications from various parties, including open-source and third-party vendors. This integration can introduce unforeseen security vulnerabilities, such as illegitimate information flow. This project aimed to secure complex real-time systems by identifying and closing illegitimate information flows among real-time applications through scheduling.\n\n\nIn this project, the PIs discovered that real-time applications could create hidden communication channels to send and receive arbitrary messages even when temporal isolation among the applications is strictly enforced by real-time hierarchical scheduling. Applications could infer the temporal behavior of other applications by observing the impact that the latter's execution has on their own timings, without using explicit time information. The PIs demonstrated these security vulnerabilities on both open-source and commercial real-time operating systems. They devised techniques that significantly improve the communication accuracy of illegitimate information flow between malicious senders and receivers. As a solution, the PIs developed scheduling algorithms to close these hidden communication channels. These algorithms transform the on-line schedule of local tasks within a real-time application partition to be deterministic, regardless of other applications' behavior. The solution is backward-compatible and has a minimal impact on the responsiveness of real-time tasks, a critical requirement for real-time systems.\n\n\nThe scheduling solutions were integrated into a variant of CertiKOS, a formally verified operating system, particularly focusing on ensuring temporal non-interference among real-time applications scheduled by a dynamic-priority scheduling method. Leveraging a hardware-enforced trusted execution environment (TEE) and partition-oblivious scheduling, the team developed a secure software architecture that guarantees the availability and liveness of real-time safety-critical enclaves running in the TEE and their communication.\n\n\nThe PIs also discovered and demonstrated that precise time sources could make it substantially easier for adversaries to observe timing patterns and thus create various types of hidden communication channels over hierarchical scheduling using statistical inference techniques even when the deterministic scheduling solution is employed. To address this for systems with precise time sources, they developed a moving target defense (MTD) technique that reduces the temporal predictability of real-time tasks in application partition schedules, which is what enables the hidden communication channels. This technique significantly reduces the bandwidth of hidden communication channels by randomly inverting priority relations among real-time partitions at runtime. A key merit of this solution is that it ensures real-time applications remain schedulable if they were so before any randomization, thus preserving real-time properties.\n\n\nThese development and validation efforts were integrated into self-driving robot cars developed as part of the project. These robot vehicles run various perception and control applications on a Linux-based real-time operating system. Extensive experiments on these platforms with real-world workloads demonstrated the effectiveness of the developed solutions in removing or reducing the bandwidth of hidden communication channels, ensuring the availability of real-time applications, and achieving compatibility with legacy real-time applications.\n\n\nThe project also led to the development of a testbed for the self-driving robot cars, providing students with hands-on experience in robotics programming, embedded systems, and machine learning for autonomous driving. It also provided graduate students with real-world experience in developing real-time operating systems and applying formal methods. Additionally, the project supported undergraduate students through the Research Experiences for Undergraduates program and local high-school students through an outreach program. These student activities contributed to developing both the robot platforms and the testbed, which led to the creation of a new undergraduate course on self-driving cars at their institution.\n\n\n\n\n\n\t\t\t\t\tLast Modified: 07/19/2024\n\n\t\t\t\t\tSubmitted by: Man-KiYoon\n"
 }
}