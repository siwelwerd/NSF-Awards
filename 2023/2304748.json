{
 "awd_id": "2304748",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CRII: SHF: Analyzing the Linux's KBuild Makefile",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2022-11-01",
 "awd_exp_date": "2023-03-31",
 "tot_intn_awd_amt": 174975.0,
 "awd_amount": 32798.0,
 "awd_min_amd_letter_date": "2022-11-17",
 "awd_max_amd_letter_date": "2022-11-17",
 "awd_abstract_narration": "The Linux system empowers a wide range of computer devices, ranging\r\nfrom tiny IoT sensors and mobile phones to desktop and supercomputers.\r\nThis flexibility is due to the highly-configurable design of Linux,\r\nallowing the users to customize and build Linux with an extensive set\r\nof options.  This reconfigurability has many benefits, but it also\r\ngreatly complicates tasks such as testing and debugging due to the\r\nlarge number of possible configurations. This project aims to develop\r\nalgorithms and tools to analyze the complex Linux build process to\r\nunderstand how configuration options affect the building of individual\r\nsource files. This research will allow developers to find\r\norphan files that are never used in the build process, examine and\r\ntest configurations that affect individual source files, and determine\r\nhow patches or code changes affect a given configuration. The research\r\nalso helps users, e.g., allowing embedded system manufacturers to\r\noptimize Linux to fit their devices. In addition, the research allows\r\nfor the discovery of many interesting and useful information about the\r\nLinux build system, e.g., the complexity of build\r\nconditions, highly-influential configuration options, etc.\r\n\r\nThis project aims to develop static and dynamic analyses to analyze\r\nthe Linux build system, in particular the \"makefiles\" that control the\r\nbuilding and linking of individual source files. The research is\r\ndivided into three main activities. The first develops a symbolic\r\nexecution technique that simulates the runs of the makefiles to obtain\r\npath conditions over configuration options mapping to built files.\r\nThese path conditions provide a formal description of how\r\nconfiguration options affect the building of individual kernel files.\r\nThe second develops a dynamic analysis that learns path conditions\r\nfrom kernel files built from actual make runs over a sample of\r\nconfigurations. This analysis will be based on a recent work developed\r\nby the team that alternates between a learning and checking phase to\r\nimprove the overall quality of the learned conditions. Finally, by\r\nrepresenting the obtained path conditions as logical formulae, modern\r\nconstraint solvers can be applied to solve problems such as finding\r\norphan files and the impact of configuration options to files included\r\nin a build.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "ThanhVu",
   "pi_last_name": "Nguyen",
   "pi_mid_init": "H",
   "pi_sufx_name": "",
   "pi_full_name": "ThanhVu H Nguyen",
   "pi_email_addr": "tvn@gmu.edu",
   "nsf_id": "000728688",
   "pi_start_date": "2022-11-17",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "George Mason University",
  "inst_street_address": "4400 UNIVERSITY DR",
  "inst_street_address_2": "",
  "inst_city_name": "FAIRFAX",
  "inst_state_code": "VA",
  "inst_state_name": "Virginia",
  "inst_phone_num": "7039932295",
  "inst_zip_code": "220304422",
  "inst_country_name": "United States",
  "cong_dist_code": "11",
  "st_cong_dist_code": "VA11",
  "org_lgl_bus_name": "GEORGE MASON UNIVERSITY",
  "org_prnt_uei_num": "H4NRWLFCDF43",
  "org_uei_num": "EADLFP7Z72E5"
 },
 "perf_inst": {
  "perf_inst_name": "George Mason University",
  "perf_str_addr": "4400 UNIVERSITY DR",
  "perf_city_name": "FAIRFAX",
  "perf_st_code": "VA",
  "perf_st_name": "Virginia",
  "perf_zip_code": "220304422",
  "perf_ctry_code": "US",
  "perf_cong_dist": "11",
  "perf_st_cong_dist": "VA11",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  },
  {
   "pgm_ref_code": "8228",
   "pgm_ref_txt": "CISE Resrch Initiatn Initiatve"
  },
  {
   "pgm_ref_code": "9150",
   "pgm_ref_txt": "EXP PROG TO STIM COMP RES"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 16798.0
  },
  {
   "fund_oblg_fiscal_yr": 2021,
   "fund_oblg_amt": 16000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>&nbsp;</p>\n<div>Highly-configurable systems allow for many benefits, such as flexibility in customizing the system to suit users' needs. However, they also greatly complicate testing and debugging tasks. This project focuses on the development of advanced techniques and tools to analyze highly-configurable systems, including build systems like KBuild Makefiles for Linux and CMakefiles for various C++ projects, as well as other popular software with numerous possible configurations. First, the PI has collaborated with Meta to identify build issues and developed the Cybolic symbolic execution project to analyze CMakefiles (and KBuild Makefiles), which are responsible for building and managing various software. Second, the project produced a dynamic and data-driven approach called GenTree to accurately analyze and understand highly configurable software without requiring the program source code. Third, the research formalized the analysis and results of our techniques using \"build conditions\" obtained by Cybolic and GenTree. These build conditions can be queried using constraint solving to identify build issues and options that lead to desired builds.</div>\n<div><br />The project has broader impacts on education by incorporating the results into software engineering and analysis course materials at both undergraduate and graduate levels. The findings have been disseminated through many top academic conferences, journals, and open-source software repositories. Additionally, this project has contributed to the education and training of graduate and especially undergraduate students, providing opportunities for them to participate in the research and encouraging them to pursue future careers in software engineering and program analysis.</div>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 06/29/2023<br>\n\t\t\t\t\tModified by: Thanhvu&nbsp;H&nbsp;Nguyen</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n \nHighly-configurable systems allow for many benefits, such as flexibility in customizing the system to suit users' needs. However, they also greatly complicate testing and debugging tasks. This project focuses on the development of advanced techniques and tools to analyze highly-configurable systems, including build systems like KBuild Makefiles for Linux and CMakefiles for various C++ projects, as well as other popular software with numerous possible configurations. First, the PI has collaborated with Meta to identify build issues and developed the Cybolic symbolic execution project to analyze CMakefiles (and KBuild Makefiles), which are responsible for building and managing various software. Second, the project produced a dynamic and data-driven approach called GenTree to accurately analyze and understand highly configurable software without requiring the program source code. Third, the research formalized the analysis and results of our techniques using \"build conditions\" obtained by Cybolic and GenTree. These build conditions can be queried using constraint solving to identify build issues and options that lead to desired builds.\n\nThe project has broader impacts on education by incorporating the results into software engineering and analysis course materials at both undergraduate and graduate levels. The findings have been disseminated through many top academic conferences, journals, and open-source software repositories. Additionally, this project has contributed to the education and training of graduate and especially undergraduate students, providing opportunities for them to participate in the research and encouraging them to pursue future careers in software engineering and program analysis.\n\n \n\n\t\t\t\t\tLast Modified: 06/29/2023\n\n\t\t\t\t\tSubmitted by: Thanhvu H Nguyen"
 }
}