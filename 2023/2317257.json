{
 "awd_id": "2317257",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: SMALL: Language-agnostic Proofs",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2023-10-01",
 "awd_exp_date": "2025-09-30",
 "tot_intn_awd_amt": 213336.0,
 "awd_amount": 233336.0,
 "awd_min_amd_letter_date": "2023-06-20",
 "awd_max_amd_letter_date": "2024-05-31",
 "awd_abstract_narration": "The correctness of programming languages is paramount for the development of reliable software. Accordingly, language designers often engage in an effort to mathematically prove that their programming languages satisfy key correctness properties. These proofs often follow a schema that does not apply just to one language but, rather, applies to a plethora of other languages. The project\u2019s novelties are (i) to discover the scientific knowledge necessary for developing language-agnostic proofs, that is, proofs that apply to classes of languages rather than to one language, and (ii) to provide evidence that language-agnostic proofs are an effective tool for validating programming languages. The project's impacts are (i) to provide suitable methods and a software tool for quickly validating programming languages, which leads to more correct and reliable software, and (ii) to delineate the core insights of proof methods for programming languages in a generalized and teachable form.\r\n\r\nThis project develops a domain-specific language for expressing language-agnostic proofs and implements a software tool that automatically produces machine-checked proofs from a programming language definition and a language-agnostic proof given as input. This project also develops the language-agnostic proofs that capture the type safety of most common stateful languages and demonstrates the use of these proofs to automatically generate the mechanized proof of type safety of a number of programming languages, including languages such as WebAssembly and Middleweight Java. As expected, the type safety of some languages with sophisticated features cannot be established with the language-agnostic proofs that this project offers. Nonetheless, these proofs enable an approach based on their useful partial outputs, that is, they can generate a mechanized proof for a large fragment of sophisticated languages, which then can be used as a head start to manually complete the proof. The project demonstrates this approach on programming languages from the literature with sophisticated features and documents the effectiveness of the approach. The language-agnostic proofs that this project offers are akin to pseudocode that is written to apply to many languages. Therefore, these proofs can be used for teaching type safety with a generalized perspective, and the investigator is including them within a course in programming languages.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Matteo",
   "pi_last_name": "Cimini",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Matteo Cimini",
   "pi_email_addr": "Matteo_Cimini@uml.edu",
   "nsf_id": "000677832",
   "pi_start_date": "2023-06-20",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Massachusetts Lowell",
  "inst_street_address": "220 PAWTUCKET ST STE 400",
  "inst_street_address_2": "",
  "inst_city_name": "LOWELL",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "9789344170",
  "inst_zip_code": "018543573",
  "inst_country_name": "United States",
  "cong_dist_code": "03",
  "st_cong_dist_code": "MA03",
  "org_lgl_bus_name": "UNIVERSITY OF MASSACHUSETTS LOWELL",
  "org_prnt_uei_num": "",
  "org_uei_num": "LTNVSTJ3R6D5"
 },
 "perf_inst": {
  "perf_inst_name": "University of Massachusetts Lowell",
  "perf_str_addr": "600 SUFFOLK ST STE 415",
  "perf_city_name": "LOWELL",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "018543643",
  "perf_ctry_code": "US",
  "perf_cong_dist": "03",
  "perf_st_cong_dist": "MA03",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  },
  {
   "pgm_ref_code": "8206",
   "pgm_ref_txt": "Formal Methods and Verification"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01002324DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01002425DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2023,
   "fund_oblg_amt": 213336.0
  },
  {
   "fund_oblg_fiscal_yr": 2024,
   "fund_oblg_amt": 20000.0
  }
 ],
 "por": null
}