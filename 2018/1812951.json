{
 "awd_id": "1812951",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Collaborative Research: RUI: Synchronicity: A Framework for Synthesizing Concurrent Software from Sequential and Cooperative Specifications",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032922585",
 "po_email": "pprabhak@nsf.gov",
 "po_sign_block_name": "Pavithra Prabhakar",
 "awd_eff_date": "2018-10-01",
 "awd_exp_date": "2022-09-30",
 "tot_intn_awd_amt": 199999.0,
 "awd_amount": 199999.0,
 "awd_min_amd_letter_date": "2018-07-05",
 "awd_max_amd_letter_date": "2018-07-05",
 "awd_abstract_narration": "The nation's computing infrastructure utilizes multicore processors and multiprocessor hardware across the entire spectrum of systems from small mobile devices to huge data centers.  These systems offer increased performance and scaling over single-processor systems, but at a significant cost: writing correct concurrent software is notoriously challenging.  Programmers must take extreme care to orchestrate synchronization between concurrently running threads to avoid unintended interference while simultaneously eliminating synchronization whenever possible to avoid performance bottlenecks.  To address this challenge, this project develops the Synchronicity tool to automatically synthesize high-performance concurrent software from simple specifications of the desired behavior.  This research has the potential to reduce the costs of developing computing infrastructure, by eliminating the costly process of manually writing, testing, and reasoning about concurrent code, and it may reduce the hardware resources and energy required to meet computing needs.  \r\n\r\nSynchronicity starts with an initial programmer-provided description of a software component suitable execution on a single thread.  It then uses counterexample-guided inductive synthesis to search for thread-safe concurrent components conforming to that specification. Synchronicity verifies thread safety using an extended form of Lipton's theory of reduction.  Multiple thread-safe concurrent solutions may be found, and Synchronicity automatically ranks according to their performance on a programmer-supplied workload. The project is committed to increasing access to science education for all students, including women, under-represented groups, and first-generation college students. The investigators include students from these groups in this research, at both the undergraduate and graduate level.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Stephen",
   "pi_last_name": "Freund",
   "pi_mid_init": "N",
   "pi_sufx_name": "",
   "pi_full_name": "Stephen N Freund",
   "pi_email_addr": "freund@cs.williams.edu",
   "nsf_id": "000110974",
   "pi_start_date": "2018-07-05",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Williams College",
  "inst_street_address": "880 MAIN ST",
  "inst_street_address_2": "",
  "inst_city_name": "WILLIAMSTOWN",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "4135974352",
  "inst_zip_code": "012672600",
  "inst_country_name": "United States",
  "cong_dist_code": "01",
  "st_cong_dist_code": "MA01",
  "org_lgl_bus_name": "PRESIDENT & TRUSTEES OF WILLIAMS COLLEGE",
  "org_prnt_uei_num": "",
  "org_uei_num": "JVZEJJ6N5EM8"
 },
 "perf_inst": {
  "perf_inst_name": "Williams College",
  "perf_str_addr": "880 Main St.",
  "perf_city_name": "WILLIAMSTOWN",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "012672600",
  "perf_ctry_code": "US",
  "perf_cong_dist": "01",
  "perf_st_cong_dist": "MA01",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "8206",
   "pgm_ref_txt": "Formal Methods and Verification"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 199999.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p id=\"m_-3970113598231240626docs-internal-guid-aa3aebb0-7fff-e5b2-db2f-88d7a64a5136\" dir=\"ltr\"><span>The nation's computing infrastructure plays a central role in all aspects of our society. Despite the prominence and importance of this infrastructure, constructing reliable software remains extremely challenging. Faulty software can have an enormous damaging effect on the economy, security, privacy, and even personal safety.</span></p>\n<p dir=\"ltr\"><span>Most computing systems now use multicore or multiprocessor architectures capable of performing multiple tasks at the same time. This ability to run concurrent threads of control has enabled computations at scales previously unimaginable. However, threads may interfere with each other in subtle ways if the programmer does not properly coordinate their behavior. Errors caused by such unanticipated interactions are a particularly pernicious type of defect. They are difficult to discover during testing since they typically happen only intermittently and are discovered long after the damaging interference occurs.</span></p>\n<p dir=\"ltr\"><span>This research developed a new reduction-based verification technique for concurrent programs.&nbsp; This approach is easier to use than other verifiers in this area and focusses the programmer's attention on precisely describing the synchronization discipline employed for each program variable. The key insight behind our approach is that careful specification of a program's synchronization discipline enables a more natural and intuitive proof technique than other tools designed for this task.</span></p>\n<p dir=\"ltr\"><span>We have demonstrated that our reduction-based verifier can reason about a wide variety of synchronization disciplines.&nbsp; We have used it to verify a variety of concurrent data structures and algorithms, including various blocking and non-blocking queues and maps, as well as more sophisticated programs including the core algorithm of the high-performance FastTrack dynamic data race detectors. That experience demonstrated that our tool can capture sophisticated behavior in a simpler way than other tools in this area.&nbsp; The verifier has also been designed to provide feedback and counterexamples useful for both programmers and for counter-example based code synthesis techniques.</span></p>\n<p dir=\"ltr\"><span>This work provides a means for developing more reliable software for multi-core processors and multiprocessor systems. To that end, this work has the potential to enable the creation of more robust software systems in all areas of society where computing plays a role.&nbsp; By integrating new analysis techniques and checking tools into computer science curricula, our work may also lead to wide adoption of improved software engineering practices</span></p>\n<div><span><br /></span></div>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 01/16/2023<br>\n\t\t\t\t\tModified by: Stephen&nbsp;N&nbsp;Freund</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "The nation's computing infrastructure plays a central role in all aspects of our society. Despite the prominence and importance of this infrastructure, constructing reliable software remains extremely challenging. Faulty software can have an enormous damaging effect on the economy, security, privacy, and even personal safety.\nMost computing systems now use multicore or multiprocessor architectures capable of performing multiple tasks at the same time. This ability to run concurrent threads of control has enabled computations at scales previously unimaginable. However, threads may interfere with each other in subtle ways if the programmer does not properly coordinate their behavior. Errors caused by such unanticipated interactions are a particularly pernicious type of defect. They are difficult to discover during testing since they typically happen only intermittently and are discovered long after the damaging interference occurs.\nThis research developed a new reduction-based verification technique for concurrent programs.  This approach is easier to use than other verifiers in this area and focusses the programmer's attention on precisely describing the synchronization discipline employed for each program variable. The key insight behind our approach is that careful specification of a program's synchronization discipline enables a more natural and intuitive proof technique than other tools designed for this task.\nWe have demonstrated that our reduction-based verifier can reason about a wide variety of synchronization disciplines.  We have used it to verify a variety of concurrent data structures and algorithms, including various blocking and non-blocking queues and maps, as well as more sophisticated programs including the core algorithm of the high-performance FastTrack dynamic data race detectors. That experience demonstrated that our tool can capture sophisticated behavior in a simpler way than other tools in this area.  The verifier has also been designed to provide feedback and counterexamples useful for both programmers and for counter-example based code synthesis techniques.\nThis work provides a means for developing more reliable software for multi-core processors and multiprocessor systems. To that end, this work has the potential to enable the creation of more robust software systems in all areas of society where computing plays a role.  By integrating new analysis techniques and checking tools into computer science curricula, our work may also lead to wide adoption of improved software engineering practices\n\n\n\n \n\n\t\t\t\t\tLast Modified: 01/16/2023\n\n\t\t\t\t\tSubmitted by: Stephen N Freund"
 }
}