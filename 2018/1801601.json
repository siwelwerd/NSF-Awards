{
 "awd_id": "1801601",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SaTC: CORE: Medium: Collaborative: Threat-Aware Defense: Evaluating Threats for Continuous Improvement",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2018-08-15",
 "awd_exp_date": "2024-07-31",
 "tot_intn_awd_amt": 399849.0,
 "awd_amount": 399849.0,
 "awd_min_amd_letter_date": "2018-08-08",
 "awd_max_amd_letter_date": "2019-06-24",
 "awd_abstract_narration": "Adversaries are outpacing developers in the race to find program vulnerabilities. Where programmers have to find all potential software flaws in their programs and determine whether they are exploitable across all deployments to prevent vulnerabilities, adversaries need only find one software flaw that enables them to achieve their goals in any one deployment. Current techniques to rid programs of vulnerabilities cannot find all such flaws due to the complexity of modern software and their deployments. Rather than proving the absence of flaws, recent vulnerability detection research is exploring more powerful techniques to automate exploit generation. However, such exploit generation often lacks a systematic model of modern and emerging defenses, which may be useful in assessing the utility of defenses. In addition, once an exploit is generated, defenses to prevent that exploit must be added manually to the program.  As a result, vulnerability detection does not yet pay enough attention to defenses to assess their effectiveness nor generate additional defenses when necessary.\r\n\r\nThis project proposes a theory and techniques to improve defenses continuously and iteratively to counter threats that cause vulnerabilities. A method is developed that searches programs for security policy violations and extends existing defenses to prevent detected violations automatically.  The main insight is to link the threats and defenses of each program into one coherent model, called the Program Threat Graph (PTG), to evaluate proactively whether threats enable adversaries to violate program security policies given current defenses and automate the improvement of defenses to prevent such violations.  The project explores how to find security violations given a program's internal and environmental defenses.  Security violations are used to generate both targeted defenses and/or systematic defenses to block this exploit efficiently and block potentially unknown exploits that may leverage other flaws under given performance constraints. The goal of this research is to continuously improve defenses against vulnerabilities. The approach discovers security violations given a specification for both current and upcoming defenses, tightening them automatically and recovering from attempted attacks without disrupting program functionality. All tools, benchmarks, and analyses developed during this project are released as open-source. For outreach, the focus is on capture-the-flag competitions and summer software security courses.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Dongyan",
   "pi_last_name": "Xu",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Dongyan Xu",
   "pi_email_addr": "dxu@cs.purdue.edu",
   "nsf_id": "000295392",
   "pi_start_date": "2019-06-24",
   "pi_end_date": null
  },
  {
   "pi_role": "Former Principal Investigator",
   "pi_first_name": "Mathias",
   "pi_last_name": "Payer",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Mathias Payer",
   "pi_email_addr": "mpayer@purdue.edu",
   "nsf_id": "000677259",
   "pi_start_date": "2018-08-08",
   "pi_end_date": "2019-06-24"
  }
 ],
 "inst": {
  "inst_name": "Purdue University",
  "inst_street_address": "2550 NORTHWESTERN AVE # 1100",
  "inst_street_address_2": "",
  "inst_city_name": "WEST LAFAYETTE",
  "inst_state_code": "IN",
  "inst_state_name": "Indiana",
  "inst_phone_num": "7654941055",
  "inst_zip_code": "479061332",
  "inst_country_name": "United States",
  "cong_dist_code": "04",
  "st_cong_dist_code": "IN04",
  "org_lgl_bus_name": "PURDUE UNIVERSITY",
  "org_prnt_uei_num": "YRXVL4JYCEF5",
  "org_uei_num": "YRXVL4JYCEF5"
 },
 "perf_inst": {
  "perf_inst_name": "Purdue University",
  "perf_str_addr": "305 N University Street",
  "perf_city_name": "West Lafayette",
  "perf_st_code": "IN",
  "perf_st_name": "Indiana",
  "perf_zip_code": "479072107",
  "perf_ctry_code": "US",
  "perf_cong_dist": "04",
  "perf_st_cong_dist": "IN04",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 399849.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>In this project, we proposed and demonstrated the vision of using threats and vulnerabilities faced by a computer system to guide the development and assessment of the system&rsquo;s defenses. Furthermore, we showed the feasibility of continuous improvement of the system&rsquo;s security, by following the &ldquo;feedback loop&rdquo; between threat/vulnerability analysis and defense deployment. We instantiated our vision using concrete vulnerability-driven defense design for a wide range of computing platforms. Many of our results have been published at top conferences in computer security &ndash; with one Distinguished Paper Award &ndash; and in three PhD dissertations. We detail our major efforts and outcomes as follows.</p>\r\n<p>We first focused on the commodity operating systems of general-purpose computers, which have remained monolithic for practical and historical reasons. All operating system kernel code shares a single address space, executes with elevated processor privileges, and has largely unhindered access to all data, including data irrelevant to the completion of a specific task. Such a flat, unrestricted kernel address space gives rise to a wide range of vulnerabilities. Guided by such vulnerabilities, we introduced an address space compartmentalization design, called Hardware-Assisted Kernel Compartmentalization (<strong>HAKC</strong>), that approximates least privilege separation while minimizing both developer effort and performance overhead. HAKC divides code and data into separate partitions, and specifies an access policy for each partition. Data is owned by a single partition, and a partition&rsquo;s access-control policy is enforced at runtime, preventing unauthorized data access. When a partition needs to transfer control flow to another, data ownership is transferred to the target, and transferred back upon return. The HAKC design allows for isolating code and data from the rest of the kernel, without utilizing any additional Trusted Computing Base while compartmentalized code is executing. Instead, HAKC relies on hardware for enforcement.</p>\r\n<p>Through HAKC, we have demonstrated a range of efficient and effective compartmentalization policies. In particular, we analyzed different modules in the Linux kernel and enforced a hierarchical compartmentalization policy that groups nearby areas of code and data into efficient compartments but also allowed access to compartments further away. Our work demonstrated that efficient compartmentalization in the Linux kernel is feasible and eliminates or mitigates a large number of known vulnerabilities in the Linux kernel. A paper describing HAKC was published at NDSS 2022 and won the&nbsp;<strong>Distinguished Paper Award</strong>.</p>\r\n<p>We then focused on the real-time operating systems of resource-constrained embedded computers. Embedded computers typically comprise of low-power and function-limited (e.g., primitive memory management) microcontrollers, which leave a large attack surface to attackers. For instance, an attacker compromising a user task can access any kernel data structure of an embedded operating system. Unfortunately, applying compartmentalization methods (e.g., our HAKC approach above) designed for general-purpose computers would incur high runtime overhead or require major modifications to the embedded firmware. Guided by such weaknesses, we developed Embedded Compartmentalizer (<strong>EC</strong>, published at IEEE S&amp;P 2023), a comprehensive and automatic compartmentalization toolchain for embedded operating systems. EC provides the Embedded Compartmentalizer Compiler (ECC) to automatically partition a piece of monolithic firmware into different compartments and enforces memory protection among them using the Embedded Compartmentalizer Kernel (ECK), a formally verified microkernel.</p>\r\n<p>As a companion effort with EC, we also developed Compartmentalized Real-Time C (<strong>CRT-C</strong>, published at IEEE S&amp;P 2023), a low-cost compile-time compartmentalization mechanism for embedded systems to achieve privilege separation in a linear address space, using specialized programming language dialects. Each programming dialect restricts the programming capabilities of a part of a program, formalizing different compartments within the program. CRT-C uses static analysis to identify various compartments in embedded firmware and realizes the least privilege in the system by enforcing compartment-specific policies. We designed and implemented a new compiler to compile CRT-C to generate compartmentalized firmware that is ready to run on commodity embedded systems.&nbsp;</p>\r\n<p>The key outcomes of this project include the novel techniques described above, open-source software releases, and tools for improving memory safety and enforcing privilege separation. We have also started exploring the adaptation of embedded system compartmentization for the programmable logic controller (PLC) platforms, where many new vulnerabilities and exploits have been reported. &nbsp;This project has generated three PhD dissertations and led to multiple follow-up research projects (of our own as well as other researchers&rsquo;). &nbsp;The materials developed in this project have been applied to our curriculum in operating systems and computer security.</p><br>\n<p>\n Last Modified: 12/29/2024<br>\nModified by: Dongyan&nbsp;Xu</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nIn this project, we proposed and demonstrated the vision of using threats and vulnerabilities faced by a computer system to guide the development and assessment of the systems defenses. Furthermore, we showed the feasibility of continuous improvement of the systems security, by following the feedback loop between threat/vulnerability analysis and defense deployment. We instantiated our vision using concrete vulnerability-driven defense design for a wide range of computing platforms. Many of our results have been published at top conferences in computer security  with one Distinguished Paper Award  and in three PhD dissertations. We detail our major efforts and outcomes as follows.\r\n\n\nWe first focused on the commodity operating systems of general-purpose computers, which have remained monolithic for practical and historical reasons. All operating system kernel code shares a single address space, executes with elevated processor privileges, and has largely unhindered access to all data, including data irrelevant to the completion of a specific task. Such a flat, unrestricted kernel address space gives rise to a wide range of vulnerabilities. Guided by such vulnerabilities, we introduced an address space compartmentalization design, called Hardware-Assisted Kernel Compartmentalization (HAKC), that approximates least privilege separation while minimizing both developer effort and performance overhead. HAKC divides code and data into separate partitions, and specifies an access policy for each partition. Data is owned by a single partition, and a partitions access-control policy is enforced at runtime, preventing unauthorized data access. When a partition needs to transfer control flow to another, data ownership is transferred to the target, and transferred back upon return. The HAKC design allows for isolating code and data from the rest of the kernel, without utilizing any additional Trusted Computing Base while compartmentalized code is executing. Instead, HAKC relies on hardware for enforcement.\r\n\n\nThrough HAKC, we have demonstrated a range of efficient and effective compartmentalization policies. In particular, we analyzed different modules in the Linux kernel and enforced a hierarchical compartmentalization policy that groups nearby areas of code and data into efficient compartments but also allowed access to compartments further away. Our work demonstrated that efficient compartmentalization in the Linux kernel is feasible and eliminates or mitigates a large number of known vulnerabilities in the Linux kernel. A paper describing HAKC was published at NDSS 2022 and won theDistinguished Paper Award.\r\n\n\nWe then focused on the real-time operating systems of resource-constrained embedded computers. Embedded computers typically comprise of low-power and function-limited (e.g., primitive memory management) microcontrollers, which leave a large attack surface to attackers. For instance, an attacker compromising a user task can access any kernel data structure of an embedded operating system. Unfortunately, applying compartmentalization methods (e.g., our HAKC approach above) designed for general-purpose computers would incur high runtime overhead or require major modifications to the embedded firmware. Guided by such weaknesses, we developed Embedded Compartmentalizer (EC, published at IEEE S&P 2023), a comprehensive and automatic compartmentalization toolchain for embedded operating systems. EC provides the Embedded Compartmentalizer Compiler (ECC) to automatically partition a piece of monolithic firmware into different compartments and enforces memory protection among them using the Embedded Compartmentalizer Kernel (ECK), a formally verified microkernel.\r\n\n\nAs a companion effort with EC, we also developed Compartmentalized Real-Time C (CRT-C, published at IEEE S&P 2023), a low-cost compile-time compartmentalization mechanism for embedded systems to achieve privilege separation in a linear address space, using specialized programming language dialects. Each programming dialect restricts the programming capabilities of a part of a program, formalizing different compartments within the program. CRT-C uses static analysis to identify various compartments in embedded firmware and realizes the least privilege in the system by enforcing compartment-specific policies. We designed and implemented a new compiler to compile CRT-C to generate compartmentalized firmware that is ready to run on commodity embedded systems.\r\n\n\nThe key outcomes of this project include the novel techniques described above, open-source software releases, and tools for improving memory safety and enforcing privilege separation. We have also started exploring the adaptation of embedded system compartmentization for the programmable logic controller (PLC) platforms, where many new vulnerabilities and exploits have been reported. This project has generated three PhD dissertations and led to multiple follow-up research projects (of our own as well as other researchers). The materials developed in this project have been applied to our curriculum in operating systems and computer security.\t\t\t\t\tLast Modified: 12/29/2024\n\n\t\t\t\t\tSubmitted by: DongyanXu\n"
 }
}