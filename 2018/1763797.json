{
 "awd_id": "1763797",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "III: Small: Scalable, Practical Deterministic Database Systems",
 "cfda_num": "47.070",
 "org_code": "05020000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "James French",
 "awd_eff_date": "2017-07-01",
 "awd_exp_date": "2019-08-31",
 "tot_intn_awd_amt": 320184.0,
 "awd_amount": 320184.0,
 "awd_min_amd_letter_date": "2017-10-12",
 "awd_max_amd_letter_date": "2018-09-06",
 "awd_abstract_narration": "The database system was one of the first highly concurrent systems ever designed, and has served as a blueprint for the design of many subsequent concurrent computing systems. The decision to allow the system to process concurrent transactions nondeterministically has led to countless headaches from bugs (and debugging), security, replication, and general code complexity. The research funded by this grant will investigate the development of a fundamentally different design for concurrent execution of transactions in database systems that guarantees that the final state of the database is deterministically prescribed from the input to the system. Such databases have the potential to significantly improve the throughput, latency, fault tolerance, and general robustness of database systems. In addition to performing fundamental research on deterministic database systems, we plan to develop open source code for the different components of the system including transaction management, concurrency control, and log management. We expect this code will be useful both for development of other database systems, and also as pedagogical tools for database systems courses. We plan heavy undergraduate involvement in the research, including contributions from women and underrepresented minorities.\r\n\r\nKey research areas within the project include automatic read/write-set detection (a key requirement to making deterministic database systems practical and widely adopted), leveraging the active replication enabled by determinism to accelerate distributed read-only queries, building a deterministic system out of nondeterministic components, and worker thread scheduling within the database system. These research topics will enable a high-throughput ACID-compliant database system that can scale commit protocols for distributed transactions, the support of performant transactions and queries within the same system, and the ability to handle wild fluctuations in server performance (especially virtual servers in the cloud) and fluctuations in offered workload (including unexpected load spikes). For further information see the project web site at: http://db.cs.yale.edu/calvin.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "IIS",
 "org_div_long_name": "Division of Information & Intelligent Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Daniel",
   "pi_last_name": "Abadi",
   "pi_mid_init": "J",
   "pi_sufx_name": "",
   "pi_full_name": "Daniel J Abadi",
   "pi_email_addr": "abadi@umd.edu",
   "nsf_id": "000508003",
   "pi_start_date": "2017-10-12",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Ruzica",
   "pi_last_name": "Piskac",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Ruzica Piskac",
   "pi_email_addr": "ruzica.piskac@yale.edu",
   "nsf_id": "000655841",
   "pi_start_date": "2018-09-06",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Maryland, College Park",
  "inst_street_address": "3112 LEE BUILDING",
  "inst_street_address_2": "",
  "inst_city_name": "COLLEGE PARK",
  "inst_state_code": "MD",
  "inst_state_name": "Maryland",
  "inst_phone_num": "3014056269",
  "inst_zip_code": "207425100",
  "inst_country_name": "United States",
  "cong_dist_code": "04",
  "st_cong_dist_code": "MD04",
  "org_lgl_bus_name": "UNIVERSITY OF MARYLAND, COLLEGE PARK",
  "org_prnt_uei_num": "NPU8ULVAAS23",
  "org_uei_num": "NPU8ULVAAS23"
 },
 "perf_inst": {
  "perf_inst_name": "University of Maryland College Park",
  "perf_str_addr": "3112 LEE BLDG 7809 Regents Drive",
  "perf_city_name": "COLLEGE PARK",
  "perf_st_code": "MD",
  "perf_st_name": "Maryland",
  "perf_zip_code": "207425141",
  "perf_ctry_code": "US",
  "perf_cong_dist": "04",
  "perf_st_cong_dist": "MD04",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "736400",
   "pgm_ele_name": "Info Integration & Informatics"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7364",
   "pgm_ref_txt": "INFO INTEGRATION & INFORMATICS"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 320184.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p style=\"margin-top: 7.5pt; margin-right: 0in; margin-bottom: 7.5pt; margin-left: 0in; line-height: 15.0pt; vertical-align: baseline;\"><span style=\"font-size: 10.5pt; font-family: Arial, sans-serif;\">Intellectual merit:</span></p>\n<p style=\"margin-top: 7.5pt; margin-right: 0in; margin-bottom: 7.5pt; margin-left: 0in; line-height: 15.0pt; vertical-align: baseline;\"><span style=\"font-size: 10.5pt; font-family: Arial, sans-serif;\">The research contributions of this project included:</span></p>\n<p style=\"margin-top: 7.5pt; margin-right: 0in; margin-bottom: 7.5pt; margin-left: .25in; text-indent: -.25in; line-height: 15.0pt; mso-list: l0 level1 lfo1; vertical-align: baseline;\"><!--[if !supportLists]--><span style=\"font-size: 10.5pt; font-family: Arial, sans-serif;\">(1)<span style=\"font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &quot;Times New Roman&quot;;\">&nbsp;&nbsp; </span></span><!--[endif]--><span style=\"font-size: 10.5pt; font-family: Arial, sans-serif;\">A new thread scheduling mechanism (inside database systems) that partitions functionality across a machine&rsquo;s cores and eliminates the need for handling deadlocks. This new mechanism outperforms conventional database system thread scheduling by up to an order of magnitude on high contention workloads.</span></p>\n<p style=\"margin: 7.5pt 0in 7.5pt 0.25in; text-indent: -0.25in; line-height: 15pt; vertical-align: baseline; outline: 0px;\"><!--[if !supportLists]--><span style=\"font-size: 10.5pt; font-family: Arial, sans-serif;\">(2)<span style=\"font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &quot;Times New Roman&quot;;\">&nbsp;&nbsp; </span></span><!--[endif]--><span style=\"font-size: 10.5pt; font-family: Arial, sans-serif;\">Two novel methods for asynchronous checkpointing that require minimum additional memory usage, no physical point of consistency in the application state, and extremely low runtime overhead. These checkpointing&nbsp;techniques have an overhead that is 2-10X less than state-of-the-art approaches. Furthermore, these checkpointing&nbsp;techniques&nbsp;avoid the temporary latency spikes that are common in other checkpointing approaches.</span></p>\n<p style=\"margin: 7.5pt 0in 7.5pt 0.25in; text-indent: -0.25in; line-height: 15pt; vertical-align: baseline; outline: 0px;\"><!--[if !supportLists]--><span style=\"font-size: 10.5pt; font-family: Arial, sans-serif;\">(3)<span style=\"font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &quot;Times New Roman&quot;;\">&nbsp;&nbsp; </span></span><!--[endif]--><span style=\"font-size: 10.5pt; font-family: Arial, sans-serif;\">A lightweight and customizable partitioning and replication framework for dynamic datasets. By tightly integrating partitioning of dynamic datasets with replication, this new technique is able to efficiently achieve both fault tolerance and access locality. Even without replication, the new partitioning algorithm consistently produces a comparable quality of partitioning (and thus query performance)&nbsp;as statically repartitioning the entire dataset after many dynamic updates. However, once replication is integrated with partitioning, partitioning quality (and thus query performance) improves dramatically.&nbsp;</span></p>\n<p style=\"margin-top: 7.5pt; margin-right: 0in; margin-bottom: 7.5pt; margin-left: .25in; text-indent: -.25in; line-height: 15.0pt; mso-list: l0 level1 lfo1; vertical-align: baseline;\"><!--[if !supportLists]--><span style=\"font-size: 10.5pt; font-family: Arial, sans-serif;\">(4)<span style=\"font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &quot;Times New Roman&quot;;\">&nbsp;&nbsp; </span></span><!--[endif]--><span style=\"font-size: 10.5pt; font-family: Arial, sans-serif;\">A new system architecture that guarantees it will never abort transactions except under a restricted set of conditions, thereby enabling a new recoverability mechanism that safely makes transactions&rsquo; writes visible prior to the end of their execution. This increases the ability of the system to concurrently process conflicting transactions. We also designed a new serializable concurrency control protocol that enables this new recoverability mechanism and outperforms state-of-the-art serializable protocols by an order of magnitude, and low isolation protocols (read committed) by 3X on high contention workloads. Furthermore, if&nbsp;read- and write-sets are unknown in advance, the concurrency control protocol can conservatively specify ranges of records that may need to be accessed without paying the typical performance penalty associated with coarse-grained requests for record access in traditional architectures.</span></p>\n<p style=\"margin: 7.5pt 0in 7.5pt 0.25in; text-indent: -0.25in; line-height: 15pt; vertical-align: baseline; outline: 0px;\"><!--[if !supportLists]--><span style=\"font-size: 10.5pt; font-family: Arial, sans-serif;\">(5)<span style=\"font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &quot;Times New Roman&quot;;\">&nbsp;&nbsp; </span></span><!--[endif]--><span style=\"font-size: 10.5pt; font-family: Arial, sans-serif;\">&nbsp;An implementation and comparison of several different mechanisms for maintaining safe multi-threaded access to shared data structures --- including two major categories of mechanisms: latch-based and latch-free. The results of this comparison questions conventional wisdom on the tradeoffs between latch-based and latch-free algorithms. In particular, latch-based algorithms are thought to scale poorly due to their use of synchronization based on mutual exclusion. In contrast, latch-free algorithms make strong theoretical guarantees which ensure that the progress of a thread is never impeded due to the delay or failure of other threads. The research findings for this project show that there is a much larger space than previously anticipated for which latch-based algorithms are preferable to latch-free algorithms.&nbsp;</span></p>\n<p class=\"MsoListParagraph\" style=\"margin-left: .25in; mso-add-space: auto; text-indent: -.25in; mso-list: l0 level1 lfo1;\"><!--[if !supportLists]--><span style=\"font-size: 10.5pt; line-height: 107%; font-family: Arial, sans-serif;\">(6)<span style=\"font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &quot;Times New Roman&quot;;\">&nbsp;&nbsp; </span></span><!--[endif]--><span style=\"font-size: 10.5pt; line-height: 107%; font-family: Arial, sans-serif;\">A new deterministic system architecture that simultaneously achieves (1) strictly serializable&nbsp;correctness, (2) low latency writes, and (3) high throughput under contended workloads. By achieving these three properties, this new architecture removes a major tradeoff in scalable distributed database systems, and greatly improves developer experience. In particular, in the past, developers were pushed to give up some correctness guarantees in order to achieve required system performance and service levels. This resulted in potential bugs and large amounts of developer complexity to circumvent these problems. By removing this tradeoff, the system can achieve good performance without giving up correctness, thereby allowing the developer to write correct applications without having to compensate for database correctness errors in the application code.&nbsp;</span></p>\n<p style=\"margin-top: 7.5pt; margin-right: 0in; margin-bottom: 7.5pt; margin-left: 0in; line-height: 15.0pt; vertical-align: baseline;\"><span style=\"font-size: 10.5pt; font-family: Arial, sans-serif;\">&nbsp;</span></p>\n<p style=\"margin-top: 7.5pt; margin-right: 0in; margin-bottom: 7.5pt; margin-left: 0in; line-height: 15.0pt; vertical-align: baseline;\"><span style=\"font-size: 10.5pt; font-family: Arial, sans-serif;\">Broader impacts:</span></p>\n<p style=\"margin-top: 0in; margin-right: 0in; margin-bottom: .0001pt; margin-left: .5in; text-indent: -.25in; line-height: 15.0pt; mso-list: l1 level1 lfo2; vertical-align: baseline;\"><!--[if !supportLists]--><span style=\"font-size: 10.5pt; font-family: Arial, sans-serif;\">(1)<span style=\"font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &quot;Times New Roman&quot;;\">&nbsp;&nbsp; </span></span><!--[endif]--><span style=\"font-size: 10.5pt; font-family: Arial, sans-serif;\">A component of the research developed for this grant was given as a project at \"</span>Tech + Research: Welcoming Women to Computing Research\" <strong>---</strong><span style=\"font-size: 10.5pt; font-family: Arial, sans-serif;\">&nbsp;a three day research workshop geared towards engaging undergraduate and underrepresented women in computing.</span></p>\n<p style=\"margin: 7.5pt 0in 7.5pt 0.5in; text-indent: -0.25in; line-height: 15pt; vertical-align: baseline; outline: 0px;\"><!--[if !supportLists]--><span style=\"font-size: 10.5pt; font-family: Arial, sans-serif;\">(2)<span style=\"font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &quot;Times New Roman&quot;;\">&nbsp;&nbsp; </span></span><!--[endif]--><span style=\"font-size: 10.5pt; font-family: Arial, sans-serif;\">A series of blog posts/programming assignments were published that serves as educational resources for people training in the field of data management. They have been cumulatively been accessed over 170,000 times as of the end date of the grant.</span></p>\n<p style=\"margin-top: 7.5pt; margin-right: 0in; margin-bottom: 7.5pt; margin-left: .5in; text-indent: -.25in; line-height: 15.0pt; mso-list: l1 level1 lfo2; vertical-align: baseline;\"><!--[if !supportLists]--><span style=\"font-size: 10.5pt; font-family: Arial, sans-serif;\">(3)<span style=\"font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &quot;Times New Roman&quot;;\">&nbsp;&nbsp; </span></span><!--[endif]--><span style=\"font-size: 10.5pt; font-family: Arial, sans-serif;\">Training of 2 post-docs, along with graduate and undergraduate students.</span></p>\n<p style=\"margin-top: 7.5pt; margin-right: 0in; margin-bottom: 7.5pt; margin-left: .5in; text-indent: -.25in; line-height: 15.0pt; mso-list: l1 level1 lfo2; vertical-align: baseline;\"><!--[if !supportLists]--><span style=\"font-size: 10.5pt; font-family: Arial, sans-serif;\">(4)<span style=\"font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &quot;Times New Roman&quot;;\">&nbsp;&nbsp; </span></span><!--[endif]--><span style=\"font-size: 10.5pt; font-family: Arial, sans-serif;\">The worker thread algorithm discussed above was used as a baseline for the \"Mostly-Optimistic Concurrency Control for Highly Contended Dynamic Workloads on a Thousand Cores\" project at Hewlett Packard Enterprise. </span></p>\n<p style=\"margin-top: 7.5pt; margin-right: 0in; margin-bottom: 7.5pt; margin-left: .5in; text-indent: -.25in; line-height: 15.0pt; mso-list: l1 level1 lfo2; vertical-align: baseline;\"><!--[if !supportLists]--><span style=\"font-size: 10.5pt; font-family: Arial, sans-serif;\">(5)<span style=\"font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &quot;Times New Roman&quot;;\">&nbsp;&nbsp; </span></span><!--[endif]--><span style=\"font-size: 10.5pt; font-family: Arial, sans-serif;\">The core technology behind this grant has already started to be transferred to industry. The most prominent example of this is FaunaDB, which is currently commercializing the deterministic architecture researched by this grant. </span></p>\n<p style=\"margin-top: 7.5pt; margin-right: 0in; margin-bottom: 7.5pt; margin-left: .5in; text-indent: -.25in; line-height: 15.0pt; mso-list: l1 level1 lfo2; vertical-align: baseline;\"><!--[if !supportLists]--><span style=\"font-size: 10.5pt; font-family: Arial, sans-serif;\">(6)<span style=\"font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &quot;Times New Roman&quot;;\">&nbsp;&nbsp; </span></span><!--[endif]--><span style=\"font-size: 10.5pt; font-family: Arial, sans-serif;\">An open source project, called Streamy-db also directly implements the ideas from this project.</span></p>\n<div id=\"_mcePaste\" class=\"mcePaste\" style=\"position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;\"></div><br>\n<p>\n\t\t\t\t      \tLast Modified: 12/05/2019<br>\n\t\t\t\t\tModified by: Daniel&nbsp;J&nbsp;Abadi</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "Intellectual merit:\nThe research contributions of this project included:\n(1)   A new thread scheduling mechanism (inside database systems) that partitions functionality across a machine\u2019s cores and eliminates the need for handling deadlocks. This new mechanism outperforms conventional database system thread scheduling by up to an order of magnitude on high contention workloads.\n(2)   Two novel methods for asynchronous checkpointing that require minimum additional memory usage, no physical point of consistency in the application state, and extremely low runtime overhead. These checkpointing techniques have an overhead that is 2-10X less than state-of-the-art approaches. Furthermore, these checkpointing techniques avoid the temporary latency spikes that are common in other checkpointing approaches.\n(3)   A lightweight and customizable partitioning and replication framework for dynamic datasets. By tightly integrating partitioning of dynamic datasets with replication, this new technique is able to efficiently achieve both fault tolerance and access locality. Even without replication, the new partitioning algorithm consistently produces a comparable quality of partitioning (and thus query performance) as statically repartitioning the entire dataset after many dynamic updates. However, once replication is integrated with partitioning, partitioning quality (and thus query performance) improves dramatically. \n(4)   A new system architecture that guarantees it will never abort transactions except under a restricted set of conditions, thereby enabling a new recoverability mechanism that safely makes transactions\u2019 writes visible prior to the end of their execution. This increases the ability of the system to concurrently process conflicting transactions. We also designed a new serializable concurrency control protocol that enables this new recoverability mechanism and outperforms state-of-the-art serializable protocols by an order of magnitude, and low isolation protocols (read committed) by 3X on high contention workloads. Furthermore, if read- and write-sets are unknown in advance, the concurrency control protocol can conservatively specify ranges of records that may need to be accessed without paying the typical performance penalty associated with coarse-grained requests for record access in traditional architectures.\n(5)    An implementation and comparison of several different mechanisms for maintaining safe multi-threaded access to shared data structures --- including two major categories of mechanisms: latch-based and latch-free. The results of this comparison questions conventional wisdom on the tradeoffs between latch-based and latch-free algorithms. In particular, latch-based algorithms are thought to scale poorly due to their use of synchronization based on mutual exclusion. In contrast, latch-free algorithms make strong theoretical guarantees which ensure that the progress of a thread is never impeded due to the delay or failure of other threads. The research findings for this project show that there is a much larger space than previously anticipated for which latch-based algorithms are preferable to latch-free algorithms. \n(6)   A new deterministic system architecture that simultaneously achieves (1) strictly serializable correctness, (2) low latency writes, and (3) high throughput under contended workloads. By achieving these three properties, this new architecture removes a major tradeoff in scalable distributed database systems, and greatly improves developer experience. In particular, in the past, developers were pushed to give up some correctness guarantees in order to achieve required system performance and service levels. This resulted in potential bugs and large amounts of developer complexity to circumvent these problems. By removing this tradeoff, the system can achieve good performance without giving up correctness, thereby allowing the developer to write correct applications without having to compensate for database correctness errors in the application code. \n \nBroader impacts:\n(1)   A component of the research developed for this grant was given as a project at \"Tech + Research: Welcoming Women to Computing Research\" --- a three day research workshop geared towards engaging undergraduate and underrepresented women in computing.\n(2)   A series of blog posts/programming assignments were published that serves as educational resources for people training in the field of data management. They have been cumulatively been accessed over 170,000 times as of the end date of the grant.\n(3)   Training of 2 post-docs, along with graduate and undergraduate students.\n(4)   The worker thread algorithm discussed above was used as a baseline for the \"Mostly-Optimistic Concurrency Control for Highly Contended Dynamic Workloads on a Thousand Cores\" project at Hewlett Packard Enterprise. \n(5)   The core technology behind this grant has already started to be transferred to industry. The most prominent example of this is FaunaDB, which is currently commercializing the deterministic architecture researched by this grant. \n(6)   An open source project, called Streamy-db also directly implements the ideas from this project.\n\n\n\t\t\t\t\tLast Modified: 12/05/2019\n\n\t\t\t\t\tSubmitted by: Daniel J Abadi"
 }
}