{
 "awd_id": "1750399",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CAREER: Staging Compilers for Heterogeneous Platforms",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927498",
 "po_email": "achtchel@nsf.gov",
 "po_sign_block_name": "Almadena Chtchelkanova",
 "awd_eff_date": "2018-02-01",
 "awd_exp_date": "2024-01-31",
 "tot_intn_awd_amt": 477998.0,
 "awd_amount": 477998.0,
 "awd_min_amd_letter_date": "2017-12-18",
 "awd_max_amd_letter_date": "2022-06-22",
 "awd_abstract_narration": "Power density and energy considerations have become the primary constraints driving technology directions for embedded, mainstream, as well as peta/exascale computing at the high end. Non-homogeneous CPU cores and increasingly complex System-on-Chips are on the roadmap of most manufacturers. In a word, computing platforms are now heterogeneous, after decades of mass marketing homogeneous single-core x86 processors. Optimizing compilers are a cornerstone of the software stack: they are in charge of producing high-quality machine-specific code from the input program. The current development model where either an application is manually tuned by expert engineers to the specifics of the new target platform, or simply left untuned and heavily under-utilizing the hardware resources is not sustainable. This project targets the design of a complete system to efficiently compile several key computation patterns to heterogeneous targets, from a single input source. The PI investigates how to automatically characterize the quality and performance of software transformation systems, so as to better exploit their strengths; and create new customized compilation techniques to produce optimized binaries for heterogeneous processors. \r\nIn particular, the PI develops a novel system that automatically learns what types of programs an optimization tool (e.g., a vendor compiler) can optimize well, focusing on performance-critical loop-based program regions amenable to polyhedral compilation. By combining automatic benchmark generation and deep learning techniques, this system automatically builds a performance contract for the compiler: a program that meets specific syntactic and semantics restriction (the contract) is guaranteed to be well optimized by that compiler. Then, in order to best exploit such compilers, programs are automatically restructured to expose program sub-regions that meet the contract requirements. With the assistance of target-specific performance models, the best restructuring is chosen at compile-time for each hardware target. This system can then be applied at compile-time for various execution contexts (e.g., for different CPU frequencies, core counts, etc.), to deliver an adaptive binary where the best implementation is selected at run-time as a function of the execution context. The project aims to demonstrate how to best stage various compilers to exploit their strengths, in turn significantly reducing the time currently spent by developers to tune their implementation for better performance. Education material to be produced includes a lecture series for educators and students on how to write programs that compilers can optimize well, and a MOOC on polyhedral compilation, the mathematical framework to reason about programs that is central to this project.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Louis-Noel",
   "pi_last_name": "Pouchet",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Louis-Noel Pouchet",
   "pi_email_addr": "pouchet@cs.colostate.edu",
   "nsf_id": "000637181",
   "pi_start_date": "2017-12-18",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Colorado State University",
  "inst_street_address": "601 S HOWES ST",
  "inst_street_address_2": "",
  "inst_city_name": "FORT COLLINS",
  "inst_state_code": "CO",
  "inst_state_name": "Colorado",
  "inst_phone_num": "9704916355",
  "inst_zip_code": "805212807",
  "inst_country_name": "United States",
  "cong_dist_code": "02",
  "st_cong_dist_code": "CO02",
  "org_lgl_bus_name": "COLORADO STATE UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "LT9CXX8L19G1"
 },
 "perf_inst": {
  "perf_inst_name": "Colorado State University",
  "perf_str_addr": "200 W. Lake Street",
  "perf_city_name": "Fort Collins",
  "perf_st_code": "CO",
  "perf_st_name": "Colorado",
  "perf_zip_code": "805214593",
  "perf_ctry_code": "US",
  "perf_cong_dist": "02",
  "perf_st_cong_dist": "CO02",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "1045",
   "pgm_ref_txt": "CAREER-Faculty Erly Career Dev"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7942",
   "pgm_ref_txt": "HIGH-PERFORMANCE COMPUTING"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  }
 ],
 "app_fund": [
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01002223DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 87766.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 91977.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 95579.0
  },
  {
   "fund_oblg_fiscal_yr": 2021,
   "fund_oblg_amt": 99356.0
  },
  {
   "fund_oblg_fiscal_yr": 2022,
   "fund_oblg_amt": 103320.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Our project targeted the problem of improving the performance of programs, and the easiness to produce high-performance implementations for key numerical computations. Compilers translate an input program into machine code, but also perform a vast set of optimizations automatically, ranging from application-specific optimizations to machine-specific ones. This project targeted the understanding of the quality and performance of such software transformation systems to exploit their strengths, and develop new optimizations as needed otherwise.</p>\n<p><br />We have delivered performance characterization tools for programs and architectures, helping to understand performance bottlenecks and to relate them to how the programs are written. We have designed several novel compiler optimization approaches for polyhedral programs, targeting CPUs and FPGAs in particular, improving their performance and reducing their energy cost. We have also developed rigorous techniques to compress sequences of integer tuples into a union of dense polyhedra, enabling a novel approach to represent sparse computations. We have also extensively studied the potential of deep learning techniques to program repair and program equivalence, including a novel self-supervised sample selection approach for improved quality of AI models. We also developed novel approaches for program equivalence and verification, enabling to check the correctness of tools, humans and AI models when they produce optimized implementations of an input program.<br /><br />Our project was particularly successful, leading to 17 publications at top venues in the field, the graduation of two Ph.D students and one MS student all funded by this CAREER grant, and several spin-off projects originating from the research we conducted.We implemented in particular an academic partnership with France, with a co-tutelle program where Ph.D. students graduate with diplomas from both INRIA and Colorado State University, and successfully graduated one Ph.D under this program. Our results have been disseminated in publicly available open-source software, including new compilation techniques, new deep learning approaches for program repair and correctness checking, and the associated benchmarking suites.</p>\n<p>&nbsp;</p><br>\n<p>\n Last Modified: 06/07/2024<br>\nModified by: Louis-Noel&nbsp;Pouchet</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nOur project targeted the problem of improving the performance of programs, and the easiness to produce high-performance implementations for key numerical computations. Compilers translate an input program into machine code, but also perform a vast set of optimizations automatically, ranging from application-specific optimizations to machine-specific ones. This project targeted the understanding of the quality and performance of such software transformation systems to exploit their strengths, and develop new optimizations as needed otherwise.\n\n\n\nWe have delivered performance characterization tools for programs and architectures, helping to understand performance bottlenecks and to relate them to how the programs are written. We have designed several novel compiler optimization approaches for polyhedral programs, targeting CPUs and FPGAs in particular, improving their performance and reducing their energy cost. We have also developed rigorous techniques to compress sequences of integer tuples into a union of dense polyhedra, enabling a novel approach to represent sparse computations. We have also extensively studied the potential of deep learning techniques to program repair and program equivalence, including a novel self-supervised sample selection approach for improved quality of AI models. We also developed novel approaches for program equivalence and verification, enabling to check the correctness of tools, humans and AI models when they produce optimized implementations of an input program.\n\nOur project was particularly successful, leading to 17 publications at top venues in the field, the graduation of two Ph.D students and one MS student all funded by this CAREER grant, and several spin-off projects originating from the research we conducted.We implemented in particular an academic partnership with France, with a co-tutelle program where Ph.D. students graduate with diplomas from both INRIA and Colorado State University, and successfully graduated one Ph.D under this program. Our results have been disseminated in publicly available open-source software, including new compilation techniques, new deep learning approaches for program repair and correctness checking, and the associated benchmarking suites.\n\n\n\t\t\t\t\tLast Modified: 06/07/2024\n\n\t\t\t\t\tSubmitted by: Louis-NoelPouchet\n"
 }
}