{
 "awd_id": "1755908",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CRII: CHS: Designing Scalable Help Tools for Programming Courses",
 "cfda_num": "47.070",
 "org_code": "05020000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Balakrishnan Prabhakaran",
 "awd_eff_date": "2018-09-01",
 "awd_exp_date": "2022-08-31",
 "tot_intn_awd_amt": 174981.0,
 "awd_amount": 174981.0,
 "awd_min_amd_letter_date": "2018-03-06",
 "awd_max_amd_letter_date": "2018-03-06",
 "awd_abstract_narration": "The growing demand for programming skills has led to an influx of new learners in both traditional and online programming courses. However, it is challenging to provide effective personalized help, particularly online. Synchronous tools such as video chat enable interactive help but limit scheduling flexibility, which is a key advantage of online courses. Asynchronous tools such as discussion forums provide flexibility and allow students to learn from prior questions but are less interactive and lose important contextual information about the learner's question.  This project aims to design, build, and test \"semi-synchronous\" tools to combine the best of both help styles. The idea is that capturing snapshots of the program's code and output should allow learners to ask clearer questions and let instructors form a more complete picture of the problem that should improve their answers, while integrating chat features with the code and tracking how code changes as the discussion progresses should help other learners make more effective use of prior questions.  Building and testing these tools will advance knowledge about how to develop scalable collaborative systems, useful information repositories, and more effective support resources for programming courses.  Further, it will have practical impacts on software education, particularly for students with lower socioeconomic status who could benefit most from better support in online courses.\r\n\r\nThe project is organized around the evolution and evaluation of an existing prototype semi-synchronous tool called chat.codes.  On the development side, there are two major activities.  The first is integrating version tracking with the existing chat interface and developing tools to visualize how code changes along with conversational turns during a help session.  The second involves developing tools to archive, search, and view past conversations based on specific discussion topics, code keywords, or instructor-created tags.  The evaluation has four main phases.  The first is a one-hour lab study pairing students and instructors on simulated programming tasks that require students to learn a new concept from the instructor, aimed at evaluating the usability of chat.codes relative to other synchronous help systems.  The second is a lab study to test the archiving, search, and visualization features, assigning students to a programming problem and giving them access to the help sessions from the first experiment but not a live instructor to see how well the archived conversations both help solve the programming problems and convey the underlying concepts.  Results from both studies will be used to improve chat.codes, which will then be deployed as a remote support tool for two semesters in a large in-person introductory undergraduate programming course.  This deployment will be open-ended and students and instructors will not be required to use the tool but will be encouraged to do so; the project team will use a combination of interviews where they ask users to compare chat.codes to other support tools, along with analysis of logged help sessions, to better understand the strengths and weaknesses that come with integrating the code and chat elements.  The team will then develop a final version of the tool that will be deployed alongside existing online programming courses.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "IIS",
 "org_div_long_name": "Division of Information & Intelligent Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Steve",
   "pi_last_name": "Oney",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Steve Oney",
   "pi_email_addr": "soney@umich.edu",
   "nsf_id": "000706474",
   "pi_start_date": "2018-03-06",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Regents of the University of Michigan - Ann Arbor",
  "inst_street_address": "1109 GEDDES AVE STE 3300",
  "inst_street_address_2": "",
  "inst_city_name": "ANN ARBOR",
  "inst_state_code": "MI",
  "inst_state_name": "Michigan",
  "inst_phone_num": "7347636438",
  "inst_zip_code": "481091015",
  "inst_country_name": "United States",
  "cong_dist_code": "06",
  "st_cong_dist_code": "MI06",
  "org_lgl_bus_name": "REGENTS OF THE UNIVERSITY OF MICHIGAN",
  "org_prnt_uei_num": "",
  "org_uei_num": "GNJ7BBP73WE9"
 },
 "perf_inst": {
  "perf_inst_name": "University of Michigan Ann Arbor",
  "perf_str_addr": "3003 South State St., Room 1062",
  "perf_city_name": "Ann Arbor",
  "perf_st_code": "MI",
  "perf_st_name": "Michigan",
  "perf_zip_code": "481091274",
  "perf_ctry_code": "US",
  "perf_cong_dist": "06",
  "perf_st_cong_dist": "MI06",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "736700",
   "pgm_ele_name": "HCC-Human-Centered Computing"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7367",
   "pgm_ref_txt": "Cyber-Human Systems"
  },
  {
   "pgm_ref_code": "8228",
   "pgm_ref_txt": "CISE Resrch Initiatn Initiatve"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 174981.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The work done as part of this project make it easier for computer programmers to communicate about code. Unlike the \"natural languages\" that we use every day to communicate with each other (English, Mandarin, Spanish, etc.), \"programming languages\" (Java, Python, C++, etc.) are designed to be interpreted by computers. Although computers typically have no problem understanding and evaluating properly written code, it can be difficult for humans to understand the purpose and function of code. Thus, it is important for programmers to be able to effectively communicate about and explain code. Communication about code is important in a variety of contexts including education (teaching through writing code), documentation (writing code that is more understandable and thus easier to maintain), and collaboration (working as part of a larger team of programmers to build complex software).<br /><br /><br />However, communicating about code can be difficult for several reasons. Code is often in a state of constant change as developers add features, fix bugs, and try to generally improve it over time. This means that the features that developers often use to identify which portion of code they are discussing (such as line numbers) can get outdated as the code changes. It can also be difficult to informally communicate about how (and why) code changes over time without using more formal tools like version control. Work done as part of this grant introduced and evaluated ways to address these challenges in a variety of contexts, including data science, education, and tutorial authoring. It introduces a way to easily \"point\" to specific code changes as part of natural language messages describing those code changes.<br /><br /><br />Work done as part of this grant includes the creation of several new ways to make it easier to describe and discuss code, studies that help us understand how teams of data scientists collaborate (including exploring different styles of authoring and communicating with team members), and systems for several popular programming environments. Specifically, we designed \"chat.codes\", a system that allows developers to write messages that contain pointers to specific regions of specific version of code. Chat.codes also integrates code with messages, allowing users to see how code evolves over the course of a conversation. In a laboratory study with chat.codes, we found that it can have some key advantages for people who are describing code or people who are reading descriptions about code.<br /><br /><br />We also incorporated chat.codes features and variations of ideas developed in chat.codes as part of several other systems, including a system for in-class programming exercises (PuzzleMe) where students can work in teams; an extension for the Jupyter notebook platform (Callisto) where data scientists can refer not only to code but also to visualizations of the data they are exploring; and a system for building interactive tutorials in the Visual Studio Code Integrated Development environment. Beyond these systems, we also conducted studies that helped us, other researchers, and practitioners better understand how to build collaborative programming systems. By studying teams of data scientists, we developed a series of recommendations for how to better support the varied styles of communication and collaboration that are common in data science teams.<br /><br /><br />Programming is often collaborative. Our work shows was to improve communication amongst teams of programmers, which can ultimately help them write better code.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 12/29/2022<br>\n\t\t\t\t\tModified by: Steve&nbsp;Oney</p>\n</div>\n<div class=\"porSideCol\">\n<div class=\"each-gallery\">\n<div class=\"galContent\" id=\"gallery0\">\n<div class=\"photoCount\" id=\"photoCount0\">\n\t\t\t\t\t\t\t\t\tImages (<span id=\"selectedPhoto0\">1</span> of <span class=\"totalNumber\"></span>)\t\t\n\t\t\t\t\t\t\t\t</div>\n<div class=\"galControls\" id=\"controls0\"></div>\n<div class=\"galSlideshow\" id=\"slideshow0\"></div>\n<div class=\"galEmbox\" id=\"embox\">\n<div class=\"image-title\"></div>\n</div>\n</div>\n<div class=\"galNavigation\" id=\"navigation0\">\n<ul class=\"thumbs\" id=\"thumbs0\">\n<li>\n<a href=\"/por/images/Reports/POR/2022/1755908/1755908_10533160_1672343803470_chatcodes--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2022/1755908/1755908_10533160_1672343803470_chatcodes--rgov-800width.jpg\" title=\"A screenshot of the chat.codes system\"><img src=\"/por/images/Reports/POR/2022/1755908/1755908_10533160_1672343803470_chatcodes--rgov-66x44.jpg\" alt=\"A screenshot of the chat.codes system\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Chat.codes combines a shared code editor (left) with chat messages (right). Users can view which specific version of code (A) and region (C) a specific message refers to. They can also see how the code evolves over the course of the conversation (B).</div>\n<div class=\"imageCredit\">Oney, Steve, Christopher Brooks, and Paul Resnick. \"Creating guided code explanations with chat. codes.\" Proceedings of the ACM on Human-Computer Interaction 2.CSCW (2018): 1-20.</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Steve&nbsp;Oney</div>\n<div class=\"imageTitle\">A screenshot of the chat.codes system</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2022/1755908/1755908_10533160_1672344350613_callisto--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2022/1755908/1755908_10533160_1672344350613_callisto--rgov-800width.jpg\" title=\"A screenshot from the Callisto Jupyter extension\"><img src=\"/por/images/Reports/POR/2022/1755908/1755908_10533160_1672344350613_callisto--rgov-66x44.jpg\" alt=\"A screenshot from the Callisto Jupyter extension\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Callisto allows programmers see differences in code (A) and visual output (B)</div>\n<div class=\"imageCredit\">Wang, April Yi, et al. \"Callisto: Capturing the\" Why\" by Connecting Conversations with Computational Narratives.\" Proceedings of the 2020 CHI Conference on Human Factors in Computing Systems. 2020.</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Steve&nbsp;Oney</div>\n<div class=\"imageTitle\">A screenshot from the Callisto Jupyter extension</div>\n</div>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>",
  "por_txt_cntn": "\nThe work done as part of this project make it easier for computer programmers to communicate about code. Unlike the \"natural languages\" that we use every day to communicate with each other (English, Mandarin, Spanish, etc.), \"programming languages\" (Java, Python, C++, etc.) are designed to be interpreted by computers. Although computers typically have no problem understanding and evaluating properly written code, it can be difficult for humans to understand the purpose and function of code. Thus, it is important for programmers to be able to effectively communicate about and explain code. Communication about code is important in a variety of contexts including education (teaching through writing code), documentation (writing code that is more understandable and thus easier to maintain), and collaboration (working as part of a larger team of programmers to build complex software).\n\n\nHowever, communicating about code can be difficult for several reasons. Code is often in a state of constant change as developers add features, fix bugs, and try to generally improve it over time. This means that the features that developers often use to identify which portion of code they are discussing (such as line numbers) can get outdated as the code changes. It can also be difficult to informally communicate about how (and why) code changes over time without using more formal tools like version control. Work done as part of this grant introduced and evaluated ways to address these challenges in a variety of contexts, including data science, education, and tutorial authoring. It introduces a way to easily \"point\" to specific code changes as part of natural language messages describing those code changes.\n\n\nWork done as part of this grant includes the creation of several new ways to make it easier to describe and discuss code, studies that help us understand how teams of data scientists collaborate (including exploring different styles of authoring and communicating with team members), and systems for several popular programming environments. Specifically, we designed \"chat.codes\", a system that allows developers to write messages that contain pointers to specific regions of specific version of code. Chat.codes also integrates code with messages, allowing users to see how code evolves over the course of a conversation. In a laboratory study with chat.codes, we found that it can have some key advantages for people who are describing code or people who are reading descriptions about code.\n\n\nWe also incorporated chat.codes features and variations of ideas developed in chat.codes as part of several other systems, including a system for in-class programming exercises (PuzzleMe) where students can work in teams; an extension for the Jupyter notebook platform (Callisto) where data scientists can refer not only to code but also to visualizations of the data they are exploring; and a system for building interactive tutorials in the Visual Studio Code Integrated Development environment. Beyond these systems, we also conducted studies that helped us, other researchers, and practitioners better understand how to build collaborative programming systems. By studying teams of data scientists, we developed a series of recommendations for how to better support the varied styles of communication and collaboration that are common in data science teams.\n\n\nProgramming is often collaborative. Our work shows was to improve communication amongst teams of programmers, which can ultimately help them write better code.\n\n\t\t\t\t\tLast Modified: 12/29/2022\n\n\t\t\t\t\tSubmitted by: Steve Oney"
 }
}