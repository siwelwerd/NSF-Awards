{
 "awd_id": "1815949",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Lazy Data Structures for Data-Intensive Applications",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2018-10-01",
 "awd_exp_date": "2023-09-30",
 "tot_intn_awd_amt": 449827.0,
 "awd_amount": 511402.0,
 "awd_min_amd_letter_date": "2018-07-16",
 "awd_max_amd_letter_date": "2019-08-15",
 "awd_abstract_narration": "Developing and optimizing data-intensive applications is a crucial but challenging goal in the Big Data era. This project aims to research and design a novel programming system to improve the performance and assurance of data-intensive applications. The project's novelties are (i) laying a new foundation for programming, optimizing, and reasoning about Big Data systems, and (ii) building a practical software ecosystem to improve the quality of data-intensive applications. The project's impacts are (i) shedding fundamental insight in data-intensive programs, with a broad range of applications from social network analysis to artificial intelligence; (ii) enabling new curriculum development, and bringing underrepresented students to the exciting frontier of data-intensive computing. \r\n\r\nThe project centers around the idea of data-centric laziness: the operations to be performed over data structures --- such as topological changes or payload queries --- may be delayed and flexibly memoized within the data structure itself in a decentralized manner. The project is carried out in several directions. First, it conducts a foundational study on laziness in the presence of data processing, including a rigorous study on the subtleties in designing a lazy propagation system, a proof of observable equivalence between lazy and eager data processing, a cost-based semantics for capturing lazy behaviors, and a unification of eagerness vs. laziness and data vs. computation. Second, it investigates how parallelism and laziness interact to improve the performance of lazy data structures, through the support of asynchronous data processing, in-data propagation parallelism, and concurrent garbage collection of propagation labels. Third, it bridges the language foundation with practical algorithm design and system building, exploring algorithm-oriented programming abstractions, partition-based out-of-core data processing, just-in-time data structure re-organization, and propagation-aware performance monitoring.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Yu David",
   "pi_last_name": "Liu",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Yu David Liu",
   "pi_email_addr": "davidl@binghamton.edu",
   "nsf_id": "000521321",
   "pi_start_date": "2018-07-16",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "SUNY at Binghamton",
  "inst_street_address": "4400 VESTAL PKWY E",
  "inst_street_address_2": "",
  "inst_city_name": "BINGHAMTON",
  "inst_state_code": "NY",
  "inst_state_name": "New York",
  "inst_phone_num": "6077776136",
  "inst_zip_code": "13902",
  "inst_country_name": "United States",
  "cong_dist_code": "19",
  "st_cong_dist_code": "NY19",
  "org_lgl_bus_name": "THE RESEARCH FOUNDATION FOR THE STATE UNIVERSITY OF NEW YORK",
  "org_prnt_uei_num": "L9ZDVULCHCV3",
  "org_uei_num": "NQMVAAQUFU53"
 },
 "perf_inst": {
  "perf_inst_name": "SUNY at Binghamton",
  "perf_str_addr": "4400 Vestal Pkwy East",
  "perf_city_name": "Binghamton",
  "perf_st_code": "NY",
  "perf_st_name": "New York",
  "perf_zip_code": "139026000",
  "perf_ctry_code": "US",
  "perf_cong_dist": "19",
  "perf_st_cong_dist": "NY19",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 449827.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 61575.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Data-intensive&nbsp;applications and systems are a fundamental component of the modern computing stack. This project develops novel formal foundations and programming systems to improve their assurance and performance. On the principled level, this project lays a foundation for data-intensive applications, building on the insights from classic lazy evaluation well-known in programming language design. On the experimental level, the project leads to new data management systems that meet the stringent requirements of online data processing.</p>\n<p>The intellectual merits of this project have three highlights. First, our project leads to the development of the DON calculus, the&nbsp;first rigorous foundation for online data processing. Beyond conventional data processing, online data processing systems have unique features. DON captures two families of these features, known as incremental operation processing and temporal locality optimization. The specification and mechanization of DON provide a sound base for the designers of future data processing systems to build upon, helping them embrace rigorous semantic engineering without the need of developing from scratch. Second,&nbsp;a new query language runtime, called Pitstop, has been designed. It builds on the idea of interruptible query processing: the time-consuming task of data inspection for processing each query or update may be interrupted and resumed later at the boundary of fine-grained data partitions. It enables a novel form of fine-grained concurrency while preserving sequential consistency. PitStop is built as an optimized language runtime of Cypher, a query language of a state-of-the-art graph database, Neo4j. Our Google Cloud-based experiments show that PitStop can outperform unmodified Neo4j during workload fluctuation, with reduced latency and increased throughput. Third, a new cost semantics has been designed to understand the performance of online data processing in the presence of lazy and interruptible data processing. This new cost semantics can account for the performance impact of incremental data processing and&nbsp;temporal locality optimization, where execution time is abstracted as computation costs. The new semantics allows us to reason about why lazy evaluation in data processing can lead to performance gains, and how scheduling may impact performance.</p>\n<p>This project has trained two PhD students, three Master's students, and one post-doctoral researcher. A month-long course on programming and optimizing graph databases was designed and offered to undergraduate students for four times at SUNY Binghamton. As data-intensive applications and systems increasingly become an essential component of modern computing with diverse applications from biology to social sciences, the foundations and systems developed in this project will help us build the data-driven world with faster and more reliable data processing.</p><br>\n<p>\n Last Modified: 01/17/2024<br>\nModified by: Yu David&nbsp;Liu</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nData-intensiveapplications and systems are a fundamental component of the modern computing stack. This project develops novel formal foundations and programming systems to improve their assurance and performance. On the principled level, this project lays a foundation for data-intensive applications, building on the insights from classic lazy evaluation well-known in programming language design. On the experimental level, the project leads to new data management systems that meet the stringent requirements of online data processing.\n\n\nThe intellectual merits of this project have three highlights. First, our project leads to the development of the DON calculus, thefirst rigorous foundation for online data processing. Beyond conventional data processing, online data processing systems have unique features. DON captures two families of these features, known as incremental operation processing and temporal locality optimization. The specification and mechanization of DON provide a sound base for the designers of future data processing systems to build upon, helping them embrace rigorous semantic engineering without the need of developing from scratch. Second,a new query language runtime, called Pitstop, has been designed. It builds on the idea of interruptible query processing: the time-consuming task of data inspection for processing each query or update may be interrupted and resumed later at the boundary of fine-grained data partitions. It enables a novel form of fine-grained concurrency while preserving sequential consistency. PitStop is built as an optimized language runtime of Cypher, a query language of a state-of-the-art graph database, Neo4j. Our Google Cloud-based experiments show that PitStop can outperform unmodified Neo4j during workload fluctuation, with reduced latency and increased throughput. Third, a new cost semantics has been designed to understand the performance of online data processing in the presence of lazy and interruptible data processing. This new cost semantics can account for the performance impact of incremental data processing andtemporal locality optimization, where execution time is abstracted as computation costs. The new semantics allows us to reason about why lazy evaluation in data processing can lead to performance gains, and how scheduling may impact performance.\n\n\nThis project has trained two PhD students, three Master's students, and one post-doctoral researcher. A month-long course on programming and optimizing graph databases was designed and offered to undergraduate students for four times at SUNY Binghamton. As data-intensive applications and systems increasingly become an essential component of modern computing with diverse applications from biology to social sciences, the foundations and systems developed in this project will help us build the data-driven world with faster and more reliable data processing.\t\t\t\t\tLast Modified: 01/17/2024\n\n\t\t\t\t\tSubmitted by: Yu DavidLiu\n"
 }
}