{
 "awd_id": "1812351",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CSR: Small: Runtime Verification of Concurrent Programs",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Jason Hallstrom",
 "awd_eff_date": "2018-09-01",
 "awd_exp_date": "2022-08-31",
 "tot_intn_awd_amt": 414844.0,
 "awd_amount": 414844.0,
 "awd_min_amd_letter_date": "2018-06-14",
 "awd_max_amd_letter_date": "2018-06-14",
 "awd_abstract_narration": "Debugging and testing distributed multithreaded software is a notoriously challenging task. This project develops techniques that facilitate a programmer to locate a software bug by determining if there exists an alternative computational thread of execution or a schedule of the executing processes that may violate a global assertion regarding the correctness of the programs. The project also investigates techniques for enumeration, detection and representation of global states of a distributed multicore program that satisfy a given predicate. The project solves fundamental problems in offline and runtime verification of concurrent programs.\r\n\r\nThe project has four main components. First, it explores space-efficient algorithms for enumerating the global states of interest.  Second, the project studies the design and implementation of parallel algorithms for predicate detection.  Third, a slice of a computation in the poset model with respect to a predicate is the smallest computation that includes all global states satisfying the given predicate.  The project develops general slicing techniques and associated algorithms. Fourth, slicing algorithms for posets are used to detect temporal logic formulas expressed in Basis Temporal Logic interpreted over the lattice of reachable global states. The project develops algorithms for online verification of such formulas.\r\n\r\nThe society is dependent on software that is increasingly becoming parallel and distributed. Debugging this software is error prone and cumbersome. This project will not only improve programmer productivity but also reduce bugs in such programs. In addition, the project is developing methods than can analyze the computation to ensure that it satisfies all global constraints before accepting its result. The project will also develop techniques for analysis of a poset model that has wide applications including combinatorial optimization problems. There is a strong educational component for this project. Techniques developed in this project will be incorporated in the courses on concurrent and multicore computing.\r\n\r\nThe outcomes of this project will be shared in the form of technical reports, journal articles, conference papers, and dissertations. Whenever allowed by the journals and conference proceedings publishers, drafts of the research papers will be available at the investigator's website.  The computer software generated in this project is available at http://users.ece.utexas.edu/~garg/runtime-verification.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Vijay",
   "pi_last_name": "Garg",
   "pi_mid_init": "K",
   "pi_sufx_name": "",
   "pi_full_name": "Vijay K Garg",
   "pi_email_addr": "garg@ece.utexas.edu",
   "nsf_id": "000453995",
   "pi_start_date": "2018-06-14",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Texas at Austin",
  "inst_street_address": "110 INNER CAMPUS DR",
  "inst_street_address_2": "",
  "inst_city_name": "AUSTIN",
  "inst_state_code": "TX",
  "inst_state_name": "Texas",
  "inst_phone_num": "5124716424",
  "inst_zip_code": "787121139",
  "inst_country_name": "United States",
  "cong_dist_code": "25",
  "st_cong_dist_code": "TX25",
  "org_lgl_bus_name": "UNIVERSITY OF TEXAS AT AUSTIN",
  "org_prnt_uei_num": "",
  "org_uei_num": "V6AFQPN18437"
 },
 "perf_inst": {
  "perf_inst_name": "University of Texas at Austin",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "TX",
  "perf_st_name": "Texas",
  "perf_zip_code": "787595316",
  "perf_ctry_code": "US",
  "perf_cong_dist": "37",
  "perf_st_cong_dist": "TX37",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 414844.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p class=\"p1\"><span class=\"s1\">We have developed a technique based on lattice-linear&nbsp;</span>predicate detection which unites a large spread of algorithmic problems and their solutions.&nbsp; This is the lattice-linear predicate (LLP) algorithm, which was introduced in SPAA'20 for solving many combinatorial optimization problems in parallel.&nbsp; Given a search problem, the LLP algorithm is based on viewing the search space as a finite distributive lattice constituting the domain of a lattice-linear predicate. The goal is to find an element of the lattice satisfying this predicate, and multiple processes can advance asynchronously in a parallel fashion to achieve this.&nbsp; For example, we show that feasibility in the stable marriage problem, the shortest path problem, and the assignment problem can all be formulated as a lattice-linear predicate and solved via the LLP algorithm.&nbsp; A number of follow-up works have been produced. We have shown that many dynamic programming problems can be solved using the LLP algorithm. Similarly, one can derive parallel algorithms for the housing allocation problem. We have also derived new improvements to parallel minimum spanning tree algorithms using the LLP paradigm.&nbsp; Moreover, other researchers have extended LLP algorithms for deriving self-stabilizing algorithms.&nbsp; However, one limitation shared by these works is that the LLP algorithm assumes a shared memory model which is not as scalable as a distributed system based on message passing.</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 01/06/2023<br>\n\t\t\t\t\tModified by: Vijay&nbsp;K&nbsp;Garg</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "We have developed a technique based on lattice-linear predicate detection which unites a large spread of algorithmic problems and their solutions.  This is the lattice-linear predicate (LLP) algorithm, which was introduced in SPAA'20 for solving many combinatorial optimization problems in parallel.  Given a search problem, the LLP algorithm is based on viewing the search space as a finite distributive lattice constituting the domain of a lattice-linear predicate. The goal is to find an element of the lattice satisfying this predicate, and multiple processes can advance asynchronously in a parallel fashion to achieve this.  For example, we show that feasibility in the stable marriage problem, the shortest path problem, and the assignment problem can all be formulated as a lattice-linear predicate and solved via the LLP algorithm.  A number of follow-up works have been produced. We have shown that many dynamic programming problems can be solved using the LLP algorithm. Similarly, one can derive parallel algorithms for the housing allocation problem. We have also derived new improvements to parallel minimum spanning tree algorithms using the LLP paradigm.  Moreover, other researchers have extended LLP algorithms for deriving self-stabilizing algorithms.  However, one limitation shared by these works is that the LLP algorithm assumes a shared memory model which is not as scalable as a distributed system based on message passing.\n\n \n\n\t\t\t\t\tLast Modified: 01/06/2023\n\n\t\t\t\t\tSubmitted by: Vijay K Garg"
 }
}