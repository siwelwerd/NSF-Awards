{
 "awd_id": "1814798",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: SMALL: DockerizeME: Automatic Inference and Repair of Computing Environments",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2018-10-01",
 "awd_exp_date": "2021-09-30",
 "tot_intn_awd_amt": 345875.0,
 "awd_amount": 349675.0,
 "awd_min_amd_letter_date": "2018-06-07",
 "awd_max_amd_letter_date": "2018-12-11",
 "awd_abstract_narration": "When developing or deploying software, programmers must ensure that any external libraries or services which are necessary to run an application are properly installed and configured. The process of preparing computing infrastructure to properly execute an application is referred to as software configuration. Currently, programmers often manually perform software configuration, which can result in errors and poor maintainability; as a result, improper software configuration can cost billions of dollars of loss for business, lead to unexpected downtime of services, and cause failure of critical infrastructure and loss of data. Unfortunately, the skills required for proper software configuration can be orthogonal to software development, meaning there are limited programmers who are trained in software configuration skills.\r\n\r\nThis project will develop techniques to automatically perform the software configuration necessary to run an arbitrary application. Two main research tasks will be investigated for this project. One task will be to develop an approach for automatically inferring a Dockerfile, a configuration script for the Docker container system, capable of executing an application. The approach will use automatic code analysis of existing software libraries to build an offline knowledge base capable of recovering the dependencies between them. The approach will augment the knowledge base with rules learned by mining existing Dockerfiles, configuration scripts, and developer resources like Stack Overflow. Further, the approach will apply minimization techniques on environment specifications extracted from this knowledge base to arrive at a minimal set of application dependencies. The second task will develop a system to detect when configuration scripts are incompatible with code, such as in the event of a dependency upgrade, and use search-based techniques to automatically repair these configuration scripts. In addition, transfer learning will be used to guide successful inferences and repairs. Finally, these approaches are applied in two applications: detecting when code snippets in community resources are incompatible with an API version, and building repair bots that can automatically create a pull request for repairing configuration scripts.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Christopher",
   "pi_last_name": "Parnin",
   "pi_mid_init": "J",
   "pi_sufx_name": "",
   "pi_full_name": "Christopher J Parnin",
   "pi_email_addr": "cjparnin@ncsu.edu",
   "nsf_id": "000688802",
   "pi_start_date": "2018-06-07",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "North Carolina State University",
  "inst_street_address": "2601 WOLF VILLAGE WAY",
  "inst_street_address_2": "",
  "inst_city_name": "RALEIGH",
  "inst_state_code": "NC",
  "inst_state_name": "North Carolina",
  "inst_phone_num": "9195152444",
  "inst_zip_code": "276950001",
  "inst_country_name": "United States",
  "cong_dist_code": "02",
  "st_cong_dist_code": "NC02",
  "org_lgl_bus_name": "NORTH CAROLINA STATE UNIVERSITY",
  "org_prnt_uei_num": "U3NVH931QJJ3",
  "org_uei_num": "U3NVH931QJJ3"
 },
 "perf_inst": {
  "perf_inst_name": "North Carolina State University",
  "perf_str_addr": "",
  "perf_city_name": "Raleigh",
  "perf_st_code": "NC",
  "perf_st_name": "North Carolina",
  "perf_zip_code": "276958206",
  "perf_ctry_code": "US",
  "perf_cong_dist": "02",
  "perf_st_cong_dist": "NC02",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 345875.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 3800.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p id=\"docs-internal-guid-0c4eae84-7fff-fc6b-fa94-b448a5a0cfd8\" style=\"line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Software developers are increasingly responsible for the day-to-day deployment and management of applications, a practice known as DevOps (a portmanteau of development + operations). One key component of DevOps is the practice of software configuration management, where a computing environment is altered so that it supports program execution. Configuration management is necessary because most programs have implicit expectations about the structure of the computing environment and the resources available to them at runtime, a fact that also makes correct configuration management both difficult and time consuming. And when developers get configuration wrong, the results can include outages, loss of customer data, and financial ruin.</span></p>\n<p>&nbsp;</p>\n<p style=\"line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">The purpose of this work is to investigate specific challenges that developers face while performing configuration management and create a suite of automated tools that reduce the requisite knowledge and effort from developers to configure an environment. We begin with a corpus of 10k simple Python programs, finding that 75% encounter a failure when run without any configuration. When developers were asked to produce a working configuration for these programs, they reported difficulty in finding or installing dependencies, incorrect versions, missing system libraries, and more.</span></p>\n<p style=\"line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\">&nbsp;</p>\n<p id=\"docs-internal-guid-70a99e9d-7fff-ca04-dc6e-279717d4081d\" style=\"line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">We address the problem of dependencies by introducing DockerizeMe, a tool for automatically producing a Dockerfile that includes dependency configuration using a combination of static analysis, dynamic analysis, and association rule mining. DockerizeMe was shown to resolve dependency related errors for many of the Python programs from our corpus. A subsequent tool, V2 aids developers in finding the correct dependency version with efficient search algorithms that incorporate prior knowledge about build breakages related to dependency version changes. V2 was shown to reduce the time it took to resolve dependency version related errors.</span></p>\n<p>&nbsp;</p>\n<p style=\"line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Finally, we address challenges with translating and writing configuration scripts though Dozer and Synth. Dozer uses techniques for tracing and comparing system calls to find similar configuration tasks in multiple configuration languages. These comparison results can be used to automatically migrate the configuration task from one language to another. Synth focuses on synthesizing full configuration scripts by treating configuration as a covering problem where a set of desired changes must be reproduced by combining the changes of one or more configuration tasks. Our results show that Synth can produce working configuration scripts for many environments, including automated synthesis and repair of 45/100 (45 %) failing commands in a base environment.</span></p>\n<p>&nbsp;</p>\n<p><span id=\"docs-internal-guid-83c8f45a-7fff-1a86-3dfd-103492f78fe9\" style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">The work also has broader impacts in education.</span><span id=\"docs-internal-guid-cd41a5c3-7fff-fbc1-ba96-cf0e777f2eb5\" style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"> The typical software tutorial includes step-by-step instructions for installing developer tools, editing files and code, and running commands. When these software tutorials are not executable, either due to missing instructions, ambiguous steps, or simply broken commands, their value is diminished. Non-executable tutorials impact developers in several ways, including frustrating learning experiences, and limiting usability of developer tools. Other resources, such as code snippets can be a useful way to explain and demonstrate a programming concept, but may not always be directly executable.</span></p>\n<p><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"><span id=\"docs-internal-guid-954e0838-7fff-5612-7bf7-051f35fe8620\" style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">The tools produced by the research not only enable discovery of out-of-date and broken coding tutorials and code snippets, but enable a way to automatically synthesis and repair tutorials and educational materials.</span></span></p><br>\n<p>\n\t\t\t\t      \tLast Modified: 04/26/2022<br>\n\t\t\t\t\tModified by: Christopher&nbsp;J&nbsp;Parnin</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "Software developers are increasingly responsible for the day-to-day deployment and management of applications, a practice known as DevOps (a portmanteau of development + operations). One key component of DevOps is the practice of software configuration management, where a computing environment is altered so that it supports program execution. Configuration management is necessary because most programs have implicit expectations about the structure of the computing environment and the resources available to them at runtime, a fact that also makes correct configuration management both difficult and time consuming. And when developers get configuration wrong, the results can include outages, loss of customer data, and financial ruin.\n\n \nThe purpose of this work is to investigate specific challenges that developers face while performing configuration management and create a suite of automated tools that reduce the requisite knowledge and effort from developers to configure an environment. We begin with a corpus of 10k simple Python programs, finding that 75% encounter a failure when run without any configuration. When developers were asked to produce a working configuration for these programs, they reported difficulty in finding or installing dependencies, incorrect versions, missing system libraries, and more.\n \nWe address the problem of dependencies by introducing DockerizeMe, a tool for automatically producing a Dockerfile that includes dependency configuration using a combination of static analysis, dynamic analysis, and association rule mining. DockerizeMe was shown to resolve dependency related errors for many of the Python programs from our corpus. A subsequent tool, V2 aids developers in finding the correct dependency version with efficient search algorithms that incorporate prior knowledge about build breakages related to dependency version changes. V2 was shown to reduce the time it took to resolve dependency version related errors.\n\n \nFinally, we address challenges with translating and writing configuration scripts though Dozer and Synth. Dozer uses techniques for tracing and comparing system calls to find similar configuration tasks in multiple configuration languages. These comparison results can be used to automatically migrate the configuration task from one language to another. Synth focuses on synthesizing full configuration scripts by treating configuration as a covering problem where a set of desired changes must be reproduced by combining the changes of one or more configuration tasks. Our results show that Synth can produce working configuration scripts for many environments, including automated synthesis and repair of 45/100 (45 %) failing commands in a base environment.\n\n \n\nThe work also has broader impacts in education. The typical software tutorial includes step-by-step instructions for installing developer tools, editing files and code, and running commands. When these software tutorials are not executable, either due to missing instructions, ambiguous steps, or simply broken commands, their value is diminished. Non-executable tutorials impact developers in several ways, including frustrating learning experiences, and limiting usability of developer tools. Other resources, such as code snippets can be a useful way to explain and demonstrate a programming concept, but may not always be directly executable.\n\nThe tools produced by the research not only enable discovery of out-of-date and broken coding tutorials and code snippets, but enable a way to automatically synthesis and repair tutorials and educational materials.\n\n\t\t\t\t\tLast Modified: 04/26/2022\n\n\t\t\t\t\tSubmitted by: Christopher J Parnin"
 }
}