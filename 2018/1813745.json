{
 "awd_id": "1813745",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Collaborative Research:  Concurrent Software Verification  with Rely/Guarantee Abstraction",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927991",
 "po_email": "namla@nsf.gov",
 "po_sign_block_name": "Nina Amla",
 "awd_eff_date": "2017-08-16",
 "awd_exp_date": "2020-07-31",
 "tot_intn_awd_amt": 65597.0,
 "awd_amount": 65597.0,
 "awd_min_amd_letter_date": "2017-12-01",
 "awd_max_amd_letter_date": "2017-12-01",
 "awd_abstract_narration": "It is now widely recognized that increasing the reliability of\r\nconcurrent software is one of the most important scientific and\r\ntechnological challenges in the emerging era of multi-core and\r\ndistributed computing.  The last decade has seen substantial advances\r\nin automatic verification technology to improve the reliability of\r\nsequential programs, and software tools that can be applied to large \r\nindustrial code bases. Unfortunately, the underlying technology of \r\nsuch tools cannot be directly applied to concurrent programs. \r\n\r\nThis project investigates scalable techniques for automatic verification of \r\nconcurrent software. The approach uses thread-modular decomposition of \r\nthe overall problem that does not completely decompose to the granularity \r\nof an individual thread. Since base components may exhibit concurrent \r\nbehavior, the investigators develop analysis algorithms for these base components \r\nso that they can be automatically proven correct with respect to their environment\r\ndescription and vice-versa. This work yields automatic verification tools that \r\nexploit richer notions of modular reasoning about parallelism, thereby offering \r\nimproved scalability and robustness over previous approaches. The project team\r\nincludes graduate and undergraduate students.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Eric",
   "pi_last_name": "Koskinen",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Eric Koskinen",
   "pi_email_addr": "eric.koskinen@stevens.edu",
   "nsf_id": "000608272",
   "pi_start_date": "2017-12-01",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Stevens Institute of Technology",
  "inst_street_address": "ONE CASTLE POINT ON HUDSON",
  "inst_street_address_2": "",
  "inst_city_name": "HOBOKEN",
  "inst_state_code": "NJ",
  "inst_state_name": "New Jersey",
  "inst_phone_num": "2012168762",
  "inst_zip_code": "070305906",
  "inst_country_name": "United States",
  "cong_dist_code": "08",
  "st_cong_dist_code": "NJ08",
  "org_lgl_bus_name": "THE TRUSTEES OF THE STEVENS INSTITUTE OF TECHNOLOGY",
  "org_prnt_uei_num": "",
  "org_uei_num": "JJ6CN5Y5A2R5"
 },
 "perf_inst": {
  "perf_inst_name": "Stevens Institute of Technology",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "NJ",
  "perf_st_name": "New Jersey",
  "perf_zip_code": "070305991",
  "perf_ctry_code": "US",
  "perf_cong_dist": "08",
  "perf_st_cong_dist": "NJ08",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "8206",
   "pgm_ref_txt": "Formal Methods and Verification"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 65597.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-cf510f66-7fff-2c4d-a3d6-1afe6f708670\">&nbsp;</span></p>\n<p><span id=\"docs-internal-guid-3d2210e9-7fff-e1bb-30cf-230bf6580e51\">\n<p dir=\"ltr\"><span>Software is pervasive, impacting our lives in countless ways. Meanwhile, in response to modern multicore architectures, software is becoming increasingly concurrent in nature and it is well-known that it is difficult to build correct, concurrent software. This project has yielded advances toward ensuring the robustness of concurrent software. In one portion of this project, novel techniques and implementations were developed to ensure the correct, concurrent execution of blockchain smart contracts. Commutativity is an essential ingredient to correct concurrency in this and many other contexts and, at a more foundational level, the project also led to the first techniques for synthesizing logical commutativity conditions. Finally, this project developed concurrent verification abstractions and type-theoretic methods for correctness of programs with higher-order features.&nbsp;</span></p>\n<p dir=\"ltr\"><span>The </span><span>intellectual merit</span><span> of this project includes foundational mathematical theories (eg logical commutativity condition synthesis), algorithms (for concurrent smart contract execution by blockchain miners and validators), and software artifacts. Results were peer-reviewed and published in proceedings of conferences including VMCAI 2021, Journal of Automated Reasoning 2020, APLAS 2019, Journal of Distributed Computing 2019, TACAS 2018, LICS 2018 and PODC 2017. New software artifacts include the Servois commutativity synthesizer and the Proust Transactional Object system.</span></p>\n<span>The </span><span>broader impacts</span><span> of this project extend the foundations for correctness of concurrent software, enabling future generations of software to safely exploit multicore and distributed architectures. From a pedagogy perspective, PI Koskinen incorporated these topics into his lectures that pertain to societal impact and tutorial-style lectures given to undergraduates and masters students. Funding was also used to train two postdoctoral researchers in verification and concurrency. Finally, the software artifacts were released publicly for the benefit of society at large.</span></span></p><br>\n<p>\n\t\t\t\t      \tLast Modified: 02/08/2021<br>\n\t\t\t\t\tModified by: Eric&nbsp;Koskinen</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n \n\n\nSoftware is pervasive, impacting our lives in countless ways. Meanwhile, in response to modern multicore architectures, software is becoming increasingly concurrent in nature and it is well-known that it is difficult to build correct, concurrent software. This project has yielded advances toward ensuring the robustness of concurrent software. In one portion of this project, novel techniques and implementations were developed to ensure the correct, concurrent execution of blockchain smart contracts. Commutativity is an essential ingredient to correct concurrency in this and many other contexts and, at a more foundational level, the project also led to the first techniques for synthesizing logical commutativity conditions. Finally, this project developed concurrent verification abstractions and type-theoretic methods for correctness of programs with higher-order features. \nThe intellectual merit of this project includes foundational mathematical theories (eg logical commutativity condition synthesis), algorithms (for concurrent smart contract execution by blockchain miners and validators), and software artifacts. Results were peer-reviewed and published in proceedings of conferences including VMCAI 2021, Journal of Automated Reasoning 2020, APLAS 2019, Journal of Distributed Computing 2019, TACAS 2018, LICS 2018 and PODC 2017. New software artifacts include the Servois commutativity synthesizer and the Proust Transactional Object system.\nThe broader impacts of this project extend the foundations for correctness of concurrent software, enabling future generations of software to safely exploit multicore and distributed architectures. From a pedagogy perspective, PI Koskinen incorporated these topics into his lectures that pertain to societal impact and tutorial-style lectures given to undergraduates and masters students. Funding was also used to train two postdoctoral researchers in verification and concurrency. Finally, the software artifacts were released publicly for the benefit of society at large.\n\n\t\t\t\t\tLast Modified: 02/08/2021\n\n\t\t\t\t\tSubmitted by: Eric Koskinen"
 }
}