{
 "awd_id": "1815496",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Concurrency with Specified Orders",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2018-10-01",
 "awd_exp_date": "2024-09-30",
 "tot_intn_awd_amt": 396028.0,
 "awd_amount": 396028.0,
 "awd_min_amd_letter_date": "2018-06-01",
 "awd_max_amd_letter_date": "2023-06-23",
 "awd_abstract_narration": "The need for concurrent programming is growing, especially after the multi-core revolution. This project aims to help concurrent programmers be more productive and produce software of higher quality. This will be of paramount importance for society's software infrastructure. The project will develop general techniques that are easily applicable to many mainstream programming languages such as C++, Java, and Scala. The project's novelties are a notion of specified orders along with a program logic and machine-checked proofs of well-known concurrent algorithms. The project's impacts are approaches to concurrent programming that allow programmers to write once, prove once, and run efficiently anywhere. The investigator will work with a PhD student on the project and will teach the results to students in an undergraduate course and a graduate course.\r\n\r\nFor concurrent programs, programmers often face a mismatch between their assumptions about execution and the memory model of a specific architecture. For example, a programmer may need two instructions to execute in order for the program to be correct, yet most architectures execute out of order. This project will enable programmers to specify such assumptions, prove correctness, and run efficiently on a wide variety of architectures. Specified orders are easier to understand, reason with, and optimize than existing mechanisms such as barriers (assembly language), atomic orderings (C++), and volatiles (Java, Scala).\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Jens",
   "pi_last_name": "Palsberg",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Jens Palsberg",
   "pi_email_addr": "palsberg@ucla.edu",
   "nsf_id": "000105676",
   "pi_start_date": "2018-06-01",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of California-Los Angeles",
  "inst_street_address": "10889 WILSHIRE BLVD STE 700",
  "inst_street_address_2": "",
  "inst_city_name": "LOS ANGELES",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "3107940102",
  "inst_zip_code": "900244200",
  "inst_country_name": "United States",
  "cong_dist_code": "36",
  "st_cong_dist_code": "CA36",
  "org_lgl_bus_name": "UNIVERSITY OF CALIFORNIA, LOS ANGELES",
  "org_prnt_uei_num": "",
  "org_uei_num": "RN64EPNH8JC6"
 },
 "perf_inst": {
  "perf_inst_name": "UCLA Computer Science Dept.",
  "perf_str_addr": "420 Westwood Plaza, 4531-D BH",
  "perf_city_name": "Los Angeles",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "900951596",
  "perf_ctry_code": "US",
  "perf_cong_dist": "36",
  "perf_st_cong_dist": "CA36",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 396028.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p class=\"p1\"><span class=\"s1\">We presented the first formalization of Java's access modes, and&nbsp;</span>we validated our model using a large suite of litmus tests from&nbsp; existing research.&nbsp; We also devised two new algorithms for finding concurrency bugs, one that is general and one that focuses on deadlocks. The new, general algorithm significantly outperforms other bug detectors, across finding data races, deadlocks, and atomicity violations. The other new algorithm for deadlocks has an overhead of 3.5 percent, which is three orders of magnitude less than the overhead of the best previous work. We have also shown how to unify, simplify, and generalize many soundness definitions for analyses that discover concurrency bugs. Our soundness definition is graph based, separates thread-local properties and whole-execution properties, and works well with weak memory executions. We have also devised a three-step proof recipe, and we have used it to prove six existing analyses sound. This includes the first proof of soundness for a predictive analysis that works with weak memory. John Bender and Shuyang Liu finished their PhDs on the topic of this award, and they were funded by this award. Today John Bender works at Sandia National Laboratories, while Shuyang Liu works at Meta. Our project also involved undergraduate students who helped us explore many ideas, and who gained knowledge and skills along the way.</p>\r\n<p>&nbsp;</p><br>\n<p>\n Last Modified: 02/02/2025<br>\nModified by: Jens&nbsp;Palsberg</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nWe presented the first formalization of Java's access modes, andwe validated our model using a large suite of litmus tests from existing research. We also devised two new algorithms for finding concurrency bugs, one that is general and one that focuses on deadlocks. The new, general algorithm significantly outperforms other bug detectors, across finding data races, deadlocks, and atomicity violations. The other new algorithm for deadlocks has an overhead of 3.5 percent, which is three orders of magnitude less than the overhead of the best previous work. We have also shown how to unify, simplify, and generalize many soundness definitions for analyses that discover concurrency bugs. Our soundness definition is graph based, separates thread-local properties and whole-execution properties, and works well with weak memory executions. We have also devised a three-step proof recipe, and we have used it to prove six existing analyses sound. This includes the first proof of soundness for a predictive analysis that works with weak memory. John Bender and Shuyang Liu finished their PhDs on the topic of this award, and they were funded by this award. Today John Bender works at Sandia National Laboratories, while Shuyang Liu works at Meta. Our project also involved undergraduate students who helped us explore many ideas, and who gained knowledge and skills along the way.\r\n\n\n\t\t\t\t\tLast Modified: 02/02/2025\n\n\t\t\t\t\tSubmitted by: JensPalsberg\n"
 }
}