{
 "awd_id": "1801399",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "SaTC: CORE: Medium: Collaborative: Bridging the Gap between Protocol Design and Implementation through Automated Mapping",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2018-09-15",
 "awd_exp_date": "2023-08-31",
 "tot_intn_awd_amt": 240000.0,
 "awd_amount": 240000.0,
 "awd_min_amd_letter_date": "2018-09-04",
 "awd_max_amd_letter_date": "2020-07-17",
 "awd_abstract_narration": "Computer networking and the internet have revolutionized our societies, but are plagued with security problems which are difficult to tame.  Serious vulnerabilities are constantly being discovered in network protocols that affect the work and lives of millions. Even some protocols that have been carefully scrutinized by their designers and by the computer engineering community have been shown to be vulnerable afterwards.  Why is developing secure protocols so hard? This project seeks to address this question by developing novel design and implementation methods for network protocols that allow to identify and fix security vulnerabilities semi-automatically. The project serves the national interest as cyber-security costs the United States many billions of dollars annually.  Besides making technical advances to the field, this project will also have broader impacts in education and curriculum development, as well as in helping to bridge the gap between several somewhat fragmented scientific communities working on the problem.\r\n\r\nTechnically, the project will follow a formal approach building upon a novel combination of techniques from security modeling, automated software synthesis, and program analysis to bridge the gap between an abstract protocol design and a low-level implementation. In particular, the methodology of the project will be based on a new formal behavioral model of software that explicitly captures how the choice of a mapping from a protocol design onto an implementation platform may result in different security vulnerabilities. Building on this model, this project will provide (1) a modeling approach that cleanly separates the descriptions of an abstract design from a concrete platform, and allows the platform to be modeled just once and reused, (2) a synthesis tool that will automatically construct a secure mapping from the abstract protocol to the appropriate choice of platform features, and (3) a program analysis tool that leverages platform-specific information to check that an implementation satisfies a desired property of the protocol. In addition, the project will develop a library of reusable platform models, and demonstrate the effectiveness of the methodology in a series of case studies.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Daniel",
   "pi_last_name": "Jackson",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Daniel Jackson",
   "pi_email_addr": "dnj@csail.mit.edu",
   "nsf_id": "000460161",
   "pi_start_date": "2018-09-04",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Massachusetts Institute of Technology",
  "inst_street_address": "77 MASSACHUSETTS AVE",
  "inst_street_address_2": "",
  "inst_city_name": "CAMBRIDGE",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "6172531000",
  "inst_zip_code": "021394301",
  "inst_country_name": "United States",
  "cong_dist_code": "07",
  "st_cong_dist_code": "MA07",
  "org_lgl_bus_name": "MASSACHUSETTS INSTITUTE OF TECHNOLOGY",
  "org_prnt_uei_num": "E2NYLCDML6V1",
  "org_uei_num": "E2NYLCDML6V1"
 },
 "perf_inst": {
  "perf_inst_name": "Massachusetts Institute of Technology",
  "perf_str_addr": "77 Massachusetts Ave",
  "perf_city_name": "Cambridge",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "021394301",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "MA07",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 80000.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 80000.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 80000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span><strong>The problem. </strong>How do we make software that is more safe, robust and usable? And how do we do that with less work? These are the questions that motivated this research project. At the start of the project, we looked mainly at what are called security protocols: these are patterns of interaction that are used to ensure that apps preserve privacy (not leaking data) and integrity (only letting legitimate users modify it).</span></p>\n<p><span><strong>More general protocols</strong>. Over the course of the project, we moved to a more general kind of protocol which we called a &ldquo;concept.&rdquo; Concepts are patterns of interaction that include not only security but all kinds of functionality, such as booking a restaurant, responding to an online post, friending someone, purchasing from an online store, and so on.&nbsp;</span></p>\n<p><span><strong>A new design approach. </strong>We developed a design approach that allows applications to be built more easily&mdash;and that results in more usable and flexible apps&mdash;by recognizing these concept &ldquo;protocols&rdquo; upfront, and structures the app around them. We looked at how some of these concepts are used for nefarious purposes, with apps being designed with the explicit intent of deceiving the user. These attempts at deception have been called &rdquo;dark patterns,&rdquo; and to date have been blamed primarily on tricks in the user interface (for example, placing a button so that users are likely to press it, even when it doesn&rsquo;t correspond to the action they want to take). We showed how our notion of conceptual protocols can be used to explore and fix deeper dark patterns. For example, in some social media apps &ldquo;tagging&rdquo; another user in a post causes the audience of that post to be extended beyond the original poster&rsquo;s intent; we showed how this can be explained in terms of concepts and thus remedied.</span></p>\n<p><span><strong>A new way to build user interfaces.</strong> Finally, as part of our larger effort to improve how apps are constructed, we devised an entirely new way to build user interfaces. The key idea is to eliminate all the conventional complexities in which every button press or other user action must be explicitly tied to a cascade of updates throughout the user interface. Instead, the user&rsquo;s data is held in a relational database that sits inside the browser. When users perform actions, data is simply added to that database. The content of the user interface&mdash;what the user sees displayed&mdash;is defined as a collection of database queries (called &ldquo;views&rdquo;) that run continually, updating spontaneously whenever the database changes. This removes the need for writing any complicated update cascades, dramatically simplifying the code. It also allows a very responsive user interface that reacts instantaneously, unlike the user interfaces of conventional apps that often update more slowly and in stages.</span></p>\n<p><span><strong>A brighter future for software</strong>. These innovations can be applied immediately to improve the way software is built today. But they also suggest new paradigms of software development, where, if applied systematically and broadly, might change the way we design and build software, resulting in better software at lower cost.&nbsp;</span></p>\n<div><span><br /></span></div>\n<p>&nbsp;</p><br>\n<p>\n Last Modified: 01/15/2024<br>\nModified by: Daniel&nbsp;Jackson</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nThe problem. How do we make software that is more safe, robust and usable? And how do we do that with less work? These are the questions that motivated this research project. At the start of the project, we looked mainly at what are called security protocols: these are patterns of interaction that are used to ensure that apps preserve privacy (not leaking data) and integrity (only letting legitimate users modify it).\n\n\nMore general protocols. Over the course of the project, we moved to a more general kind of protocol which we called a concept. Concepts are patterns of interaction that include not only security but all kinds of functionality, such as booking a restaurant, responding to an online post, friending someone, purchasing from an online store, and so on.\n\n\nA new design approach. We developed a design approach that allows applications to be built more easilyand that results in more usable and flexible appsby recognizing these concept protocols upfront, and structures the app around them. We looked at how some of these concepts are used for nefarious purposes, with apps being designed with the explicit intent of deceiving the user. These attempts at deception have been called dark patterns, and to date have been blamed primarily on tricks in the user interface (for example, placing a button so that users are likely to press it, even when it doesnt correspond to the action they want to take). We showed how our notion of conceptual protocols can be used to explore and fix deeper dark patterns. For example, in some social media apps tagging another user in a post causes the audience of that post to be extended beyond the original posters intent; we showed how this can be explained in terms of concepts and thus remedied.\n\n\nA new way to build user interfaces. Finally, as part of our larger effort to improve how apps are constructed, we devised an entirely new way to build user interfaces. The key idea is to eliminate all the conventional complexities in which every button press or other user action must be explicitly tied to a cascade of updates throughout the user interface. Instead, the users data is held in a relational database that sits inside the browser. When users perform actions, data is simply added to that database. The content of the user interfacewhat the user sees displayedis defined as a collection of database queries (called views) that run continually, updating spontaneously whenever the database changes. This removes the need for writing any complicated update cascades, dramatically simplifying the code. It also allows a very responsive user interface that reacts instantaneously, unlike the user interfaces of conventional apps that often update more slowly and in stages.\n\n\nA brighter future for software. These innovations can be applied immediately to improve the way software is built today. But they also suggest new paradigms of software development, where, if applied systematically and broadly, might change the way we design and build software, resulting in better software at lower cost.\n\n\n\n\n\t\t\t\t\tLast Modified: 01/15/2024\n\n\t\t\t\t\tSubmitted by: DanielJackson\n"
 }
}