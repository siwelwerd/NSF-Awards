{
 "awd_id": "1822965",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SPX: Integrating Persistent Memory in the Cloud",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032925197",
 "po_email": "mmcclure@nsf.gov",
 "po_sign_block_name": "Marilyn McClure",
 "awd_eff_date": "2018-10-01",
 "awd_exp_date": "2023-09-30",
 "tot_intn_awd_amt": 969505.0,
 "awd_amount": 985505.0,
 "awd_min_amd_letter_date": "2018-09-13",
 "awd_max_amd_letter_date": "2021-05-19",
 "awd_abstract_narration": "The massive volume of data and high computing intensity of large-scale applications in the cloud require thousands of machines in big data centers. In addition, there is an increasing demand for faster, energy-efficient, and scalable performance from new data-intensive applications. Unfortunately, as the technology scaling slows down, the semiconductor industry has been facing a major challenge in providing better performance and reducing the power consumption while processing large datasets.  To provide better performance and lower costs for cloud applications that manipulate massive data with tight latency constraints, service providers are moving towards in-memory frameworks to store the working data.  By exploring the roles of emerging memory technologies, this research project has the potential to improve cloud computing performance. The ideas developed in this research will bridge the gap between architecture, systems, and software engineering community and will enable system support and automated tools for adapting applications in the persistent cloud. The project will eventually enable a holistic \"persistent cloud system\" such that the cloud applications can be adapted transparently without significant programmers' effort.\r\n\r\nThe goal of this work is to enable a persistent cloud system in a holistic manner across the system stack such that the persistent cloud applications can be adapted in the systems without significant programmers? effort. In order to design a persistent cloud system, this work is to provide full stack support from the applications to hardware through three major research directions that need to be addressed to design a full-stack persistent cloud system, (i) lightweight storage layer support for persistent memory systems, (ii) data monitoring and placement based on application characteristics and trade-offs in NVM, and (iii) automated persistency support at the application-level.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Samira",
   "pi_last_name": "Khan",
   "pi_mid_init": "M",
   "pi_sufx_name": "",
   "pi_full_name": "Samira M Khan",
   "pi_email_addr": "smk9u@virginia.edu",
   "nsf_id": "000701462",
   "pi_start_date": "2018-09-13",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Haiying",
   "pi_last_name": "Shen",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Haiying Shen",
   "pi_email_addr": "hs6ms@virginia.edu",
   "nsf_id": "000325817",
   "pi_start_date": "2018-09-13",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Baishakhi",
   "pi_last_name": "Ray",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Baishakhi Ray",
   "pi_email_addr": "rayb@cs.columbia.edu",
   "nsf_id": "000701468",
   "pi_start_date": "2018-09-13",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Virginia Main Campus",
  "inst_street_address": "1001 EMMET ST N",
  "inst_street_address_2": "",
  "inst_city_name": "CHARLOTTESVILLE",
  "inst_state_code": "VA",
  "inst_state_name": "Virginia",
  "inst_phone_num": "4349244270",
  "inst_zip_code": "229034833",
  "inst_country_name": "United States",
  "cong_dist_code": "05",
  "st_cong_dist_code": "VA05",
  "org_lgl_bus_name": "RECTOR & VISITORS OF THE UNIVERSITY OF VIRGINIA",
  "org_prnt_uei_num": "",
  "org_uei_num": "JJG6HU8PA4S5"
 },
 "perf_inst": {
  "perf_inst_name": "University of Virginia Main Campus",
  "perf_str_addr": "85 Engineer's Way",
  "perf_city_name": "Charlottesville",
  "perf_st_code": "VA",
  "perf_st_name": "Virginia",
  "perf_zip_code": "229044195",
  "perf_ctry_code": "US",
  "perf_cong_dist": "05",
  "perf_st_cong_dist": "VA05",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "042Y00",
   "pgm_ele_name": "PPoSS-PP of Scalable Systems"
  },
  {
   "pgm_ele_code": "171400",
   "pgm_ele_name": "Special Projects - CNS"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "026Z",
   "pgm_ref_txt": "NSCI: National Strategic Computing Initi"
  },
  {
   "pgm_ref_code": "9102",
   "pgm_ref_txt": "WOMEN, MINORITY, DISABLED, NEC"
  },
  {
   "pgm_ref_code": "9178",
   "pgm_ref_txt": "UNDERGRADUATE EDUCATION"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0121",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 969505.0
  },
  {
   "fund_oblg_fiscal_yr": 2021,
   "fund_oblg_amt": 16000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Persistent memory (PM) technologies, unify memory and storage and deliver both data persistence and high-performance. PM systems allow programs to directly manage their persistent data in memory, as opposed to the conventional way that goes through the file system. Though performant, integrating this new memory technology would require significant changes throughout the system stack.</p>\n<p>First, programs that directly manage persistent data need to guarantee data recovery after a failure, as the file system is bypassed. However, it is hard and error-prone to ensure failure-recovery as programs need to carefully manage writes to PM.</p>\n<p>Second, PM is both a memory and a storage device, which requires various memory and storage supports, such as memory encryption and integrity verification that secure the data and memory deduplication for better&nbsp; bandwidth. Among these supports, the security guarantees are critical butcan significantly increase the access latency. Moreover, these supports should also follow the existing crash consistency guarantees.</p>\n<p>Third, even with data encryption and integrity verification, there can be other vulnerabilities in a real PM system. For example, Intel&rsquo;s Optane PM uses multiple levels of caches and buffers to improve performance, which can lead to new side channels.</p>\n<p><br />This project provides system supports to overcome these challenges.</p>\n<p>&nbsp;</p>\n<p>We proposed that a whole-system-level redesign, from programming support to hardware, that ensures correctness, security, and high-performance, is necessary in order to integrate persistent memory into practical systems. On the software side, to ensure the failure-recovery correctness, we have developed testing tools, PMTest and XFDetector, to help programmers detect failure-recovery issues; and a test case generator, PMFuzz, to generate high-coverage test cases. On the hardware side, we have proposed efficient and crash-consistent secured hardware-software co-designs for PM systems. Further on, wehave reverse-engineered the commercial Optane PM from Intel and exploited covert/side-channel vulnerabilities in the hardware system.</p>\n<p>&nbsp;</p>\n<p><span>Theme 1:&nbsp;</span>Ensuring recoverability of persistent memory software</p>\n<p><span>&nbsp; [ASPLOS&rsquo;21, ASPLOS&rsquo;20, ASPLOS&rsquo;19]</span></p>\n<p>&nbsp;</p>\n<p><span>Theme 2:&nbsp;</span>Efficient and secured persistent memory</p>\n<p><span><span><span>&nbsp;&nbsp;</span><span>[PACT&rsquo;21, ISCA&rsquo;19, HPCA&rsquo;18, Usenix Security'2022]</span></span></span></p>\n<p>&nbsp;</p>\n<p><span><span><span><span><span>Theme 3: Persistence in large-scale systems</span><span><br /></span><span>&nbsp;&nbsp;</span><span>[ISCA&rsquo;21, SOSP'2022]</span></span></span></span></span></p>\n<p>&nbsp;</p><br>\n<p>\n Last Modified: 02/26/2024<br>\nModified by: Samira&nbsp;M&nbsp;Khan</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nPersistent memory (PM) technologies, unify memory and storage and deliver both data persistence and high-performance. PM systems allow programs to directly manage their persistent data in memory, as opposed to the conventional way that goes through the file system. Though performant, integrating this new memory technology would require significant changes throughout the system stack.\n\n\nFirst, programs that directly manage persistent data need to guarantee data recovery after a failure, as the file system is bypassed. However, it is hard and error-prone to ensure failure-recovery as programs need to carefully manage writes to PM.\n\n\nSecond, PM is both a memory and a storage device, which requires various memory and storage supports, such as memory encryption and integrity verification that secure the data and memory deduplication for better bandwidth. Among these supports, the security guarantees are critical butcan significantly increase the access latency. Moreover, these supports should also follow the existing crash consistency guarantees.\n\n\nThird, even with data encryption and integrity verification, there can be other vulnerabilities in a real PM system. For example, Intels Optane PM uses multiple levels of caches and buffers to improve performance, which can lead to new side channels.\n\n\n\nThis project provides system supports to overcome these challenges.\n\n\n\n\n\nWe proposed that a whole-system-level redesign, from programming support to hardware, that ensures correctness, security, and high-performance, is necessary in order to integrate persistent memory into practical systems. On the software side, to ensure the failure-recovery correctness, we have developed testing tools, PMTest and XFDetector, to help programmers detect failure-recovery issues; and a test case generator, PMFuzz, to generate high-coverage test cases. On the hardware side, we have proposed efficient and crash-consistent secured hardware-software co-designs for PM systems. Further on, wehave reverse-engineered the commercial Optane PM from Intel and exploited covert/side-channel vulnerabilities in the hardware system.\n\n\n\n\n\nTheme 1:Ensuring recoverability of persistent memory software\n\n\n [ASPLOS21, ASPLOS20, ASPLOS19]\n\n\n\n\n\nTheme 2:Efficient and secured persistent memory\n\n\n[PACT21, ISCA19, HPCA18, Usenix Security'2022]\n\n\n\n\n\nTheme 3: Persistence in large-scale systems\n[ISCA21, SOSP'2022]\n\n\n\t\t\t\t\tLast Modified: 02/26/2024\n\n\t\t\t\t\tSubmitted by: SamiraMKhan\n"
 }
}