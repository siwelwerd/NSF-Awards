{
 "awd_id": "1815303",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Using Software Defined Cache to Accelerate Index Search for In-memory Applications: Software and Hardware Approaches",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Danella Zhao",
 "awd_eff_date": "2018-10-01",
 "awd_exp_date": "2022-09-30",
 "tot_intn_awd_amt": 345000.0,
 "awd_amount": 369000.0,
 "awd_min_amd_letter_date": "2018-07-02",
 "awd_max_amd_letter_date": "2020-06-16",
 "awd_abstract_narration": "Memory is one of the most important components in large-scale data centers. As many software systems for big data processing keep their data sets entirely in memory to enable high-performance in-memory computing, memory efficiency becomes critical to application performance. While the applications, such as database systems and big data analytics, often serve as an infrastructure for information processing and providing IT services for millions of people in our society, improvement of their performance via optimization of the memory access is of great importance and impact. As memory access is slow compared with processor and cache speeds, the project eliminates unnecessary memory accesses with a re-designed cache architecture supporting flexible access and efficient management. In addition, this project provides research training to both undergraduate and graduate students, especially under-represented minority students, to prepare them to be future information technology professionals with strong skills in computer architecture and system areas.     \r\n\r\nIn memory-intensive computing, a significant percentage of memory access is spent on indices for translating user-defined keys into memory addresses for data accessing. However, due to lack of temporal and spatial localities, it can be very difficult to cache the indices and receive high cache-hit ratio. Accordingly, searching of the indexes is often at the memory speed, and searching for a data item may require multiple memory accesses. This project designs a software-defined cache -- an informed use of processor cache where a user program can explicitly specify data items for caching with their defined keys. As a two-phase effort, the project adopts a software approach, in which it is presented as a user-level library managing a look-aside buffer implicitly mapped into the cache, and a hardware approach, in which keys are explicitly hashed into the cache. Both approaches well exploit access locality and perform index search at the cache speed with their respective unique advantages. Accordingly, performance of memory system and memory-intensive applications can be significantly improved.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Song",
   "pi_last_name": "Jiang",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Song Jiang",
   "pi_email_addr": "song.jiang@uta.edu",
   "nsf_id": "000240353",
   "pi_start_date": "2018-07-02",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Texas at Arlington",
  "inst_street_address": "701 S NEDDERMAN DR",
  "inst_street_address_2": "",
  "inst_city_name": "ARLINGTON",
  "inst_state_code": "TX",
  "inst_state_name": "Texas",
  "inst_phone_num": "8172722105",
  "inst_zip_code": "760199800",
  "inst_country_name": "United States",
  "cong_dist_code": "25",
  "st_cong_dist_code": "TX25",
  "org_lgl_bus_name": "UNIVERSITY OF TEXAS AT ARLINGTON",
  "org_prnt_uei_num": "",
  "org_uei_num": "LMLUKUPJJ9N3"
 },
 "perf_inst": {
  "perf_inst_name": "University of Texas at Arlington",
  "perf_str_addr": "500 UTA Blvd",
  "perf_city_name": "Arlington",
  "perf_st_code": "TX",
  "perf_st_name": "Texas",
  "perf_zip_code": "760101511",
  "perf_ctry_code": "US",
  "perf_cong_dist": "33",
  "perf_st_cong_dist": "TX33",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "287800",
   "pgm_ele_name": "Special Projects - CCF"
  },
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7941",
   "pgm_ref_txt": "COMPUTER ARCHITECTURE"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 345000.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 24000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>This project was proposed in the context of processing big data in a system with large size of memory. Fast access of the data is critical to the data processing and the computer system&rsquo;s performance. Fast access of the data is possible only if their locations can be quickly obtained via searching in index data structures, such as B+ tree and hash table. The efficiency of the index search demands that a majority of index access operations be completed in the CPU caches. Otherwise, the time of in-memory data access, especially for small pieces of data, can be increased by multiple times. However, even one search of the index may reach a relatively large space (in terms of number of cache lines, which are the unit of the memory access by the cache) in the commonly used indexes. With this weak spatial access locality, performance of many in-memory data processing systems is highly compromised. &nbsp;&nbsp;&nbsp;&nbsp;</p>\n<p>&nbsp;</p>\n<p>This project proposes, designs, and implements a framework that allows most of index search to be carried out only in the CPU cache. Specifically, it collects and manages search results in the memory and makes them present in the cache in a compact format. With the same cache capacity, much more index entries can be in the cache to enable fast search. The framework can be designed and implemented either as a software or a hardware solution.</p>\n<p>&nbsp;</p>\n<p>After years of extensive research and engineering efforts on the solution, the PI and his team obtained three major outcomes demonstrating intellectual merits of the project. First, the team designed and prototyped the software-based solution named Search Lookaside Buffer (SLB). It selectively caches the search results by automatically tracking and analyzing program access patterns. SLB can be easily integrated with any index data structures to increase utilization of the limited CPU cache resource and improve throughput of search requests on a large data set. Experiments show that SLB can improve throughput of the index data structures by up to an order of magnitude. Experiments with real-world key-value traces also show up to 73% throughput improvement on a hash table. Second, the team designed and prototyped the hardware-based solution named SDC (Software Defined Cache). It allows programs to explicitly insert, retrieve, and invalidate data in the cache with new instructions. It enables a much more efficient cache without disruptively changing the existing cache organization and without substantially increasing hardware cost. It is prototyped on the gem5 simulator and evaluated it with various data index structures and workloads. Experiment results show that SDC can improve the cache performance for the workloads by up to 5.3&times; over current cache design. Third, a number of application-level systems have been designed and developed with the incorporation of the proposed techniques to demonstrate the applicability of the framework. They include a key-value store (WiPDB), a data deduplication system (RapidCDC), and a data management for the hybrid (persistent memory and DRAM) memory system (ChameleonDB). The principle of the enhancement of spatial locality for higher cache efficiency of the framework is effectively applied in their designs and contributes to their performance advantages. &nbsp;&nbsp;&nbsp;&nbsp;</p>\n<p>&nbsp;</p>\n<p>The broader impacts of the project are demonstrated by the prototyped and open-sourced systems, publications, as well as human resource training produced during execution of the project. In particular, the PI and his team prototyped multiple systems. They include the SLB library for applications to insert their index search results into the buffer and retrieves them later on most likely from the CPU cache, the SDC architecture that provides new cache-access instructions for software to explicitly and directly insert and retrieve search results from the CPU cache, and multiple applications that demonstrate the benefit of the proposed framework, including WiPDB, RapidCDC, and ChameleonDB. All the systems have been extensively evaluated to show their performance advantages. There are over ten papers published resulting from the project, including some on top-tier conferences, such as ACM ICS, Eurosys, SoCC, and SYSTOR conferences. Three Ph.D students and one master student had graduated with this project as major parts of their thesis work. Ten undergraduate students, majority of whom are minority students, including female, African-American, and Hispanic students, participated in the project. They learned skills for workload characterization, problem formulation and solving, and coding. This project&rsquo;s research findings have been incorporated into &ldquo;CSE6350 Advanced Topics in Computer Architecture&rdquo; regularly taught by the PI.</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 01/29/2023<br>\n\t\t\t\t\tModified by: Song&nbsp;Jiang</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThis project was proposed in the context of processing big data in a system with large size of memory. Fast access of the data is critical to the data processing and the computer system\u2019s performance. Fast access of the data is possible only if their locations can be quickly obtained via searching in index data structures, such as B+ tree and hash table. The efficiency of the index search demands that a majority of index access operations be completed in the CPU caches. Otherwise, the time of in-memory data access, especially for small pieces of data, can be increased by multiple times. However, even one search of the index may reach a relatively large space (in terms of number of cache lines, which are the unit of the memory access by the cache) in the commonly used indexes. With this weak spatial access locality, performance of many in-memory data processing systems is highly compromised.     \n\n \n\nThis project proposes, designs, and implements a framework that allows most of index search to be carried out only in the CPU cache. Specifically, it collects and manages search results in the memory and makes them present in the cache in a compact format. With the same cache capacity, much more index entries can be in the cache to enable fast search. The framework can be designed and implemented either as a software or a hardware solution.\n\n \n\nAfter years of extensive research and engineering efforts on the solution, the PI and his team obtained three major outcomes demonstrating intellectual merits of the project. First, the team designed and prototyped the software-based solution named Search Lookaside Buffer (SLB). It selectively caches the search results by automatically tracking and analyzing program access patterns. SLB can be easily integrated with any index data structures to increase utilization of the limited CPU cache resource and improve throughput of search requests on a large data set. Experiments show that SLB can improve throughput of the index data structures by up to an order of magnitude. Experiments with real-world key-value traces also show up to 73% throughput improvement on a hash table. Second, the team designed and prototyped the hardware-based solution named SDC (Software Defined Cache). It allows programs to explicitly insert, retrieve, and invalidate data in the cache with new instructions. It enables a much more efficient cache without disruptively changing the existing cache organization and without substantially increasing hardware cost. It is prototyped on the gem5 simulator and evaluated it with various data index structures and workloads. Experiment results show that SDC can improve the cache performance for the workloads by up to 5.3&times; over current cache design. Third, a number of application-level systems have been designed and developed with the incorporation of the proposed techniques to demonstrate the applicability of the framework. They include a key-value store (WiPDB), a data deduplication system (RapidCDC), and a data management for the hybrid (persistent memory and DRAM) memory system (ChameleonDB). The principle of the enhancement of spatial locality for higher cache efficiency of the framework is effectively applied in their designs and contributes to their performance advantages.     \n\n \n\nThe broader impacts of the project are demonstrated by the prototyped and open-sourced systems, publications, as well as human resource training produced during execution of the project. In particular, the PI and his team prototyped multiple systems. They include the SLB library for applications to insert their index search results into the buffer and retrieves them later on most likely from the CPU cache, the SDC architecture that provides new cache-access instructions for software to explicitly and directly insert and retrieve search results from the CPU cache, and multiple applications that demonstrate the benefit of the proposed framework, including WiPDB, RapidCDC, and ChameleonDB. All the systems have been extensively evaluated to show their performance advantages. There are over ten papers published resulting from the project, including some on top-tier conferences, such as ACM ICS, Eurosys, SoCC, and SYSTOR conferences. Three Ph.D students and one master student had graduated with this project as major parts of their thesis work. Ten undergraduate students, majority of whom are minority students, including female, African-American, and Hispanic students, participated in the project. They learned skills for workload characterization, problem formulation and solving, and coding. This project\u2019s research findings have been incorporated into \"CSE6350 Advanced Topics in Computer Architecture\" regularly taught by the PI.\n\n \n\n\t\t\t\t\tLast Modified: 01/29/2023\n\n\t\t\t\t\tSubmitted by: Song Jiang"
 }
}