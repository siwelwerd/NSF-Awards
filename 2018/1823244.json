{
 "awd_id": "1823244",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CRI: CI-SUSTAIN: Racket on Alternative Platforms",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2018-09-01",
 "awd_exp_date": "2022-08-31",
 "tot_intn_awd_amt": 999382.0,
 "awd_amount": 999382.0,
 "awd_min_amd_letter_date": "2018-08-27",
 "awd_max_amd_letter_date": "2020-07-06",
 "awd_abstract_narration": "For two decades, the Racket programming language has served as a test bed for research on language design and implementation as well as a platform for teaching courses on computer science from middle school through graduate school. Researchers use it to explore new language ideas because of its flexibility, ranging from new ways of communicating between web servers and web browsers to the construction of entirely new languages. Educators introduce middle school students to algebra in a novice-friendly dialect of the language and professors introduce PhD students to the study of the meaning of languages. Racket is also used in industry for a range of products. Now programmers request a faster Racket and a Racket that runs on modern platforms such as phones, tablets, and web browsers. To accommodate these requests, the project will work on four different, but related efforts. First, an optimizing just-in-time compiler will be developed, based on the recently developed PyPy framework.  Second, Racket's innovations will be ported to Cisco's high-performance Chez Scheme implementation, which is now available as an open-source project on GitHub. This effort simultaneously constructs another performant compiler and returns to the Scheme community some of the innovations that the Racket community has developed over the last decade. In short, the first two projects directly address the performance requests from the Racket community. Third, the project will design a variant of Racket for web browsers, a radically different platform from ordinary computers. The plan is to construct a compiler from Racket to JavaScript. Fourth, Racket needs a GUI framework for mobile platforms (phones, tablets) to become a fully functional language on those devices. \r\n\r\nAll four efforts have a direct impact on research and education. Modern software must run on, and communicate across, heterogenous collections of platforms and hardware (servers, laptops, tables, phones, browsers). To solve the problem of engineering reliable, safe, and secure software, researchers need programming languages in which they can explore the problems. From languages such as Racket, these ideas tend to quickly flow into industrial applications and thus improve the lives of everyone. Modern education must empower children in the world of software; otherwise they are not broadly educated. For 20 years, Racket has played an important role at hundreds of universities, colleges, and K-12 schools. Providing it on alternative platforms will ensure the future needs of instructors.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Matthias",
   "pi_last_name": "Felleisen",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Matthias Felleisen",
   "pi_email_addr": "matthias@ccs.neu.edu",
   "nsf_id": "000286813",
   "pi_start_date": "2018-08-27",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Matthew",
   "pi_last_name": "Flatt",
   "pi_mid_init": "R",
   "pi_sufx_name": "",
   "pi_full_name": "Matthew R Flatt",
   "pi_email_addr": "mflatt@cs.utah.edu",
   "nsf_id": "000348159",
   "pi_start_date": "2018-08-27",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Robert",
   "pi_last_name": "Findler",
   "pi_mid_init": "B",
   "pi_sufx_name": "",
   "pi_full_name": "Robert B Findler",
   "pi_email_addr": "robby@cs.northwestern.edu",
   "nsf_id": "000150535",
   "pi_start_date": "2018-08-27",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Sam",
   "pi_last_name": "Tobin-Hochstadt",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Sam Tobin-Hochstadt",
   "pi_email_addr": "samth@cs.indiana.edu",
   "nsf_id": "000611033",
   "pi_start_date": "2018-08-27",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Northeastern University",
  "inst_street_address": "360 HUNTINGTON AVE",
  "inst_street_address_2": "",
  "inst_city_name": "BOSTON",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "6173735600",
  "inst_zip_code": "021155005",
  "inst_country_name": "United States",
  "cong_dist_code": "07",
  "st_cong_dist_code": "MA07",
  "org_lgl_bus_name": "NORTHEASTERN UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "HLTMVS2JZBS6"
 },
 "perf_inst": {
  "perf_inst_name": "Northeastern University",
  "perf_str_addr": "360 Huntington Ave",
  "perf_city_name": "Boston",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "021155005",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "MA07",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "113900",
   "pgm_ele_name": "RSCH EXPER FOR UNDERGRAD SITES"
  },
  {
   "pgm_ele_code": "735900",
   "pgm_ele_name": "CCRI-CISE Cmnty Rsrch Infrstrc"
  },
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7359",
   "pgm_ref_txt": "COMPUTING RES INFRASTRUCTURE"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  },
  {
   "pgm_ref_code": "9250",
   "pgm_ref_txt": "REU SITE-Res Exp for Ugrd Site"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 684683.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 314699.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Racket is one of three research programming languages that also finds wide use in education and industry. The effort dates back to 1995 when the core team used existing building blocks to quickly create a prototype. This prototype evolved into a stable and usable system. By 2015 though the need for a major renovation of all aspects had become obvious.&nbsp;</p>\n<p>The project accomplished four major objectives:&nbsp;</p>\n<ol>\n<li><span>1, The team replaced Racket's <span>backend</span> with <span>Chez</span> Scheme and adjusted the latter to run on all major hardware platforms. A vastly increased contributor group is one important side effect of this step. Several key components of his new <span>backend</span> are now easy to navigate for experienced developers and as a result, the Racket effort benefits from many open-source contributors. </span></li>\n<li><span>2. The team created a just-in-time compiler using the <span>PyPy</span>&nbsp;compiler engine. This second implementation, dubbed <span>Pycket</span>, relies on a <span>JIT</span> compiler generated from a <span>RPython</span> script that encodes the semantics of Racket as a set of reduction rules. &nbsp;It also exploits the revised Racket-on-<span>Chez</span> implementation, specifically the macro expander. Although it does not yet implement the complete Racket language, it suffices to measure the performance of the <span>Greenman</span> benchmarks (originated in the team's gradual typing effort). The<span>se</span> measurements demonstrate that the research effort may have a successful and useful outcome.&nbsp;</span></li>\n<li>3. The team started two efforts to run Racket in the browser, a now-common platform.&nbsp;</li>\n</ol>\n<ul>\n<li><span>3a. The first effort validated the basic idea: while it is a complex challenge to run Racket per <span>se</span> in the browser, small adjustment to its semantics yield a useful browser-scripting language. The chosen implementation approach turned out to be a dead-end, mostly becau<span>se</span> it started from the old Racket implementation, &nbsp;</span></li>\n<li><span>3b. The second effort exploited the experience of <span>Pycket</span>, While still in its infancy, it is clearly a promising direction that will yield a self-hosted, distributable <span>RacketScript</span> language. When finished, it will combine the strength of Racket -- a programmable programming language -- with the strength of <span>JavaScript</span> -- a web-scripting language with many useful sub-dialects.&nbsp;</span></li>\n</ul>\n<p>The team also renovated several major aspects of the framework for creatiing grahical-user interfaces (GUIs). &nbsp;These steps will enable the team to take the key step of adding a GUI framework based on web-browser technology during the next iteration of this effort.&nbsp;</p>\n<p>The experiences from these projects are critical. They inform the team of how to proceed for future renovations. The effort has also empowered many more contributors to add features, write compiler improvements, and deploy the language in projects that provide feedback for the research projects of the team members.&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 09/19/2022<br>\n\t\t\t\t\tModified by: Matthias&nbsp;Felleisen</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nRacket is one of three research programming languages that also finds wide use in education and industry. The effort dates back to 1995 when the core team used existing building blocks to quickly create a prototype. This prototype evolved into a stable and usable system. By 2015 though the need for a major renovation of all aspects had become obvious. \n\nThe project accomplished four major objectives: \n\n1, The team replaced Racket's backend with Chez Scheme and adjusted the latter to run on all major hardware platforms. A vastly increased contributor group is one important side effect of this step. Several key components of his new backend are now easy to navigate for experienced developers and as a result, the Racket effort benefits from many open-source contributors. \n2. The team created a just-in-time compiler using the PyPy compiler engine. This second implementation, dubbed Pycket, relies on a JIT compiler generated from a RPython script that encodes the semantics of Racket as a set of reduction rules.  It also exploits the revised Racket-on-Chez implementation, specifically the macro expander. Although it does not yet implement the complete Racket language, it suffices to measure the performance of the Greenman benchmarks (originated in the team's gradual typing effort). These measurements demonstrate that the research effort may have a successful and useful outcome. \n3. The team started two efforts to run Racket in the browser, a now-common platform. \n\n\n3a. The first effort validated the basic idea: while it is a complex challenge to run Racket per se in the browser, small adjustment to its semantics yield a useful browser-scripting language. The chosen implementation approach turned out to be a dead-end, mostly because it started from the old Racket implementation,  \n3b. The second effort exploited the experience of Pycket, While still in its infancy, it is clearly a promising direction that will yield a self-hosted, distributable RacketScript language. When finished, it will combine the strength of Racket -- a programmable programming language -- with the strength of JavaScript -- a web-scripting language with many useful sub-dialects. \n\n\nThe team also renovated several major aspects of the framework for creatiing grahical-user interfaces (GUIs).  These steps will enable the team to take the key step of adding a GUI framework based on web-browser technology during the next iteration of this effort. \n\nThe experiences from these projects are critical. They inform the team of how to proceed for future renovations. The effort has also empowered many more contributors to add features, write compiler improvements, and deploy the language in projects that provide feedback for the research projects of the team members. \n\n\t\t\t\t\tLast Modified: 09/19/2022\n\n\t\t\t\t\tSubmitted by: Matthias Felleisen"
 }
}