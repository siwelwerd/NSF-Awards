{
 "awd_id": "1813166",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Programming Languages Foundations for 3D-Printing",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2018-10-01",
 "awd_exp_date": "2022-09-30",
 "tot_intn_awd_amt": 500000.0,
 "awd_amount": 500000.0,
 "awd_min_amd_letter_date": "2018-06-11",
 "awd_max_amd_letter_date": "2018-06-11",
 "awd_abstract_narration": "3D printing is poised to make the creation and dissemination of custom real-world objects available to millions of people.  Soon users will be able to create and share personalized objects that previously required Computer-Aided Design (CAD) expertise and manufacturing facilities.  Unfortunately, the vibrant communities of early adopters, often referred to as \"makers,\"  are not well-served by currently available software tools. Users today must compose idiosyncratic sequences of tools which are typically repurposed variants of proprietary software designed for expert specialists.  This project develops fundamental programming-language techniques to bring improved rigor, reduced complexity, and new functionality to the CAD software ecosystem for applications like 3D-printing, starting from the perspective that solid geometry is a programming language (PL). The project's novelties are developing theoretical PL foundations for CAD and related languages in the 3D printing ecosystem. The project's impacts are applying these PL foundations to build a new generation of tools that enable end-users to effectively use 3D printing, including the first 'reverse compiler' to convert widely-shared but difficult-to-edit polygonal mesh design files to easier-to-edit CAD designs.\r\n\r\nThe project adapts and extends traditional PL techniques for compositionality, denotational semantics, compiler correctness, and program synthesis to the 3D printing domain. For a common platform, the project develops a purely functional language called LambdaCAD and a suite of compilers that target a series of intermediate representations (IRs) including core CAD constructs, polygon surface-meshes, and G-code toolpaths. Each level of the project defines denotational semantics from the IR to 3D solids and proves semantic preservation for the corresponding compiler stage. For the reverse compilation from CAD to mesh, the project exploits classical semantics techniques based on evaluation contexts to guide synthesis and captures the interaction between sub-meshes during search.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Zachary",
   "pi_last_name": "Tatlock",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Zachary Tatlock",
   "pi_email_addr": "ztatlock@cs.washington.edu",
   "nsf_id": "000684165",
   "pi_start_date": "2018-06-11",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Daniel",
   "pi_last_name": "Grossman",
   "pi_mid_init": "J",
   "pi_sufx_name": "",
   "pi_full_name": "Daniel J Grossman",
   "pi_email_addr": "djg@cs.washington.edu",
   "nsf_id": "000400274",
   "pi_start_date": "2018-06-11",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Washington",
  "inst_street_address": "4333 BROOKLYN AVE NE",
  "inst_street_address_2": "",
  "inst_city_name": "SEATTLE",
  "inst_state_code": "WA",
  "inst_state_name": "Washington",
  "inst_phone_num": "2065434043",
  "inst_zip_code": "981951016",
  "inst_country_name": "United States",
  "cong_dist_code": "07",
  "st_cong_dist_code": "WA07",
  "org_lgl_bus_name": "UNIVERSITY OF WASHINGTON",
  "org_prnt_uei_num": "",
  "org_uei_num": "HD1WMN6945W6"
 },
 "perf_inst": {
  "perf_inst_name": "University of Washington",
  "perf_str_addr": "185 NE Stevens Way",
  "perf_city_name": "Seattke",
  "perf_st_code": "WA",
  "perf_st_name": "Washington",
  "perf_zip_code": "981952350",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "WA07",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 500000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-2412165b-7fff-156f-d8e1-5f80fbd9e439\"> </span></p>\n<p dir=\"ltr\"><span>3D printing has amazing potential to improve prototyping and production due to its low setup costs, rapid turnaround, and customizability; many industries could clearly be transformed by better 3D printing capabilities. However, many users have struggled to employ 3D printing because of challenges in 3D design and frustrations from iterating with the physical 3D printer to produce good parts.</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>Designs for 3D printing are often produced by modifying previous versions of a similar part or by downloading a similar design from large repositories shared online. Unfortunately, these designs are typically not shared as high-level, easy-to-edit CAD files; instead, they are shared as CAD-agnostic, low-level, difficult-to-modify ?triangle meshes?. Modifying designs, whether in CAD or as triangle meshes, is hard because models are often not structured in such a way that the desired change is easy to achieve. For example, if an entire part is designed around the assumption two holes are concentric, changing that constraint can wreck the rest of the design. Even once a user has settled on the next version of their design, they typically need to iterate by printing prototypes, tweaking the design, and repeating. While 3D printing provides much more rapid turnaround time than traditional manufacturing, waiting a day to iterate on a design can slow down the overall process.</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>This project tackled these problems by developing new design tools that enable users to automatically recover easier-to-edit high-level CAD programs from past designs (potentially re-parameterizing them to support new modifications) and laying the groundwork for tools to support parallel 3D printers that will speed up design iterations.</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>Intellectual Merit. </span><span>Decades of research in program analysis, compilation, testing, and verification have led to a rich ecosystem of tools that allow developers to more quickly produce higher-quality software. By viewing CAD designs for 3D printing as programs and developing new insights that adapt software techniques to the context of 3D printing, our results help bridge the gap from high-end, expert practice to democratized, widely-applicable 3D printing. The results led to surprising breakthroughs in classic compilers topics like term rewriting and decompilation.</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>Broader Impact.</span><span> This project?s results help reduce barriers to entry for many users who are especially frustrated given the recent availability of affordable, desktop-class 3D printers, which promise to make the benefits of 3D printing broadly applicable. The systems we developed show how the design 3D printing process can be made more flexible and promote reuse of community-driven designs. While this project focused on improving CAD tools for designing 3D printed parts and speeding up 3D printing with compilers to support parallel extrusion, many results, especially in term rewriting, transcend the fabrication domain and are being applied back in the traditional compiler setting as well.</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span><span><img src=\"https://lh4.googleusercontent.com/1Q90ry9cP-iZ3CS5B_t9OBBpEGIZk6O6ZH2ypIqaLJPIjZZVjiU9aV2KvSxTSxA9pWLEirz1_EmrCdC_amCHTg4KdlGnAx8WcfUdy8t6EoqIWHy9HeXH0uz8TPjvBWVVJoPapW0oJfAOk6qdK2DJ6Mk\" alt=\"\" width=\"624\" height=\"268\" /></span></span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>As part of this project, the team developed a tool dubbed ?Reincarnate? to automatically decompile low-level triangle meshes back up to easier-to-edit CAD programs, published at ICFP 2018. Reincarnate was used to recover a suite of simple designs from meshes shared on the popular Thingiverse design repository. A key benefit from the Ruler effort was developing a mathematical formalism for designs that enabled rewriting designs with a collection of simple ?find and replace? rules.</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span><span><img src=\"https://lh5.googleusercontent.com/mlVoIGUSoczgT_JHvOHJvH31g8vhG5oZbAdL_n5Z9ktamND5f03zt8UvoTtnFvZTqhgP2II1nwiOoH35RlhgLU3PWBbVrAL0EW-P0LI2F1fBMh18QS2ar_bCFn6UeaqrlOOtpPJRt617TlYrH97U5oE\" alt=\"\" width=\"624\" height=\"200\" /></span></span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>Building on this success, the team developed a tool dubbed ?Szalinski? which ?shrinks? CAD programs by applying new term rewriting techniques that enable efficiently exploring a large space of equivalent designs, published at PLDI 2020. Crucially, this space of equivalent designs includes CAD programs using loops and functions -- i.e., parameterized designs. With Szalinski, the team was able to quickly re-parameterize thousands of designs from Thingiverse to enable changes which would otherwise have been too complex for novice users.</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span><span><img src=\"https://lh5.googleusercontent.com/SqfaUBR2NRJ_UM5VMEcXI4BpDYNHw3enflDAq5dyccdKxyqJmV7cD7eiWlJVivquPcmR8eSnCTJRwY5a8ph90oZjcjPbW_2LCHLE8FZ66fkEefKZ4dKllR8oFy-3L5WAdSbIreEznLV4ZJZ8yAML0ro\" alt=\"\" width=\"624\" height=\"151\" /></span></span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>Based on work from the Reincarnate and Szalinski tools, the team discovered that missing rewrites was a major challenge in developing automatic CAD compiler and synthesis tools. To address this challenge, the team ?turned the problem upside down? and developed a tool dubbed ?Ruler? that uses term rewriting techniques to quickly discover powerful sets of rewrite rules. Ruler discovers smaller sets of more general rewrite rules and order of magnitude faster compared to past techniques, which led to a Distinguished Paper award at OOPSLA 2021.</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span><span><img src=\"https://lh6.googleusercontent.com/2naUtehdaT8dhIrEEO8JLN5MP0SiDu78J_jFNiq_38nFJfdQblweDe-IHHcOgTbYsqZy0hY8_odPoTn-sAS3GDxoWHarpyuERzF3FKIlKd5dNtQilfJcjjL6FqeR01PtjQZRVxDzqflQr7jShqvKduk\" alt=\"\" width=\"378\" height=\"338\" /></span></span></p>\n<p dir=\"ltr\"><span>Concurrently with the above projects, the team also worked to build a platform for parallel extrusion where a single printer simultaneously utilizes multiple independent (or even semi-independent) extruders, published at SFF 2021. This resulted in a physical prototype of a parallel 3D printing platform and extensions to the popular Marlin software for 3D printer controls. Additionally, the team established a roadmap for future work continuing in this direction.</span></p><br>\n<p>\n\t\t\t\t      \tLast Modified: 01/30/2023<br>\n\t\t\t\t\tModified by: Zachary&nbsp;Tatlock</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n \n3D printing has amazing potential to improve prototyping and production due to its low setup costs, rapid turnaround, and customizability; many industries could clearly be transformed by better 3D printing capabilities. However, many users have struggled to employ 3D printing because of challenges in 3D design and frustrations from iterating with the physical 3D printer to produce good parts.\n\n \nDesigns for 3D printing are often produced by modifying previous versions of a similar part or by downloading a similar design from large repositories shared online. Unfortunately, these designs are typically not shared as high-level, easy-to-edit CAD files; instead, they are shared as CAD-agnostic, low-level, difficult-to-modify ?triangle meshes?. Modifying designs, whether in CAD or as triangle meshes, is hard because models are often not structured in such a way that the desired change is easy to achieve. For example, if an entire part is designed around the assumption two holes are concentric, changing that constraint can wreck the rest of the design. Even once a user has settled on the next version of their design, they typically need to iterate by printing prototypes, tweaking the design, and repeating. While 3D printing provides much more rapid turnaround time than traditional manufacturing, waiting a day to iterate on a design can slow down the overall process.\n\n \nThis project tackled these problems by developing new design tools that enable users to automatically recover easier-to-edit high-level CAD programs from past designs (potentially re-parameterizing them to support new modifications) and laying the groundwork for tools to support parallel 3D printers that will speed up design iterations.\n\n \nIntellectual Merit. Decades of research in program analysis, compilation, testing, and verification have led to a rich ecosystem of tools that allow developers to more quickly produce higher-quality software. By viewing CAD designs for 3D printing as programs and developing new insights that adapt software techniques to the context of 3D printing, our results help bridge the gap from high-end, expert practice to democratized, widely-applicable 3D printing. The results led to surprising breakthroughs in classic compilers topics like term rewriting and decompilation.\n\n \nBroader Impact. This project?s results help reduce barriers to entry for many users who are especially frustrated given the recent availability of affordable, desktop-class 3D printers, which promise to make the benefits of 3D printing broadly applicable. The systems we developed show how the design 3D printing process can be made more flexible and promote reuse of community-driven designs. While this project focused on improving CAD tools for designing 3D printed parts and speeding up 3D printing with compilers to support parallel extrusion, many results, especially in term rewriting, transcend the fabrication domain and are being applied back in the traditional compiler setting as well.\n\n \n\n\n \nAs part of this project, the team developed a tool dubbed ?Reincarnate? to automatically decompile low-level triangle meshes back up to easier-to-edit CAD programs, published at ICFP 2018. Reincarnate was used to recover a suite of simple designs from meshes shared on the popular Thingiverse design repository. A key benefit from the Ruler effort was developing a mathematical formalism for designs that enabled rewriting designs with a collection of simple ?find and replace? rules.\n\n \n\n\n \nBuilding on this success, the team developed a tool dubbed ?Szalinski? which ?shrinks? CAD programs by applying new term rewriting techniques that enable efficiently exploring a large space of equivalent designs, published at PLDI 2020. Crucially, this space of equivalent designs includes CAD programs using loops and functions -- i.e., parameterized designs. With Szalinski, the team was able to quickly re-parameterize thousands of designs from Thingiverse to enable changes which would otherwise have been too complex for novice users.\n\n \n\n\n \nBased on work from the Reincarnate and Szalinski tools, the team discovered that missing rewrites was a major challenge in developing automatic CAD compiler and synthesis tools. To address this challenge, the team ?turned the problem upside down? and developed a tool dubbed ?Ruler? that uses term rewriting techniques to quickly discover powerful sets of rewrite rules. Ruler discovers smaller sets of more general rewrite rules and order of magnitude faster compared to past techniques, which led to a Distinguished Paper award at OOPSLA 2021.\n\n \n\nConcurrently with the above projects, the team also worked to build a platform for parallel extrusion where a single printer simultaneously utilizes multiple independent (or even semi-independent) extruders, published at SFF 2021. This resulted in a physical prototype of a parallel 3D printing platform and extensions to the popular Marlin software for 3D printer controls. Additionally, the team established a roadmap for future work continuing in this direction.\n\n\t\t\t\t\tLast Modified: 01/30/2023\n\n\t\t\t\t\tSubmitted by: Zachary Tatlock"
 }
}