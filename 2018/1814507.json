{
 "awd_id": "1814507",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CSR: Small: Replication in the Cloud Era",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032925197",
 "po_email": "mmcclure@nsf.gov",
 "po_sign_block_name": "Marilyn McClure",
 "awd_eff_date": "2018-10-01",
 "awd_exp_date": "2021-09-30",
 "tot_intn_awd_amt": 497223.0,
 "awd_amount": 497223.0,
 "awd_min_amd_letter_date": "2018-09-02",
 "awd_max_amd_letter_date": "2018-09-02",
 "awd_abstract_narration": "Modern life depends on computers, but 24/7 availability that people expect is hard to achieve. Computers are far from infallible and frequently crash. To prevent such failures from disrupting essential services, the research community has spent the last 40 years developing fault-tolerance techniques, which allow services to continue uninterrupted despite failures. These techniques have served us well and are the main reason behind the seamless services we enjoy today. For all their merits, however, our fault-tolerance techniques have a fundamental design flaw. They were designed for standalone services: services which execute on a single machine and do not need to interact with other services. However, such standalone services are becoming increasingly uncommon in today's computing, where large systems consist of multiple interacting components. In this brave new world, our existing fault-tolerance techniques no longer work.\r\n\r\nThis research aims to improve fault-tolerance for such interacting services and has three main goals. (1) Establish a framework to simplify the interactions between services. (2) Restore correctness, by rethinking how we employ advanced techniques, like speculative execution. (3) Focus on optimizing performance by investigating ways to implement such interactions efficiently. Achieving these three goals will enable practical implementations of fault-tolerance in today's large-scale systems, which is the key to ensuring that we can continue to enjoy seamless services in the future.\r\n\r\nNow that our systems are too large to be implemented as a single service, fault-tolerant techniques must adapt to avoid becoming obsolete. This project aims to steer future academic efforts on fault tolerance away from standalone services and towards a more practical setting. In doing so, it aims to strengthen the ties between academia and industry by having them strive towards this new, common goal: replication in the cloud era.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Manos",
   "pi_last_name": "Kapritsos",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Manos Kapritsos",
   "pi_email_addr": "manosk@umich.edu",
   "nsf_id": "000754069",
   "pi_start_date": "2018-09-02",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Regents of the University of Michigan - Ann Arbor",
  "inst_street_address": "1109 GEDDES AVE STE 3300",
  "inst_street_address_2": "",
  "inst_city_name": "ANN ARBOR",
  "inst_state_code": "MI",
  "inst_state_name": "Michigan",
  "inst_phone_num": "7347636438",
  "inst_zip_code": "481091015",
  "inst_country_name": "United States",
  "cong_dist_code": "06",
  "st_cong_dist_code": "MI06",
  "org_lgl_bus_name": "REGENTS OF THE UNIVERSITY OF MICHIGAN",
  "org_prnt_uei_num": "",
  "org_uei_num": "GNJ7BBP73WE9"
 },
 "perf_inst": {
  "perf_inst_name": "University of Michigan Ann Arbor",
  "perf_str_addr": "3003 S. State Street",
  "perf_city_name": "Ann Arbor",
  "perf_st_code": "MI",
  "perf_st_name": "Michigan",
  "perf_zip_code": "481091274",
  "perf_ctry_code": "US",
  "perf_cong_dist": "06",
  "perf_st_cong_dist": "MI06",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 497223.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>This proposal set out to understand how replicated services can be deployed in a modern environment <span>where our&nbsp; services are not standalone but rather have to interact with other components of our systems. To answer that question, we developed Aegean, a framework that showed how replication can be used beyond the client-server model, without sacrificing either the correctness or the performance of our replicated services.</span></p>\n<p><span>We demonstrated that the presence of interactions between replicated services can result in correctness violations or severe performance degradations; or both. Aegean introduces a number of techniques that both ensure correctness despite such interactions and allow multiple replicated services to communicate with one another efficiently. Aegean was published at SOSP 2019, the top systems venue.</span></p>\n<p><span>The outcomes of this project went beyond the original goals set by the proposal. Our emphasis on correctness led us to two novel results that we didn't initially anticipate. The first has to do with a deeeper understanding of Paxos, our most important distributed protocol for reaching agreement among multiple machines. We realized that, despite 20+ years of intense research on this topic, the community had misunderstood the fundamental requirement that lent Paxos its correctness. We published a short paper at the top venue for distributed computing, PODC 2020, where we correct that misconception.</span></p>\n<p>Our second unforeseen additional result was in an adjacent field, that of formally reasoning about correctness in a distributed system. Such reasoning has traditionally been done manually, involving a large amount of manual effort. This effort is typically so large that most developers will not bother and instead turn to less rigorous approaches, like testing, which are typically error prone. In our work, I4, we demonstrated for the first time that proofs of correctness in distributed protocols can be fully automated, something that was previously considered impossible. To do so, I4 combined two fields that were walking parallel paths towards the common goal of correctness: model checking and theorem proving. I4 applied model checking (which is widely considered less scalable) to small instances of the system and then used the results to extract the essence of a more general proof that theorem proving could handle. This combination allowed for the first time automated proofs of distributed protocols. We published our results at HotOS 2019 and SOSP 2019. It is interesting to add that I4 bootstrapped an area of work that has attracted a number of researchers since then, leading to a number of publications at top venues like OSDI and NSDI, which build on I4's original idea.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 05/07/2022<br>\n\t\t\t\t\tModified by: Manos&nbsp;Kapritsos</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThis proposal set out to understand how replicated services can be deployed in a modern environment where our  services are not standalone but rather have to interact with other components of our systems. To answer that question, we developed Aegean, a framework that showed how replication can be used beyond the client-server model, without sacrificing either the correctness or the performance of our replicated services.\n\nWe demonstrated that the presence of interactions between replicated services can result in correctness violations or severe performance degradations; or both. Aegean introduces a number of techniques that both ensure correctness despite such interactions and allow multiple replicated services to communicate with one another efficiently. Aegean was published at SOSP 2019, the top systems venue.\n\nThe outcomes of this project went beyond the original goals set by the proposal. Our emphasis on correctness led us to two novel results that we didn't initially anticipate. The first has to do with a deeeper understanding of Paxos, our most important distributed protocol for reaching agreement among multiple machines. We realized that, despite 20+ years of intense research on this topic, the community had misunderstood the fundamental requirement that lent Paxos its correctness. We published a short paper at the top venue for distributed computing, PODC 2020, where we correct that misconception.\n\nOur second unforeseen additional result was in an adjacent field, that of formally reasoning about correctness in a distributed system. Such reasoning has traditionally been done manually, involving a large amount of manual effort. This effort is typically so large that most developers will not bother and instead turn to less rigorous approaches, like testing, which are typically error prone. In our work, I4, we demonstrated for the first time that proofs of correctness in distributed protocols can be fully automated, something that was previously considered impossible. To do so, I4 combined two fields that were walking parallel paths towards the common goal of correctness: model checking and theorem proving. I4 applied model checking (which is widely considered less scalable) to small instances of the system and then used the results to extract the essence of a more general proof that theorem proving could handle. This combination allowed for the first time automated proofs of distributed protocols. We published our results at HotOS 2019 and SOSP 2019. It is interesting to add that I4 bootstrapped an area of work that has attracted a number of researchers since then, leading to a number of publications at top venues like OSDI and NSDI, which build on I4's original idea.\n\n\t\t\t\t\tLast Modified: 05/07/2022\n\n\t\t\t\t\tSubmitted by: Manos Kapritsos"
 }
}