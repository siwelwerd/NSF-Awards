{
 "awd_id": "1814609",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: PAW: Novel Functionality in Programming Models to Productively Abstract Wavefront Parallel Pattern",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927498",
 "po_email": "achtchel@nsf.gov",
 "po_sign_block_name": "Almadena Chtchelkanova",
 "awd_eff_date": "2018-10-01",
 "awd_exp_date": "2023-09-30",
 "tot_intn_awd_amt": 399703.0,
 "awd_amount": 415703.0,
 "awd_min_amd_letter_date": "2018-07-16",
 "awd_max_amd_letter_date": "2019-06-14",
 "awd_abstract_narration": "With the rapid and globally competitive development of faster computing systems that can compute up to one quintillion floating-point operations/second, it becomes imperative to update the computer programs that direct how data is analyzed. However, it has been a challenge for established and time-tested legacy scientific code, filling up hundreds to thousands of lines of code, to adapt and alter to exploit the rich computing capacity of these systems. This is largely a manpower issue as the adaptation of codes requires application developers to constantly re-write their program codes. The steep learning curve associated with both the intricacies of hardware and the ever evolving programming languages puts pressure on the developers and impedes the progress of science. The biggest challenge developers face is the inability to maintain a \"write-once reuse multiple times\" software. With all eyes on the development of an exascale machine - one that can compute data at the speed of the human brain - it is imperative to address this fundamental challenge. The aim of this project is to design high-level abstractions that can adapt scientific code to current and upcoming systems in a manner that enhances the performance of these machines, thus ensuring that these \"fast-as-the human-brain\" systems are flexible and adaptable enough to encourage the broader scientific community.\r\n  \r\nThe goal of this project to enable high performance, memory-efficient, portable and productive software framework for parallelizing complex parallel patterns such as 'wavefronts', commonly found in large scientific applications such as neutron radiation transport, bioinformatics and atmospheric science. To achieve this goal, the investigator is addressing critical performance portable questions at the algorithmic-level, programming framework-level and at the software design level. The project studies the applicability of well-explored polyhedral transformation frameworks along with task-based environments on novel hardware systems, importantly on pre- and upcoming exascale systems. The studies are also suggestive of shortcomings in current programming models paving the way to developing novel insights towards high-level software abstractions for multi-use in different/diverse projects simultaneously.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Sunita",
   "pi_last_name": "Chandrasekaran",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Sunita Chandrasekaran",
   "pi_email_addr": "schandra@udel.edu",
   "nsf_id": "000703422",
   "pi_start_date": "2018-07-16",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Delaware",
  "inst_street_address": "550 S COLLEGE AVE",
  "inst_street_address_2": "",
  "inst_city_name": "NEWARK",
  "inst_state_code": "DE",
  "inst_state_name": "Delaware",
  "inst_phone_num": "3028312136",
  "inst_zip_code": "197131324",
  "inst_country_name": "United States",
  "cong_dist_code": "00",
  "st_cong_dist_code": "DE00",
  "org_lgl_bus_name": "UNIVERSITY OF DELAWARE",
  "org_prnt_uei_num": "",
  "org_uei_num": "T72NHKM259N3"
 },
 "perf_inst": {
  "perf_inst_name": "University of Delaware",
  "perf_str_addr": "210 Hullihen Hall",
  "perf_city_name": "Newark",
  "perf_st_code": "DE",
  "perf_st_name": "Delaware",
  "perf_zip_code": "197162553",
  "perf_ctry_code": "US",
  "perf_cong_dist": "00",
  "perf_st_cong_dist": "DE00",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  },
  {
   "pgm_ele_code": "915000",
   "pgm_ele_name": "EPSCoR Co-Funding"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7798",
   "pgm_ref_txt": "SOFTWARE & HARDWARE FOUNDATION"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7942",
   "pgm_ref_txt": "HIGH-PERFORMANCE COMPUTING"
  },
  {
   "pgm_ref_code": "9150",
   "pgm_ref_txt": "EXP PROG TO STIM COMP RES"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 399703.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 16000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>With the explosion and rapid evolution of hardware architectures, it is becoming increasingly important to design and develop programming models, tools and techniques that can tap into this rich hardware offering optimal performance while at the same time enable migration of legacy code to present and future platforms in a portable manner.</p>\n<p>To that end, the outcomes of this project span exploring complex parallel patterns, compiler implementations, benchmarking, developing profiler tools, creation of validation and verification suites and working with large-scale applications along with their migration to supercomputers.</p>\n<p>To highlight some of the main research and training outcomes:</p>\n<ul>\n<li>Ported a bio-physics application to a large scale system using directive-based programming model. The acceleration of the code on several GPUs opens up the possibility of being able to reduce the time taken to study simulation of tumor cells and its growth along with being to further explore 3-D multiscale simulations of cancer and diseases<em> </em>in unprecedented details.</li>\n<li>Nuclear magnetic resonance (NMR) spectroscopy yields chemical shifts which reveal chemical details of the environment of an atom in a protein. Computing estimation of these chemical shifts can take a very long time. This work was accelerated for GPUs using directive-based programming model that enabled the use of chemical shift-based validation for other molecular dynamics computations.</li>\n<li>Created high-level features that can express and expose complex parallel patterns hidden in real-world applications to the underlying hardware. Prototypes were proposed in directive-based programming models and related implementations were also created. Radiation transport and genomic codes were used to evaluate our prototypes. Overall, performance close to a hand-written code for GPUs was obtained.</li>\n<li>Contributed to the making of SPEChpc2021 suite as benchmarking is necessary not only to highlight and stress test compiler/runtime implementations on a variety of hardware architectures but to also determine how we are obtaining performance &ndash; is it from the hardware or the software. The radiation transport application has also been incorporated into SPEC HPG&rsquo;s SPEChpc2021 benchmark suite that is being widely used by academia, labs and industries.&nbsp;</li>\n<li>Explored development of new language dialects with the help of a novel extensible compiler front-end infrastructure that interacts with MLIR.</li>\n<li>Built OpenMP and OpenACC Validation and Verification testsuites that checks for compilers&rsquo; correctness and their conformance to both the standard specifications.</li>\n<li>Developed methodologies to profile state-of-the-art GPUs from AMD with a goal to address performance gaps in the architectures</li>\n<li>Designed and implemented OpenMP simd directive in LLVM&rsquo;s OpenMP GPU runtime, which includes both CPU-centric and GPU-centric execution models.</li>\n<li>Several undergraduate students were trained in HPC via NSF REU project, they learnt the basics of compilers and programming models</li>\n<li>Students were able to travel to conferences and present their work thus building connections and meeting their peers</li>\n<li>Students participated in hackathons held on campus and external to UD&nbsp;</li>\n</ul><br>\n<p>\n Last Modified: 12/05/2023<br>\nModified by: Sunita&nbsp;Chandrasekaran</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nWith the explosion and rapid evolution of hardware architectures, it is becoming increasingly important to design and develop programming models, tools and techniques that can tap into this rich hardware offering optimal performance while at the same time enable migration of legacy code to present and future platforms in a portable manner.\n\n\nTo that end, the outcomes of this project span exploring complex parallel patterns, compiler implementations, benchmarking, developing profiler tools, creation of validation and verification suites and working with large-scale applications along with their migration to supercomputers.\n\n\nTo highlight some of the main research and training outcomes:\n\nPorted a bio-physics application to a large scale system using directive-based programming model. The acceleration of the code on several GPUs opens up the possibility of being able to reduce the time taken to study simulation of tumor cells and its growth along with being to further explore 3-D multiscale simulations of cancer and diseases in unprecedented details.\nNuclear magnetic resonance (NMR) spectroscopy yields chemical shifts which reveal chemical details of the environment of an atom in a protein. Computing estimation of these chemical shifts can take a very long time. This work was accelerated for GPUs using directive-based programming model that enabled the use of chemical shift-based validation for other molecular dynamics computations.\nCreated high-level features that can express and expose complex parallel patterns hidden in real-world applications to the underlying hardware. Prototypes were proposed in directive-based programming models and related implementations were also created. Radiation transport and genomic codes were used to evaluate our prototypes. Overall, performance close to a hand-written code for GPUs was obtained.\nContributed to the making of SPEChpc2021 suite as benchmarking is necessary not only to highlight and stress test compiler/runtime implementations on a variety of hardware architectures but to also determine how we are obtaining performance  is it from the hardware or the software. The radiation transport application has also been incorporated into SPEC HPGs SPEChpc2021 benchmark suite that is being widely used by academia, labs and industries.\nExplored development of new language dialects with the help of a novel extensible compiler front-end infrastructure that interacts with MLIR.\nBuilt OpenMP and OpenACC Validation and Verification testsuites that checks for compilers correctness and their conformance to both the standard specifications.\nDeveloped methodologies to profile state-of-the-art GPUs from AMD with a goal to address performance gaps in the architectures\nDesigned and implemented OpenMP simd directive in LLVMs OpenMP GPU runtime, which includes both CPU-centric and GPU-centric execution models.\nSeveral undergraduate students were trained in HPC via NSF REU project, they learnt the basics of compilers and programming models\nStudents were able to travel to conferences and present their work thus building connections and meeting their peers\nStudents participated in hackathons held on campus and external to UD\n\t\t\t\t\tLast Modified: 12/05/2023\n\n\t\t\t\t\tSubmitted by: SunitaChandrasekaran\n"
 }
}