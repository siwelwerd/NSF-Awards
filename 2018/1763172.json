{
 "awd_id": "1763172",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CSR: Medium: Systems Support for Scalable, Easy-to-Implement, and Multilingual Static Analyses of Modern Software",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Jason Hallstrom",
 "awd_eff_date": "2018-08-15",
 "awd_exp_date": "2023-07-31",
 "tot_intn_awd_amt": 1199665.0,
 "awd_amount": 1199665.0,
 "awd_min_amd_letter_date": "2018-08-14",
 "awd_max_amd_letter_date": "2021-07-19",
 "awd_abstract_narration": "Static program analysis has been widely used in academia and industry to find bugs, security vulnerabilities, and performance optimization opportunities. Supporting sophisticated analysis algorithms on large codebases has been a key challenge in the program analysis research for decades. This inability is the major factor that prevents analysis-based techniques from being widely adopted in industry. This project revisits this problem from a data-driven perspective and develops novel system solutions that can make static program analyses easy to implement, support large codebases, and support programs written in multiple languages.\r\n\r\nThe project will develop a transformative approach with four elements: (1) develop disk-based out-of-core systems to parallelize and scale constraint-based path-sensitive analysis; (2) develop system support for flow-sensitive analysis by treating it as evolving graph processing; (3) develop a distributed system solution to SAT solving --- a 50-year old problem --- to enable SAT-based applications to solve larger problems with the resources available in modern computing; and (4) analyze the Android operating system and apps together to find complicated (a) bugs, (b) security vulnerabilities, and (c) performance problems, which involve interactions between the system and an app as well as multiple apps.\r\n\r\nThe systems developed by the project will make precise static analysis algorithms more efficient and scalable, enabling them to process modern software programs that existing techniques could not analyze. Since these programs are used every day by many users and businesses, making them more robust and secure extends the benefit to a broad community. The project will develop big data systems for sophisticated code analysis, opening a new direction to scale program analysis. It will involve several PhD students and infuse research into the undergraduate and graduate curricula to train developers of the future.\r\n\r\nAll the system implementations, experimental data, and documents from the project will be publicly available and maintained at https://www.ics.uci.edu/~guoqingx/research/projects/analysis.html .\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Former Principal Investigator",
   "pi_first_name": "Harry",
   "pi_last_name": "Xu",
   "pi_mid_init": "G",
   "pi_sufx_name": "",
   "pi_full_name": "Harry G Xu",
   "pi_email_addr": "harryxu@cs.ucla.edu",
   "nsf_id": "000599637",
   "pi_start_date": "2018-08-14",
   "pi_end_date": "2018-08-30"
  },
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Ardalan",
   "pi_last_name": "Amiri Sani",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Ardalan Amiri Sani",
   "pi_email_addr": "ardalan@uci.edu",
   "nsf_id": "000702468",
   "pi_start_date": "2018-08-30",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Harry",
   "pi_last_name": "Xu",
   "pi_mid_init": "G",
   "pi_sufx_name": "",
   "pi_full_name": "Harry G Xu",
   "pi_email_addr": "harryxu@cs.ucla.edu",
   "nsf_id": "000599637",
   "pi_start_date": "2018-08-30",
   "pi_end_date": null
  },
  {
   "pi_role": "Former Co-Principal Investigator",
   "pi_first_name": "Ardalan",
   "pi_last_name": "Amiri Sani",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Ardalan Amiri Sani",
   "pi_email_addr": "ardalan@uci.edu",
   "nsf_id": "000702468",
   "pi_start_date": "2018-08-14",
   "pi_end_date": "2018-08-30"
  }
 ],
 "inst": {
  "inst_name": "University of California-Irvine",
  "inst_street_address": "160 ALDRICH HALL",
  "inst_street_address_2": "",
  "inst_city_name": "IRVINE",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "9498247295",
  "inst_zip_code": "926970001",
  "inst_country_name": "United States",
  "cong_dist_code": "47",
  "st_cong_dist_code": "CA47",
  "org_lgl_bus_name": "UNIVERSITY OF CALIFORNIA IRVINE",
  "org_prnt_uei_num": "MJC5FCYQTPE6",
  "org_uei_num": "MJC5FCYQTPE6"
 },
 "perf_inst": {
  "perf_inst_name": "University of California-Irvine",
  "perf_str_addr": "3212 Bren Hall",
  "perf_city_name": "Irvine",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "926173213",
  "perf_ctry_code": "US",
  "perf_cong_dist": "47",
  "perf_st_cong_dist": "CA47",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0121",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 283275.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 303452.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 318109.0
  },
  {
   "fund_oblg_fiscal_yr": 2021,
   "fund_oblg_amt": 294829.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-a13845c3-7fff-9033-ca6c-ce9fe7b2160d\">\n<p dir=\"ltr\"><span>Static program analysis techniques have been widely used in industry for detection of bugs and security issues. How to scale sophisticated static analyses to large codebases has been a key challenge in program analysis research for decades. The inability of scaling is the major factor that prevents analysis-based techniques (e.g., verification, model checking, and static bug detection) from being widely adopted in industry. Program analysis researchers tackle the&nbsp; problem typically by raising the level of abstractions, trading off analysis capability for scalability. However, higher-level abstractions render analyses less useful, and, even with new abstractions, most analyses still cannot scale to modern software, such as Android, Hadoop, and Spark.&nbsp;</span></p>\n<br />\n<p dir=\"ltr\"><span>Our core insight is to treat large code bases as big data and formulate code analysis as a big data analytics problem. Based on this insight, this project develops a series of new systems that can significantly improve the scalability and usefulness of sophisticated static analysis techniques. In particular, the project has resulted in path-sensitive analysis systems, data-flow-sensitive analysis systems, constraint solving systems, and symbolic execution for Android. Overall, the project has led to a large number of papers published in top systems, programming language, and mobile computing venues as well as several open-source github repos.</span></p>\n<br />\n<p dir=\"ltr\"><span>The broader impacts of the project include improving the reliability and security of large-scale system code through static program analysis.&nbsp; Software developed by this project has been made freely available. The project has also helped train students.</span></p>\n</span></p><br>\n<p>\n Last Modified: 11/30/2023<br>\nModified by: Ardalan&nbsp;Amiri Sani</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\n\n\n\nStatic program analysis techniques have been widely used in industry for detection of bugs and security issues. How to scale sophisticated static analyses to large codebases has been a key challenge in program analysis research for decades. The inability of scaling is the major factor that prevents analysis-based techniques (e.g., verification, model checking, and static bug detection) from being widely adopted in industry. Program analysis researchers tackle the problem typically by raising the level of abstractions, trading off analysis capability for scalability. However, higher-level abstractions render analyses less useful, and, even with new abstractions, most analyses still cannot scale to modern software, such as Android, Hadoop, and Spark.\n\n\n\n\nOur core insight is to treat large code bases as big data and formulate code analysis as a big data analytics problem. Based on this insight, this project develops a series of new systems that can significantly improve the scalability and usefulness of sophisticated static analysis techniques. In particular, the project has resulted in path-sensitive analysis systems, data-flow-sensitive analysis systems, constraint solving systems, and symbolic execution for Android. Overall, the project has led to a large number of papers published in top systems, programming language, and mobile computing venues as well as several open-source github repos.\n\n\n\n\nThe broader impacts of the project include improving the reliability and security of large-scale system code through static program analysis. Software developed by this project has been made freely available. The project has also helped train students.\n\t\t\t\t\tLast Modified: 11/30/2023\n\n\t\t\t\t\tSubmitted by: ArdalanAmiri Sani\n"
 }
}