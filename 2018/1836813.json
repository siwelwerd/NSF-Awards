{
 "awd_id": "1836813",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "FMitF: Formal Verification of Accessibility",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032922585",
 "po_email": "pprabhak@nsf.gov",
 "po_sign_block_name": "Pavithra Prabhakar",
 "awd_eff_date": "2019-01-01",
 "awd_exp_date": "2022-12-31",
 "tot_intn_awd_amt": 738125.0,
 "awd_amount": 786125.0,
 "awd_min_amd_letter_date": "2018-08-10",
 "awd_max_amd_letter_date": "2022-06-10",
 "awd_abstract_narration": "Most of the web is not designed for accessibility for the nearly one billion people that have a disability such as blindness, low vision, motorphysical impairments, or dyslexia, and no comprehensive, precise verification tools currently exist for checking accessibility. Existing testing tools are limited, imprecise, and incomplete, and even when they are used, they give guarantees only about one particular web browser configuration such as window size, default fonts and colors. This project aims to enable the formal verification of web accessibility. The research to be pursued involves the automatic identification of a broader class of accessibility problems that is currently possible and is intended to give guarantees of absence of such problems for all possible web browser configurations. The software tools developed in this project are intended to give web developers and content producers targeted, concrete feedback on who is affected by an accessibility issue, and why, and how to fix any problems.  \r\n\r\nThe project develops a user interface logic for specifying accessibility properties, and formalizes a large fragment of browser rendering algorithms using novel finitization reductions. The project builds software tools that translates web pages, accessibility rules, and the browser algorithm to quantifier-free linear real arithmetic, using an SMT solver to verify it or produce a concrete, inaccessible rendering of the webpage. To make the results of these verifications useful and usable to developers, content producers, and web users, the investigators develop new classes of concrete, comprehensible, and  actionable warning explanations and new techniques for patching accessibility at run time. To evaluate all of this work, the project is partnering with Adobe, Instructure, and Wikimedia.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Michael",
   "pi_last_name": "Ernst",
   "pi_mid_init": "D",
   "pi_sufx_name": "",
   "pi_full_name": "Michael D Ernst",
   "pi_email_addr": "mernst@cs.washington.edu",
   "nsf_id": "000310100",
   "pi_start_date": "2018-08-10",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Jennifer",
   "pi_last_name": "Mankoff",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Jennifer Mankoff",
   "pi_email_addr": "jmankoff@uw.edu",
   "nsf_id": "000149860",
   "pi_start_date": "2018-08-10",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Amy",
   "pi_last_name": "Ko",
   "pi_mid_init": "J",
   "pi_sufx_name": "",
   "pi_full_name": "Amy J Ko",
   "pi_email_addr": "ajko@uw.edu",
   "nsf_id": "000510102",
   "pi_start_date": "2018-08-10",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Zachary",
   "pi_last_name": "Tatlock",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Zachary Tatlock",
   "pi_email_addr": "ztatlock@cs.washington.edu",
   "nsf_id": "000684165",
   "pi_start_date": "2018-08-10",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Washington",
  "inst_street_address": "4333 BROOKLYN AVE NE",
  "inst_street_address_2": "",
  "inst_city_name": "SEATTLE",
  "inst_state_code": "WA",
  "inst_state_name": "Washington",
  "inst_phone_num": "2065434043",
  "inst_zip_code": "981951016",
  "inst_country_name": "United States",
  "cong_dist_code": "07",
  "st_cong_dist_code": "WA07",
  "org_lgl_bus_name": "UNIVERSITY OF WASHINGTON",
  "org_prnt_uei_num": "",
  "org_uei_num": "HD1WMN6945W6"
 },
 "perf_inst": {
  "perf_inst_name": "University of Washington",
  "perf_str_addr": "Box 352350",
  "perf_city_name": "Seattle",
  "perf_st_code": "WA",
  "perf_st_name": "Washington",
  "perf_zip_code": "981952350",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "WA07",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "094Y00",
   "pgm_ele_name": "FMitF: Formal Methods in the F"
  },
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "062Z",
   "pgm_ref_txt": "Harnessing the Data Revolution"
  },
  {
   "pgm_ref_code": "071Z",
   "pgm_ref_txt": "FMitF-Formal Methods in the Field"
  },
  {
   "pgm_ref_code": "8206",
   "pgm_ref_txt": "Formal Methods and Verification"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01002223DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0121",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 738125.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 16000.0
  },
  {
   "fund_oblg_fiscal_yr": 2021,
   "fund_oblg_amt": 16000.0
  },
  {
   "fund_oblg_fiscal_yr": 2022,
   "fund_oblg_amt": 16000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-8ae626ce-7fff-06db-5171-5331b78b6587\"> </span></p>\n<p dir=\"ltr\"><span>The team developed the first toolkit that equips blind and visually impaired (BVI) developers with the tools to create accessible data displays. Called PSST (Physical computing Streaming Sensor data Toolkit), it enables BVI developers to understand the data generated by sensors from a mouse to a micro:bit physical computing platform. By assuming visual abilities, earlier efforts to make physical computing accessible fail to address the need for BVI developers to access sensor data. PSST enables BVI developers to understand real-time, real-world sensor data by providing control over what should be displayed, as well as when to display and how to display sensor data. PSST supports filtering based on raw or calculated values, highlighting, and transformation of data. Output formats include tonal sonification, non-speech audio files, speech, and SVGs for laser cutting. We validated PSST through a series of demonstrations and a user study with BVI developers.</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>Additionally, this grant supported extensive studies including understanding engineers? baseline familiarity with accessibility techniques. This is critical for verifying accessibility: we must ensure that the engineers who triage, diagnose, and repair accessibility defects have sufficient knowledge to do so. In a field study with more than two dozen developers highly experienced with software engineering but inexperienced with accessibility, we found that many engineers avoid prioritizing accessibility defects because they do not feel confident estimating the severity of accessibility problems, do not feel confident either formally or informally verifying that they?ve resolved a problem, and in many cases, make assumptions that accessibility problems are not problems.</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>The team also explored how programming language design itself can help or hinder formal verification of accessibility. In traditional languages, much of the information necessary for accessibility is often discarded at compile or runtime for the sake of efficiency. The team explored the design of programming languages that incorporate accessibility in the language itself, including extensive provenance information that allows all aspects of program evaluation to be described as text, as well as enabling extensive formal static analysis of what accessibility information is missing. Our prototype, a language designed for creative expression with typography, provides a promising platform for enabling formal verification of accessibility.</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>Finally, the team also investigated how program equivalence techniques can be enhanced, and even automatically extended, with the goal of ensuring that software capabilities are maintained across different interaction models. Such high-level reasoning is difficult in complex software environments where functionality may be accessed via different modalities. This grant helped establish the foundation to automatically infer behavioral equivalences between different operations so that, if one method of computing some desired result is not available under a certain mode, the user may be able to apply another equivalent set of operations to achieve an equivalent result.</span></p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 04/07/2023<br>\n\t\t\t\t\tModified by: Zachary&nbsp;Tatlock</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n \nThe team developed the first toolkit that equips blind and visually impaired (BVI) developers with the tools to create accessible data displays. Called PSST (Physical computing Streaming Sensor data Toolkit), it enables BVI developers to understand the data generated by sensors from a mouse to a micro:bit physical computing platform. By assuming visual abilities, earlier efforts to make physical computing accessible fail to address the need for BVI developers to access sensor data. PSST enables BVI developers to understand real-time, real-world sensor data by providing control over what should be displayed, as well as when to display and how to display sensor data. PSST supports filtering based on raw or calculated values, highlighting, and transformation of data. Output formats include tonal sonification, non-speech audio files, speech, and SVGs for laser cutting. We validated PSST through a series of demonstrations and a user study with BVI developers.\n\n \nAdditionally, this grant supported extensive studies including understanding engineers? baseline familiarity with accessibility techniques. This is critical for verifying accessibility: we must ensure that the engineers who triage, diagnose, and repair accessibility defects have sufficient knowledge to do so. In a field study with more than two dozen developers highly experienced with software engineering but inexperienced with accessibility, we found that many engineers avoid prioritizing accessibility defects because they do not feel confident estimating the severity of accessibility problems, do not feel confident either formally or informally verifying that they?ve resolved a problem, and in many cases, make assumptions that accessibility problems are not problems.\n\n \nThe team also explored how programming language design itself can help or hinder formal verification of accessibility. In traditional languages, much of the information necessary for accessibility is often discarded at compile or runtime for the sake of efficiency. The team explored the design of programming languages that incorporate accessibility in the language itself, including extensive provenance information that allows all aspects of program evaluation to be described as text, as well as enabling extensive formal static analysis of what accessibility information is missing. Our prototype, a language designed for creative expression with typography, provides a promising platform for enabling formal verification of accessibility.\n\n \nFinally, the team also investigated how program equivalence techniques can be enhanced, and even automatically extended, with the goal of ensuring that software capabilities are maintained across different interaction models. Such high-level reasoning is difficult in complex software environments where functionality may be accessed via different modalities. This grant helped establish the foundation to automatically infer behavioral equivalences between different operations so that, if one method of computing some desired result is not available under a certain mode, the user may be able to apply another equivalent set of operations to achieve an equivalent result.\n\n \n\n\t\t\t\t\tLast Modified: 04/07/2023\n\n\t\t\t\t\tSubmitted by: Zachary Tatlock"
 }
}