{
 "awd_id": "1801369",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "SaTC: CORE: Medium: Collaborative: Automated Support for Writing High-Assurance Smart Contracts",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2018-08-01",
 "awd_exp_date": "2023-07-31",
 "tot_intn_awd_amt": 800000.0,
 "awd_amount": 816000.0,
 "awd_min_amd_letter_date": "2018-07-29",
 "awd_max_amd_letter_date": "2021-07-01",
 "awd_abstract_narration": "Smart contracts, popularized by cryptocurrencies like Bitcoin and Ethereum, are programs that run atop financial infrastructure and command the flow of money according to user-defined algorithms.  Such contracts can implement new, decentralized financial instruments or even virtual corporations defined only by the bundle of smart contracts programmatically governing their behavior.  For example, an eBay-like smart contract could directly connect buyers with sellers, support a variety of auction mechanisms, and manage necessary payments (including escrow), without the transaction charges currently imposed by eBay, PayPal, and the credit card companies.  In general, moving business processes into smart contracts promises to lower costs, reduce friction, and unleash innovation by eliminating intermediaries and automating settlements. However, programming smart contracts requires a deep understanding of cryptographic techniques, a non-standard execution cost model, and economic mechanism design.  Existing smart-contract programming languages provide little support for such reasoning; indeed, contract vulnerabilities (such as TheDAO) have already led to multi-million-dollar thefts.  In contrast, this project will develop new techniques and tools to support the development of high-assurance smart contracts, with an emphasis on the challenges that make such contracts particularly difficult to write correctly.\r\n\r\nThis project will address the unique challenges of writing high-assurance smart contracts by designing a new high-level language, Solidified, that allows a programmer to express both the intent of the contract and its design constraints (e.g., bounds on resource usage, synchronicity or secrecy requirements, or economic expectations).  We will develop tools to analyze and compile such contracts into executable code. At a high-level, Solidified will support high-assurance smart-contract writing across three dimensions.  First, Solidified will mix automatic and annotation-driven compilation to a diverse set of underlying cryptographic primitives necessary to provide the security smart contracts require.  The compilation process will be integrated with tools for automated resource analysis that will compute tight bounds on the amount of gas a smart contract uses.  Resource analysis, in turn, will enable automated reasoning about higher-level properties, particularly those with an economic flavor.  For example, given a contract, new analysis tools, using probabilistic resource analysis, will determine whether a player's expected payoff is maximized by following the protocol, indicating whether it is incentive compatible.  Extending the analysis across contracts will evaluate whether systemic risks are understood and mitigated.  This project's foundational work in high-assurance smart contracts will help realize the vision of blockchain technology. In addition, smart-contract programming also provides a unique pedagogical opportunity for teaching security. Hence, research results will be incorporated into graduate security courses, a smart-contract security MOOC, and an outreach program for K-12 teachers.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Bryan",
   "pi_last_name": "Parno",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Bryan Parno",
   "pi_email_addr": "bparno@andrew.cmu.edu",
   "nsf_id": "000731949",
   "pi_start_date": "2018-07-29",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Jan",
   "pi_last_name": "Hoffmann",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Jan Hoffmann",
   "pi_email_addr": "jhoffmann@cmu.edu",
   "nsf_id": "000636870",
   "pi_start_date": "2018-07-29",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Carnegie-Mellon University",
  "inst_street_address": "5000 FORBES AVE",
  "inst_street_address_2": "",
  "inst_city_name": "PITTSBURGH",
  "inst_state_code": "PA",
  "inst_state_name": "Pennsylvania",
  "inst_phone_num": "4122688746",
  "inst_zip_code": "152133815",
  "inst_country_name": "United States",
  "cong_dist_code": "12",
  "st_cong_dist_code": "PA12",
  "org_lgl_bus_name": "CARNEGIE MELLON UNIVERSITY",
  "org_prnt_uei_num": "U3NKNFLNQ613",
  "org_uei_num": "U3NKNFLNQ613"
 },
 "perf_inst": {
  "perf_inst_name": "Carnegie Mellon University",
  "perf_str_addr": "5000 Forbes Avenue",
  "perf_city_name": "Pittsburgh",
  "perf_st_code": "PA",
  "perf_st_name": "Pennsylvania",
  "perf_zip_code": "152133890",
  "perf_ctry_code": "US",
  "perf_cong_dist": "12",
  "perf_st_cong_dist": "PA12",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "171400",
   "pgm_ele_name": "Special Projects - CNS"
  },
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  },
  {
   "pgm_ref_code": "9178",
   "pgm_ref_txt": "UNDERGRADUATE EDUCATION"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0121",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 191245.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 399821.0
  },
  {
   "fund_oblg_fiscal_yr": 2021,
   "fund_oblg_amt": 224934.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Smart contracts, popularized by cryptocurrencies like Bitcoin and Ethereum, are programs that run atop financial infrastructure and command the flow of money according to user-defined algorithms.&nbsp; Such contracts can implement new, decentralized financial instruments or even virtual corporations defined only by the bundle of smart contracts programatically governing their behavior.&nbsp; For example, an eBay-like smart contract could directly connect buyers with sellers, support a variety of auction mechanisms, and manage necessary payments (including escrow), without the transaction charges currently imposed by eBay, PayPal, and the credit card companies.&nbsp; In general, moving business processes into smart contracts promises to lower costs, reduce friction, and unleash innovation by eliminating intermediaries and automating settlements.</p>\n<p><br />However, programming smart contracts requires a deep understanding of cryptographic techniques, a non-standard execution cost model, and economic mechanism design.&nbsp; Unfortunately, existing smart-contract programming languages are hazard prone and provide little support for such reasoning; indeed, contract vulnerabilities (such as TheDAO) have already led to multi-million-dollar thefts.&nbsp; In contrast, this project has developed new techniques and tools to support the development of high-assurance smart contracts, with an emphasis on the challenges that make such contracts particularly difficult to write correctly.</p>\n<p><br />In particular, in a collaboration between Carnegie Mellon University and the University of Illinois, the PIs have developed the Nomos programming language.&nbsp; Nomos is based on a type system that guarantees the absence of the most critical domain-specific vulnerabilities of smart contracts. To express and enforce protocols, Nomos is based on shared binary session types. To control gas usage, Nomos' type system is resource aware and uses automatic amortized resource analysis to infer gas bounds. Since binary session types are a linear type system, digital assets cannot be duplicated or discarded in Nomos.</p>\n<p><br />The PIs have also developed the Interactive Lambda Calculus (ILC). ILC is designed to be equivalent in expressiveness to the universal composition (UC) framework from cryptography theory. To achieve this, ILC uses linear types to ensure that a system of concurrent processes has a randomized (rather than arbitrary) execution order, hence the occurrence of events in such a system can be reduced to computationally hard problems just as in UC.<br />The PIs have also worked to enhance the provable security of cryptographic implementations that underlie blockchains, as well as the cryptographic functionality that smart contracts can natively leverage, including new designs for multi-party computation, extractable witness encryption, succinct zero-knowledge arguments, and incrementally verifiable computation.<br />The project had significant broader impact through the training of 10 PhD, 3 MS, and 5 undergraduate students.&nbsp; This includes 5 women and 1 underrepresented minority students.&nbsp;</p>\n<p><br />Multiple components of the system have been released as open-source software and are used by various companies and open source projects.&nbsp; Finally, the results of the research have been disseminated in 13 publications at top-tier venues.&nbsp; The publications are freely available on the PIs&rsquo; websites.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 09/29/2023<br>\n\t\t\t\t\tModified by: Bryan&nbsp;Parno</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nSmart contracts, popularized by cryptocurrencies like Bitcoin and Ethereum, are programs that run atop financial infrastructure and command the flow of money according to user-defined algorithms.  Such contracts can implement new, decentralized financial instruments or even virtual corporations defined only by the bundle of smart contracts programatically governing their behavior.  For example, an eBay-like smart contract could directly connect buyers with sellers, support a variety of auction mechanisms, and manage necessary payments (including escrow), without the transaction charges currently imposed by eBay, PayPal, and the credit card companies.  In general, moving business processes into smart contracts promises to lower costs, reduce friction, and unleash innovation by eliminating intermediaries and automating settlements.\n\n\nHowever, programming smart contracts requires a deep understanding of cryptographic techniques, a non-standard execution cost model, and economic mechanism design.  Unfortunately, existing smart-contract programming languages are hazard prone and provide little support for such reasoning; indeed, contract vulnerabilities (such as TheDAO) have already led to multi-million-dollar thefts.  In contrast, this project has developed new techniques and tools to support the development of high-assurance smart contracts, with an emphasis on the challenges that make such contracts particularly difficult to write correctly.\n\n\nIn particular, in a collaboration between Carnegie Mellon University and the University of Illinois, the PIs have developed the Nomos programming language.  Nomos is based on a type system that guarantees the absence of the most critical domain-specific vulnerabilities of smart contracts. To express and enforce protocols, Nomos is based on shared binary session types. To control gas usage, Nomos' type system is resource aware and uses automatic amortized resource analysis to infer gas bounds. Since binary session types are a linear type system, digital assets cannot be duplicated or discarded in Nomos.\n\n\nThe PIs have also developed the Interactive Lambda Calculus (ILC). ILC is designed to be equivalent in expressiveness to the universal composition (UC) framework from cryptography theory. To achieve this, ILC uses linear types to ensure that a system of concurrent processes has a randomized (rather than arbitrary) execution order, hence the occurrence of events in such a system can be reduced to computationally hard problems just as in UC.\nThe PIs have also worked to enhance the provable security of cryptographic implementations that underlie blockchains, as well as the cryptographic functionality that smart contracts can natively leverage, including new designs for multi-party computation, extractable witness encryption, succinct zero-knowledge arguments, and incrementally verifiable computation.\nThe project had significant broader impact through the training of 10 PhD, 3 MS, and 5 undergraduate students.  This includes 5 women and 1 underrepresented minority students. \n\n\nMultiple components of the system have been released as open-source software and are used by various companies and open source projects.  Finally, the results of the research have been disseminated in 13 publications at top-tier venues.  The publications are freely available on the PIs\u2019 websites.\n\n\t\t\t\t\tLast Modified: 09/29/2023\n\n\t\t\t\t\tSubmitted by: Bryan Parno"
 }
}