{
 "awd_id": "1750558",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CAREER: Safe and Efficient Extensions for Low-Latency Multitenant Storage",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032925197",
 "po_email": "mmcclure@nsf.gov",
 "po_sign_block_name": "Marilyn McClure",
 "awd_eff_date": "2018-05-01",
 "awd_exp_date": "2024-04-30",
 "tot_intn_awd_amt": 550000.0,
 "awd_amount": 558000.0,
 "awd_min_amd_letter_date": "2018-02-07",
 "awd_max_amd_letter_date": "2022-06-29",
 "awd_abstract_narration": "Businesses are moving data and applications into the cloud, meaning that many applications and data are consolidated efficiently in one place on fewer servers. Cloud storage services must keep the data of thousands of customers separated while also allowing customers to operate on it efficiently. Safely intermixing customer-provided operations over data is problematic. Historically, processor hardware isolates programs, but increasing data access rates make that costly. This project develops a new approach to storage that allows safe operation on data without hardware protection using recent advances in programming languages.\r\n\r\nThe approach combats data movement between disaggregated storage and compute nodes by having untrusted tenant extensions pushed to Sandstorm, a new cloud storage system. Sandstorm's insight is that storage extensions can use language-level isolation to eliminate hardware isolation overheads that cannot be avoided today: not with virtual machines, containers, nor serverless Lambdas. Sandstorm also eliminates copying data for safety, so extensions benefit from low-level hardware functionality like zero-copy network transmission. The project will develop multitenant benchmarks, low-cost performance-isolated concurrency mechanisms for multicores, techniques to minimize data movement within servers, storage extensions that demonstrate the benefits, and distributed extensions over clusters.\r\n\r\nAs power limits data center scale, minimizing data movement out of storage becomes crucial. Sandstorm enables any cloud developer to accelerate data-intensive applications like real-time social network and natural graph analysis and fine-grained coordination of hundreds of thousands of autonomous vehicles. All artifacts will be developed openly under a permissive MIT license for academic and industrial use. The project includes development of a new education platform for teaching students about distributed systems and cloud computing at the graduate, undergraduate, and high school levels with a set of serverless computing labs targeted toward University of Utah students and summer camp attendees. \r\n\r\nAll data, code, experiments, and benchmarks will be open and made publicly available through http://github.com/utah-scs/ and at http://utah.systems/ and retained for a minimum of three years beyond the project award period. All data, code, benchmarks, and experiments associated with all published results will also be hosted at http://dataverse.harvard.edu/dataverse/utah-scs as part of the Harvard Dataverse for long-term retention.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Ryan",
   "pi_last_name": "Stutsman",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Ryan Stutsman",
   "pi_email_addr": "stutsman@cs.utah.edu",
   "nsf_id": "000688499",
   "pi_start_date": "2018-02-07",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Utah",
  "inst_street_address": "201 PRESIDENTS CIR",
  "inst_street_address_2": "",
  "inst_city_name": "SALT LAKE CITY",
  "inst_state_code": "UT",
  "inst_state_name": "Utah",
  "inst_phone_num": "8015816903",
  "inst_zip_code": "841129049",
  "inst_country_name": "United States",
  "cong_dist_code": "01",
  "st_cong_dist_code": "UT01",
  "org_lgl_bus_name": "UNIVERSITY OF UTAH",
  "org_prnt_uei_num": "",
  "org_uei_num": "LL8GLEVH6MG3"
 },
 "perf_inst": {
  "perf_inst_name": "University of Utah",
  "perf_str_addr": "50 CENTRAL CAMPUS DR",
  "perf_city_name": "SALT LAKE CITY",
  "perf_st_code": "UT",
  "perf_st_name": "Utah",
  "perf_zip_code": "841129205",
  "perf_ctry_code": "US",
  "perf_cong_dist": "01",
  "perf_st_cong_dist": "UT01",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "171400",
   "pgm_ele_name": "Special Projects - CNS"
  },
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "1045",
   "pgm_ref_txt": "CAREER-Faculty Erly Career Dev"
  },
  {
   "pgm_ref_code": "7354",
   "pgm_ref_txt": "COMPUTER SYSTEMS"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0121",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0122",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002223DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 93015.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 128127.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 122799.0
  },
  {
   "fund_oblg_fiscal_yr": 2021,
   "fund_oblg_amt": 112771.0
  },
  {
   "fund_oblg_fiscal_yr": 2022,
   "fund_oblg_amt": 101288.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>This project developed new approaches for extending high-efficiency low-latency networked storage systems. A combination of innovations in network I/O hardware and operating system software in the last decade has led to storage servers that can process tens of millions of requests per second with a few microseconds of delay over the data center and cloud networks.<br /><br />This project prototyped multiple storage system designs with this high efficiency and low latency networking while allowing users of the systems to extend the behavior of the systems. Isolating code has historically required complex hardware mechanisms that substantially hurt efficiency for these workloads that require frequent switching between small tasks. The work carried out under this proposal demonstrated that emerging software-fault isolation schemes can be integrated into these systems to make them efficient, low latency, and extensible so they can be adapted to solve a wide array of problems.<br /><br />Specifically, the results of this work include</p>\n<ul>\n<li>a storage extension and code isolation scheme built on the strong static guarantees of Rust's type system [OSDI '18], one built on the fault-isolation of a WebAssembly (WASM) runtime [SoCC '19], and one built on the extended Berkeley Packet Filter (eBPF) software instruction set architecture;</li>\n<li>a novel approach on top of these systems for distributed execution of user-provided storage functions that adaptively shifts where code is executed in machine clusters to avoid computational bottlenecks [ATC '20];</li>\n<li>and a runtime for emerging \"smart\" network cards that can run user-provided storage functions on network adapter cards which uses hardware load balancing features of network cards to efficiently and dynamically adapt where these functions run to avoid bottlenecks.</li>\n</ul>\n<p>The initial results of the work led to several new research collaborations and directions, some of which have come to fruition and others which are now under exploration under other awards. The initial work on isolated storage functions led to a collaboration to develop storage functions within the Linux kernel storage stack [OSDI '22 best paper]; since then this work has been extended with the ideas of the ATC '20 paper from this award to ship functions to remote machines. Work on using the Rust type system led to a collaboration exploring the use of its type system for guarantees in a concurrent system that replicates state to scale performance on modern machines [OSDI '21].<br /><br />The results of this work have been disseminated via eight conference papers in top systems venues (OSDI, VLDB, ATC, and SoCC) and three workshop papers including two best paper awards (OSDI '22 and HotStorage '22) and one best paper runner-up (SoCC '19). The results have also been integrated into two classes at the University of Utah, and they have served as the basis for multiple undergraduate and master's projects and independent studies including one undergraduate supported via an REU supplement to this award. The work has funded six PhD students, and it has resulted in three PhD theses.&nbsp; Each of the resulting systems is freely and publicly available, and others have published work built on both the ideas and the implementations made available through this award.</p><br>\n<p>\n Last Modified: 08/27/2024<br>\nModified by: Ryan&nbsp;Stutsman</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nThis project developed new approaches for extending high-efficiency low-latency networked storage systems. A combination of innovations in network I/O hardware and operating system software in the last decade has led to storage servers that can process tens of millions of requests per second with a few microseconds of delay over the data center and cloud networks.\n\nThis project prototyped multiple storage system designs with this high efficiency and low latency networking while allowing users of the systems to extend the behavior of the systems. Isolating code has historically required complex hardware mechanisms that substantially hurt efficiency for these workloads that require frequent switching between small tasks. The work carried out under this proposal demonstrated that emerging software-fault isolation schemes can be integrated into these systems to make them efficient, low latency, and extensible so they can be adapted to solve a wide array of problems.\n\nSpecifically, the results of this work include\n\na storage extension and code isolation scheme built on the strong static guarantees of Rust's type system [OSDI '18], one built on the fault-isolation of a WebAssembly (WASM) runtime [SoCC '19], and one built on the extended Berkeley Packet Filter (eBPF) software instruction set architecture;\na novel approach on top of these systems for distributed execution of user-provided storage functions that adaptively shifts where code is executed in machine clusters to avoid computational bottlenecks [ATC '20];\nand a runtime for emerging \"smart\" network cards that can run user-provided storage functions on network adapter cards which uses hardware load balancing features of network cards to efficiently and dynamically adapt where these functions run to avoid bottlenecks.\n\n\n\nThe initial results of the work led to several new research collaborations and directions, some of which have come to fruition and others which are now under exploration under other awards. The initial work on isolated storage functions led to a collaboration to develop storage functions within the Linux kernel storage stack [OSDI '22 best paper]; since then this work has been extended with the ideas of the ATC '20 paper from this award to ship functions to remote machines. Work on using the Rust type system led to a collaboration exploring the use of its type system for guarantees in a concurrent system that replicates state to scale performance on modern machines [OSDI '21].\n\nThe results of this work have been disseminated via eight conference papers in top systems venues (OSDI, VLDB, ATC, and SoCC) and three workshop papers including two best paper awards (OSDI '22 and HotStorage '22) and one best paper runner-up (SoCC '19). The results have also been integrated into two classes at the University of Utah, and they have served as the basis for multiple undergraduate and master's projects and independent studies including one undergraduate supported via an REU supplement to this award. The work has funded six PhD students, and it has resulted in three PhD theses. Each of the resulting systems is freely and publicly available, and others have published work built on both the ideas and the implementations made available through this award.\t\t\t\t\tLast Modified: 08/27/2024\n\n\t\t\t\t\tSubmitted by: RyanStutsman\n"
 }
}