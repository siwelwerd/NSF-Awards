{
 "awd_id": "1816615",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Science and Tools for Intelligent Developer Testing",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2018-10-01",
 "awd_exp_date": "2023-09-30",
 "tot_intn_awd_amt": 500000.0,
 "awd_amount": 532000.0,
 "awd_min_amd_letter_date": "2018-05-30",
 "awd_max_amd_letter_date": "2020-08-05",
 "awd_abstract_narration": "Software dependability plays a critical role in United States businesses, government, and society. Although much progress has been made in software verification and validation, software testing remains by far the most widely used technique for improving software dependability. Among various types of testing, developer testing has been widely recognized as an important and valuable means of improving software dependability. The popularity and benefits of developer testing have been well witnessed in industry; however, manual developer testing is known to be labor intensive, and is often insufficient in comprehensively exercising behavior of the software under test to expose its hidden bugs. To address the issue, one of the common ways is to use testing infrastructures and tools to reduce or complement manual testing effort to achieve higher software dependability. In the past decade, the software testing research community has made significant progress in automatic test generation. With various recent scientific advances by the research community, a question naturally arises: what would be the audacious goal for the field of developer testing in the upcoming decade to bring a much higher testing effectiveness and efficiency to developers? To address this question, this project investigates the science and tools of intelligent developer testing, fundamentally advancing knowledge and understanding in foundations, techniques, and tools for intelligent developer testing. The project improves software dependability by revealing more bugs during software development before they manifest in deployed software.\r\n\r\nThe project focuses on science and tools for instilling intelligence from two major ways (natural language interfacing and continuous learning) into developer testing tools as part of the efforts for realizing the vision of intelligent software engineering. The project develops novel and practical techniques and tools of intelligent developer testing that have high potential to impact the industry. In particular, the project focuses on parameterized unit tests, which are an improvement over conventional unit tests because they can easily be extended by automated tools to increase code coverage while reusing developer-written oracles. The PI plans to develop intelligent tools that will make it significantly easier for developers to write parameterized unit tests with the goal of automatically translating developer intents into parts of executable test cases. This project advances the science by exploring a series of questions, e.g., how to define or determine levels of intelligence in developer testing, how to bring high levels of intelligence in developer testing tools, how to synergistically integrate machine intelligence and human intelligence (e.g., domain knowledge or insight) to effectively tackle challenging tasks in developer testing. The project involves research collaborations with industrial partners and involves participation of students from underrepresented groups.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Former Principal Investigator",
   "pi_first_name": "Tao",
   "pi_last_name": "Xie",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Tao Xie",
   "pi_email_addr": "taoxie@illinois.edu",
   "nsf_id": "000430850",
   "pi_start_date": "2018-05-30",
   "pi_end_date": "2020-02-28"
  },
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Tianyin",
   "pi_last_name": "Xu",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Tianyin Xu",
   "pi_email_addr": "tyxu@illinois.edu",
   "nsf_id": "000767698",
   "pi_start_date": "2020-02-28",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Illinois at Urbana-Champaign",
  "inst_street_address": "506 S WRIGHT ST",
  "inst_street_address_2": "",
  "inst_city_name": "URBANA",
  "inst_state_code": "IL",
  "inst_state_name": "Illinois",
  "inst_phone_num": "2173332187",
  "inst_zip_code": "618013620",
  "inst_country_name": "United States",
  "cong_dist_code": "13",
  "st_cong_dist_code": "IL13",
  "org_lgl_bus_name": "UNIVERSITY OF ILLINOIS",
  "org_prnt_uei_num": "V2PHZ2CSCH63",
  "org_uei_num": "Y8CWNJRCNN91"
 },
 "perf_inst": {
  "perf_inst_name": "University of Illinois at Urbana-Champaign",
  "perf_str_addr": "506 S. Wright St.",
  "perf_city_name": "Urbana",
  "perf_st_code": "IL",
  "perf_st_name": "Illinois",
  "perf_zip_code": "618013620",
  "perf_ctry_code": "US",
  "perf_cong_dist": "13",
  "perf_st_cong_dist": "IL13",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "287800",
   "pgm_ele_name": "Special Projects - CCF"
  },
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 500000.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 16000.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 16000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-2b24b552-7fff-0194-6fa4-1c8d7d9ed50a\">\n<p dir=\"ltr\"><span>Software testing is the de facto approach for assuring software quality and improving dependability. However, existing software tests are known to be expensive and labor intensive, as they are manually written by software developers and require significant computing resources to run. Moreover, existing software tests are known to be insufficient in comprehensively exercising the software under test to expose hidden bugs.</span></p>\n<br />\n<p dir=\"ltr\"><span>In this research project, we develop science and tools towards more intelligent and powerful software testing techniques beyond the state of the art. The project resulted in research contributions on several topics, including these highlights: (1) configuration testing which connects software tests to production configuration to test configuration changes in the context of code affected by the changes; we develop an automated approach to generate configuration tests by transforming existing software tests, (2) push-button reliability testing for large-scale cloud software (including both cloud-based applications and cloud infrastructure such as Kubernetes) under complex fault models of cloud computing environment, (3) learning program-level preconditions and synthesizing contracts using test generators, (4) improving the efficiency of automatic testing techniques: using grammar learning techniques to improve fuzzing efficiency and minimizing exploration tarpit for automated UI testing, and (5) reducing the cost of software testing by novel regression testing selection and prioritization techniques that exploits the characteristics of software tests.</span></p>\n<br />\n<p dir=\"ltr\"><span>The project resulted in broader impacts. Configuration testing has gradually become a testing practice in real-world software projects, inspired by the research efforts. The reliability testing research and its results on Kubernetes has drawn significant industry attention and covered in the popular press and industry venues such as KubeCon and CloudNativeCon. The grant partially supported training of over a dozen graduate students and several undergraduate students who published over 25 research papers, mostly at top conferences. Two papers won the SIGSOFT Distinguished Paper awards (at FSE &rsquo;21 and ISSTA &rsquo;21). The research artifacts including the tools and datasets are released (see </span><a href=\"https://github.com/xlab-uiuc\"><span>https://github.com/xlab-uiuc</span></a><span>). Lastly, the research on configuration testing and reliability testing has been integrated into the education and teaching materials at multiple graduate-level courses at the University of Illinois.</span></p>\n</span></p><br>\n<p>\n Last Modified: 01/28/2024<br>\nModified by: Tianyin&nbsp;Xu</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\n\n\n\nSoftware testing is the de facto approach for assuring software quality and improving dependability. However, existing software tests are known to be expensive and labor intensive, as they are manually written by software developers and require significant computing resources to run. Moreover, existing software tests are known to be insufficient in comprehensively exercising the software under test to expose hidden bugs.\n\n\n\n\nIn this research project, we develop science and tools towards more intelligent and powerful software testing techniques beyond the state of the art. The project resulted in research contributions on several topics, including these highlights: (1) configuration testing which connects software tests to production configuration to test configuration changes in the context of code affected by the changes; we develop an automated approach to generate configuration tests by transforming existing software tests, (2) push-button reliability testing for large-scale cloud software (including both cloud-based applications and cloud infrastructure such as Kubernetes) under complex fault models of cloud computing environment, (3) learning program-level preconditions and synthesizing contracts using test generators, (4) improving the efficiency of automatic testing techniques: using grammar learning techniques to improve fuzzing efficiency and minimizing exploration tarpit for automated UI testing, and (5) reducing the cost of software testing by novel regression testing selection and prioritization techniques that exploits the characteristics of software tests.\n\n\n\n\nThe project resulted in broader impacts. Configuration testing has gradually become a testing practice in real-world software projects, inspired by the research efforts. The reliability testing research and its results on Kubernetes has drawn significant industry attention and covered in the popular press and industry venues such as KubeCon and CloudNativeCon. The grant partially supported training of over a dozen graduate students and several undergraduate students who published over 25 research papers, mostly at top conferences. Two papers won the SIGSOFT Distinguished Paper awards (at FSE 21 and ISSTA 21). The research artifacts including the tools and datasets are released (see https://github.com/xlab-uiuc). Lastly, the research on configuration testing and reliability testing has been integrated into the education and teaching materials at multiple graduate-level courses at the University of Illinois.\n\t\t\t\t\tLast Modified: 01/28/2024\n\n\t\t\t\t\tSubmitted by: TianyinXu\n"
 }
}