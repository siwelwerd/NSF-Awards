{
 "awd_id": "1848608",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "EAGER: Automatic Identification of Bug Description Elements",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2018-10-01",
 "awd_exp_date": "2020-09-30",
 "tot_intn_awd_amt": 200000.0,
 "awd_amount": 200000.0,
 "awd_min_amd_letter_date": "2018-08-28",
 "awd_max_amd_letter_date": "2018-08-28",
 "awd_abstract_narration": "When an application does not behave the way it is meant to or as expected by the users, they often communicate the problem via a bug-report, which is then used by developers to identify the problem and fix it. To submit a bug-report, users utilize issue-trackers, which allows them to write in natural language a description of the problem they encountered. One problem in bug reporting is the perception gap that exists between bug reporters and developers. Those who report a bug typically only have functional knowledge of an application, even if they have development experience themselves, whereas the software developers have intimate code-level knowledge. Consequently, information in bug-reports are often incomplete, potentially incorrect, or hard to comprehend, which leads to excessive manual effort spent by developers in trying to identify the real source of the problem. This project aims to automatically analyzing bug descriptions in natural language and identifying parts that correspond to the observed behavior of the application, the expected behavior, and the steps that describe what the user did when encountering the problem. The ability to automatically identify these parts of a bug description is important as it allows further analysis which will determine the quality of the reported information and supports developers in solving the problem. In the long run, this award will lead to a new type of bug reporting system that is able to automatically enable users to better describe the problem behaviors that they notice, and in turn, help developers address software problems more productively. The project will also support defining best practices in bug reporting, to be used by software users across the world.\r\n\r\nThe project combines well-established and highly innovative research solutions from natural language processing, automated discourse analysis, and machine learning. Specifically, the project addresses discourse semantics at statement level, rather than bug report level, and solves the difficult challenge of bug content disambiguation. In addition, it also addresses the problem of identifying relationships between bug description elements, which is essential in supporting future work on automated bug reproduction. The main solution relies on the use of neural networks, which require a substantial amount of manual coding of bug reports. The resulting set of annotated bug reports could be used to support research beyond this project, such as, the translation of natural language test sequences or scenarios into fully automated test cases.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Andrian",
   "pi_last_name": "Marcus",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Andrian Marcus",
   "pi_email_addr": "amarcus7@gmu.edu",
   "nsf_id": "000488981",
   "pi_start_date": "2018-08-28",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Vincent",
   "pi_last_name": "Ng",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Vincent Ng",
   "pi_email_addr": "vince@hlt.utdallas.edu",
   "nsf_id": "000182032",
   "pi_start_date": "2018-08-28",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Texas at Dallas",
  "inst_street_address": "800 WEST CAMPBELL RD.",
  "inst_street_address_2": "SP2.25",
  "inst_city_name": "RICHARDSON",
  "inst_state_code": "TX",
  "inst_state_name": "Texas",
  "inst_phone_num": "9728832313",
  "inst_zip_code": "750803021",
  "inst_country_name": "United States",
  "cong_dist_code": "24",
  "st_cong_dist_code": "TX24",
  "org_lgl_bus_name": "UNIVERSITY OF TEXAS AT DALLAS",
  "org_prnt_uei_num": "",
  "org_uei_num": "EJCVPNN1WFS5"
 },
 "perf_inst": {
  "perf_inst_name": "University of Texas at Dallas",
  "perf_str_addr": "800 W. Campbell Rd., AD15",
  "perf_city_name": "Richrdson",
  "perf_st_code": "TX",
  "perf_st_name": "Texas",
  "perf_zip_code": "750803021",
  "perf_ctry_code": "US",
  "perf_cong_dist": "24",
  "perf_st_cong_dist": "TX24",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7916",
   "pgm_ref_txt": "EAGER"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  },
  {
   "pgm_ref_code": "8206",
   "pgm_ref_txt": "Formal Methods and Verification"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 200000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Issue trackers and bug reporting systems serve an indispensable role in the software development, maintenance, and testing processes for documenting problems, particularly those that cannot be captured in an automated fashion and must be reported manually by the users of the software. Developers use the information from bug reports to, first, attempt and replicate the bug. Then they need to establish whether the bug was reported before or not, and, finally, they need to localize it in the code and fix it.</p>\n<p>&nbsp;</p>\n<p>The research supported by this grant produced an approach (named EULER) based on machine learning and natural language processing, combined with static and dynamic software analysis, which can analyze a bug report written by a user and automatically identify any issues with the reported steps to reproduce the software problem. Specifically, EULER can detect with high accuracy if a particular step to reproduce the bug is missing, if it is ambiguous, if it uses improper vocabulary, or if it correct. When deficiencies are detected in the steps to reproduce, EULER recommends how they should be corrected.</p>\n<p>&nbsp;</p>\n<p>Such an approach is important in helping end user report software problems in such a way that the developers can easily reproduce them, before fixing them.</p>\n<p>&nbsp;</p>\n<p>In addition, this research produced three techniques that support developers in identifying duplicate bug reports and locating the bugs in the code. These approaches leverage the results we obtained in identifying important parts of bug reports, such as: the observed behavior of the software, which describes how the software bug is perceived by the reporter; the expected behavior of the software, which describes the correct behavior; and the steps to reproduce the bug. Our approaches reply on extracting these parts of the bug reports and help developers formulate queries submitted to a text retrieval engine. The text retrieval engine retrieves bug reports that are duplicates of the one under analysis. For new bug reports, the retrieval engine recommends parts of the source code that are likely to contain the fault that produced the bug.</p>\n<p>&nbsp;</p>\n<p>The research results were disseminated via several conference and journal papers, as well as openly available data sets for supporting replications and future research. One of the papers won the ACM SIGSOFT Distinguished Paper Award at the 2019 ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE).</p>\n<p>&nbsp;</p>\n<p>During the duration of the grant, four graduate students worked on topics related to this project under the direct advising of the PI, all of them from underrepresented groups (Hispanic/Latino and women). This grant contributed to the training, professional development, and the fostering of networks for the supported graduate students, by allowing the PI to train and involve the students in research and by allowing the students to (i) present their papers at conferences and get feedback on their work from other researchers from academia and industry, (ii) attend research presentations at conferences and enrich their knowledge about the field, and (iii) interact with other students, researchers, and practitioners in the field, therefore building a professional network that can benefit their future careers.</p>\n<p>&nbsp;</p>\n<p>The research produced under this grant contributed, in part, to the doctoral dissertations of two of the students, who are now working in academia and in the software industry, respectively.</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 08/23/2021<br>\n\t\t\t\t\tModified by: Andrian&nbsp;Marcus</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nIssue trackers and bug reporting systems serve an indispensable role in the software development, maintenance, and testing processes for documenting problems, particularly those that cannot be captured in an automated fashion and must be reported manually by the users of the software. Developers use the information from bug reports to, first, attempt and replicate the bug. Then they need to establish whether the bug was reported before or not, and, finally, they need to localize it in the code and fix it.\n\n \n\nThe research supported by this grant produced an approach (named EULER) based on machine learning and natural language processing, combined with static and dynamic software analysis, which can analyze a bug report written by a user and automatically identify any issues with the reported steps to reproduce the software problem. Specifically, EULER can detect with high accuracy if a particular step to reproduce the bug is missing, if it is ambiguous, if it uses improper vocabulary, or if it correct. When deficiencies are detected in the steps to reproduce, EULER recommends how they should be corrected.\n\n \n\nSuch an approach is important in helping end user report software problems in such a way that the developers can easily reproduce them, before fixing them.\n\n \n\nIn addition, this research produced three techniques that support developers in identifying duplicate bug reports and locating the bugs in the code. These approaches leverage the results we obtained in identifying important parts of bug reports, such as: the observed behavior of the software, which describes how the software bug is perceived by the reporter; the expected behavior of the software, which describes the correct behavior; and the steps to reproduce the bug. Our approaches reply on extracting these parts of the bug reports and help developers formulate queries submitted to a text retrieval engine. The text retrieval engine retrieves bug reports that are duplicates of the one under analysis. For new bug reports, the retrieval engine recommends parts of the source code that are likely to contain the fault that produced the bug.\n\n \n\nThe research results were disseminated via several conference and journal papers, as well as openly available data sets for supporting replications and future research. One of the papers won the ACM SIGSOFT Distinguished Paper Award at the 2019 ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE).\n\n \n\nDuring the duration of the grant, four graduate students worked on topics related to this project under the direct advising of the PI, all of them from underrepresented groups (Hispanic/Latino and women). This grant contributed to the training, professional development, and the fostering of networks for the supported graduate students, by allowing the PI to train and involve the students in research and by allowing the students to (i) present their papers at conferences and get feedback on their work from other researchers from academia and industry, (ii) attend research presentations at conferences and enrich their knowledge about the field, and (iii) interact with other students, researchers, and practitioners in the field, therefore building a professional network that can benefit their future careers.\n\n \n\nThe research produced under this grant contributed, in part, to the doctoral dissertations of two of the students, who are now working in academia and in the software industry, respectively.\n\n \n\n\t\t\t\t\tLast Modified: 08/23/2021\n\n\t\t\t\t\tSubmitted by: Andrian Marcus"
 }
}