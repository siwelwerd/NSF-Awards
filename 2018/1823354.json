{
 "awd_id": "1823354",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CRI: CI-NEW: Collaborative Research: Constructing a Community-Wide Software Architecture Infrastructure",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2018-09-01",
 "awd_exp_date": "2023-08-31",
 "tot_intn_awd_amt": 683618.0,
 "awd_amount": 692018.0,
 "awd_min_amd_letter_date": "2018-08-08",
 "awd_max_amd_letter_date": "2021-06-29",
 "awd_abstract_narration": "A software system's life cycle is dominated by maintenance costs and efforts. A software system's architecture is acknowledged as a key determinant of the system's properties and its successful maintenance and evolution over the lifetime of a system. However, in the area of architecture-centered software maintenance, empirical research and technology transfer from academia to practice have been impeded by disjoint environments, redundant efforts, high costs associated with developing robust tools, and the lack of shared research infrastructure and datasets. To address these challenges, this project develops the Software Architecture INstrument (SAIN), a first-of-its-kind integration framework for assembling architecture-related techniques and tools with the goal of enabling empirical research in the context of software maintenance. SAIN will deliver a tool suite comprising four principal components: (1) a catalogued library of cutting-edge tools for reverse engineering and analyzing software systems' architectures, which increases reusability and eliminates redundant tool development across the community; (2) a plug-and-play instrument for integrating the tools and techniques to promote interoperability of existing solutions and enable the creation of new solutions; (3) reproducibility wizards to set up experiment-templates, produce replication packages, and release them in easy-to-run and modify formats, which promotes wide accessibility and smooth usage of existing techniques by researchers and practitioners; and (4) a public repository of software-architecture datasets and benchmarks for supporting a broad range of software-architecture empirical studies.  \r\n\r\nSAIN aims to bridge the gap between academic research and practice in the software-architecture domain. On the one hand, SAIN will enable extensive empirical research by providing a large repository of architectural artifacts, including interoperable tools and benchmark datasets. As such, researchers will be able to compare and contrast different techniques using the same datasets to identify gaps and inaccuracies. This will enable new solutions for improving the state-of-the-art in software-architecture research. On the other hand, SAIN will provide practitioners with an authoritative source offering interoperable tools and feedback, as well as a channel to contribute cutting-edge architectural artifacts. In summary, SAIN has the potential to transform software architecture research and practice by (1) facilitating the discovery and adoption of cutting-edge techniques and tools that are best-suited to modern problems and (2) ensuring architecture's central role in a broad range of software-engineering activities. SAIN will be available for public use and will foster much more effective university-industry collaboration than is the case today.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Nenad",
   "pi_last_name": "Medvidovic",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Nenad Medvidovic",
   "pi_email_addr": "neno@usc.edu",
   "nsf_id": "000485161",
   "pi_start_date": "2018-08-08",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Southern California",
  "inst_street_address": "3720 S FLOWER ST FL 3",
  "inst_street_address_2": "",
  "inst_city_name": "LOS ANGELES",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "2137407762",
  "inst_zip_code": "90033",
  "inst_country_name": "United States",
  "cong_dist_code": "34",
  "st_cong_dist_code": "CA34",
  "org_lgl_bus_name": "UNIVERSITY OF SOUTHERN CALIFORNIA",
  "org_prnt_uei_num": "",
  "org_uei_num": "G88KLJR3KYT5"
 },
 "perf_inst": {
  "perf_inst_name": "University of Southern California",
  "perf_str_addr": "3720 S. Flower St.",
  "perf_city_name": "Los Angeles",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "900890001",
  "perf_ctry_code": "US",
  "perf_cong_dist": "37",
  "perf_st_cong_dist": "CA37",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "171400",
   "pgm_ele_name": "Special Projects - CNS"
  },
  {
   "pgm_ele_code": "287800",
   "pgm_ele_name": "Special Projects - CCF"
  },
  {
   "pgm_ele_code": "735900",
   "pgm_ele_name": "CCRI-CISE Cmnty Rsrch Infrstrc"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7359",
   "pgm_ref_txt": "COMPUTING RES INFRASTRUCTURE"
  },
  {
   "pgm_ref_code": "9178",
   "pgm_ref_txt": "UNDERGRADUATE EDUCATION"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0121",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 683618.0
  },
  {
   "fund_oblg_fiscal_yr": 2021,
   "fund_oblg_amt": 8400.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>A software system&rsquo;s architecture is the primary determinant of the system&rsquo;s key properties. Highly successful software solutions are successful because of their architectures first and foremost. Similarly, many well-known software failures (e.g., the initial HealthCare.gov failure in 2013) are caused by inadequate architectures. One of the biggest challenges software engineers face is that the architectures of many systems are not explicitly documented; instead, those architectures are &ldquo;hidden&rdquo; in the systems&rsquo; implementation details. Engineers are then forced to guess the architectural implications of their choices and decisions during system maintenance and evolution.</p>\n<p>Over the past two decades, software architecture research has yielded many different tools and techniques for understanding and maintaining the architectures of large software systems. However, empirical research and technology transfer are impeded by disjoint research and development environments, lack of a shared research infrastructure, high initial costs associated with developing robust tools, and a lack of datasets needed to conduct empirical research in this domain. As a result, researchers conducting empirical studies and practitioners in need of cutting-edge tools must typically re-invent or re-implement research infrastructure, often repeating each other&rsquo;s efforts (and mistakes). As a result, the opportunities for potential breakthroughs in this domain are regularly missed and the field is replete with solutions that do not work as advertised and/or are not interoperable.</p>\n<p>To address this state of affairs, this project developed the Software Architecture INstrument (SAIN), a first-of-its-kind integration framework for assembling architecture-related techniques and tools with the goal of enabling empirical research in the context of software maintenance. SAIN and its planned capabilities have been motivated by directly engaging a large segment of the software researcher and practitioner communities, in the form of multiple workshops and a survey conducted by the PIs. SAIN has been delivered as a tool suite comprising four principal components:</p>\n<ol>\n<li>a catalogued library of cutting-edge tools for reverse engineering and analyzing software systems&rsquo; architectures;&nbsp;</li>\n<li>a plug-and-play instrument for integrating the tools and techniques to enable empirical studies of software architectures;&nbsp;</li>\n<li>reproducibility wizards to set up experiment-templates, produce replication packages, and release them in easy-to-run and modify formats; and&nbsp;</li>\n<li>a growing public repository of software-architecture datasets and benchmarks. </li>\n</ol>\n<p>SAIN has been publicized through peer-reviewed experience reports, tool demonstrations and technical briefings at major software engineering conferences, and a week-long online school for potential adopters on four continents (North and South America, Asia, and Europe). SAIN has been installed and deployed at over 100 locations worldwide to date.</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 10/30/2023<br>\n\t\t\t\t\tModified by: Nenad&nbsp;Medvidovic</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nA software system\u2019s architecture is the primary determinant of the system\u2019s key properties. Highly successful software solutions are successful because of their architectures first and foremost. Similarly, many well-known software failures (e.g., the initial HealthCare.gov failure in 2013) are caused by inadequate architectures. One of the biggest challenges software engineers face is that the architectures of many systems are not explicitly documented; instead, those architectures are \"hidden\" in the systems\u2019 implementation details. Engineers are then forced to guess the architectural implications of their choices and decisions during system maintenance and evolution.\n\nOver the past two decades, software architecture research has yielded many different tools and techniques for understanding and maintaining the architectures of large software systems. However, empirical research and technology transfer are impeded by disjoint research and development environments, lack of a shared research infrastructure, high initial costs associated with developing robust tools, and a lack of datasets needed to conduct empirical research in this domain. As a result, researchers conducting empirical studies and practitioners in need of cutting-edge tools must typically re-invent or re-implement research infrastructure, often repeating each other\u2019s efforts (and mistakes). As a result, the opportunities for potential breakthroughs in this domain are regularly missed and the field is replete with solutions that do not work as advertised and/or are not interoperable.\n\nTo address this state of affairs, this project developed the Software Architecture INstrument (SAIN), a first-of-its-kind integration framework for assembling architecture-related techniques and tools with the goal of enabling empirical research in the context of software maintenance. SAIN and its planned capabilities have been motivated by directly engaging a large segment of the software researcher and practitioner communities, in the form of multiple workshops and a survey conducted by the PIs. SAIN has been delivered as a tool suite comprising four principal components:\n\na catalogued library of cutting-edge tools for reverse engineering and analyzing software systems\u2019 architectures; \na plug-and-play instrument for integrating the tools and techniques to enable empirical studies of software architectures; \nreproducibility wizards to set up experiment-templates, produce replication packages, and release them in easy-to-run and modify formats; and \na growing public repository of software-architecture datasets and benchmarks. \n\n\nSAIN has been publicized through peer-reviewed experience reports, tool demonstrations and technical briefings at major software engineering conferences, and a week-long online school for potential adopters on four continents (North and South America, Asia, and Europe). SAIN has been installed and deployed at over 100 locations worldwide to date.\n\n \n\n\t\t\t\t\tLast Modified: 10/30/2023\n\n\t\t\t\t\tSubmitted by: Nenad Medvidovic"
 }
}