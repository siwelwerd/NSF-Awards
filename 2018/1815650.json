{
 "awd_id": "1815650",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SaTC: TTP: Small: Enhancing Container Security via Fine-Grained System Resource Constraints",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Rob Beverly",
 "awd_eff_date": "2018-09-01",
 "awd_exp_date": "2022-08-31",
 "tot_intn_awd_amt": 489287.0,
 "awd_amount": 489287.0,
 "awd_min_amd_letter_date": "2018-08-17",
 "awd_max_amd_letter_date": "2018-08-17",
 "awd_abstract_narration": "Linux containers have become a popular light-weight virtualization platform for effective on-demand computing. Their use ranges from simple high-performance computing (HPC) clusters to fully orchestrated enterprise systems. As such they have become attractive targets for attackers. This project aims at improving the trustworthiness and reliability of the Linux containers and their applications. With the substantial security enhancement against malicious attacks, it could promote the adaptation of the light-weight container platform, particularly, in the HPC community to satisfy the needs on mobility of compute. In addition, the developed techniques are generic and can be easily ported or extended to protect other Linux platforms that have the basic security primitives enabled.\r\n\r\nThis project provides a novel and practical framework to enhance container security via enforcing dynamic system resource constraints based on the lifecycle phases of a particular container platform. Particularly, since the same operating system (OS) kernel is shared among all containers on a host, when one malicious container escapes from the user-level process into the OS kernel, all other containers are compromised too. The project can dramatically reduce the attack surface of the host OS by smoothly integrating dynamic filters with the existing security primitives (e.g., seccomp, capabilities, and cgroups) in Linux kernels. Moreover, the combination of these enhanced security primitives provides more power and flexibility on attack mitigation. This security enhancement is user-transparent and has a minimal overhead.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Kun",
   "pi_last_name": "Sun",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Kun Sun",
   "pi_email_addr": "ksun3@gmu.edu",
   "nsf_id": "000584084",
   "pi_start_date": "2018-08-17",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "George Mason University",
  "inst_street_address": "4400 UNIVERSITY DR",
  "inst_street_address_2": "",
  "inst_city_name": "FAIRFAX",
  "inst_state_code": "VA",
  "inst_state_name": "Virginia",
  "inst_phone_num": "7039932295",
  "inst_zip_code": "220304422",
  "inst_country_name": "United States",
  "cong_dist_code": "11",
  "st_cong_dist_code": "VA11",
  "org_lgl_bus_name": "GEORGE MASON UNIVERSITY",
  "org_prnt_uei_num": "H4NRWLFCDF43",
  "org_uei_num": "EADLFP7Z72E5"
 },
 "perf_inst": {
  "perf_inst_name": "George Mason University",
  "perf_str_addr": "4400 University Drive",
  "perf_city_name": "Fairfax",
  "perf_st_code": "VA",
  "perf_st_name": "Virginia",
  "perf_zip_code": "220304422",
  "perf_ctry_code": "US",
  "perf_cong_dist": "11",
  "perf_st_cong_dist": "VA11",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 489287.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span>The goal of this project was to extend our technology for&nbsp;improving the trustworthiness and security of the Linux containers and their applications,&nbsp;and then transition the technology into practice. In our prior work, we developed a split-phase system call reduction mechanism named SPEAKER to dramatically reduce the number of system calls (attack surface) during the lifetime of one container?s execution, since a container required different sets of available system calls at various execution phases.&nbsp;</span></p>\n<p class=\"Pa4\"><span>During the period of performance,&nbsp;we made several technical progresses to extend the functionality of our system and evaluate the security of existing container products. First,&nbsp;by separating the shutdown stage from the running stage, we extended the split-phase execution of containers from 2 stages (i.e., booting and running) to 3 stages (i.e., booting, running, and shutdown). Second,we developed a software toolkit that automatically profiles system call whitelist for all types of Docker images using a static analysis approach, which directly analyzes Docker images and related libraries without running containers.&nbsp;Combining with the dynamic analysis method in our prior work, we increased the accuracy and completeness on profiling system calls.&nbsp;Third, we developed a toolkit named SysCap to automatically customize both system calls and capabilities for Docker images. This static analyzer tool achieved its goal by constructing a library-to-syscall mapping via analyzing the library (e.g., libc) and a syscall-to-capability mapping via analyzing the Linux kernel. Fourth,&nbsp;we performed a measurement study on Linux container security using real exploits that might be launched to attack containers. Also,&nbsp;we performed a security inspection on five in-service commercial cloud container services. The results showed that attackers may obtain the root privilege in a container; however, it was difficult for attackers to escape from the container onto the public cloud platforms.&nbsp;Fifth,&nbsp;we conducted the first in-depth study on the vulnerability of container registries to typosquatting attacks, in which adversaries intentionally uploaded malicious images with an identification similar to that of a benign image so that users may accidentally download malicious images due to typos.&nbsp;&nbsp;</span></p>\n<p><span>To&nbsp;transfer our product into practice, we&nbsp;focused on licensing our techniques.&nbsp;First, we worked with the Office of Sponsored Programs at George Mason University on filing a Patent application (pending). Second, we made two efforts to licensing our mechanism to two Cisco teams, including one product team and one research team. We received very positive feedback from both teams after deploying and testing our system on their testbeds. Third,&nbsp;we collaborated with a startup company at Silicon Valley, CA and integrated our fine-grained access control mechanism into its Zero Trust solutions to protect cloud applications. The PI also served on the company?s advisory board. Lastly, we open sourced&nbsp;the basic functionalities of our system to benefit the open-source community.&nbsp;</span></p>\n<p class=\"Pa4\"><span>Several graduate and undergraduate students, high school students, and two postdocs were directly involved and trained in this research project.&nbsp;The team members gained system development experience and improved their knowledge basis on cybersecurity via&nbsp;presenting the results at scientific meetings, publishing in peer-reviewed conferences/journals, and&nbsp;doing several demonstrations of the project.&nbsp;One postdoc later joined George Mason University as an Assistant Professor. The PI taught graduate level courses and integrated results of this research into the classroom.&nbsp;</span></p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 12/27/2022<br>\n\t\t\t\t\tModified by: Kun&nbsp;Sun</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThe goal of this project was to extend our technology for improving the trustworthiness and security of the Linux containers and their applications, and then transition the technology into practice. In our prior work, we developed a split-phase system call reduction mechanism named SPEAKER to dramatically reduce the number of system calls (attack surface) during the lifetime of one container?s execution, since a container required different sets of available system calls at various execution phases. \nDuring the period of performance, we made several technical progresses to extend the functionality of our system and evaluate the security of existing container products. First, by separating the shutdown stage from the running stage, we extended the split-phase execution of containers from 2 stages (i.e., booting and running) to 3 stages (i.e., booting, running, and shutdown). Second,we developed a software toolkit that automatically profiles system call whitelist for all types of Docker images using a static analysis approach, which directly analyzes Docker images and related libraries without running containers. Combining with the dynamic analysis method in our prior work, we increased the accuracy and completeness on profiling system calls. Third, we developed a toolkit named SysCap to automatically customize both system calls and capabilities for Docker images. This static analyzer tool achieved its goal by constructing a library-to-syscall mapping via analyzing the library (e.g., libc) and a syscall-to-capability mapping via analyzing the Linux kernel. Fourth, we performed a measurement study on Linux container security using real exploits that might be launched to attack containers. Also, we performed a security inspection on five in-service commercial cloud container services. The results showed that attackers may obtain the root privilege in a container; however, it was difficult for attackers to escape from the container onto the public cloud platforms. Fifth, we conducted the first in-depth study on the vulnerability of container registries to typosquatting attacks, in which adversaries intentionally uploaded malicious images with an identification similar to that of a benign image so that users may accidentally download malicious images due to typos.  \n\nTo transfer our product into practice, we focused on licensing our techniques. First, we worked with the Office of Sponsored Programs at George Mason University on filing a Patent application (pending). Second, we made two efforts to licensing our mechanism to two Cisco teams, including one product team and one research team. We received very positive feedback from both teams after deploying and testing our system on their testbeds. Third, we collaborated with a startup company at Silicon Valley, CA and integrated our fine-grained access control mechanism into its Zero Trust solutions to protect cloud applications. The PI also served on the company?s advisory board. Lastly, we open sourced the basic functionalities of our system to benefit the open-source community. \nSeveral graduate and undergraduate students, high school students, and two postdocs were directly involved and trained in this research project. The team members gained system development experience and improved their knowledge basis on cybersecurity via presenting the results at scientific meetings, publishing in peer-reviewed conferences/journals, and doing several demonstrations of the project. One postdoc later joined George Mason University as an Assistant Professor. The PI taught graduate level courses and integrated results of this research into the classroom. \n\n \n\n\t\t\t\t\tLast Modified: 12/27/2022\n\n\t\t\t\t\tSubmitted by: Kun Sun"
 }
}