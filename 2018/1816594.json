{
 "awd_id": "1816594",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Collaborative: Managing Software Evolution through Continuous Measuring and Monitoring",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2018-10-01",
 "awd_exp_date": "2022-09-30",
 "tot_intn_awd_amt": 278794.0,
 "awd_amount": 302794.0,
 "awd_min_amd_letter_date": "2018-07-16",
 "awd_max_amd_letter_date": "2020-06-02",
 "awd_abstract_narration": "Architecture degradation can have fundamental impacts on software quality and productivity, resulting in substantial loss of time and money. It has been estimated that failed and troubled software costs around 60 billion to 70 billion dollars per year in the United States alone, and recent research has revealed that only 2%-6% of large projects are successful. None of these problems happen overnight. Software evolves continuously, through numerous maintenance tasks, such as fixing bugs and adding new features. Developers typically are focused on their immediate tasks while the cumulative impacts of their activities, as they affect the architecture, go unnoticed. Early symptoms continuously evolve and grow in scope and significance until the system becomes difficult to maintain. Numerous software metrics and measures have been proposed to monitor software maintainability, but they have not yet achieved the reliability needed for comparing and contrasting projects, or to signal early symptoms of severe problems. Current techniques, which are largely based on (static) syntactic dependencies, tend to report large numbers of false positives. This makes it hard to pinpoint the true problems.\r\n \r\nThe project will develop a novel metric suite for source code assessment based on options theory, accompanied by a suite of evolution history measures using maintenance tasks as first-class entities. The project will also develop a hotspot detection method to capture early symptoms of architecture flaws before the software becomes unmanageably buggy and costly to repair.  This project has the potential to revolutionize how software systems are monitored and managed, potentially resulting in substantial savings for development organizations, and resulting in a more disciplined, controlled process of software evolution and maintenance. The proposed metrics and tools will be integrated with widely-used software management tools, such as Bitbucket and Github, potentially impacting hundreds of thousands of software projects. The industrial benchmark will establish a Software Heath Chart against which any software project can make a comparison. The methods produced from this research can be used in software design and maintenance education, providing pedagogical tools with scientific foundations.  The empirical basis for this research will provide an industry-wide foundation for reasoning about software evolution and management.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Yuanfang",
   "pi_last_name": "Cai",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Yuanfang Cai",
   "pi_email_addr": "yfcai@cs.drexel.edu",
   "nsf_id": "000244198",
   "pi_start_date": "2018-07-16",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Drexel University",
  "inst_street_address": "3141 CHESTNUT ST",
  "inst_street_address_2": "",
  "inst_city_name": "PHILADELPHIA",
  "inst_state_code": "PA",
  "inst_state_name": "Pennsylvania",
  "inst_phone_num": "2158956342",
  "inst_zip_code": "191042875",
  "inst_country_name": "United States",
  "cong_dist_code": "03",
  "st_cong_dist_code": "PA03",
  "org_lgl_bus_name": "DREXEL UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "XF3XM9642N96"
 },
 "perf_inst": {
  "perf_inst_name": "Drexel University",
  "perf_str_addr": "3141 Chestnut street",
  "perf_city_name": "Philadelpha",
  "perf_st_code": "PA",
  "perf_st_name": "Pennsylvania",
  "perf_zip_code": "191042816",
  "perf_ctry_code": "US",
  "perf_cong_dist": "03",
  "perf_st_cong_dist": "PA03",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  },
  {
   "pgm_ref_code": "9102",
   "pgm_ref_txt": "WOMEN, MINORITY, DISABLED, NEC"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 278794.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 24000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-66711d3e-7fff-3d55-f5fe-0d19db64bc3f\"> </span></p>\n<p><span id=\"docs-internal-guid-9de8b4f7-7fff-9dc9-5152-bde83796e601\"> </span></p>\n<p><span id=\"docs-internal-guid-84f54bdd-7fff-5c23-c611-1f99d3fb58dc\"> </span></p>\n<p dir=\"ltr\"><span>Our research over the course of this project has contributed a number of new design concepts, tools, and technologies that enable the continuous measuring and monitoring of software projects so that design problems that influence productivity or quality can be identified and fixed early to prevent severe loss due to architecture decay. In addition to publications, we also authored one patent, developed a software design analysis tool, DV8, and created a&nbsp; design quality benchmark containing over 3500 open source projects (</span><a href=\"http://demo.archtimize.io/discover\"><span>http://demo.archtimize.io/discover</span></a><span>). The main research concepts that emerged in this project include the following:&nbsp;</span></p>\n<p dir=\"ltr\"><span>Feature Decoupling Level. </span><span>&nbsp;Previous software metrics cannot directly assess if and to what extent an architecture is ``good enough'' to support feature addition and evolution---one of the most valuable properties of a design. We contributed a concept called the </span><span>feature space</span><span>, and a formal definition of </span><span>feature dependency</span><span>, derived from a software project's revision history. We captured the dependency relations among the features of a system in a Feature Dependency Structure Matrix (FDSM), using features as first-class design elements. We also proposed a Feature Decoupling Level (FDL) metric that could be used to measure the level of independence among features. Our investigation of 17 open source projects showed that files within each feature space are much more likely to be changed together.&nbsp;</span></p>\n<p dir=\"ltr\"><span>Active Hotspot.</span><span> Severe software degradation does not happen overnight, and it is often too late by the time an anti-pattern is detected. To detect these problems early, we proposed a concept called Active Hotspot,&nbsp; files that are changed frequently to address different issues in a given time range. Using active hotspots, we can monitor software evolution by tracking the interactions among files revised to address issues and identify problematic structures earlier. Our study revealed that there exist just a few dominating active hotspots per project at any given time. Moreover, these dominating active hotspots persist over long time periods, and thus deserve special attention by project personnel.&nbsp;</span></p>\n<p dir=\"ltr\"><span>Architectural Technical Debt. </span><span>&nbsp;Previous research revealed that sub-optimal architectural design in a software system can incur high maintenance ``interest\" over time. We contributed an approach to precisely locate Architectural Technical Debt (ATD) and to capture the trajectory of maintenance cost on each debt, so that their costs in a future release can be predicted. We also aggregated compound ATDs to capture the complicated relationship among multiple ATD instances, which should be examined together for effective refactoring solutions. We evaluated our approach on 18 real-world projects, and identified ATDs that persistently incur significant (up to 95% of) maintenance costs in most projects. The regression models can accurately predict the costs of the majority of (82% to 100%) debts in the next release of a system. By aggregating related ATDs, architects can focus on a small number of compound debts, which contain a relatively small number of source files, but account for a large portion of maintenance costs in their projects.</span></p>\n<p dir=\"ltr\"><span>In this project, we also explored the impact of different dependency types on software measures and design debt detection, revealing that implicit dependencies caused by dynamic typing can incur more maintenance costs than explicit syntactic dependencies, and proposed an algorithm to make such implicit dependencies explicit. We also compared multiple technical debt detection tools, including our own DV8. Our comparison showed that 1) these tools report very different results even for the most common measures, such as code size and complexity; 2) they also differ dramatically in terms of the set of problematic files they identify, since each implements its own definitions of \"problematic\"; and 3) code-based measures, other than size and complexity, do not correlate well with a file's change-proneness or error-proneness. In contrast, co-change-related measures performed better. Our results suggest that, to identify files with true technical debt, co-change information must be considered. This study also revealed the need for the community to create benchmarks and data sets to assess the accuracy of software analysis tools in terms of commonly used measures.</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>The supporting tools and technology as a result of this project have already had an impact on the practice of software development.&nbsp; DV8 has been licensed by several multinational corporations.&nbsp; From our extensive collaborations with industry we have demonstrated that these tools and methods have the potential to change the management of the software industry by enabling the organization to continuously monitor the variation of software quality and productivity, and identify problematic design problems that incur bugs or slow down feature addition.&nbsp;</span></p>\n<p dir=\"ltr\"><span>The PIs have been using DV8 in their own software design and architecture courses, including professional training courses to developers from multinational corporations. It has also been used by hundreds of educators and researchers from various universities to support their software design research and education activities, to visualize and quantify design principles and design patterns, and to assess student homework and projects.&nbsp;&nbsp;</span></p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 02/20/2023<br>\n\t\t\t\t\tModified by: Yuanfang&nbsp;Cai</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n \n\n \n\n \nOur research over the course of this project has contributed a number of new design concepts, tools, and technologies that enable the continuous measuring and monitoring of software projects so that design problems that influence productivity or quality can be identified and fixed early to prevent severe loss due to architecture decay. In addition to publications, we also authored one patent, developed a software design analysis tool, DV8, and created a  design quality benchmark containing over 3500 open source projects (http://demo.archtimize.io/discover). The main research concepts that emerged in this project include the following: \nFeature Decoupling Level.  Previous software metrics cannot directly assess if and to what extent an architecture is ``good enough'' to support feature addition and evolution---one of the most valuable properties of a design. We contributed a concept called the feature space, and a formal definition of feature dependency, derived from a software project's revision history. We captured the dependency relations among the features of a system in a Feature Dependency Structure Matrix (FDSM), using features as first-class design elements. We also proposed a Feature Decoupling Level (FDL) metric that could be used to measure the level of independence among features. Our investigation of 17 open source projects showed that files within each feature space are much more likely to be changed together. \nActive Hotspot. Severe software degradation does not happen overnight, and it is often too late by the time an anti-pattern is detected. To detect these problems early, we proposed a concept called Active Hotspot,  files that are changed frequently to address different issues in a given time range. Using active hotspots, we can monitor software evolution by tracking the interactions among files revised to address issues and identify problematic structures earlier. Our study revealed that there exist just a few dominating active hotspots per project at any given time. Moreover, these dominating active hotspots persist over long time periods, and thus deserve special attention by project personnel. \nArchitectural Technical Debt.  Previous research revealed that sub-optimal architectural design in a software system can incur high maintenance ``interest\" over time. We contributed an approach to precisely locate Architectural Technical Debt (ATD) and to capture the trajectory of maintenance cost on each debt, so that their costs in a future release can be predicted. We also aggregated compound ATDs to capture the complicated relationship among multiple ATD instances, which should be examined together for effective refactoring solutions. We evaluated our approach on 18 real-world projects, and identified ATDs that persistently incur significant (up to 95% of) maintenance costs in most projects. The regression models can accurately predict the costs of the majority of (82% to 100%) debts in the next release of a system. By aggregating related ATDs, architects can focus on a small number of compound debts, which contain a relatively small number of source files, but account for a large portion of maintenance costs in their projects.\nIn this project, we also explored the impact of different dependency types on software measures and design debt detection, revealing that implicit dependencies caused by dynamic typing can incur more maintenance costs than explicit syntactic dependencies, and proposed an algorithm to make such implicit dependencies explicit. We also compared multiple technical debt detection tools, including our own DV8. Our comparison showed that 1) these tools report very different results even for the most common measures, such as code size and complexity; 2) they also differ dramatically in terms of the set of problematic files they identify, since each implements its own definitions of \"problematic\"; and 3) code-based measures, other than size and complexity, do not correlate well with a file's change-proneness or error-proneness. In contrast, co-change-related measures performed better. Our results suggest that, to identify files with true technical debt, co-change information must be considered. This study also revealed the need for the community to create benchmarks and data sets to assess the accuracy of software analysis tools in terms of commonly used measures.\n\n \nThe supporting tools and technology as a result of this project have already had an impact on the practice of software development.  DV8 has been licensed by several multinational corporations.  From our extensive collaborations with industry we have demonstrated that these tools and methods have the potential to change the management of the software industry by enabling the organization to continuously monitor the variation of software quality and productivity, and identify problematic design problems that incur bugs or slow down feature addition. \nThe PIs have been using DV8 in their own software design and architecture courses, including professional training courses to developers from multinational corporations. It has also been used by hundreds of educators and researchers from various universities to support their software design research and education activities, to visualize and quantify design principles and design patterns, and to assess student homework and projects.  \n\n \n\n\t\t\t\t\tLast Modified: 02/20/2023\n\n\t\t\t\t\tSubmitted by: Yuanfang Cai"
 }
}