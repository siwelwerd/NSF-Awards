{
 "awd_id": "1834213",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "TWC: Medium: Collaborative: Systems, Tools, and Techniques for Executing, Managing, and Securing SGX Programs",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2018-01-01",
 "awd_exp_date": "2022-05-31",
 "tot_intn_awd_amt": 461467.0,
 "awd_amount": 469467.0,
 "awd_min_amd_letter_date": "2018-04-27",
 "awd_max_amd_letter_date": "2020-03-02",
 "awd_abstract_narration": "The Intel Software Guard Extensions (SGX) is a new technology introduced to make secure and trustworthy computing in a hostile environment practical. However, SGX is merely just a set of instructions.  Its software support that includes the OS support, toolchain and libraries, is currently developed in a closed manner, limiting its impact only within the boundary of big companies such as Intel and Microsoft. Meanwhile, SGX does not automatically secure everything and it still faces various attacks such as controlled-side channel and enclave memory corruption.\r\n\r\nThis research investigates how to enable application developers to securely use the SGX instructions, with an open source software support including a toolchain, programming abstractions (e.g., library), and operating system support (e.g., kernel modules). In addition, this research systematically explores the systems and software defenses necessary to secure the SGX programs from the enclave itself and defeat the malicious use of SGX from the underlying OS.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Zhiqiang",
   "pi_last_name": "Lin",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Zhiqiang Lin",
   "pi_email_addr": "zlin@cse.ohio-state.edu",
   "nsf_id": "000610524",
   "pi_start_date": "2018-04-27",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Ohio State University",
  "inst_street_address": "1960 KENNY RD",
  "inst_street_address_2": "",
  "inst_city_name": "COLUMBUS",
  "inst_state_code": "OH",
  "inst_state_name": "Ohio",
  "inst_phone_num": "6146888735",
  "inst_zip_code": "432101016",
  "inst_country_name": "United States",
  "cong_dist_code": "03",
  "st_cong_dist_code": "OH03",
  "org_lgl_bus_name": "OHIO STATE UNIVERSITY, THE",
  "org_prnt_uei_num": "MN4MDDMN8529",
  "org_uei_num": "DLWBSLWAJWR1"
 },
 "perf_inst": {
  "perf_inst_name": "Ohio State University",
  "perf_str_addr": "2036 Neil Avenue",
  "perf_city_name": "Columbus",
  "perf_st_code": "OH",
  "perf_st_name": "Ohio",
  "perf_zip_code": "432101226",
  "perf_ctry_code": "US",
  "perf_cong_dist": "03",
  "perf_st_cong_dist": "OH03",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "171400",
   "pgm_ele_name": "Special Projects - CNS"
  },
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  },
  {
   "pgm_ref_code": "9178",
   "pgm_ref_txt": "UNDERGRADUATE EDUCATION"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 461467.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 8000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-40480b25-7fff-c921-a3bd-d20fae364509\"> </span></p>\n<p dir=\"ltr\"><span>The goal of this project was to understand the new threats in SGX and meanwhile develop new tools to secure them. Note that SGX is trusted execution environment (TEE) technology in the Skylake CPU. At a high level, it consists of a set of instructions that can be used to create secure regions (i.e., enclaves) to defeat attacks that aim to steal or tamper with the data within an enclave. However, SGX is merely a set of instructions; it lacks support from the OS and libraries, and programming languages. Meanwhile, designing a correct and secure SGX infrastructure is also far from straightforward: enclave programs rely on the support of an underlying OS, but their security models exclude the OS from the TCB. In addition, using SGX does not secure vulnerable enclave programs automatically; typical threats and attack vectors such as buffer overflows still exist. Therefore, in this proposed project, we seek to investigate the threats in TEEs and then develop infrastructure, tools, and libraries necessary to securely support enclave programs.</span></p>\n<p dir=\"ltr\"><strong>Intellectual Merit</strong>: One set of contributions from this project are in the area of techniques to make enclave code more secure (e.g., memory safe) and more flexible to deploy. Examples include SGX-Elide, which provides a dynamic update mechanism to protect the secrecy of the enclave code; Rust-SGX, which allows programmers to develop memory safe enclave programs using Rust programming language; vSGX, which provides a virtualized environment for running legacy enclave code designed for Intel's SGX on AMD's SEV and meanwhile enjoying the benefits of decoupling enclave from the hardware.&nbsp;</p>\n<p dir=\"ltr\">A second set of contributions from this project comes from studying the new threats and attacks in TEEs including SGX and SEV. The outcome in this vein includes SGX-spectra attack, which exploits speculative execution side-channel vulnerabilities to subvert the confidentiality of SGX enclaves; the attack exploiting the unprotected I/O Operations in AMD's Secure Encrypted Virtualization; and the CrossLine attack that allow the adversary to launch an attacker VM and change its address space identifier to that of the victim VM to impersonate the victim.&nbsp;</p>\n<p dir=\"ltr\"><strong>Broader Impacts</strong>: Today, TEEs such as Intel SGX and AMD SEV have become an important technology to protect the secrecy of the privacy sensitive data in both the edge and the cloud. This project revealed in depth the new threats faced by TEE,s and meanwhile demonstrated how to secure the enclave programs with tools such as SGX-Elide, Rust-SGX and vSGX. The project has also partially supported the training and research of eight students (including two undergraduate students).&nbsp; Key software components such as SGX-Elide, Rust-SGX, and vSGX have also been released as open source.</p>\n<div><span><br /></span></div>\n<p>&nbsp;</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 10/21/2022<br>\n\t\t\t\t\tModified by: Zhiqiang&nbsp;Lin</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n \nThe goal of this project was to understand the new threats in SGX and meanwhile develop new tools to secure them. Note that SGX is trusted execution environment (TEE) technology in the Skylake CPU. At a high level, it consists of a set of instructions that can be used to create secure regions (i.e., enclaves) to defeat attacks that aim to steal or tamper with the data within an enclave. However, SGX is merely a set of instructions; it lacks support from the OS and libraries, and programming languages. Meanwhile, designing a correct and secure SGX infrastructure is also far from straightforward: enclave programs rely on the support of an underlying OS, but their security models exclude the OS from the TCB. In addition, using SGX does not secure vulnerable enclave programs automatically; typical threats and attack vectors such as buffer overflows still exist. Therefore, in this proposed project, we seek to investigate the threats in TEEs and then develop infrastructure, tools, and libraries necessary to securely support enclave programs.\nIntellectual Merit: One set of contributions from this project are in the area of techniques to make enclave code more secure (e.g., memory safe) and more flexible to deploy. Examples include SGX-Elide, which provides a dynamic update mechanism to protect the secrecy of the enclave code; Rust-SGX, which allows programmers to develop memory safe enclave programs using Rust programming language; vSGX, which provides a virtualized environment for running legacy enclave code designed for Intel's SGX on AMD's SEV and meanwhile enjoying the benefits of decoupling enclave from the hardware. \nA second set of contributions from this project comes from studying the new threats and attacks in TEEs including SGX and SEV. The outcome in this vein includes SGX-spectra attack, which exploits speculative execution side-channel vulnerabilities to subvert the confidentiality of SGX enclaves; the attack exploiting the unprotected I/O Operations in AMD's Secure Encrypted Virtualization; and the CrossLine attack that allow the adversary to launch an attacker VM and change its address space identifier to that of the victim VM to impersonate the victim. \nBroader Impacts: Today, TEEs such as Intel SGX and AMD SEV have become an important technology to protect the secrecy of the privacy sensitive data in both the edge and the cloud. This project revealed in depth the new threats faced by TEE,s and meanwhile demonstrated how to secure the enclave programs with tools such as SGX-Elide, Rust-SGX and vSGX. The project has also partially supported the training and research of eight students (including two undergraduate students).  Key software components such as SGX-Elide, Rust-SGX, and vSGX have also been released as open source.\n\n\n\n \n\n \n\n\t\t\t\t\tLast Modified: 10/21/2022\n\n\t\t\t\t\tSubmitted by: Zhiqiang Lin"
 }
}