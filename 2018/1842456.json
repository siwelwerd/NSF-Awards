{
 "awd_id": "1842456",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "EAGER: Finding Semantic Security Bugs with Pseudo-Oracle Testing",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2018-10-01",
 "awd_exp_date": "2020-09-30",
 "tot_intn_awd_amt": 200000.0,
 "awd_amount": 200000.0,
 "awd_min_amd_letter_date": "2018-08-11",
 "awd_max_amd_letter_date": "2018-08-11",
 "awd_abstract_narration": "Semantic security bugs cause serious vulnerabilities across a wide range of software. For example, in a recent incident, attackers exploited a semantic security bug in Apache Struts to steal sensitive personal data of up to 143 million customers from Equifax servers. In fact, such vulnerabilities are quite common in practice. The total number of Common Vulnerabilities and Exposure Identifiers (CVEs) assigned to different types of semantic security bugs exceeds 2,000 just this year alone. The goal of this project is to improve security and reliability by automatically detecting such semantic vulnerabilities in critical software. Automatically detecting these bugs is hard because unlike crash bugs they may not show any obvious side effects. In contrast, semantic security bugs (e.g., bypassing security checks, gaining access to sensitive information, escalating privileges) usually result from violation of high-level safety/security specifications which, in practice, are rarely written formally. This project will investigate whether learning domain-specific metamorphic relations can help in detecting semantic bugs.  \r\n\r\nIn Software Engineering, metamorphic relations, which correlate  outputs from multiple executions of a program with different inputs, have been shown to be effective at finding simple functional bugs. While metamorphic relations have promise to detect semantic security vulnerabilities, they are not able to detect semantic security vulnerabilities in their current form, as security properties cannot be expressed as simple input-output based properties. The approach uses pseudo-oracle testing techniques like differential testing and metamorphic testing. The project will use targeted path exploration techniques, with automata-learning algorithms to discover metamorphic testing rules. The project will learn how the semantics of metamorphic relations can be augmented to detect semantic security bugs. The research envisions a unified framework based on pseudo-random Oracles, which can automatically detect semantic security bugs without the need for manually creating formal specifications to compare program behaviors of related executions. As a first step, the objective of this EAGER project is to empirically measure whether there is a comprehensive range of semantically expressive pseudo-oracle relations that can detect semantic security vulnerabilities.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Baishakhi",
   "pi_last_name": "Ray",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Baishakhi Ray",
   "pi_email_addr": "rayb@cs.columbia.edu",
   "nsf_id": "000701468",
   "pi_start_date": "2018-08-11",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Gail",
   "pi_last_name": "Kaiser",
   "pi_mid_init": "E",
   "pi_sufx_name": "",
   "pi_full_name": "Gail E Kaiser",
   "pi_email_addr": "kaiser@cs.columbia.edu",
   "nsf_id": "000094973",
   "pi_start_date": "2018-08-11",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Suman",
   "pi_last_name": "Jana",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Suman Jana",
   "pi_email_addr": "suman@cs.columbia.edu",
   "nsf_id": "000701617",
   "pi_start_date": "2018-08-11",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Columbia University",
  "inst_street_address": "615 W 131ST ST",
  "inst_street_address_2": "MC 8741",
  "inst_city_name": "NEW YORK",
  "inst_state_code": "NY",
  "inst_state_name": "New York",
  "inst_phone_num": "2128546851",
  "inst_zip_code": "100277922",
  "inst_country_name": "United States",
  "cong_dist_code": "13",
  "st_cong_dist_code": "NY13",
  "org_lgl_bus_name": "THE TRUSTEES OF COLUMBIA UNIVERSITY IN THE CITY OF NEW YORK",
  "org_prnt_uei_num": "",
  "org_uei_num": "F4N1QNPB95M4"
 },
 "perf_inst": {
  "perf_inst_name": "The Trustees of Columbia University in the City of New York",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "NY",
  "perf_st_name": "New York",
  "perf_zip_code": "100277922",
  "perf_ctry_code": "US",
  "perf_cong_dist": "13",
  "perf_st_cong_dist": "NY13",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "7916",
   "pgm_ref_txt": "EAGER"
  },
  {
   "pgm_ref_code": "9102",
   "pgm_ref_txt": "WOMEN, MINORITY, DISABLED, NEC"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 200000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Automated detection of software vulnerabilities is a fundamental problem in software security. Conventional program analysis techniques either suffer from high false positives (reporting software as vulnerable when it is not) or false negatives (missing vulnerabilities in other software). Recent progress in Machine Learning (ML) has resulted in a surge of interest in applying ML for automated vulnerability detection. Several recent studies have demonstrated promising results achieving high accuracy (up to 97%) at detecting vulnerabilities.&nbsp;</p>\n<p>We systematically measured the generalizability of four state-of-the-art ML neural network architectures that reported achieving high accuracy (up to 97%). Our results demonstrate that none of these ML systems generalize beyond their own datasets due to implicit biases in these datasets introduced during the data collection and labeling process. We developed a taxonomy of different potential biases affecting venerability datasets and a measurement methodology to accurately estimate their effects. We used our bias measurement methodology to quantitatively estimate different classes of biases in the four popular vulnerability datasets.&nbsp;</p>\n<p><br />We collected a balanced real-world dataset from developer/user reported vulnerabilities from two popular real-world projects (Chromium and Debian) and demonstrate that all four of the tested ML systems drop to around 50% accuracy on this dataset. This demonstrates that dataset bias is a crucial issue in existing ML-based vulnerability detection schemes. We prepared a set of best practices that can help future researchers minimize such biases.&nbsp; The corresponding paper is&nbsp; currenltly under review.&nbsp; &nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 03/22/2021<br>\n\t\t\t\t\tModified by: Baishakhi&nbsp;Ray</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nAutomated detection of software vulnerabilities is a fundamental problem in software security. Conventional program analysis techniques either suffer from high false positives (reporting software as vulnerable when it is not) or false negatives (missing vulnerabilities in other software). Recent progress in Machine Learning (ML) has resulted in a surge of interest in applying ML for automated vulnerability detection. Several recent studies have demonstrated promising results achieving high accuracy (up to 97%) at detecting vulnerabilities. \n\nWe systematically measured the generalizability of four state-of-the-art ML neural network architectures that reported achieving high accuracy (up to 97%). Our results demonstrate that none of these ML systems generalize beyond their own datasets due to implicit biases in these datasets introduced during the data collection and labeling process. We developed a taxonomy of different potential biases affecting venerability datasets and a measurement methodology to accurately estimate their effects. We used our bias measurement methodology to quantitatively estimate different classes of biases in the four popular vulnerability datasets. \n\n\nWe collected a balanced real-world dataset from developer/user reported vulnerabilities from two popular real-world projects (Chromium and Debian) and demonstrate that all four of the tested ML systems drop to around 50% accuracy on this dataset. This demonstrates that dataset bias is a crucial issue in existing ML-based vulnerability detection schemes. We prepared a set of best practices that can help future researchers minimize such biases.  The corresponding paper is  currenltly under review.   \n\n\t\t\t\t\tLast Modified: 03/22/2021\n\n\t\t\t\t\tSubmitted by: Baishakhi Ray"
 }
}