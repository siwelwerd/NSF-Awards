{
 "awd_id": "1816845",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SaTC: CORE: Small: Characterizing Architectural Vulnerabilities",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2018-10-01",
 "awd_exp_date": "2022-09-30",
 "tot_intn_awd_amt": 439135.0,
 "awd_amount": 450135.0,
 "awd_min_amd_letter_date": "2018-08-30",
 "awd_max_amd_letter_date": "2020-04-13",
 "awd_abstract_narration": "Software architecture plays a fundamental role in addressing security requirements by enforcing the necessary authentication, authorization, confidentiality, data integrity, privacy, accountability, availability and non-repudiation requirements, even when the system is under attack. Therefore, a design flaw in a software system's architecture could lead to attacks with enormous consequences. Most of the research, techniques, and tools that address security focus on secure coding. However, it is difficult to achieve a high level of security (and other quality attributes) by focusing solely at the coding level. Architectural design flaws can overwhelm even the most heroic coding efforts, and ignoring such issues can result in backdoors into systems and severe software vulnerabilities.\r\nThis project presents the transformative notion of a Common Architectural Weakness Enumeration (CAWE), defined as a catalog of commonly-occurring flaws in the design and implementation of a system's security architecture that can result in severe vulnerabilities and security breaches.  Additionally, this work will develop a novel approach for automating the detection of common architectural weaknesses. It combines concepts and techniques from the software reflexion model, program analysis, as well as pattern matching techniques to develop new algorithms for mapping CAWEs to an application's source code and detecting potential architectural vulnerability.\r\n \r\nIn this project, software vulnerabilities will be extracted from the National Vulnerability Database (NVD) and large scale empirical studies will be conducted to investigate relationships between architectural flaws and software vulnerabilities. This project is expected to advance software security knowledge on the theoretical foundation, concepts, and automated tools to (1) characterize architectural vulnerabilities and security design flaws that can result in severe security breaches, and (2) automatically identify architectural weaknesses in the source code of a system and suggest appropriate mitigation techniques to fix them. The results of the project will contribute towards enhancing the state of practice for software assurance and cyber security. The CAWE catalog will provide the tool development sector of software security industry with benchmarks to assess existing software assurance tools. Our automated technique to detect architectural weaknesses will complement existing static and dynamic source code analysis techniques. Ongoing research opportunities will be provided for a diverse group of undergraduate and graduate students. Research and pedagogical materials will be developed and made publicly available for use in a variety of courses in software architecture and software security.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Mehdi",
   "pi_last_name": "Mirakhorli",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Mehdi Mirakhorli",
   "pi_email_addr": "mehdi23@hawaii.edu",
   "nsf_id": "000666901",
   "pi_start_date": "2018-08-30",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Rochester Institute of Tech",
  "inst_street_address": "1 LOMB MEMORIAL DR",
  "inst_street_address_2": "",
  "inst_city_name": "ROCHESTER",
  "inst_state_code": "NY",
  "inst_state_name": "New York",
  "inst_phone_num": "5854757987",
  "inst_zip_code": "146235603",
  "inst_country_name": "United States",
  "cong_dist_code": "25",
  "st_cong_dist_code": "NY25",
  "org_lgl_bus_name": "ROCHESTER INSTITUTE OF TECHNOLOGY",
  "org_prnt_uei_num": "",
  "org_uei_num": "J6TWTRKC1X14"
 },
 "perf_inst": {
  "perf_inst_name": "Rochester Institute of Tech",
  "perf_str_addr": "134 Lomb Memorial Dr",
  "perf_city_name": "Rochester",
  "perf_st_code": "NY",
  "perf_st_name": "New York",
  "perf_zip_code": "146235608",
  "perf_ctry_code": "US",
  "perf_cong_dist": "25",
  "perf_st_cong_dist": "NY25",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "171400",
   "pgm_ele_name": "Special Projects - CNS"
  },
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "9178",
   "pgm_ref_txt": "UNDERGRADUATE EDUCATION"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 439135.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 11000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Software architecture plays a fundamental role in addressing quality goals, such as security, privacy, safety, dependability, and performance. In order to satisfy a particular security requirement, architects typically consider several alternative architectural solutions, evaluate the trade-offs between them, identify the associated risks and costs of each, and finally select the best option, which should incur the least risks. Architectural design decisions are often based on well-known architectural tactics, defined as reusable techniques for achieving specific quality concerns. Security tactics provide solutions for enforcing the necessary authentication, authorization, confidentiality, data integrity, privacy, accountability, availability, safety and non-repudiation requirements, even when the system is under attack. Previous empirical studies report that about 50% of security problems result from software design flaws, such as misunderstanding architecturally significant requirements, poor architectural implementation, violation of design principles in the source code, and degradations of the security architecture. Flaws in a software system&rsquo;s architecture can greatly impact various security issues, providing opportunities and flexibility to malicious users. Therefore, with a Design flaw in a software system&rsquo;s architecture, successful attacks could lead to enormous consequences.</p>\n<p>This project conducted several empirical studies to characterize architectural vulnerabilities. It provided an enhanced understanding of design weaknesses through a novel catalog of Common Architectural Weaknesses Enumeration (CAWE). Furthermore, it developed new techniques for detecting sample design weaknesses.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 02/19/2023<br>\n\t\t\t\t\tModified by: Mehdi&nbsp;Mirakhorli</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nSoftware architecture plays a fundamental role in addressing quality goals, such as security, privacy, safety, dependability, and performance. In order to satisfy a particular security requirement, architects typically consider several alternative architectural solutions, evaluate the trade-offs between them, identify the associated risks and costs of each, and finally select the best option, which should incur the least risks. Architectural design decisions are often based on well-known architectural tactics, defined as reusable techniques for achieving specific quality concerns. Security tactics provide solutions for enforcing the necessary authentication, authorization, confidentiality, data integrity, privacy, accountability, availability, safety and non-repudiation requirements, even when the system is under attack. Previous empirical studies report that about 50% of security problems result from software design flaws, such as misunderstanding architecturally significant requirements, poor architectural implementation, violation of design principles in the source code, and degradations of the security architecture. Flaws in a software system\u2019s architecture can greatly impact various security issues, providing opportunities and flexibility to malicious users. Therefore, with a Design flaw in a software system\u2019s architecture, successful attacks could lead to enormous consequences.\n\nThis project conducted several empirical studies to characterize architectural vulnerabilities. It provided an enhanced understanding of design weaknesses through a novel catalog of Common Architectural Weaknesses Enumeration (CAWE). Furthermore, it developed new techniques for detecting sample design weaknesses.\n\n\t\t\t\t\tLast Modified: 02/19/2023\n\n\t\t\t\t\tSubmitted by: Mehdi Mirakhorli"
 }
}