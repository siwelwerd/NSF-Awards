{
 "awd_id": "1815621",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SaTC: CORE: Small: MOSE: Automated Detection of Module-Specific Semantic Errors",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2018-09-01",
 "awd_exp_date": "2021-08-31",
 "tot_intn_awd_amt": 495277.0,
 "awd_amount": 495277.0,
 "awd_min_amd_letter_date": "2018-08-24",
 "awd_max_amd_letter_date": "2018-08-24",
 "awd_abstract_narration": "System software such as operating system kernels, libraries, and application frameworks provide the foundation for all of the functionality of computing devices, from personal computers and servers to mobile and embedded devices. Security vulnerabilities in system software are particularly serious because they can undermine any of the software running on a device.  The most common vulnerabilities in system software are semantic errors such as missing security checks. Semantic errors, if exploited successfully, can result in critical system attacks such as privilege escalation, remote code execution, and information leaks. For instance, vulnerable devices might come under the complete control of an adversary and reveal users' private information.  Despite this importance, detecting semantic errors is challenging because semantic errors do not have uniform patterns and often involve complicated code logic.  Previous research on detecting semantic errors mainly employs statistical analysis or manual specification to create rules for semantic checking, and often misses module-specific semantic errors involving the diverse functions and variables that each has only a few uses.  This project aims to automatically detect such module-specific semantic errors in system software by developing automated techniques for identifying module-specific functions and variables, and generating concrete checking rules. This project will also develop a novel detection system to precisely detect module-specific semantic errors.  By automatically detecting classes of common semantic errors in widely used system software, this project significantly improves the security of ubiquitous computer devices.  The broader educational activities of this project include integrating research with outreach, organizing Capture The Flag competitions among universities and industries in Minnesota, and developing new interdisciplinary courses.\r\n\r\nThis research project aims to detect module-specific semantic errors, a new and wide class of semantic error, which have been otherwise missed by previous detection that employs statistical analysis or manual specification to generate rules for semantic checking. First, it develops novel techniques to automatically identify security-related functions and variables, without requiring multiple uses of them. These techniques include error-code analysis, usage analysis, and behavior analysis. Second, it empirically analyzes identified functions and variables, and categorizes them based on their security properties and contexts. For each category, the research further develops meta-rules specifying how each category should be correctly used. For example, a range check should be enforced if a variable is used as a size parameter of memory allocation. Meta-rules are general, and can be assembled and instantiated to generate concrete checking rules for each module-specific function or variable. Third, the project develops a staged approach and a set of static analysis and symbolic execution techniques to precisely detect previously unknown module-specific semantic errors at scale for system software. These techniques can be evaluated on widely used system software such as the Linux kernel.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Kangjie",
   "pi_last_name": "Lu",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Kangjie Lu",
   "pi_email_addr": "kjlu@umn.edu",
   "nsf_id": "000763690",
   "pi_start_date": "2018-08-24",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Stephen",
   "pi_last_name": "McCamant",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Stephen McCamant",
   "pi_email_addr": "mccamant@cs.umn.edu",
   "nsf_id": "000630498",
   "pi_start_date": "2018-08-24",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Minnesota-Twin Cities",
  "inst_street_address": "2221 UNIVERSITY AVE SE STE 100",
  "inst_street_address_2": "",
  "inst_city_name": "MINNEAPOLIS",
  "inst_state_code": "MN",
  "inst_state_name": "Minnesota",
  "inst_phone_num": "6126245599",
  "inst_zip_code": "554143074",
  "inst_country_name": "United States",
  "cong_dist_code": "05",
  "st_cong_dist_code": "MN05",
  "org_lgl_bus_name": "REGENTS OF THE UNIVERSITY OF MINNESOTA",
  "org_prnt_uei_num": "",
  "org_uei_num": "KABJZBBJ4B54"
 },
 "perf_inst": {
  "perf_inst_name": "University of Minnesota-Twin Cities",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "MN",
  "perf_st_name": "Minnesota",
  "perf_zip_code": "554550167",
  "perf_ctry_code": "US",
  "perf_cong_dist": "05",
  "perf_st_cong_dist": "MN05",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 495277.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The MOSE (Automated Detection of Module-Specific Semantic Errors) project developed new methods and tools for finding a broad class of bugs, module-specific semantic errors, in complex system software such as OS kernels. The project identified that module-specific semantic errors involve custom logic, so traditional standard detection rules may not apply.&nbsp; &nbsp;The project detects such bugs by (1) identifying custom code such as custom memory allocators, (2) inferring rules for using the custom code, and (3) developing automated and scalable analysis tools. As a result, the MOSE project has found more than one thousand such bugs in the Linux kernel, the FreeBSD kernel, the FireFox browser, and OpenSSL. Multiple tools have been open-sourced and adopted by both academia and industry. Findings of the project have been integrated into courses at UMN to help students write secure and correct code, in the forms of test cases, labs, and course projects; the courses include CSCI 4061: Introduction to Operating Systems, CSCI 5271: Introduction to Computer Security, and CSCI 8271: Security and Privacy in Computing. The project also allowed to train graduate students in program analysis and system building, who are continuing to work on this topic.<br /><br />There are several lines of work with the project. The first is identifying critical custom code, including error handling, security checks, allocation/deallocation, and function pairs. We employed static program analysis, data mining, and NLP for the identification. The second is detecting various classes of bugs involving custom code, including memory leaks, disordered&nbsp; and exaggerated error handling, refcount bugs, and missing check bugs. The last part is to developing scalable and precise analysis techniques, including indirect-call analysis, point-to analysis, and path-based selective symbolic execution. As an extra work, we also analyzed the impacts of the bugs to prioritize bug patching. The project has resulted in more than ten peer-reviewed papers, most of which are published at top-tier conferences.&nbsp;<br /><br />Overall, the project helped find many new bugs in important system software and improve the their security; the project also laid foundations, with new techniques and related tools, for future bug finding in complex programs.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 01/17/2022<br>\n\t\t\t\t\tModified by: Kangjie&nbsp;Lu</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThe MOSE (Automated Detection of Module-Specific Semantic Errors) project developed new methods and tools for finding a broad class of bugs, module-specific semantic errors, in complex system software such as OS kernels. The project identified that module-specific semantic errors involve custom logic, so traditional standard detection rules may not apply.   The project detects such bugs by (1) identifying custom code such as custom memory allocators, (2) inferring rules for using the custom code, and (3) developing automated and scalable analysis tools. As a result, the MOSE project has found more than one thousand such bugs in the Linux kernel, the FreeBSD kernel, the FireFox browser, and OpenSSL. Multiple tools have been open-sourced and adopted by both academia and industry. Findings of the project have been integrated into courses at UMN to help students write secure and correct code, in the forms of test cases, labs, and course projects; the courses include CSCI 4061: Introduction to Operating Systems, CSCI 5271: Introduction to Computer Security, and CSCI 8271: Security and Privacy in Computing. The project also allowed to train graduate students in program analysis and system building, who are continuing to work on this topic.\n\nThere are several lines of work with the project. The first is identifying critical custom code, including error handling, security checks, allocation/deallocation, and function pairs. We employed static program analysis, data mining, and NLP for the identification. The second is detecting various classes of bugs involving custom code, including memory leaks, disordered  and exaggerated error handling, refcount bugs, and missing check bugs. The last part is to developing scalable and precise analysis techniques, including indirect-call analysis, point-to analysis, and path-based selective symbolic execution. As an extra work, we also analyzed the impacts of the bugs to prioritize bug patching. The project has resulted in more than ten peer-reviewed papers, most of which are published at top-tier conferences. \n\nOverall, the project helped find many new bugs in important system software and improve the their security; the project also laid foundations, with new techniques and related tools, for future bug finding in complex programs.\n\n\t\t\t\t\tLast Modified: 01/17/2022\n\n\t\t\t\t\tSubmitted by: Kangjie Lu"
 }
}