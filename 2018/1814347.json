{
 "awd_id": "1814347",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CSR: Small: A Multi-Layered Deniable Steganographic File System",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Jason Hallstrom",
 "awd_eff_date": "2018-07-01",
 "awd_exp_date": "2023-06-30",
 "tot_intn_awd_amt": 500000.0,
 "awd_amount": 516000.0,
 "awd_min_amd_letter_date": "2018-06-21",
 "awd_max_amd_letter_date": "2020-03-30",
 "awd_abstract_narration": "Journalists, aid workers, and democracy advocates all put themselves in harm's way for the benefit of others. Yet, there is a glaring need for them to store data securely. Typically, secret data is protected with encryption that is assumed unbreakable. Yet, if those in a hostile environment are caught with encrypted data, they could be forced to comply through coercion or threats of bodily harm. The investigators propose to secure data in plain sight by hiding it so that the operating system does not even know it is there. Therefore, the owner can completely deny the existence of the data.\r\n\r\nThe Steganographic file system operates through the use of an external virtual block device driver. It utilizes secret sharing, external entropy sources, and erasure coding to store data deniably and reliably within the unallocated space of an existing file system. A set of data blocks to be hidden are combined with entropy blocks through erasure coding to produce a set of obfuscated carrier blocks that are then indistinguishable from other pseudorandom blocks on the disk. A subset of these blocks is then required to reconstruct the data. The system is information theoretically secure without knowledge of the entropy blocks.\r\n\r\nThis system will be the first fully deniable, secure, and tunable steganographic file system. All previous attempts might attain security or performance but sacrifice deniability. The project will not only push the boundaries of modern steganography, but the investigators will build a fully working system that can survive intensive forensic examination. This will allow users in the field to have a reliable, secure means of carrying information where the presence of that information does not endanger their lives.\r\n\r\nThe investigators plan to maintain the project well beyond the project period through publicly available sources such as Bitbucket or Github, as well as on the Storage and Systems Research Center's web page. At some point the investigators intend to include the system in the Linux source tree.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Darrell",
   "pi_last_name": "Long",
   "pi_mid_init": "D",
   "pi_sufx_name": "",
   "pi_full_name": "Darrell D Long",
   "pi_email_addr": "darrell@cs.ucsc.edu",
   "nsf_id": "000470073",
   "pi_start_date": "2018-06-21",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Ethan",
   "pi_last_name": "Miller",
   "pi_mid_init": "L",
   "pi_sufx_name": "",
   "pi_full_name": "Ethan L Miller",
   "pi_email_addr": "elm@ucsc.edu",
   "nsf_id": "000230226",
   "pi_start_date": "2018-06-21",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of California-Santa Cruz",
  "inst_street_address": "1156 HIGH ST",
  "inst_street_address_2": "",
  "inst_city_name": "SANTA CRUZ",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "8314595278",
  "inst_zip_code": "950641077",
  "inst_country_name": "United States",
  "cong_dist_code": "19",
  "st_cong_dist_code": "CA19",
  "org_lgl_bus_name": "UNIVERSITY OF CALIFORNIA SANTA CRUZ",
  "org_prnt_uei_num": "",
  "org_uei_num": "VXUFPE4MCZH5"
 },
 "perf_inst": {
  "perf_inst_name": "University of California-Santa Cruz",
  "perf_str_addr": "1156 High Street",
  "perf_city_name": "Santa Cruz",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "950641077",
  "perf_ctry_code": "US",
  "perf_cong_dist": "19",
  "perf_st_cong_dist": "CA19",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "171400",
   "pgm_ele_name": "Special Projects - CNS"
  },
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 500000.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 16000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Individuals such as journalists, human rights activists, and undercover law enforcement often possess sensitive data in surveilled environments. While simple encryption of this data effectively renders the data unreadable to an adversary, the mere presence of an encrypted file can arouse suspicion and incur significant risk for the user. To combat this, it is necessary to provide both data privacy and plausible deniability. The very existence of the data must be completely hidden. Previous attempts at plausible deniability through steganographic file systems required either the encapsulating public file system or the machine&rsquo;s operating system to be aware of the underlying filesystem. This leaves identifiable markers such as file system drivers, thin provisioning layers, or network connections that betray the existence of the hidden file system to an adversary. While these systems may be secure against an inattentive adversary, they are vulnerable to forensic analysis.</p>\n<p>To solve this problem, we have implemented Artifice. This truly deniable steganographic file system hides data within the unallocated space of a publicly visible file system that does not know of Artifice&rsquo;s existence. In our approach, one or more data blocks are split using secret sharing to produce a set of carrier blocks that are indistinguishable from other pseudorandom-appearing data on the disk. These carrier blocks are then written to the free space of the public file system.</p>\n<p>Our recent efforts and outcomes revolve around Lethe, a system for equipping storage systems with the ability to securely delete data at a fine-grained granularity. With Lethe's cryptographic erasure-based design, free space on a disk is filled with pseudorandom information, which provides an ideal environment for Artifice to hide in.</p>\n<p>Though perfect for use with Artifice, the main goal of the Lethe project is to develop a novel technique to equip existing systems with the ability to perform efficient, timely, and fine-grained secure deletion of data. This is important because existing systems are not well-equipped to provide fine-grained secure deletion in response to consumer data protection laws such as the European Union&rsquo;s GDPR and California&rsquo;s CCPA. Lethe&rsquo;s goal is to provide guarantees of fine-grained secure deletion with little (if any) change on existing system code, and also to work regardless of storage medium. This makes Lethe the first secure delete system that is able to truly treat storage as a black box.</p>\n<p><span id=\"docs-internal-guid-b0f431bd-7fff-71ba-bb18-7900211a4dee\">&nbsp;</span></p>\n<p dir=\"ltr\"><span>Another major goal of Lethe is to formalize the notion of secure deletion with security definitions seen in classical cryptography texts. Having these definitions will not only allow us to model, compare, and contrast Lethe against prior secure delete systems, but enable us to understand the requirements required for efficient secure deletion. They will also provide a taxonomy on various techniques within the field of secure deletion.</span></p>\n<p>&nbsp;</p>\n<p><span id=\"docs-internal-guid-e07364cc-7fff-eba8-46c5-8f8033ec7db8\">&nbsp;</span></p>\n<p dir=\"ltr\"><span>We have implemented our proof-of-concept by integrating Lethe into the Zettabyte File System (ZFS), a widely-used commercial file system. We have also just about finished a more production-ready version of Lethe in the form of a Rust library. Rust was chosen for a variety of reasons: memory safety, performance, and expressive power. The expressiveness of Rust is what allowed us to elegantly implement Lethe for use with any storage system, be it a local file system, or even network-attached storage.</span></p>\n<p dir=\"ltr\"><span>We have also started formalizing secure deletion with mathematical models and security definitions. These definitions, although immature, have already allowed us to better discuss and understand what it means to securely delete data and the invariants that secure delete systems must uphold.</span></p>\n<p>To disseminate our work on Lethe, w<span id=\"docs-internal-guid-16fbef72-7fff-3eee-190f-5917908fc4d5\"><span>e&rsquo;ve submitted papers to OSDI &lsquo;23, and then to CHEOPS &lsquo;23, where it was accepted. We&rsquo;ve also presented Lethe at FMS &lsquo;23 as part of the student development program.</span></span></p>\n<p>&nbsp;</p>\n<p><span id=\"docs-internal-guid-8ce52298-7fff-0136-e7f0-e7ae99ed3c43\">&nbsp;</span></p>\n<p dir=\"ltr\"><span>Our planned future work on Lethe is to further develop its core routines in the Rust library and to build a proof-of-concept system that provides secure deletion for RocksDB, a popular key-value storage solution, without any modification. This proof-of-concept will demonstrate Lethe&rsquo;s flexibility and how easy Lethe is to adopt and adapt to existing systems. We are still considering which other systems we might apply Lethe to. We plan to use these results in future publications of Lethe at OSDI &lsquo;24.</span></p>\n<p dir=\"ltr\"><span>We will also continue our work on formalizing secure deletion. We plan to publish our results at IEEE Security &amp; Privacy &lsquo;24 and perhaps USENIX Security &lsquo;24.</span></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 10/12/2023<br>\n\t\t\t\t\tModified by: Darrell&nbsp;D&nbsp;Long</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nIndividuals such as journalists, human rights activists, and undercover law enforcement often possess sensitive data in surveilled environments. While simple encryption of this data effectively renders the data unreadable to an adversary, the mere presence of an encrypted file can arouse suspicion and incur significant risk for the user. To combat this, it is necessary to provide both data privacy and plausible deniability. The very existence of the data must be completely hidden. Previous attempts at plausible deniability through steganographic file systems required either the encapsulating public file system or the machine\u2019s operating system to be aware of the underlying filesystem. This leaves identifiable markers such as file system drivers, thin provisioning layers, or network connections that betray the existence of the hidden file system to an adversary. While these systems may be secure against an inattentive adversary, they are vulnerable to forensic analysis.\n\nTo solve this problem, we have implemented Artifice. This truly deniable steganographic file system hides data within the unallocated space of a publicly visible file system that does not know of Artifice\u2019s existence. In our approach, one or more data blocks are split using secret sharing to produce a set of carrier blocks that are indistinguishable from other pseudorandom-appearing data on the disk. These carrier blocks are then written to the free space of the public file system.\n\nOur recent efforts and outcomes revolve around Lethe, a system for equipping storage systems with the ability to securely delete data at a fine-grained granularity. With Lethe's cryptographic erasure-based design, free space on a disk is filled with pseudorandom information, which provides an ideal environment for Artifice to hide in.\n\nThough perfect for use with Artifice, the main goal of the Lethe project is to develop a novel technique to equip existing systems with the ability to perform efficient, timely, and fine-grained secure deletion of data. This is important because existing systems are not well-equipped to provide fine-grained secure deletion in response to consumer data protection laws such as the European Union\u2019s GDPR and California\u2019s CCPA. Lethe\u2019s goal is to provide guarantees of fine-grained secure deletion with little (if any) change on existing system code, and also to work regardless of storage medium. This makes Lethe the first secure delete system that is able to truly treat storage as a black box.\n\n \nAnother major goal of Lethe is to formalize the notion of secure deletion with security definitions seen in classical cryptography texts. Having these definitions will not only allow us to model, compare, and contrast Lethe against prior secure delete systems, but enable us to understand the requirements required for efficient secure deletion. They will also provide a taxonomy on various techniques within the field of secure deletion.\n\n \n\n \nWe have implemented our proof-of-concept by integrating Lethe into the Zettabyte File System (ZFS), a widely-used commercial file system. We have also just about finished a more production-ready version of Lethe in the form of a Rust library. Rust was chosen for a variety of reasons: memory safety, performance, and expressive power. The expressiveness of Rust is what allowed us to elegantly implement Lethe for use with any storage system, be it a local file system, or even network-attached storage.\nWe have also started formalizing secure deletion with mathematical models and security definitions. These definitions, although immature, have already allowed us to better discuss and understand what it means to securely delete data and the invariants that secure delete systems must uphold.\n\nTo disseminate our work on Lethe, we\u2019ve submitted papers to OSDI \u201823, and then to CHEOPS \u201823, where it was accepted. We\u2019ve also presented Lethe at FMS \u201823 as part of the student development program.\n\n \n\n \nOur planned future work on Lethe is to further develop its core routines in the Rust library and to build a proof-of-concept system that provides secure deletion for RocksDB, a popular key-value storage solution, without any modification. This proof-of-concept will demonstrate Lethe\u2019s flexibility and how easy Lethe is to adopt and adapt to existing systems. We are still considering which other systems we might apply Lethe to. We plan to use these results in future publications of Lethe at OSDI \u201824.\nWe will also continue our work on formalizing secure deletion. We plan to publish our results at IEEE Security &amp; Privacy \u201824 and perhaps USENIX Security \u201824.\n\n \n\n \n\n \n\n\t\t\t\t\tLast Modified: 10/12/2023\n\n\t\t\t\t\tSubmitted by: Darrell D Long"
 }
}