{
 "awd_id": "1811894",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF:  Small:  Verified High Performance Data Structure Implementations",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2018-10-01",
 "awd_exp_date": "2022-09-30",
 "tot_intn_awd_amt": 499999.0,
 "awd_amount": 515999.0,
 "awd_min_amd_letter_date": "2018-06-22",
 "awd_max_amd_letter_date": "2019-05-16",
 "awd_abstract_narration": "Computational infrastructures of the 21st-century require data processing engines that receive, store, analyze, and provide massive amounts of data, with large numbers of requests arriving in rapid succession. To achieve the necessary responsiveness, these systems process many requests simultaneously and use sophisticated techniques to ensure that concurrent requests do not interfere with each other. These techniques are highly error-prone, and mistakes in the design or implementation of a system can lead to incorrect responses to queries and the storing of incorrect information. The goal of this project is to develop techniques for proving that existing systems are correctly implemented, and for building new systems that are correct by construction. The project's novelties are the principles used to show that sophisticated concurrent programs produce the correct results, and the application of these principles to real-world high-performance storage systems. The project's impacts are more reliable software for storage systems, including cloud services, web servers, and data warehouses, allowing people and businesses to rely on the systems that store their data online.\r\n\r\nThe project builds on recent advances in concurrent separation logic and machine-checked program verification, which allow researchers to prove that concurrent programs as written in languages like C correctly implement high-level specifications. In particular, the project examines the effects of relaxed-memory operations, which give higher performance at the cost of complicating the programmer's model of memory behavior. These operations are used in programming patterns such as optimistic concurrency control, which feature in several state-of-the-art database implementations. The project involves scaling up relaxed-memory reasoning to apply to C programs at a realistic scale, and showing how relaxed-memory reasoning at the level of individual operations relates to high-level database correctness properties like snapshot isolation. The upshot of such reasoning is to produce strong mathematical guarantees of application-level correctness for storage systems optimized for multicore architectures, and in the process to develop techniques that can be used to verify other high-performance concurrent software systems.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Lennart",
   "pi_last_name": "Beringer",
   "pi_mid_init": "E",
   "pi_sufx_name": "",
   "pi_full_name": "Lennart E Beringer",
   "pi_email_addr": "eberinge@princeton.edu",
   "nsf_id": "000734566",
   "pi_start_date": "2018-06-22",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "William",
   "pi_last_name": "Mansky",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "William Mansky",
   "pi_email_addr": "mansky1@uic.edu",
   "nsf_id": "000779474",
   "pi_start_date": "2018-06-22",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Princeton University",
  "inst_street_address": "1 NASSAU HALL",
  "inst_street_address_2": "",
  "inst_city_name": "PRINCETON",
  "inst_state_code": "NJ",
  "inst_state_name": "New Jersey",
  "inst_phone_num": "6092583090",
  "inst_zip_code": "085442001",
  "inst_country_name": "United States",
  "cong_dist_code": "12",
  "st_cong_dist_code": "NJ12",
  "org_lgl_bus_name": "THE TRUSTEES OF PRINCETON UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "NJ1YPQXQG7U5"
 },
 "perf_inst": {
  "perf_inst_name": "Princeton University",
  "perf_str_addr": "87 Prospect Avenue",
  "perf_city_name": "Princeton",
  "perf_st_code": "NJ",
  "perf_st_name": "New Jersey",
  "perf_zip_code": "085442020",
  "perf_ctry_code": "US",
  "perf_cong_dist": "12",
  "perf_st_cong_dist": "NJ12",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 499999.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 16000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The goal of this project was to develop theories and technologies for proving that high-performance concurrent data structures correctly store and retrieve information. We focused on tree data structures used to implement modern databases, and extended the Verified Software Toolchain (VST), a system for proving correctness of C programs, to work on high-performance concurrent implementations of those data structures. Outcomes include:</p>\n<p>&nbsp;</p>\n<p>1. We integrated features from the Iris framework, a more theoretically powerful tool with a weaker connection to real code, into VST. The integrated features let us specify and prove that data structure operations behave as if they were instantaneous, without making visible any incomplete intermediate states. The integration also gave us access to proof tactics that made it easier for us to build proofs for complicated concurrent data structures.</p>\n<p>2. We equipped VST with a mechanism to support modular verification of  programs comprised of multiple separate compilation units. This allows software to be verified the way it is written, in multiple pieces developed in different places by different groups.<br /><br />3. We applied the extended VST to concurrent list and tree implementations with various concurrency patterns, and constructed proofs of their correctness. We also explored techniques for verifying the concurrency features of a program separately from the underlying data structure (e.g. list or tree), and  collaborated with researchers in Germany and Korea on the  development of  compositional specifications for weak-memory  implementations that get  maximum performance out of modern processors.</p>\n<p>4. The project supported multiple students at the undergraduate, masters, and PhD level, and provided training for a young postdoctoral researcher, equipping the next generation of researchers with insights into foundational verification technology. <br /><br />5. Our enhancements are now part of the standard distribution of VST, ensuring a wide practical dissemination of the techniques and the continued availability of the results as the tool evolves further. Selected results of our research were included in Appel et al.'s Verifiable C volume of the Software Foundations (online, interactive) textbook series and integrated into courses taught at University of Illinois Chicago.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 12/01/2022<br>\n\t\t\t\t\tModified by: Lennart&nbsp;E&nbsp;Beringer</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThe goal of this project was to develop theories and technologies for proving that high-performance concurrent data structures correctly store and retrieve information. We focused on tree data structures used to implement modern databases, and extended the Verified Software Toolchain (VST), a system for proving correctness of C programs, to work on high-performance concurrent implementations of those data structures. Outcomes include:\n\n \n\n1. We integrated features from the Iris framework, a more theoretically powerful tool with a weaker connection to real code, into VST. The integrated features let us specify and prove that data structure operations behave as if they were instantaneous, without making visible any incomplete intermediate states. The integration also gave us access to proof tactics that made it easier for us to build proofs for complicated concurrent data structures.\n\n2. We equipped VST with a mechanism to support modular verification of  programs comprised of multiple separate compilation units. This allows software to be verified the way it is written, in multiple pieces developed in different places by different groups.\n\n3. We applied the extended VST to concurrent list and tree implementations with various concurrency patterns, and constructed proofs of their correctness. We also explored techniques for verifying the concurrency features of a program separately from the underlying data structure (e.g. list or tree), and  collaborated with researchers in Germany and Korea on the  development of  compositional specifications for weak-memory  implementations that get  maximum performance out of modern processors.\n\n4. The project supported multiple students at the undergraduate, masters, and PhD level, and provided training for a young postdoctoral researcher, equipping the next generation of researchers with insights into foundational verification technology. \n\n5. Our enhancements are now part of the standard distribution of VST, ensuring a wide practical dissemination of the techniques and the continued availability of the results as the tool evolves further. Selected results of our research were included in Appel et al.'s Verifiable C volume of the Software Foundations (online, interactive) textbook series and integrated into courses taught at University of Illinois Chicago.\n\n\t\t\t\t\tLast Modified: 12/01/2022\n\n\t\t\t\t\tSubmitted by: Lennart E Beringer"
 }
}