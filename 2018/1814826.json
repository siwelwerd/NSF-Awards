{
 "awd_id": "1814826",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Knowledge Acceleration for Programming",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2018-06-01",
 "awd_exp_date": "2022-05-31",
 "tot_intn_awd_amt": 500000.0,
 "awd_amount": 532000.0,
 "awd_min_amd_letter_date": "2018-05-22",
 "awd_max_amd_letter_date": "2021-05-19",
 "awd_abstract_narration": "Programming is a critical skill that is vital for the future of work and having a globally competitive workforce. While there are many resources available for programmers to learn the details for writing code, an increasing amount of the time all programmers spend is not on writing code but instead on choosing among and adapting the growing amount of existing code and libraries available to them. One study reported that the most frequent programmer activity is searching for and trying to understand unfamiliar code, and more than 30% of all searches are for determining which APIs to use and how to use them. However, after each sense-making episode in which a programmer gains knowledge for themselves, their work is essentially lost, with no one else benefiting. Although there are many tools to help programmers find the answers, there are very few tools to help programmers make use of the knowledge gained performing the task, or share that knowledge with others. Capturing the work that programmers do in foraging, navigating, and organizing code-relevant information could significantly benefit later programmers interested in similar information. By referencing the captured knowledge from the resulting code, this can provide design rationale for why the API is used that way, which is one of the most often missing pieces of documentation. Furthermore, by making it easier for programmers to build off one another's knowledge, this proposed work has the potential to reduce common security vulnerabilities that arise from programmers not learning from others' mistakes, leading to more secure and correct code.\r\n\r\nIn this research the PI aims to help the initial programmer collect, navigate, and organize knowledge to meet their goals, while capturing this knowledge and making it useful for later programmers with similar needs. This project studies the sense-making processes that programmers engage in while searching for and organizing knowledge for themselves, as well as studying which work that they do is useful for others. This project investigates how programmers spend their time searching for and making sense of complex information for themselves in order to accomplish their goals, including choosing among different APIs or methods within an API, adapting code snippets found on the Internet to meet their needs, or trying to learn unfamiliar code to fix an error or add a new feature. When performing tasks like these, programmers continually are making hypotheses, proposing questions, and discovering answers, both about the details as well as the meta-level questions such as the design rationale of why the decisions were made. These studies will inform the design, development, and evaluation of tools to support both the initial and later programmers. This research has the potential to significantly accelerate the speed at which programmers can create correct code by helping them gain relevant knowledge faster.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Aniket",
   "pi_last_name": "Kittur",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Aniket Kittur",
   "pi_email_addr": "nkittur@cs.cmu.edu",
   "nsf_id": "000515842",
   "pi_start_date": "2018-05-22",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Brad",
   "pi_last_name": "Myers",
   "pi_mid_init": "A",
   "pi_sufx_name": "",
   "pi_full_name": "Brad A Myers",
   "pi_email_addr": "bam@cs.cmu.edu",
   "nsf_id": "000360868",
   "pi_start_date": "2018-05-22",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Carnegie-Mellon University",
  "inst_street_address": "5000 FORBES AVE",
  "inst_street_address_2": "",
  "inst_city_name": "PITTSBURGH",
  "inst_state_code": "PA",
  "inst_state_name": "Pennsylvania",
  "inst_phone_num": "4122688746",
  "inst_zip_code": "152133815",
  "inst_country_name": "United States",
  "cong_dist_code": "12",
  "st_cong_dist_code": "PA12",
  "org_lgl_bus_name": "CARNEGIE MELLON UNIVERSITY",
  "org_prnt_uei_num": "U3NKNFLNQ613",
  "org_uei_num": "U3NKNFLNQ613"
 },
 "perf_inst": {
  "perf_inst_name": "Carnegie Mellon University",
  "perf_str_addr": "5000 Forbes Avenue",
  "perf_city_name": "Pittsburgh",
  "perf_st_code": "PA",
  "perf_st_name": "Pennsylvania",
  "perf_zip_code": "152133815",
  "perf_ctry_code": "US",
  "perf_cong_dist": "12",
  "perf_st_cong_dist": "PA12",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0121",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 500000.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 16000.0
  },
  {
   "fund_oblg_fiscal_yr": 2021,
   "fund_oblg_amt": 16000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-d4618479-7fff-c69f-e8e9-9e8dc3655e80\">\n<p dir=\"ltr\"><span>Programmers spend a significant proportion of their time searching for and making sense of complex information in order to accomplish their goals, whether choosing among APIs, adapting code snippets found on the Internet, or trying to learn unfamiliar code to fix an error or add a new feature. However, after each sensemaking episode in which a programmer gains knowledge for themselves, their work is essentially lost, with no one else benefiting. Although there are many tools to help programmers find the answers, there are very few tools to help programmers make use of the knowledge gained performing the task, or share that knowledge with others.&nbsp;</span></p>\n<p dir=\"ltr\"><span>In this project, we aimed to help the initial programmer collect, navigate, and organize knowledge to meet their goals, while capturing this knowledge and making it useful for later programmers with similar needs. To do this, we first carried out semi-structured interviews with programmers to understand how they currently collect and manage information to aid their decision making about trade-offs, such as &ldquo;which Java API to use&rdquo;. We then carried out an analysis of the questions and answers on one of the largest community Q&amp;A sites on programming -- Stack Overflow, and found out that almost half of the questions programmers ask are about making decisions between trade-offs.</span></p>\n<p dir=\"ltr\"><span>Guided by the insights we gained from the interviews and the analysis of Stack Overflow, we developed a novel system called Unakite to help programmers collect and organize web information into tabular structures when they are making decisions, as well as persisting these structures as design rationales for later programmers&rsquo; understanding. Our evaluation results show that Unakite both reduced the cost of collecting and organizing information by 45% and improved subsequent developers&rsquo; ability to understand why a decision was made threefold.</span></p>\n<p dir=\"ltr\"><span>Although Unakite addressed developers&rsquo; needs for a tool for information collection and organization during online sensemaking, manually identifying and clipping content, maintaining its provenance, and synthesizing it remained a challenge for users. A new system, Crystalline, explored automatically collecting and organizing information into tables as a user searches and browses the web with no extra interaction needed. Crystalline leverages natural language processing to automatically group similar criteria together to reduce clutter, and uses passive behavioral signals such as mouse movement and dwell time to infer what information to collect and how to visualize and prioritize it, which reduced the overhead of organizing information by 60% in a lab evaluation.</span></p>\n<p dir=\"ltr\"><span>In addition to helping the initial programmer, we explored how their processes, results, and mental models can be transferred to and reused by subsequent developers. Through interviewing and speed-dating sessions with developers, we learned that the questions asked during such reuse can be organized into three main categories: context, trustworthiness, and thoroughness. Then, based on prior work and the data we found in the formative studies, we designed and developed a novel system called Strata on top of Unakite to help subsequent programmers answer their specific questions related to decisions about reuse. Through a lab evaluation, we found that Strata indeed improved by 75% developers&rsquo; ability to assess the context, trustworthiness, and thoroughness of a previously-made decision before reusing it.</span></p>\n<p dir=\"ltr\"><span>In the meantime, we have noticed that developers looking for code snippets and solutions online face the challenge of capturing the information they find for later use without interrupting their current flow. In addition, during many learning and exploration tasks, developers need to externalize their mental context, such as estimating how urgent a topic is to follow up on, or rating a piece of evidence as a &ldquo;pro&rdquo; or &ldquo;con,&rdquo; which helps scaffold subsequent deeper exploration. However, current approaches incur a high cost when doing so, often requiring people to select, copy, context switch, paste, and rate information into a separate document without offering specific affordances that capture their mental context. Therefore, we explored a new interaction technique, which we call &ldquo;wiggling,&rdquo; which can be used to fluidly collect, organize and rate information during early sensemaking stages with a single gesture. Wiggling involves rapid back-and-forth movements of a pointer or up-and-down scrolling on a smartphone, which can indicate the information to be collected and its valence, using a single, light-weight gesture that does not interfere with other interactions that are already available (such as highlighting text or clicking on links). Through implementation and user evaluation, we found that wiggling helped people accurately collect information and encode their mental context faster and more fluidly without interrupting their main workflow of reading and comprehending web content.</span></p>\n<p dir=\"ltr\"><span>Together, these advances form a foundation that makes significant progress towards realizing a future of knowledge acceleration for programming, in which individuals can make sense of programming-related information for themselves faster, while simultaneously capturing their work and making it reusable for subsequent searchers with similar information needs.</span></p>\n</span></p><br>\n<p>\n\t\t\t\t      \tLast Modified: 07/15/2022<br>\n\t\t\t\t\tModified by: Aniket&nbsp;Kittur</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n\nProgrammers spend a significant proportion of their time searching for and making sense of complex information in order to accomplish their goals, whether choosing among APIs, adapting code snippets found on the Internet, or trying to learn unfamiliar code to fix an error or add a new feature. However, after each sensemaking episode in which a programmer gains knowledge for themselves, their work is essentially lost, with no one else benefiting. Although there are many tools to help programmers find the answers, there are very few tools to help programmers make use of the knowledge gained performing the task, or share that knowledge with others. \nIn this project, we aimed to help the initial programmer collect, navigate, and organize knowledge to meet their goals, while capturing this knowledge and making it useful for later programmers with similar needs. To do this, we first carried out semi-structured interviews with programmers to understand how they currently collect and manage information to aid their decision making about trade-offs, such as \"which Java API to use\". We then carried out an analysis of the questions and answers on one of the largest community Q&amp;A sites on programming -- Stack Overflow, and found out that almost half of the questions programmers ask are about making decisions between trade-offs.\nGuided by the insights we gained from the interviews and the analysis of Stack Overflow, we developed a novel system called Unakite to help programmers collect and organize web information into tabular structures when they are making decisions, as well as persisting these structures as design rationales for later programmers\u2019 understanding. Our evaluation results show that Unakite both reduced the cost of collecting and organizing information by 45% and improved subsequent developers\u2019 ability to understand why a decision was made threefold.\nAlthough Unakite addressed developers\u2019 needs for a tool for information collection and organization during online sensemaking, manually identifying and clipping content, maintaining its provenance, and synthesizing it remained a challenge for users. A new system, Crystalline, explored automatically collecting and organizing information into tables as a user searches and browses the web with no extra interaction needed. Crystalline leverages natural language processing to automatically group similar criteria together to reduce clutter, and uses passive behavioral signals such as mouse movement and dwell time to infer what information to collect and how to visualize and prioritize it, which reduced the overhead of organizing information by 60% in a lab evaluation.\nIn addition to helping the initial programmer, we explored how their processes, results, and mental models can be transferred to and reused by subsequent developers. Through interviewing and speed-dating sessions with developers, we learned that the questions asked during such reuse can be organized into three main categories: context, trustworthiness, and thoroughness. Then, based on prior work and the data we found in the formative studies, we designed and developed a novel system called Strata on top of Unakite to help subsequent programmers answer their specific questions related to decisions about reuse. Through a lab evaluation, we found that Strata indeed improved by 75% developers\u2019 ability to assess the context, trustworthiness, and thoroughness of a previously-made decision before reusing it.\nIn the meantime, we have noticed that developers looking for code snippets and solutions online face the challenge of capturing the information they find for later use without interrupting their current flow. In addition, during many learning and exploration tasks, developers need to externalize their mental context, such as estimating how urgent a topic is to follow up on, or rating a piece of evidence as a \"pro\" or \"con,\" which helps scaffold subsequent deeper exploration. However, current approaches incur a high cost when doing so, often requiring people to select, copy, context switch, paste, and rate information into a separate document without offering specific affordances that capture their mental context. Therefore, we explored a new interaction technique, which we call \"wiggling,\" which can be used to fluidly collect, organize and rate information during early sensemaking stages with a single gesture. Wiggling involves rapid back-and-forth movements of a pointer or up-and-down scrolling on a smartphone, which can indicate the information to be collected and its valence, using a single, light-weight gesture that does not interfere with other interactions that are already available (such as highlighting text or clicking on links). Through implementation and user evaluation, we found that wiggling helped people accurately collect information and encode their mental context faster and more fluidly without interrupting their main workflow of reading and comprehending web content.\nTogether, these advances form a foundation that makes significant progress towards realizing a future of knowledge acceleration for programming, in which individuals can make sense of programming-related information for themselves faster, while simultaneously capturing their work and making it reusable for subsequent searchers with similar information needs.\n\n\n\t\t\t\t\tLast Modified: 07/15/2022\n\n\t\t\t\t\tSubmitted by: Aniket Kittur"
 }
}