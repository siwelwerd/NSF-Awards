{
 "awd_id": "1750983",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CAREER: Understanding and Combating Numerical Bugs for Reliable and Efficient Software Systems",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2018-07-01",
 "awd_exp_date": "2024-06-30",
 "tot_intn_awd_amt": 537363.0,
 "awd_amount": 552363.0,
 "awd_min_amd_letter_date": "2017-12-15",
 "awd_max_amd_letter_date": "2022-06-11",
 "awd_abstract_narration": "The use of numerical software has grown rapidly over the past few years. From machine learning to safety-critical systems, a large variety of applications today make heavy use of floating point. Unfortunately, floating point introduces imprecision in numerical\r\ncalculations. Analyzing, testing, and optimizing floating-point programs are difficult tasks. There is a large variety of numerical errors that can occur in such programs, including extreme sensitivity to roundoff, incorrectly handled exceptions, and nonreproducibility. This has led to numerous software bugs that have caused catastrophic failures. The goal of this research is to understand and combat numerical bugs. The intellectual merits are to advance the state of the art in analysis, testing and optimization of numerical software, and in extending these techniques to new domains beyond scientific applications. The importance of the research lies in the impact of the developed techniques and tools on improving the reliability and performance of real-world numerical programs, on which many other applications depend.\r\n\r\nThis research develops program analysis techniques and tools to (1) find frequent and impactful numerical bugs in programs, (2) propose\r\nfixes for these bugs, and (3) optimize numerical programs in different application domains to improve their performance. The research is driven by empirical studies that encompass several aspects of numerical software. First, a large-scale empirical study of numerical software is conducted to categorize real-world numerical bugs and their fixes. Second, an empirical study of test suites for numerical software is conducted to determine the effectiveness of testing in real-world numerical software. Based on the observations made through these empirical studies, a series of dynamic and static analyses are designed to detect and fix a variety of numerical bugs. These analyses are made available as part of an analysis and testing framework for numerical software. Novel precision tuning techniques are developed to enable scalable optimizations that lead to higher speedups, and to extend the scope of precision tuning to new application domains such as machine learning. The research has strong broader impacts in education and outreach. These include the development of new courses on software engineering and testing with a focus on numerical software, a Computer Science summer boot camp, and a mentoring program for underrepresented minorities especially focused on Latino students.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Cindy",
   "pi_last_name": "Rubio Gonzalez",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Cindy Rubio Gonzalez",
   "pi_email_addr": "crubio@ucdavis.edu",
   "nsf_id": "000678663",
   "pi_start_date": "2017-12-15",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of California-Davis",
  "inst_street_address": "1850 RESEARCH PARK DR STE 300",
  "inst_street_address_2": "",
  "inst_city_name": "DAVIS",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "5307547700",
  "inst_zip_code": "956186153",
  "inst_country_name": "United States",
  "cong_dist_code": "04",
  "st_cong_dist_code": "CA04",
  "org_lgl_bus_name": "UNIVERSITY OF CALIFORNIA, DAVIS",
  "org_prnt_uei_num": "",
  "org_uei_num": "TX2DAGQPENZ5"
 },
 "perf_inst": {
  "perf_inst_name": "University of California-Davis",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "956168562",
  "perf_ctry_code": "US",
  "perf_cong_dist": "04",
  "perf_st_cong_dist": "CA04",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "287800",
   "pgm_ele_name": "Special Projects - CCF"
  },
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "1045",
   "pgm_ref_txt": "CAREER-Faculty Erly Career Dev"
  },
  {
   "pgm_ref_code": "7798",
   "pgm_ref_txt": "SOFTWARE & HARDWARE FOUNDATION"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  },
  {
   "pgm_ref_code": "9102",
   "pgm_ref_txt": "WOMEN, MINORITY, DISABLED, NEC"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01002223DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 218977.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 216967.0
  },
  {
   "fund_oblg_fiscal_yr": 2022,
   "fund_oblg_amt": 116419.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The use of numerical software has grown rapidly over the past few years. From machine learning to safety-critical systems, a large variety of applications today make heavy use of floating point. Unfortunately, floating point introduces imprecision in numerical calculations. Analyzing, testing, and optimizing floating-point programs are difficult tasks. There is a large variety of numerical errors that can occur in such programs, including extreme sensitivity to roundoff, incorrectly handled exceptions, and nonreproducibility. This has led to numerous software bugs that have caused catastrophic failures. Furthermore, there is a strong demand for making numerical software more efficient, which may make software more prone to numerical bugs in certain cases.</p>\n<p>The goal of this research was to understand and combat numerical bugs by advancing the state of the art in analysis, testing and optimization of numerical software, and in applying such techniques to new domains beyond scientific applications. The research developed techniques and tools for (1) detecting frequent and impactful numerical bugs in numerical libraries, (2) exposing and isolating compiler-induced numerical inconsistencies in scientific applications, (3) automatically tuning the floating-point precision of numerical applications, (4) proposing a new strategy for exception handling in numerical libraries, and (5) finding error-handling bugs. The research was driven by empirical studies that encompassed several aspects of numerical software. Based on the observations made through these empirical studies, a series of techniques were designed to detect a variety of numerical bugs. Novel precision tuning techniques were developed to enable scalable optimizations that lead to higher speedups, and to extend the scope of precision tuning to new application domains. The techniques and results have been published in top venues in Software Engineering, Programming Languages and High-Performance Computing, and our tools and data are publicly available. The research also had strong broader impacts in education and outreach, which included curriculum development, a Computer Science summer bootcamp, and mentoring of underrepresented minorities.</p><br>\n<p>\n Last Modified: 11/04/2024<br>\nModified by: Cindy&nbsp;Rubio Gonzalez</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nThe use of numerical software has grown rapidly over the past few years. From machine learning to safety-critical systems, a large variety of applications today make heavy use of floating point. Unfortunately, floating point introduces imprecision in numerical calculations. Analyzing, testing, and optimizing floating-point programs are difficult tasks. There is a large variety of numerical errors that can occur in such programs, including extreme sensitivity to roundoff, incorrectly handled exceptions, and nonreproducibility. This has led to numerous software bugs that have caused catastrophic failures. Furthermore, there is a strong demand for making numerical software more efficient, which may make software more prone to numerical bugs in certain cases.\n\n\nThe goal of this research was to understand and combat numerical bugs by advancing the state of the art in analysis, testing and optimization of numerical software, and in applying such techniques to new domains beyond scientific applications. The research developed techniques and tools for (1) detecting frequent and impactful numerical bugs in numerical libraries, (2) exposing and isolating compiler-induced numerical inconsistencies in scientific applications, (3) automatically tuning the floating-point precision of numerical applications, (4) proposing a new strategy for exception handling in numerical libraries, and (5) finding error-handling bugs. The research was driven by empirical studies that encompassed several aspects of numerical software. Based on the observations made through these empirical studies, a series of techniques were designed to detect a variety of numerical bugs. Novel precision tuning techniques were developed to enable scalable optimizations that lead to higher speedups, and to extend the scope of precision tuning to new application domains. The techniques and results have been published in top venues in Software Engineering, Programming Languages and High-Performance Computing, and our tools and data are publicly available. The research also had strong broader impacts in education and outreach, which included curriculum development, a Computer Science summer bootcamp, and mentoring of underrepresented minorities.\t\t\t\t\tLast Modified: 11/04/2024\n\n\t\t\t\t\tSubmitted by: CindyRubio Gonzalez\n"
 }
}