{
 "awd_id": "1817242",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Differential Policy Verification and Repair for Access Control in the Cloud",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032922585",
 "po_email": "pprabhak@nsf.gov",
 "po_sign_block_name": "Pavithra Prabhakar",
 "awd_eff_date": "2018-07-01",
 "awd_exp_date": "2023-06-30",
 "tot_intn_awd_amt": 499992.0,
 "awd_amount": 515992.0,
 "awd_min_amd_letter_date": "2018-06-04",
 "awd_max_amd_letter_date": "2020-02-20",
 "awd_abstract_narration": "Due to ubiquitous use of software services, protecting the confidentiality of private information stored in compute clouds is becoming an increasingly critical problem.  Users frequently trust sensitive personal information such as financial or medical records to software services.  Protection of such private data is of paramount importance for users. In order to prevent disastrous data breaches (which do happen), software developers must accurately specify who can access the data resources and in what ways. Although access control specification languages and libraries provide mechanisms for protecting confidentiality of information in software systems, without automated techniques that can assist developers in writing and checking access control policies, complex policy specifications are likely to have errors that lead to unintended and unauthorized access to data, possibly with disastrous consequences. This project will expose graduate and undergraduate students to security and analysis problems in cloud-based systems through a variety of educational activities including courses, seminars and individual research mentoring.\r\n\r\nThis project develops automated techniques that help software developers in protecting users' data and preventing dangerous exposure of\r\nprivate information.  In particular, the investigators develop automated techniques that help software developers in identifying and eliminating errors in access control policies by converting policy specifications to logical constraints and identifying inconsistencies among policies using constraint solving techniques. The project also investigates methods to automatically generating inputs that demonstrate inconsistencies among policies, and automatically generating repairs that remove the inconsistencies among the policies. Within the scope of this project the investigators develop and use novel constraint solving techniques for policy analysis, particularly focusing on analysis of complex numeric and text manipulation operations that are error-prone.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Tevfik",
   "pi_last_name": "Bultan",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Tevfik Bultan",
   "pi_email_addr": "bultan@cs.ucsb.edu",
   "nsf_id": "000232096",
   "pi_start_date": "2018-06-04",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of California-Santa Barbara",
  "inst_street_address": "3227 CHEADLE HALL",
  "inst_street_address_2": "",
  "inst_city_name": "SANTA BARBARA",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "8058934188",
  "inst_zip_code": "931060001",
  "inst_country_name": "United States",
  "cong_dist_code": "24",
  "st_cong_dist_code": "CA24",
  "org_lgl_bus_name": "UNIVERSITY OF CALIFORNIA, SANTA BARBARA",
  "org_prnt_uei_num": "",
  "org_uei_num": "G9QBQDH39DF4"
 },
 "perf_inst": {
  "perf_inst_name": "University of California-Santa Barbara",
  "perf_str_addr": "University of California, Santa",
  "perf_city_name": "Santa Barbara",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "931065110",
  "perf_ctry_code": "US",
  "perf_cong_dist": "24",
  "perf_st_cong_dist": "CA24",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  },
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "8206",
   "pgm_ref_txt": "Formal Methods and Verification"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 499992.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 16000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Modern software services run on compute clouds. Due to ubiquitous use of software services, protecting the confidentiality of private information stored in compute clouds has become a critical problem.</p>\n<p>Among the most popular cloud service providers are Amazon Web Services (AWS), Microsoft Azure, and Google Cloud Platform (GCP), each of which lets system administrators secure software services by writing access control policies that specify who can have access to data. Although access control specification languages and libraries provide mechanisms for protecting confidentiality of information, without verification and validation techniques that can assist system administrators in writing policies, complex policy specifications are likely to have errors that can lead to unintended and unauthorized access to data, possibly with disastrous consequences.</p>\n<p>In fact, incorrect specification of access control policies in cloud storage services has resulted in millions of customers' data being exposed to the public. There is an urgent need to develop techniques to protect user data and prevent dangerous exposure of private information. The techniques and tools we developed within the context of this project address this important problem.</p>\n<p>Within the scope of this project we developed an automated access control policy verification and repair framework which involves 1) conversion of policy specifications to logical constraints, 2) identifying differences and inconsistencies among policies using constraint solving techniques, and 3) automatically generating repairs that fix problems identified in access control policies.&nbsp;</p>\n<p>We developed a quantitative and differential access control policy analysis framework that not only identifies if one policy is more permissive than another policy, but also quantifies the relative permissiveness of access control policies. We experimentally evaluated the effectiveness of our approach by applying it to policies written in Amazon's AWS Identity and Access Management (IAM) policy language. Our experimental results demonstrate that quantitative analysis of real-world access control policies is feasible.</p>\n<p>We developed a novel quantitative policy repair algorithm for repairing the permissiveness of access control policies for the cloud. Given a permissiveness bound and must-allow request set, our approach works by iteratively localizing the most permissive elements of the policy using quantitative analysis techniques and reducing and refining these elements using regular expression generalization techniques. Our experiments on 43 AWS IAM policies show that our repair algorithm successfully generates repairs for the given policies and does so in a reasonable amount of time.&nbsp;</p>\n<p>As a part of this project, we have also made advances in the area of constraint solving techniques. In particular, we have developed automata-based constraint solving techniques for policy analysis, focusing on analyzing complex string and numeric expressions that are error prone. Furthermore, constraint solving techniques we developed not only identify if a set of constraints are satisfiable, but also identify how many solutions exist, enabling quantitative policy analysis.</p>\n<p>Finally, we developed an open source tool called QUACKY for quantifying permissiveness of access control policies in the cloud. QUACKY supports access control policies written in the Amazon Web Services (AWS) Identity and Access Management (IAM), Microsoft Azure, and Google Cloud Platform (GCP) policy languages.&nbsp;</p>\n<p>The techniques and tools we developed within the scope of this project can be used to improve the privacy and security of cloud services.&nbsp;</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 10/30/2023<br>\n\t\t\t\t\tModified by: Tevfik&nbsp;Bultan</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nModern software services run on compute clouds. Due to ubiquitous use of software services, protecting the confidentiality of private information stored in compute clouds has become a critical problem.\n\nAmong the most popular cloud service providers are Amazon Web Services (AWS), Microsoft Azure, and Google Cloud Platform (GCP), each of which lets system administrators secure software services by writing access control policies that specify who can have access to data. Although access control specification languages and libraries provide mechanisms for protecting confidentiality of information, without verification and validation techniques that can assist system administrators in writing policies, complex policy specifications are likely to have errors that can lead to unintended and unauthorized access to data, possibly with disastrous consequences.\n\nIn fact, incorrect specification of access control policies in cloud storage services has resulted in millions of customers' data being exposed to the public. There is an urgent need to develop techniques to protect user data and prevent dangerous exposure of private information. The techniques and tools we developed within the context of this project address this important problem.\n\nWithin the scope of this project we developed an automated access control policy verification and repair framework which involves 1) conversion of policy specifications to logical constraints, 2) identifying differences and inconsistencies among policies using constraint solving techniques, and 3) automatically generating repairs that fix problems identified in access control policies. \n\nWe developed a quantitative and differential access control policy analysis framework that not only identifies if one policy is more permissive than another policy, but also quantifies the relative permissiveness of access control policies. We experimentally evaluated the effectiveness of our approach by applying it to policies written in Amazon's AWS Identity and Access Management (IAM) policy language. Our experimental results demonstrate that quantitative analysis of real-world access control policies is feasible.\n\nWe developed a novel quantitative policy repair algorithm for repairing the permissiveness of access control policies for the cloud. Given a permissiveness bound and must-allow request set, our approach works by iteratively localizing the most permissive elements of the policy using quantitative analysis techniques and reducing and refining these elements using regular expression generalization techniques. Our experiments on 43 AWS IAM policies show that our repair algorithm successfully generates repairs for the given policies and does so in a reasonable amount of time. \n\nAs a part of this project, we have also made advances in the area of constraint solving techniques. In particular, we have developed automata-based constraint solving techniques for policy analysis, focusing on analyzing complex string and numeric expressions that are error prone. Furthermore, constraint solving techniques we developed not only identify if a set of constraints are satisfiable, but also identify how many solutions exist, enabling quantitative policy analysis.\n\nFinally, we developed an open source tool called QUACKY for quantifying permissiveness of access control policies in the cloud. QUACKY supports access control policies written in the Amazon Web Services (AWS) Identity and Access Management (IAM), Microsoft Azure, and Google Cloud Platform (GCP) policy languages. \n\nThe techniques and tools we developed within the scope of this project can be used to improve the privacy and security of cloud services. \n\n \n\n\t\t\t\t\tLast Modified: 10/30/2023\n\n\t\t\t\t\tSubmitted by: Tevfik Bultan"
 }
}