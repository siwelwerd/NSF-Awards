{
 "awd_id": "1801545",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "SaTC: CORE: Medium: Collaborative: Understanding Security in the Software Development Lifecycle: A Holistic, Mixed-Methods Approach",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032928643",
 "po_email": "skiesler@nsf.gov",
 "po_sign_block_name": "Sara Kiesler",
 "awd_eff_date": "2018-09-01",
 "awd_exp_date": "2022-08-31",
 "tot_intn_awd_amt": 698957.0,
 "awd_amount": 698957.0,
 "awd_min_amd_letter_date": "2018-08-24",
 "awd_max_amd_letter_date": "2018-09-13",
 "awd_abstract_narration": "As software now pervades nearly every aspect of modern life, securing software is widely acknowledged as a critical problem. Although significant effort has gone into identifying flaws in software, as well as developing tools, libraries, and processes for detecting and mitigating these flaws during software development and maintenance, security problems remain pervasive. There has been comparatively little effort to empirically assess the effectiveness of existing tools and processes in realistic settings, and almost no effort to understand the root causes of professional developers making security errors. This lack of knowledge hinders the advancement of secure programming techniques that can effectively reduce the number of security bugs in deployed software. This research focuses on measuring and evaluating the effectiveness of particular approaches to securing software as carried out by typical developers. By combining anthropological observation of industrial development practice with experimental evaluation of tools and processes, this project will identify new or underappreciated approaches to improving software security in practice.\r\n\r\nThe research includes four interdependent approaches: anthropological observation via long-term embedding in partner industrial software development teams; conducting and analyzing results from secure-programming contests that serve as quasi-experiments; controlled lab experiments; and analysis of open-source software artifacts. The anthropological approach produces deep insights through zero-proximity observation and reflection by fieldworkers, and competitions illuminate how differences in approach (language, tools, etc.) to a substantive problem correlate (quantitatively and qualitatively) with success or failure. Both of these approaches will generate hypotheses, which can then be tested via controlled lab experiments, as well as additional field, contest, and artifact observations. This combination of approaches leverages the strength of each in order to maximize both ecological and internal validity, offering the best chance to understand the real causes of (in)secure software development and offer effective guidance.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Michelle",
   "pi_last_name": "Mazurek",
   "pi_mid_init": "L",
   "pi_sufx_name": "",
   "pi_full_name": "Michelle L Mazurek",
   "pi_email_addr": "mmazurek@umd.edu",
   "nsf_id": "000677388",
   "pi_start_date": "2018-08-24",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Michael",
   "pi_last_name": "Hicks",
   "pi_mid_init": "W",
   "pi_sufx_name": "",
   "pi_full_name": "Michael W Hicks",
   "pi_email_addr": "mwh@cs.umd.edu",
   "nsf_id": "000116426",
   "pi_start_date": "2018-08-24",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Maryland, College Park",
  "inst_street_address": "3112 LEE BUILDING",
  "inst_street_address_2": "",
  "inst_city_name": "COLLEGE PARK",
  "inst_state_code": "MD",
  "inst_state_name": "Maryland",
  "inst_phone_num": "3014056269",
  "inst_zip_code": "207425100",
  "inst_country_name": "United States",
  "cong_dist_code": "04",
  "st_cong_dist_code": "MD04",
  "org_lgl_bus_name": "UNIVERSITY OF MARYLAND, COLLEGE PARK",
  "org_prnt_uei_num": "NPU8ULVAAS23",
  "org_uei_num": "NPU8ULVAAS23"
 },
 "perf_inst": {
  "perf_inst_name": "University of Maryland College Park",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "MD",
  "perf_st_name": "Maryland",
  "perf_zip_code": "207425141",
  "perf_ctry_code": "US",
  "perf_cong_dist": "04",
  "perf_st_cong_dist": "MD04",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "063Z",
   "pgm_ref_txt": "FW-HTF Futr Wrk Hum-Tech Frntr"
  },
  {
   "pgm_ref_code": "065Z",
   "pgm_ref_txt": "Human factors for security research"
  },
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "7487",
   "pgm_ref_txt": "BROADENING PARTICIPATION"
  },
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  },
  {
   "pgm_ref_code": "9102",
   "pgm_ref_txt": "WOMEN, MINORITY, DISABLED, NEC"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 698957.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p id=\"docs-internal-guid-8fe2806f-7fff-0fc5-d86b-9eecf7711f33\" style=\"line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">The main goal of this project was to measure and understand how tools and processes for secure software development do and do not work in practice. We focused on human and organizational factors that support or impede secure software development, and how these factors ultimately affect the software security ecosystem.&nbsp;</span></p>\n<p>&nbsp;</p>\n<p style=\"line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Our work has had several key outcomes:</span></p>\n<p>&nbsp;</p>\n<p style=\"line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">(1) Using a unique secure-programming contest that we designed as an experimental platform, we identified and characterized three key classes of software errors: missing implementations, misunderstandings, and simple mistakes. We found that simple mistakes, which are easiest to find and correct both via manual code review and automated analysis, are less common than misunderstandings or entirely missing implementation of some security requirements, which are more frequent but more difficult to mitigate. We found that advance planning and building security in from the start do correlate with better security outcomes; however, conceptual misunderstandings can become encoded early in designs in ways that are difficult to detect and overcome later. Our findings point to the need for new research to help developers identify missed requirements and misunderstandings early.</span></p>\n<p>&nbsp;</p>\n<p style=\"line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">(2) We studied the human and organizational factors that support or inhibit adoption of new secure programming languages, using Rust as a case study. Rust&rsquo;s strengths include a supportive community, high-quality documentation, clear error messages, and convincing improvements to the development cycle. Drawbacks include uncertainty about long-term language support and hiring prospects. Further, the steep learning curve and high up-front costs of switching to Rust &ndash; with benefits not seen until the medium to long term &ndash; can deter companies from investing. Given these results, we developed and evaluated a new version of Rust, Bronze, that enables developers to take advantage of garbage collection. We found that this approach can, as hoped, support learners of Rust in gaining facility with the language faster.&nbsp;</span></p>\n<p>&nbsp;</p>\n<p style=\"line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">(3) We explored factors that contribute to retaining (or not) a large and diverse vulnerability discovery workforce. We found that key challenges faced by participants in bug bounty programs include uncertainty about when and if they will be paid and poor communication with companies and platforms that administer bug bounties. Further, large companies that invest in the quality of their bug bounty programs are more likely to reap advantages from the bug bounty ecosystem. To extend the benefits of bug bounty programs to other companies and sectors, government agencies and other third parties may need to support companies in competently managing these programs. Further, we companies and platforms should invest in training their employees in how to better communicate with bug hunters, while also offering hunters educational resources for generating more useful bug reports. In a related study, we found that specific aspects of vulnerability discovery &ndash; including the competitive nature of bug-finding and the common apprenticeship model of training &ndash; magnify the importance of mentoring and networking to success in the field. However, people from historically marginalized populations have more trouble finding mentors and networks, and may be more likely to receive ineffective or even harmful mentoring, inhibiting their success in the field.&nbsp;</span></p>\n<p>&nbsp;</p>\n<p style=\"line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">(4) Fuzz testing is critical to secure software development, but valid evaluation of new fuzzing tools is challenging. To improve empirical evaluation of fuzzers, we developed FixReverter, a tool that creates fuzzing benchmarks by automatically injecting realistic bugs into programs, by identifying and undoing prior security fixes. Using FixReverter we built RevBugBench, which consists of 10 programs into which we injected nearly 8,000 bugs; we used it to evaluate five fuzzers. We found that RevBugBench, as hoped, effectively distinguished among different fuzzers and their performance.&nbsp;</span></p>\n<p>&nbsp;</p>\n<p style=\"line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">(5) The project provided training and professional development to multiple PhD students, a postdoc, and several undergraduates. Three PhD dissertations were funded in part by this award. Alumni of the project are working as assistant professors at R1 universities and in industrial secure development research.&nbsp;Secure-programming-contest materials developed as part of this project have been used by instructors at other universities as part of course projects. </span></p>\n<p style=\"line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">&nbsp;</span></p><br>\n<p>\n\t\t\t\t      \tLast Modified: 10/17/2022<br>\n\t\t\t\t\tModified by: Michelle&nbsp;L&nbsp;Mazurek</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "The main goal of this project was to measure and understand how tools and processes for secure software development do and do not work in practice. We focused on human and organizational factors that support or impede secure software development, and how these factors ultimately affect the software security ecosystem. \n\n \nOur work has had several key outcomes:\n\n \n(1) Using a unique secure-programming contest that we designed as an experimental platform, we identified and characterized three key classes of software errors: missing implementations, misunderstandings, and simple mistakes. We found that simple mistakes, which are easiest to find and correct both via manual code review and automated analysis, are less common than misunderstandings or entirely missing implementation of some security requirements, which are more frequent but more difficult to mitigate. We found that advance planning and building security in from the start do correlate with better security outcomes; however, conceptual misunderstandings can become encoded early in designs in ways that are difficult to detect and overcome later. Our findings point to the need for new research to help developers identify missed requirements and misunderstandings early.\n\n \n(2) We studied the human and organizational factors that support or inhibit adoption of new secure programming languages, using Rust as a case study. Rust\u2019s strengths include a supportive community, high-quality documentation, clear error messages, and convincing improvements to the development cycle. Drawbacks include uncertainty about long-term language support and hiring prospects. Further, the steep learning curve and high up-front costs of switching to Rust &ndash; with benefits not seen until the medium to long term &ndash; can deter companies from investing. Given these results, we developed and evaluated a new version of Rust, Bronze, that enables developers to take advantage of garbage collection. We found that this approach can, as hoped, support learners of Rust in gaining facility with the language faster. \n\n \n(3) We explored factors that contribute to retaining (or not) a large and diverse vulnerability discovery workforce. We found that key challenges faced by participants in bug bounty programs include uncertainty about when and if they will be paid and poor communication with companies and platforms that administer bug bounties. Further, large companies that invest in the quality of their bug bounty programs are more likely to reap advantages from the bug bounty ecosystem. To extend the benefits of bug bounty programs to other companies and sectors, government agencies and other third parties may need to support companies in competently managing these programs. Further, we companies and platforms should invest in training their employees in how to better communicate with bug hunters, while also offering hunters educational resources for generating more useful bug reports. In a related study, we found that specific aspects of vulnerability discovery &ndash; including the competitive nature of bug-finding and the common apprenticeship model of training &ndash; magnify the importance of mentoring and networking to success in the field. However, people from historically marginalized populations have more trouble finding mentors and networks, and may be more likely to receive ineffective or even harmful mentoring, inhibiting their success in the field. \n\n \n(4) Fuzz testing is critical to secure software development, but valid evaluation of new fuzzing tools is challenging. To improve empirical evaluation of fuzzers, we developed FixReverter, a tool that creates fuzzing benchmarks by automatically injecting realistic bugs into programs, by identifying and undoing prior security fixes. Using FixReverter we built RevBugBench, which consists of 10 programs into which we injected nearly 8,000 bugs; we used it to evaluate five fuzzers. We found that RevBugBench, as hoped, effectively distinguished among different fuzzers and their performance. \n\n \n(5) The project provided training and professional development to multiple PhD students, a postdoc, and several undergraduates. Three PhD dissertations were funded in part by this award. Alumni of the project are working as assistant professors at R1 universities and in industrial secure development research. Secure-programming-contest materials developed as part of this project have been used by instructors at other universities as part of course projects. \n \n\n\t\t\t\t\tLast Modified: 10/17/2022\n\n\t\t\t\t\tSubmitted by: Michelle L Mazurek"
 }
}