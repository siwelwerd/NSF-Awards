{
 "awd_id": "1811865",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Scalable Program Synthesis using Counterexample-Guided Abstraction Refinement",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032922585",
 "po_email": "pprabhak@nsf.gov",
 "po_sign_block_name": "Pavithra Prabhakar",
 "awd_eff_date": "2018-10-01",
 "awd_exp_date": "2023-09-30",
 "tot_intn_awd_amt": 350000.0,
 "awd_amount": 366000.0,
 "awd_min_amd_letter_date": "2018-06-04",
 "awd_max_amd_letter_date": "2020-05-14",
 "awd_abstract_narration": "The field of program synthesis promises to dramatically simplify software development by automatically generating programs from high-level specifications, such as input-output examples. While there has been a flurry of recent research on program synthesis, existing techniques have limited scalability both in terms of  the complexity of the underlying programming language as well as the complexity of the programs that can be synthesized. The main goal of this project is to advance the state-of-the-art in program synthesis by developing much more efficient and scalable synthesis techniques. This research could potentially broaden the applicability and scalability of program synthesis which could enable disruptive changes to both end-users and programmers. The investigator will include both graduate and undergraduate students in this project.\r\n \r\nThis project investigates the foundations and instantiations of the synthesis using abstraction refinement (SYNGAR) paradigm. In the SYNGAR paradigm, an abstract synthesizer generates candidates programs that satisfy the specification with respect to an abstract semantics,  and an abstraction refinement engine constructs new abstractions that rule out spurious programs returned by the abstract synthesizer. Building on previous work done by the investigators, the project develops (a) new abstract synthesis algorithms that can efficiently handle richer language features such as recursion and higher-order functions; (b) automated & efficient abstraction refinement algorithms; (c) incremental synthesis techniques that can reuse knowledge from previous iterations; and (d) specification inference techniques to reduce the effort required to integrate new primitives that can be used by the synthesizer.  The project will develop tools and apply these ideas to different domains, such as numerical/statistical computing, text processing, and programming with complex Application Programmer Interfaces (APIs).\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Isil",
   "pi_last_name": "Dillig",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Isil Dillig",
   "pi_email_addr": "isil@cs.utexas.edu",
   "nsf_id": "000674237",
   "pi_start_date": "2018-06-04",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Texas at Austin",
  "inst_street_address": "110 INNER CAMPUS DR",
  "inst_street_address_2": "",
  "inst_city_name": "AUSTIN",
  "inst_state_code": "TX",
  "inst_state_name": "Texas",
  "inst_phone_num": "5124716424",
  "inst_zip_code": "787121139",
  "inst_country_name": "United States",
  "cong_dist_code": "25",
  "st_cong_dist_code": "TX25",
  "org_lgl_bus_name": "UNIVERSITY OF TEXAS AT AUSTIN",
  "org_prnt_uei_num": "",
  "org_uei_num": "V6AFQPN18437"
 },
 "perf_inst": {
  "perf_inst_name": "University of Texas at Austin",
  "perf_str_addr": "3925 West Braker Lane, Ste 11072",
  "perf_city_name": "Austin",
  "perf_st_code": "TX",
  "perf_st_name": "Texas",
  "perf_zip_code": "787595316",
  "perf_ctry_code": "US",
  "perf_cong_dist": "37",
  "perf_st_cong_dist": "TX37",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "8206",
   "pgm_ref_txt": "Formal Methods and Verification"
  },
  {
   "pgm_ref_code": "9102",
   "pgm_ref_txt": "WOMEN, MINORITY, DISABLED, NEC"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 350000.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 16000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-8bcca6ef-7fff-077c-f03c-20f877a7a585\"> <span id=\"docs-internal-guid-e77fd39e-7fff-140b-df1f-16dd7e9e5a49\"><br />\n<p dir=\"ltr\"><span>The main goal of this project was to advance the state-of-the-art in program synthesis by combining abstract interpretation and counterexample-guided inductive synthesis. In particular, the idea is to use static analysis to narrow down the search space that a program synthesizer needs to explore. Intuitively, the use of program abstractions allows proving that a part of the search space cannot possibly contain the ground truth program of interest.&nbsp; As a result, such abstraction-based approaches can greatly accelerate the search for desired programs.&nbsp;</span></p>\n<br />\n<p dir=\"ltr\"><span>Towards this goal, the project has developed several novel program synthesis algorithms&nbsp; and applied them to a number of different domains. In particular, the project led to the following concrete outcomes:</span></p>\n<p dir=\"ltr\"><span>&nbsp;</span>- We developed novel conflict-driven synthesis algorithms that leverage program abstractions;</p>\n<p dir=\"ltr\">- We proposed effective algorithms for synthesizing recursive procedures;</p>\n<p dir=\"ltr\">- We applied these techniques to many different application domains of interest targeting both software developers and end users. Concrete applications include data science tasks, information retrieval problems, data migration, ADT refactoring, and image search/manipulation.</p>\n<br />\n<p dir=\"ltr\"><span>All of these results were published in relevant conferences and journals (PLDI, POPL, OOPSLA, VLDB etc) and disseminated to communities of interest through both publications and presentations. Additionally, the project was also instrumental in training graduate and undergraduate students at UT Austin, and results from this project made their way into (parts of) dissertations of PhD students as well as honors theses of undergraduate students. </span></p>\n<div><span><br /></span></div>\n</span>\n<p dir=\"ltr\">&nbsp;</p>\n<div><span><br /></span></div>\n</span></p>\n<p>&nbsp;</p><br>\n<p>\n Last Modified: 12/30/2023<br>\nModified by: Isil&nbsp;Dillig</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\n \n\n\n\nThe main goal of this project was to advance the state-of-the-art in program synthesis by combining abstract interpretation and counterexample-guided inductive synthesis. In particular, the idea is to use static analysis to narrow down the search space that a program synthesizer needs to explore. Intuitively, the use of program abstractions allows proving that a part of the search space cannot possibly contain the ground truth program of interest. As a result, such abstraction-based approaches can greatly accelerate the search for desired programs.\n\n\n\n\nTowards this goal, the project has developed several novel program synthesis algorithms and applied them to a number of different domains. In particular, the project led to the following concrete outcomes:\n\n\n- We developed novel conflict-driven synthesis algorithms that leverage program abstractions;\n\n\n- We proposed effective algorithms for synthesizing recursive procedures;\n\n\n- We applied these techniques to many different application domains of interest targeting both software developers and end users. Concrete applications include data science tasks, information retrieval problems, data migration, ADT refactoring, and image search/manipulation.\n\n\n\n\nAll of these results were published in relevant conferences and journals (PLDI, POPL, OOPSLA, VLDB etc) and disseminated to communities of interest through both publications and presentations. Additionally, the project was also instrumental in training graduate and undergraduate students at UT Austin, and results from this project made their way into (parts of) dissertations of PhD students as well as honors theses of undergraduate students. \n\n\n\n\n\n\n\n\n\n\n\n\t\t\t\t\tLast Modified: 12/30/2023\n\n\t\t\t\t\tSubmitted by: IsilDillig\n"
 }
}