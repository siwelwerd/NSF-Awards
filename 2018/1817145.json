{
 "awd_id": "1817145",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Collaborative Research: Semantic Foundations for Hole-Driven Development",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2018-10-01",
 "awd_exp_date": "2021-09-30",
 "tot_intn_awd_amt": 250000.0,
 "awd_amount": 250000.0,
 "awd_min_amd_letter_date": "2018-05-30",
 "awd_max_amd_letter_date": "2019-11-25",
 "awd_abstract_narration": "Software developers today spend much of their time editing programs that are missing pieces or that contain transient errors of various sorts. Conventional language definitions are silent about programs with \"holes\" like these. As a result, current development tools resort to ad hoc heuristics that fail to provide precise, accurate feedback about the program exactly when the developer needs it most. To tackle the problem of programs with holes directly, the project's novelties are to provide (1) a principled mathematical characterization of programs with holes, and (2) an open source development environment called Hazel designed from the ground up to support hole-driven development. The project's impacts are that (1) Hazel will initially target CS instructors, students, and domain scientists working in STEM fields, all of whom stand to benefit from more precise, live feedback throughout the development process; and (2) the theoretical foundations and prototype will inform the design of other software development environments both in research and industry, much like programming language theory has had a major impact on programming language and compiler design in the past decades.\r\n\r\nBy applying the rigorous methodology of programming language theory to problems in programming environment design, the project will open up substantial new research directions for semanticists and tool designers alike. This project has several related specific aims that support the practice and (currently under-developed) theory of interactive software development. These aims are connected by a common technical device: Typed Holes. Specifically, the project will develop (1) a static semantics for typed holes, (2) a dynamic semantics for live programming with typed holes, (3) a semantics for structured edit actions that insert typed holes automatically, and (4) a mechanism that uses typed holes to support programming by direct manipulation of graphical user interfaces inside the program editor.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "R Benjamin",
   "pi_last_name": "Shapiro",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "R Benjamin Shapiro",
   "pi_email_addr": "rbs@cs.washington.edu",
   "nsf_id": "000618607",
   "pi_start_date": "2019-03-26",
   "pi_end_date": null
  },
  {
   "pi_role": "Former Principal Investigator",
   "pi_first_name": "Matthew",
   "pi_last_name": "Hammer",
   "pi_mid_init": "A",
   "pi_sufx_name": "",
   "pi_full_name": "Matthew A Hammer",
   "pi_email_addr": "Matthew.Hammer@colorado.edu",
   "nsf_id": "000702529",
   "pi_start_date": "2018-05-30",
   "pi_end_date": "2019-03-26"
  }
 ],
 "inst": {
  "inst_name": "University of Colorado at Boulder",
  "inst_street_address": "3100 MARINE ST",
  "inst_street_address_2": "STE 481 572 UCB",
  "inst_city_name": "Boulder",
  "inst_state_code": "CO",
  "inst_state_name": "Colorado",
  "inst_phone_num": "3034926221",
  "inst_zip_code": "803090001",
  "inst_country_name": "United States",
  "cong_dist_code": "02",
  "st_cong_dist_code": "CO02",
  "org_lgl_bus_name": "THE REGENTS OF THE UNIVERSITY OF COLORADO",
  "org_prnt_uei_num": "",
  "org_uei_num": "SPVKK1RC2MZ3"
 },
 "perf_inst": {
  "perf_inst_name": "University of Colorado at Boulder",
  "perf_str_addr": "3100 Marine Street, Room 481",
  "perf_city_name": "Boulder",
  "perf_st_code": "CO",
  "perf_st_name": "Colorado",
  "perf_zip_code": "803090572",
  "perf_ctry_code": "US",
  "perf_cong_dist": "02",
  "perf_st_cong_dist": "CO02",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 250000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p id=\"docs-internal-guid-eee244a9-7fff-56cf-3cab-25947615387c\" style=\"line-height: 1.2; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 12pt; font-family: Times,serif; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">The overarching goal of the project is to investigate new programming language techniques for reasoning about programs with missing pieces, or &ldquo;holes,&rdquo; so that programming environments can provide more useful information to users while they are building, editing, and refactoring programs.</span></p>\n<p>&nbsp;</p>\n<p style=\"line-height: 1.2; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 12pt; font-family: Times,serif; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">The project produced research contributions in the areas of live programming, structure editing, and program synthesis. First, the project developed a technique for executing programs with holes, in order to give the user live feedback about the dynamic behavior of the partial program. Second, the project developed a technique for allowing libraries and experienced users to customize the code editor with type-specific graphical user interfaces (GUIs) to augment the ordinary text-editing user interface. These two techniques were also implemented within the Hazel programming environment (</span><a style=\"text-decoration: none;\" href=\"https://hazel.org/\"><span style=\"font-size: 12pt; font-family: Times,serif; color: #1155cc; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;\">https://hazel.org/</span></a><span style=\"font-size: 12pt; font-family: Times,serif; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">) and released as open-source software (</span><a style=\"text-decoration: none;\" href=\"https://github.com/hazelgrove/hazel\"><span style=\"font-size: 12pt; font-family: Times,serif; color: #1155cc; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;\">https://github.com/hazelgrove/hazel</span></a><span style=\"font-size: 12pt; font-family: Times,serif; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">). The project also produced a new program synthesis algorithm that fills holes according to user-specified input-output examples. This technique was implemented and evaluated in the Smyth program synthesizer (</span><a style=\"text-decoration: none;\" href=\"https://uchicago-pl.github.io/smyth/\"><span style=\"font-size: 12pt; font-family: Times,serif; color: #1155cc; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;\">https://uchicago-pl.github.io/smyth/</span></a><span style=\"font-size: 12pt; font-family: Times,serif; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">) and released as open-source software (</span><a style=\"text-decoration: none;\" href=\"https://github.com/UChicago-PL/smyth\"><span style=\"font-size: 12pt; font-family: Times,serif; color: #1155cc; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;\">https://github.com/UChicago-PL/smyth</span></a><span style=\"font-size: 12pt; font-family: Times,serif; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">).</span></p>\n<p>&nbsp;</p>\n<p style=\"line-height: 1.2; margin-top: 0pt; margin-bottom: 12pt;\" dir=\"ltr\"><span style=\"font-size: 12pt; font-family: Times,serif; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">These results contribute to a type-theoretic formulation of &ldquo;programming&rdquo; as an activity. We anticipate that this will be the foundation for substantial additional research and development of more interactive user interfaces for programming.</span></p><br>\n<p>\n\t\t\t\t      \tLast Modified: 02/15/2022<br>\n\t\t\t\t\tModified by: R. Benjamin&nbsp;Shapiro</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "The overarching goal of the project is to investigate new programming language techniques for reasoning about programs with missing pieces, or \"holes,\" so that programming environments can provide more useful information to users while they are building, editing, and refactoring programs.\n\n \nThe project produced research contributions in the areas of live programming, structure editing, and program synthesis. First, the project developed a technique for executing programs with holes, in order to give the user live feedback about the dynamic behavior of the partial program. Second, the project developed a technique for allowing libraries and experienced users to customize the code editor with type-specific graphical user interfaces (GUIs) to augment the ordinary text-editing user interface. These two techniques were also implemented within the Hazel programming environment (https://hazel.org/) and released as open-source software (https://github.com/hazelgrove/hazel). The project also produced a new program synthesis algorithm that fills holes according to user-specified input-output examples. This technique was implemented and evaluated in the Smyth program synthesizer (https://uchicago-pl.github.io/smyth/) and released as open-source software (https://github.com/UChicago-PL/smyth).\n\n \nThese results contribute to a type-theoretic formulation of \"programming\" as an activity. We anticipate that this will be the foundation for substantial additional research and development of more interactive user interfaces for programming.\n\n\t\t\t\t\tLast Modified: 02/15/2022\n\n\t\t\t\t\tSubmitted by: R. Benjamin Shapiro"
 }
}