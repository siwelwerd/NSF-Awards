{
 "awd_id": "1822816",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "Collaborative Research: CSEdPad: Investigating and Scaffolding Students' Mental Models during Computer Programming Tasks to Improve Learning, Engagement, and Retention",
 "cfda_num": "47.070",
 "org_code": "05020000",
 "po_phone": "7032927878",
 "po_email": "slim@nsf.gov",
 "po_sign_block_name": "Soo-Siang Lim",
 "awd_eff_date": "2018-09-01",
 "awd_exp_date": "2023-08-31",
 "tot_intn_awd_amt": 499136.0,
 "awd_amount": 499136.0,
 "awd_min_amd_letter_date": "2018-07-31",
 "awd_max_amd_letter_date": "2018-07-31",
 "awd_abstract_narration": "Computing skills, such as computer programming, are an integral part of many disciplines, including the fields of science, technology, engineering, and math (STEM). Although such skills are in high-demand, and the number of aspiring Computer Science (CS) students is encouraging, a large gap between the supply of CS graduates and the demand persists because, for instance, college CS programs suffer from high attrition rates in introductory CS courses. One reason for the high attrition rates in introductory CS courses is the inherent complexity of CS concepts and tasks. To help students better cope with the high level of complexity, this project investigates a novel education technology, called CSEdPad (CS Education Pad), meant to ease students' introduction to programming during their early encounters with CS concepts and tasks. Moreover, the project forges new frontiers in CS education through a research program that advances our understanding of students' source code comprehension, learning, and motivational processes. The CSEdPad project has the potential to transform how students perceive computer science, increase their programming skills and self-efficacy, and lead to increased retention rates. The result will be a win-win-win situation for aspiring students, CS programs and their organizations, and the overall economy.\r\n\r\nThe CSEdPad system design brings to bear proven educational technologies and techniques to improve students' mental model construction, learning, engagement, and retention in CS education. In particular, the system targets source code comprehension, a critical skill for both learners and professionals. It monitors and scaffolds source code comprehension processes while students engage in a variety of code comprehension tasks. Key approaches being explored include Animated Pedagogical Agents, self-explanation, and the Open Social Learner Model. Outcome variables include comprehension measures, learning gains, engagement level, retention, and self-efficacy. Due to its interdisciplinary nature, the project will impact several fields including Computer Science education, cognitive psychology, intelligent tutoring systems, and artificial intelligence. Students participating in the experiments will be selected from a diverse student body with respect to gender, ethnicity, and socioeconomic status. An increase in recruitment and retention of students from these populations will have far-reaching implications.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "IIS",
 "org_div_long_name": "Division of Information & Intelligent Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Vasile",
   "pi_last_name": "Rus",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Vasile Rus",
   "pi_email_addr": "vrus@memphis.edu",
   "nsf_id": "000492309",
   "pi_start_date": "2018-07-31",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Scott",
   "pi_last_name": "Fleming",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Scott Fleming",
   "pi_email_addr": "Scott.Fleming@memphis.edu",
   "nsf_id": "000607695",
   "pi_start_date": "2018-07-31",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Memphis",
  "inst_street_address": "115 JOHN WILDER TOWER",
  "inst_street_address_2": "",
  "inst_city_name": "MEMPHIS",
  "inst_state_code": "TN",
  "inst_state_name": "Tennessee",
  "inst_phone_num": "9016783251",
  "inst_zip_code": "381520001",
  "inst_country_name": "United States",
  "cong_dist_code": "09",
  "st_cong_dist_code": "TN09",
  "org_lgl_bus_name": "UNIVERSITY OF MEMPHIS",
  "org_prnt_uei_num": "",
  "org_uei_num": "F2VSMAKDH8Z7"
 },
 "perf_inst": {
  "perf_inst_name": "The University of Memphis",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "TN",
  "perf_st_name": "Tennessee",
  "perf_zip_code": "381523240",
  "perf_ctry_code": "US",
  "perf_cong_dist": "09",
  "perf_st_cong_dist": "TN09",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "005y00",
   "pgm_ele_name": "STEM + Computing (STEM+C) Part"
  },
  {
   "pgm_ele_code": "153600",
   "pgm_ele_name": "S-STEM-Schlr Sci Tech Eng&Math"
  },
  {
   "pgm_ele_code": "798000",
   "pgm_ele_name": "ECR-EDU Core Research"
  },
  {
   "pgm_ele_code": "802000",
   "pgm_ele_name": "Cyberlearn & Future Learn Tech"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "063Z",
   "pgm_ref_txt": "FW-HTF Futr Wrk Hum-Tech Frntr"
  },
  {
   "pgm_ref_code": "8045",
   "pgm_ref_txt": "Cyberlearn & Future Learn Tech"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0418",
   "app_name": "NSF Education & Human Resource",
   "app_symb_id": "040106",
   "fund_code": "04001819DB",
   "fund_name": "NSF Education & Human Resource",
   "fund_symb_id": "040106"
  },
  {
   "app_code": "13XX",
   "app_name": "H-1B FUND, EHR, NSF",
   "app_symb_id": "045176",
   "fund_code": "1300XXXXDB",
   "fund_name": "H-1B FUND, EDU, NSF",
   "fund_symb_id": "045176"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 499136.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-7091e5df-7fff-c9c6-402b-09e0a69aacca\"> </span></p>\n<p><span id=\"docs-internal-guid-d14ba9d8-7fff-4832-78e0-2f115196c518\"> </span></p>\n<p>The project provided new insights into learning and comprehension processes while learners engage in code comprehension and computer programming learning activities. The project resulted in several prototypes that are bot effective interventions and research vehicles that can be used to explore the role of effective strategies for code comprehension and learning. Indeed, the developed instructional interventions can be used by educators to help their students better comprehend code and learn programming.</p>\n<p>Several disciplines will benefit from the outcomes of this project, notably, education, cognitive science, artificial intelligence, and data science. The emerging field of Data Science can benefit from our research as the novel code comprehension strategies and interventions can be used to help Data Science students better learn computer programming and since Data Science is a multidisciplinary field our work can potentially impact all STEM and non-STEM majors enrolled in Data Science programs. By exploring the role of Large Language Models (LLMs) for explaining code and assessing learners&rsquo; self-explanations we provided new insights about the potential and limitations of such state-of-the-art artificial intelligence methods as well as offer solutions to advance further their capabilities for the task relevant to our project.&nbsp;</p>\n<p>More specifically, we developed two intelligent tutoring systems (ITS) for code comprehension and learning. One platform was based on a full-dialogue intelligent tutoring system previously developed by our research team called DeepTutor. The platform was adapted to the new domain of computer programming implements an instructional strategy of scaffolded self-explanation. To this end, we developed a novel framework for code comprehension based on code comprehension theories, self-explanations theories, and motivational and cognitive load theories. The novel framework stipulates that explanations of code should detail three levels of comprehension: the domain model, the programming or implementation model, and the integrated model. To the best of our knowledge, this is the first and only theory-based type of code explanation.</p>\n<p>The other ITS was built on top of the PCEX platform developed earlier by our team to support interactive explorations of worked examples. In the original PCEX systems students were able to passively explore expert explanations for each line of code. The extended version of PCEX, which we called PCEX Tutor, enabled students to actively provide their own line-by-line explanations of code which are automatically assessed. The PCEX tutor maintained a structural dialog with students in this process providing feedback and scaffolding.</p>\n<p>We used the developed research platforms to explore a number of fundamental questions on code comprehension and learning such as: What is the nature of novices' self-explanations of code when prompted to freely explain the code with minimal or no training?, What are the key factors to assess learners' comprehension of code?, and How effective is scaffolded self-explanation for code comprehension and learning?.</p>\n<p>The project explored through several pilot experiments the role of self-explanations during source code comprehension processes. We have shown that eliciting self-explanations is effective. We also showed that eliciting self-explanations reveals students' reasoning, enabling us to detect any misconception the student may have and thus triggering appropriate, individualized feedback. Furthermore, we discovered that due to the nature of self-explanations during source code comprehension activities, there are some additional challenges to automatically evaluate the self-explanations as they combine natural language expressions with references to code elements such as variable names. The results indicate that self-explanations are a good strategy to detect misconceptions and therefore opportunities for meaningful, personalized feedback thus reinforcing self-explanation theories.&nbsp;</p>\n<p>We also investigated the power of OSLM to keep the student aware of their knowledge of programming constructs and to guide them to the most appropriate learning activities (worked-out examples and problems). To achieve this goal, we developed two personalized guidance mechanisms, one based on concept-based content recommendation and one based on learner-controlled social comparison. The value of these mechanisms was explored in several semester-long classroom studies. We also explored to what extent visual and verbal explanations of recommendations affect learners&rsquo; engagement with recommended learning activities.</p>\n<p>The project generated a number of products such as datasets, advanced instructional technologies, and publications in major venues as further detailed next. Datasets that are released or planned to be released are DeepCode dataset, SelfCode dataset, and PCEX Tutor dataset. The project trained 9 graduate students including 4 students from underrepresented groups in Computer Science. The outcomes of the project have been widely disseminated through 28 peer-reviewed publications, numerous presentations, and demos at major conferences related to artificial intelligence in education, YouTube videos, and the project website which is publicly accessible. Notably, 28 peer-reviewed, archived publications have been produced, two major intelligent tutoring systems and research platforms, and three large datasets that are publicly available for the broader community of researchers and practitioners.</p>\n<p dir=\"ltr\">&nbsp;</p><br>\n<p>\n Last Modified: 12/28/2023<br>\nModified by: Vasile&nbsp;Rus</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\n \n\n\n \n\n\nThe project provided new insights into learning and comprehension processes while learners engage in code comprehension and computer programming learning activities. The project resulted in several prototypes that are bot effective interventions and research vehicles that can be used to explore the role of effective strategies for code comprehension and learning. Indeed, the developed instructional interventions can be used by educators to help their students better comprehend code and learn programming.\n\n\nSeveral disciplines will benefit from the outcomes of this project, notably, education, cognitive science, artificial intelligence, and data science. The emerging field of Data Science can benefit from our research as the novel code comprehension strategies and interventions can be used to help Data Science students better learn computer programming and since Data Science is a multidisciplinary field our work can potentially impact all STEM and non-STEM majors enrolled in Data Science programs. By exploring the role of Large Language Models (LLMs) for explaining code and assessing learners self-explanations we provided new insights about the potential and limitations of such state-of-the-art artificial intelligence methods as well as offer solutions to advance further their capabilities for the task relevant to our project.\n\n\nMore specifically, we developed two intelligent tutoring systems (ITS) for code comprehension and learning. One platform was based on a full-dialogue intelligent tutoring system previously developed by our research team called DeepTutor. The platform was adapted to the new domain of computer programming implements an instructional strategy of scaffolded self-explanation. To this end, we developed a novel framework for code comprehension based on code comprehension theories, self-explanations theories, and motivational and cognitive load theories. The novel framework stipulates that explanations of code should detail three levels of comprehension: the domain model, the programming or implementation model, and the integrated model. To the best of our knowledge, this is the first and only theory-based type of code explanation.\n\n\nThe other ITS was built on top of the PCEX platform developed earlier by our team to support interactive explorations of worked examples. In the original PCEX systems students were able to passively explore expert explanations for each line of code. The extended version of PCEX, which we called PCEX Tutor, enabled students to actively provide their own line-by-line explanations of code which are automatically assessed. The PCEX tutor maintained a structural dialog with students in this process providing feedback and scaffolding.\n\n\nWe used the developed research platforms to explore a number of fundamental questions on code comprehension and learning such as: What is the nature of novices' self-explanations of code when prompted to freely explain the code with minimal or no training?, What are the key factors to assess learners' comprehension of code?, and How effective is scaffolded self-explanation for code comprehension and learning?.\n\n\nThe project explored through several pilot experiments the role of self-explanations during source code comprehension processes. We have shown that eliciting self-explanations is effective. We also showed that eliciting self-explanations reveals students' reasoning, enabling us to detect any misconception the student may have and thus triggering appropriate, individualized feedback. Furthermore, we discovered that due to the nature of self-explanations during source code comprehension activities, there are some additional challenges to automatically evaluate the self-explanations as they combine natural language expressions with references to code elements such as variable names. The results indicate that self-explanations are a good strategy to detect misconceptions and therefore opportunities for meaningful, personalized feedback thus reinforcing self-explanation theories.\n\n\nWe also investigated the power of OSLM to keep the student aware of their knowledge of programming constructs and to guide them to the most appropriate learning activities (worked-out examples and problems). To achieve this goal, we developed two personalized guidance mechanisms, one based on concept-based content recommendation and one based on learner-controlled social comparison. The value of these mechanisms was explored in several semester-long classroom studies. We also explored to what extent visual and verbal explanations of recommendations affect learners engagement with recommended learning activities.\n\n\nThe project generated a number of products such as datasets, advanced instructional technologies, and publications in major venues as further detailed next. Datasets that are released or planned to be released are DeepCode dataset, SelfCode dataset, and PCEX Tutor dataset. The project trained 9 graduate students including 4 students from underrepresented groups in Computer Science. The outcomes of the project have been widely disseminated through 28 peer-reviewed publications, numerous presentations, and demos at major conferences related to artificial intelligence in education, YouTube videos, and the project website which is publicly accessible. Notably, 28 peer-reviewed, archived publications have been produced, two major intelligent tutoring systems and research platforms, and three large datasets that are publicly available for the broader community of researchers and practitioners.\n\n\n\t\t\t\t\tLast Modified: 12/28/2023\n\n\t\t\t\t\tSubmitted by: VasileRus\n"
 }
}