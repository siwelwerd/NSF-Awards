{
 "awd_id": "1749895",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CAREER: Principled and Practical Software Shielding against Advanced Exploits",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2018-06-01",
 "awd_exp_date": "2024-11-30",
 "tot_intn_awd_amt": 499899.0,
 "awd_amount": 499899.0,
 "awd_min_amd_letter_date": "2018-03-12",
 "awd_max_amd_letter_date": "2022-06-02",
 "awd_abstract_narration": "The exploitation of memory corruption vulnerabilities in popular software is among the leading causes of system compromise and malware infection. While there are several reasons behind this proliferation of exploitable bugs, the reliance on unsafe programming languages such as C and C++ and the complexity of modern software play a major role. The continuous discovery of previously unknown (zero-day) vulnerabilities in browsers, document viewers, and other widely used software, and the lack of effective defenses against recent exploitation techniques that leverage memory disclosure vulnerabilities, necessitate the development of additional defense mechanisms.\r\n\r\nThe main objective of this project is the design of software shielding techniques and their practical applicability to commodity software and systems. The key innovative aspects of the investigated techniques include: i) principled design that considers the strong adversarial models imposed by the latest exploitation advancements, i.e., disclosure-aided exploitation and data-only attacks, against which effective countermeasures remain an open problem; ii) novel code specialization and data protection techniques, to introduce process-level unpredictability and limit the exposure of critical data; iii) hardware-assisted implementation by leveraging recent and upcoming processor features to minimize the performance impact of the applied protections; and iv) focus on practical considerations, such as operational compatibility and non-disruptive deployment. The outcomes of this research effort are expected to improve the state of the art in defenses against advanced exploits, and achieve substantial practical impact by shielding existing vulnerable applications against exploitation, benefiting both end users and security researchers. The project also provides students the opportunity to conduct research in cybersecurity, and fosters the integration of cybersecurity into high school education through hands-on workshops for students and seminars for science teachers.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Michail",
   "pi_last_name": "Polychronakis",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Michail Polychronakis",
   "pi_email_addr": "mikepo@cs.stonybrook.edu",
   "nsf_id": "000636621",
   "pi_start_date": "2018-03-12",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "SUNY at Stony Brook",
  "inst_street_address": "W5510 FRANKS MELVILLE MEMORIAL LIBRARY",
  "inst_street_address_2": "",
  "inst_city_name": "STONY BROOK",
  "inst_state_code": "NY",
  "inst_state_name": "New York",
  "inst_phone_num": "6316329949",
  "inst_zip_code": "117940001",
  "inst_country_name": "United States",
  "cong_dist_code": "01",
  "st_cong_dist_code": "NY01",
  "org_lgl_bus_name": "THE RESEARCH FOUNDATION FOR THE STATE UNIVERSITY OF NEW YORK",
  "org_prnt_uei_num": "M746VC6XMNH9",
  "org_uei_num": "M746VC6XMNH9"
 },
 "perf_inst": {
  "perf_inst_name": "SUNY at Stony Brook",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "NY",
  "perf_st_name": "New York",
  "perf_zip_code": "117944400",
  "perf_ctry_code": "US",
  "perf_cong_dist": "01",
  "perf_st_cong_dist": "NY01",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "1045",
   "pgm_ref_txt": "CAREER-Faculty Erly Career Dev"
  },
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  }
 ],
 "app_fund": [
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01002223DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 95026.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 97603.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 99965.0
  },
  {
   "fund_oblg_fiscal_yr": 2021,
   "fund_oblg_amt": 102399.0
  },
  {
   "fund_oblg_fiscal_yr": 2022,
   "fund_oblg_amt": 104906.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The continuous discovery of previously unknown (zero-day) vulnerabilities in browsers, document viewers, and other widely used software, and the lack of effective defenses against recent exploitation techniques that leverage memory disclosure vulnerabilities, necessitate the development of additional defense mechanisms. The core scientific contribution of this project lies in the design and implementation of several innovative security techniques to protect both user-level and operating system software from memory-related exploits. Major accomplishments include:</p>\r\n<ul>\r\n<li><em>Code Specialization and Randomization. </em>The team created methods to remove (or \"debloat\") unneeded code at compilation time based on specific program configurations. By trimming unnecessary functionality (such as rarely used libraries or disabled features), the remaining program is not only more efficient, but also has fewer potential vulnerabilities that attackers could exploit, and fewer instruction sequences that could be used as part of memory corruption exploits. In addition, compiler-based randomization techniques make it harder for attackers to guess a program's internal structure.</li>\r\n<li><em>Selective Data Protection. </em>The project developed approaches that automatically detect critical variables (such as passwords or encryption keys) and isolate them in protected regions of memory using encryption. This isolation prevents attackers from reading or tampering with high-value data, even if they manage to compromise other parts of a program.</li>\r\n<li><em>System Call Filtering and Privilege Reduction. </em>The team explored ways to limit the \"attack surface\" of both user applications and operating system services. New analysis tools identify exactly which system calls a program truly needs, enabling the enforcement of more restrictive policies and preventing the use of dangerous OS features. Another tool automatically reduces the powerful privileges required by legacy (\"setuid\") programs, dramatically lowering the risk of complete system compromise.</li>\r\n<li><em>Kernel Hardening.</em> Novel kernel-level defenses protect sensitive memory-resident data structures used by the operating system for critical operations. By separating or encrypting metadata, attackers face major hurdles when attempting to gain illicit access or corrupt vital parts of the kernel.</li>\r\n</ul>\r\n<p>Beyond advancing fundamental research in computer security, this project's outcomes offer clear benefits to both industry and the public. Making software harder to exploit directly enhances data privacy, protects critical infrastructure, and supports trusted online services. By publicly releasing the open-source code of the developed prototypes and sharing insights with the security community, the project facilitated wide-reaching improvements in secure software development practices. Publicly released tools include:</p>\r\n<ul>\r\n<li>CCR: compiler-rewriter cooperation framework<br />https://github.com/kevinkoo001/CCR</li>\r\n<li>Confine: container attack surface reduction<br />https://github.com/shamedgh/confine</li>\r\n<li>Temporal system call specialization<br />https://github.com/shamedgh/temporal-specialization</li>\r\n<li>C2C: configuration-driven system call filtering<br />https://github.com/shamedgh/c2c</li>\r\n<li>Selective Data Protection<br />https://github.com/taptipalit/selective_data_protection<br />https://github.com/taptipalit/dynpta</li>\r\n<li>Decap: application privilege reduction<br />https://github.com/hasanmdme/decap</li>\r\n<li>xMP: selective memory protection for kernel and user space<br />https://github.com/virtsec/xmp</li>\r\n<li>ISLAB: kernel metadata protection<br />https://github.com/tum-itsec/islab</li>\r\n<li>Safeslab: kernel-level protection against use-after-free attacks<br />https://github.com/tum-itsec/safeslab</li>\r\n</ul>\r\n<p>Students and collaborators gained hands-on experience with state-of-the-art compiler technologies, kernel engineering, attack surface reduction, and virtualization-based security. This expertise is transferred into academic, governmental, and commercial settings, strengthening our collective cybersecurity posture.</p>\r\n<p>In summary, the project yielded new, practical tools and frameworks for defending systems against memory-based attacks, reducing the likelihood of large-scale security breaches, and fostering the next generation of secure software systems.</p><br>\n<p>\n Last Modified: 01/25/2025<br>\nModified by: Michail&nbsp;Polychronakis</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nThe continuous discovery of previously unknown (zero-day) vulnerabilities in browsers, document viewers, and other widely used software, and the lack of effective defenses against recent exploitation techniques that leverage memory disclosure vulnerabilities, necessitate the development of additional defense mechanisms. The core scientific contribution of this project lies in the design and implementation of several innovative security techniques to protect both user-level and operating system software from memory-related exploits. Major accomplishments include:\r\n\r\nCode Specialization and Randomization. The team created methods to remove (or \"debloat\") unneeded code at compilation time based on specific program configurations. By trimming unnecessary functionality (such as rarely used libraries or disabled features), the remaining program is not only more efficient, but also has fewer potential vulnerabilities that attackers could exploit, and fewer instruction sequences that could be used as part of memory corruption exploits. In addition, compiler-based randomization techniques make it harder for attackers to guess a program's internal structure.\r\nSelective Data Protection. The project developed approaches that automatically detect critical variables (such as passwords or encryption keys) and isolate them in protected regions of memory using encryption. This isolation prevents attackers from reading or tampering with high-value data, even if they manage to compromise other parts of a program.\r\nSystem Call Filtering and Privilege Reduction. The team explored ways to limit the \"attack surface\" of both user applications and operating system services. New analysis tools identify exactly which system calls a program truly needs, enabling the enforcement of more restrictive policies and preventing the use of dangerous OS features. Another tool automatically reduces the powerful privileges required by legacy (\"setuid\") programs, dramatically lowering the risk of complete system compromise.\r\nKernel Hardening. Novel kernel-level defenses protect sensitive memory-resident data structures used by the operating system for critical operations. By separating or encrypting metadata, attackers face major hurdles when attempting to gain illicit access or corrupt vital parts of the kernel.\r\n\r\n\n\nBeyond advancing fundamental research in computer security, this project's outcomes offer clear benefits to both industry and the public. Making software harder to exploit directly enhances data privacy, protects critical infrastructure, and supports trusted online services. By publicly releasing the open-source code of the developed prototypes and sharing insights with the security community, the project facilitated wide-reaching improvements in secure software development practices. Publicly released tools include:\r\n\r\nCCR: compiler-rewriter cooperation framework\nhttps://github.com/kevinkoo001/CCR\r\nConfine: container attack surface reduction\nhttps://github.com/shamedgh/confine\r\nTemporal system call specialization\nhttps://github.com/shamedgh/temporal-specialization\r\nC2C: configuration-driven system call filtering\nhttps://github.com/shamedgh/c2c\r\nSelective Data Protection\nhttps://github.com/taptipalit/selective_data_protection\nhttps://github.com/taptipalit/dynpta\r\nDecap: application privilege reduction\nhttps://github.com/hasanmdme/decap\r\nxMP: selective memory protection for kernel and user space\nhttps://github.com/virtsec/xmp\r\nISLAB: kernel metadata protection\nhttps://github.com/tum-itsec/islab\r\nSafeslab: kernel-level protection against use-after-free attacks\nhttps://github.com/tum-itsec/safeslab\r\n\r\n\n\nStudents and collaborators gained hands-on experience with state-of-the-art compiler technologies, kernel engineering, attack surface reduction, and virtualization-based security. This expertise is transferred into academic, governmental, and commercial settings, strengthening our collective cybersecurity posture.\r\n\n\nIn summary, the project yielded new, practical tools and frameworks for defending systems against memory-based attacks, reducing the likelihood of large-scale security breaches, and fostering the next generation of secure software systems.\t\t\t\t\tLast Modified: 01/25/2025\n\n\t\t\t\t\tSubmitted by: MichailPolychronakis\n"
 }
}