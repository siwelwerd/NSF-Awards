{
 "awd_id": "1836942",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CPS: Small: Software-State Observability in CPS",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032925197",
 "po_email": "mmcclure@nsf.gov",
 "po_sign_block_name": "Marilyn McClure",
 "awd_eff_date": "2019-01-01",
 "awd_exp_date": "2022-12-31",
 "tot_intn_awd_amt": 499986.0,
 "awd_amount": 499986.0,
 "awd_min_amd_letter_date": "2018-09-12",
 "awd_max_amd_letter_date": "2018-09-12",
 "awd_abstract_narration": "Cyber-physical system (CPS) technologies, such as automated aircraft and cars, have become sufficiently complex that CPS software verification is now a major bottleneck in product development. This project examines new approaches for auto-generating reduced models of CPS software, in order to incorporate those models in analysis, for instance, in system-wide simulations or bug detection. This project will allow CPS software to be adapted and analyzed much more flexibility in comparison with state-of-the-art methods, which limit software developers by prohibiting use of many modern programming constructs and by penalizing iterative software improvements during the design process.\r\n\r\nThe project's intellectual merit is the introduction of a theory of software-state observability, which will have wide utility for CPS analysis including in applications such as online bug detection. To this end the project concentrates on three specific aims: (i) the development of concepts for reduced-order software modeling based on static and dynamic analyses of CPS software programs, (ii) the formulation of a theory of software-state observability to enable state estimation across the boundaries of physical and software components, and (iii) the application of these theories to online bug monitoring for an open-source flight control system.\r\n\r\nThe project represents a fundamental departure from the conventional treatment of software in a CPS, where software must be tightly specified in advance, where the program must be carefully verified to prove that it meets specifications, and where after final validation the software is assumed to be essentially free of bugs. Our approach permits developers much greater latitude in creating new CPS software by requiring reasonable but not excessive initial testing, as justified by better analysis tools and by online reliability monitoring. The result will enable more sophisticated and lower cost automated cars and unmanned aircraft. \r\n\r\nResults related to the project will be shared through archival publications and data will be made available online through Tufts University at https://tufts.box.com/s/aq305785bg2s3j29lls8u4wdpybzpcth. Software uploaded to this repository will be available under suitable licensing models (such as BSD or Apache). Data will be retained at least through the duration of this project.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Jason",
   "pi_last_name": "Rife",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Jason Rife",
   "pi_email_addr": "jason.rife@tufts.edu",
   "nsf_id": "000090073",
   "pi_start_date": "2018-09-12",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Samuel",
   "pi_last_name": "Guyer",
   "pi_mid_init": "Z",
   "pi_sufx_name": "",
   "pi_full_name": "Samuel Z Guyer",
   "pi_email_addr": "sguyer@cs.tufts.edu",
   "nsf_id": "000091427",
   "pi_start_date": "2018-09-12",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Tufts University",
  "inst_street_address": "80 GEORGE ST",
  "inst_street_address_2": "",
  "inst_city_name": "MEDFORD",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "6176273696",
  "inst_zip_code": "021555519",
  "inst_country_name": "United States",
  "cong_dist_code": "05",
  "st_cong_dist_code": "MA05",
  "org_lgl_bus_name": "TRUSTEES OF TUFTS COLLEGE",
  "org_prnt_uei_num": "WL9FLBRVPJJ7",
  "org_uei_num": "WL9FLBRVPJJ7"
 },
 "perf_inst": {
  "perf_inst_name": "Tufts University",
  "perf_str_addr": "574 Boston Ave",
  "perf_city_name": "Medford",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "021555539",
  "perf_ctry_code": "US",
  "perf_cong_dist": "05",
  "perf_st_cong_dist": "MA05",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  },
  {
   "pgm_ele_code": "791800",
   "pgm_ele_name": "CPS-Cyber-Physical Systems"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 499986.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>This project investigated approaches for integrating state-estimation and fault-detection tools into the development of automation software, for instance, to support control of autonomous aircraft and self-driving cars. Our specific aims included the development of graph-based models for cyberphysical-system (CPS) software, the integration of software and physical models, and their application to closed-loop state-estimation systems, including the detection both of software bugs and of physical faults.&nbsp; At a high level, our approach decomposes a program into disjoint sets of commands (lines of code) such that elements in each set receive and process inputs concurrently. We call each such set a Temporal Segment (TS). The TS models a set of commands as an algebraic delay equation, which has the form <em>y</em>(<em>t</em> + &#8710;<em>t</em>) = <em>f</em> (<em>u</em>(<em>t</em>)). &nbsp;We tested these graph-based methods by applying them to analyze a representative automotive control code; these tools can be automated to apply to more general CPS software, by similarly decomposing those programs into temporal segments (TS).&nbsp; In our current efforts, we are developing a code-base related to processing LiDAR data. This work incorporates self-monitoring functions to detect physical, data, or processing anomalies. Our proposed approach will permit software engineers greater latitude in developing new software, paving the way for more flexible and effective integrated CPS systems and for fast verification, which will help spark emerging markets for low-cost unmanned aerial vehicles and automated ground transport.&nbsp; We created and made publicly available a significant codebase related to the LIDAR processing component of automated vehicle control system; we also extended our work to develop a concept for expanded bounding boxes, which reflect the safety envelope around an automated ground vehicle.&nbsp; Our educational impact includes training graduate students and creating a new collaborative robotics class concerning safety assurance for human-robot teams.</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 03/05/2023<br>\n\t\t\t\t\tModified by: Jason&nbsp;Rife</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThis project investigated approaches for integrating state-estimation and fault-detection tools into the development of automation software, for instance, to support control of autonomous aircraft and self-driving cars. Our specific aims included the development of graph-based models for cyberphysical-system (CPS) software, the integration of software and physical models, and their application to closed-loop state-estimation systems, including the detection both of software bugs and of physical faults.  At a high level, our approach decomposes a program into disjoint sets of commands (lines of code) such that elements in each set receive and process inputs concurrently. We call each such set a Temporal Segment (TS). The TS models a set of commands as an algebraic delay equation, which has the form y(t + &#8710;t) = f (u(t)).  We tested these graph-based methods by applying them to analyze a representative automotive control code; these tools can be automated to apply to more general CPS software, by similarly decomposing those programs into temporal segments (TS).  In our current efforts, we are developing a code-base related to processing LiDAR data. This work incorporates self-monitoring functions to detect physical, data, or processing anomalies. Our proposed approach will permit software engineers greater latitude in developing new software, paving the way for more flexible and effective integrated CPS systems and for fast verification, which will help spark emerging markets for low-cost unmanned aerial vehicles and automated ground transport.  We created and made publicly available a significant codebase related to the LIDAR processing component of automated vehicle control system; we also extended our work to develop a concept for expanded bounding boxes, which reflect the safety envelope around an automated ground vehicle.  Our educational impact includes training graduate students and creating a new collaborative robotics class concerning safety assurance for human-robot teams.\n\n \n\n\t\t\t\t\tLast Modified: 03/05/2023\n\n\t\t\t\t\tSubmitted by: Jason Rife"
 }
}