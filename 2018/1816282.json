{
 "awd_id": "1816282",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SaTC: CORE: Small: Information Flow Control Infrastructure for Single-Use Service Platforms",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2018-09-01",
 "awd_exp_date": "2023-08-31",
 "tot_intn_awd_amt": 500000.0,
 "awd_amount": 500000.0,
 "awd_min_amd_letter_date": "2018-08-17",
 "awd_max_amd_letter_date": "2018-08-17",
 "awd_abstract_narration": "Many applications are now being deployed on rich, distributed platforms, such as those for cloud computing and Internet of Things (IoT).  Such platforms can aid developers by launching their applications dynamically to align resource use with demand in serverless platforms and by composing fine-grained components into complete applications in microservice architectures.  Even with these advanced architectures, the system platforms themselves still have large trusted computing bases, where a single vulnerability may threaten the security of the entire platform.  This occurs because platform services are available to all applications and are typically fully trusted by other platform services.  As a result, a malicious application may compromise a vulnerable service to gain access to another application's data and/or compromise the integrity of another application's computing.\r\n\r\nThe project will produce theories and techniques to deploy platform services to protect applications using information flow control. First, it is advocated that  stateless platform services be deployed as single-use services: services launched on demand to perform an operation on behalf of a single command, much like serverless applications. Second, application data is protected by enforcing information flow control over single-use services, validating that enforcement services perform information flow control statically. Third, the project seeks to reduce trust in complex, monolithic services by developing methods to partition services into enforcement services and single-use services, which can be either validated or governed using information flow control.  In contrast to current platforms that enforce mandatory access control to protect hosts from untrusted applications, an infrastructure will be developed to build platforms that protect applications from potentially vulnerable services using information flow control.  As part of broader  impacts, this research examines methods for how to \"build security in\" to emerging distributed platforms.  A wide variety of commercial efforts are targeting container-based cloud and IoT platforms, but there is a dearth of infrastructure to aid programmers in constructing platforms that adhere to security requirements while achieving desired functionality.  The open-source tools and example platforms developed will be utilized in coursework and aggressively pitched to industry practitioners to gain feedback and increase adoption.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Trent",
   "pi_last_name": "Jaeger",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Trent Jaeger",
   "pi_email_addr": "trentj@ucr.edu",
   "nsf_id": "000465544",
   "pi_start_date": "2018-08-17",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Danfeng",
   "pi_last_name": "Zhang",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Danfeng Zhang",
   "pi_email_addr": "danfeng.zhang@duke.edu",
   "nsf_id": "000702947",
   "pi_start_date": "2018-08-17",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Pennsylvania State Univ University Park",
  "inst_street_address": "201 OLD MAIN",
  "inst_street_address_2": "",
  "inst_city_name": "UNIVERSITY PARK",
  "inst_state_code": "PA",
  "inst_state_name": "Pennsylvania",
  "inst_phone_num": "8148651372",
  "inst_zip_code": "168021503",
  "inst_country_name": "United States",
  "cong_dist_code": "15",
  "st_cong_dist_code": "PA15",
  "org_lgl_bus_name": "THE PENNSYLVANIA STATE UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "NPM2J7MSCF61"
 },
 "perf_inst": {
  "perf_inst_name": "Pennsylvania State Univ University Park",
  "perf_str_addr": "W359 Westgate Building",
  "perf_city_name": "University Park",
  "perf_st_code": "PA",
  "perf_st_name": "Pennsylvania",
  "perf_zip_code": "168027000",
  "perf_ctry_code": "US",
  "perf_cong_dist": null,
  "perf_st_cong_dist": "PA",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 500000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-af00233a-7fff-4bec-b9b8-d740d19d70e2\"> </span></p>\n<p dir=\"ltr\"><span>In this project, we developed methods that programmers can use to retrofit their programs to secure their use, including major activities on automating key tasks in driver isolation, file system security, side channel security, and a new type of analysis for tamperproofing (in the reference monitor sense).&nbsp; We have also discovered new attack vectors against kernels after driver isolation, due to the recent adoption of mixed case file naming, and new side channels that do not require a timing source.&nbsp; In addition, we have developed the first method to generate host (inter-process) attack graphs to assess whether host attacks may be propagated among processes to reach attacker goals.&nbsp; Some of the techniques developed in this project have impacted open source systems and fixed flaws in commercial systems.&nbsp; Many of our results have been published in top&nbsp;</span>conferences in computer security and related domains.&nbsp;</p>\n<p dir=\"ltr\"><span>The main objectives met during the project include the following.&nbsp; First, we developed new methods to automate key challenges in device driver isolation in Linux by enabling the creation of isolated driver domains (driver isolation) in kernel mode using Intel Extended Page Table (EPT) hardware (VEE 2020, Best Paper Award), automating data synchronization to near minimal data (KSplit, OSDI 2022), and discovering attack vectors against the kernel after driver isolation (HotOS 2023). &nbsp;</span></p>\n<p dir=\"ltr\"><span>Second, we explored methods to improve file system security through automated triaging of Android access control policies for the possible attack operations (PolyScope, USENIX Security 2021), extension of triaging for Android Scoped Storage (IEEE TDSC 2023), discovery of&nbsp;</span>flaws caused by the mixing of case-sensitive and case-insensitive naming in file systems (FAST 2023), and support for rollback resistance in cloud file systems (Nimble, OSDI 2023).&nbsp; The work on Android file system security has been in collaboration with Google and Samsung and the work on cloud file system security was in collaboration with Microsoft.&nbsp; We found that Android access control policies are now accurate enough to enable the generation of inter-process (host) attack graphs to assess the propagation of attacks from attack operations computed via PolyScope (IEEE SecDev 2023).</p>\n<p dir=\"ltr\"><span>Third, we have explored side channel attacks on cloud systems and new architectures, finding that reverse engineering a more complete understanding of how the branch target buffer (BTB) is updated enables recovery of all the PC addresses of all the program&rsquo;s instructions (NightVision, ISCA 2023).&nbsp; This work examines limitations in using hardware enclaves for security, such as in the Nimble work above.&nbsp; Our collaborators on these projects have a close working relationship with Intel.&nbsp; In addition, we discovered a novel side channel that does&nbsp;</span>not require a timing source using load-link and store-conditional instructions in Apple M1 hardware (S2C, USENIX Security 2023).&nbsp; We reported these findings to Apple.</p>\n<p dir=\"ltr\"><span>Fourth, we invented a new kind of analysis to assess whether a module is tamperproof.&nbsp; This work applies information flow analysis to detect all the low-integrity information flows that impact authorization.&nbsp; We apply this technique to vet the tamperproofing requirement of the reference monitor for multiple types of Linux Security Modules, including SELinux, AppArmor, and Tomoyo (Talisman, NDSS 2024).&nbsp; We found a vulnerability in AppArmor and Tomoyo's use of pathnames for authorization in the face of case-insensitive file systems (i.e., resulting from the FAST 2023 paper).&nbsp; We are working with these communities to develop a robust fix for this problem. &nbsp;</span><span>In the meantime, we contributed to many aspects of the foundations of static information flow analysis, including (1) t</span><span>he first general framework to facilitate the design and validation of security label inference algorithms that support dependent security labels (OOPSLA 2018), (2) a novel information flow policy, called Dynamic Release, which allows information flow restrictions to downgrade and upgrade in arbitrary ways (CSF 2022), and (3) novel methods for detecting cache side channels in a speculative world (OOPSLA 2021), and protecting against cache side channels in the user space (CODASPY 2021).</span></p>\n<p dir=\"ltr\"><span>The key outcomes of this project also include new open-source systems, repairs and extensions for the Linux kernel and Android systems, and student theses.&nbsp; The methods for driver isolation, file system security, side channel discovery, and tamper analysis have been (or will very shortly be) open sourced.&nbsp; The file system security work has been utilized in the Army Collaborative Research Alliance (CRA) project to discover flaws in public apps similar to those used by the Army.&nbsp; As mentioned above, the projects have been in collaboration with several companies, including Google, Microsoft, and Intel.&nbsp; There are ongoing efforts to improve the security of the Linux kernel through the discoveries of&nbsp;</span>this project.&nbsp; This project has contributed to three Ph.D. theses, including two theses (to be held in 2024), and one M.S. thesis. The materials developed in this project will be applied in future computer security courses, particularly for the systems and software security graduate courses.</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p><br>\n<p>\n Last Modified: 12/06/2023<br>\nModified by: Trent&nbsp;Jaeger</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\n \n\n\nIn this project, we developed methods that programmers can use to retrofit their programs to secure their use, including major activities on automating key tasks in driver isolation, file system security, side channel security, and a new type of analysis for tamperproofing (in the reference monitor sense). We have also discovered new attack vectors against kernels after driver isolation, due to the recent adoption of mixed case file naming, and new side channels that do not require a timing source. In addition, we have developed the first method to generate host (inter-process) attack graphs to assess whether host attacks may be propagated among processes to reach attacker goals. Some of the techniques developed in this project have impacted open source systems and fixed flaws in commercial systems. Many of our results have been published in topconferences in computer security and related domains.\n\n\nThe main objectives met during the project include the following. First, we developed new methods to automate key challenges in device driver isolation in Linux by enabling the creation of isolated driver domains (driver isolation) in kernel mode using Intel Extended Page Table (EPT) hardware (VEE 2020, Best Paper Award), automating data synchronization to near minimal data (KSplit, OSDI 2022), and discovering attack vectors against the kernel after driver isolation (HotOS 2023). \n\n\nSecond, we explored methods to improve file system security through automated triaging of Android access control policies for the possible attack operations (PolyScope, USENIX Security 2021), extension of triaging for Android Scoped Storage (IEEE TDSC 2023), discovery offlaws caused by the mixing of case-sensitive and case-insensitive naming in file systems (FAST 2023), and support for rollback resistance in cloud file systems (Nimble, OSDI 2023). The work on Android file system security has been in collaboration with Google and Samsung and the work on cloud file system security was in collaboration with Microsoft. We found that Android access control policies are now accurate enough to enable the generation of inter-process (host) attack graphs to assess the propagation of attacks from attack operations computed via PolyScope (IEEE SecDev 2023).\n\n\nThird, we have explored side channel attacks on cloud systems and new architectures, finding that reverse engineering a more complete understanding of how the branch target buffer (BTB) is updated enables recovery of all the PC addresses of all the programs instructions (NightVision, ISCA 2023). This work examines limitations in using hardware enclaves for security, such as in the Nimble work above. Our collaborators on these projects have a close working relationship with Intel. In addition, we discovered a novel side channel that doesnot require a timing source using load-link and store-conditional instructions in Apple M1 hardware (S2C, USENIX Security 2023). We reported these findings to Apple.\n\n\nFourth, we invented a new kind of analysis to assess whether a module is tamperproof. This work applies information flow analysis to detect all the low-integrity information flows that impact authorization. We apply this technique to vet the tamperproofing requirement of the reference monitor for multiple types of Linux Security Modules, including SELinux, AppArmor, and Tomoyo (Talisman, NDSS 2024). We found a vulnerability in AppArmor and Tomoyo's use of pathnames for authorization in the face of case-insensitive file systems (i.e., resulting from the FAST 2023 paper). We are working with these communities to develop a robust fix for this problem. In the meantime, we contributed to many aspects of the foundations of static information flow analysis, including (1) the first general framework to facilitate the design and validation of security label inference algorithms that support dependent security labels (OOPSLA 2018), (2) a novel information flow policy, called Dynamic Release, which allows information flow restrictions to downgrade and upgrade in arbitrary ways (CSF 2022), and (3) novel methods for detecting cache side channels in a speculative world (OOPSLA 2021), and protecting against cache side channels in the user space (CODASPY 2021).\n\n\nThe key outcomes of this project also include new open-source systems, repairs and extensions for the Linux kernel and Android systems, and student theses. The methods for driver isolation, file system security, side channel discovery, and tamper analysis have been (or will very shortly be) open sourced. The file system security work has been utilized in the Army Collaborative Research Alliance (CRA) project to discover flaws in public apps similar to those used by the Army. As mentioned above, the projects have been in collaboration with several companies, including Google, Microsoft, and Intel. There are ongoing efforts to improve the security of the Linux kernel through the discoveries ofthis project. This project has contributed to three Ph.D. theses, including two theses (to be held in 2024), and one M.S. thesis. The materials developed in this project will be applied in future computer security courses, particularly for the systems and software security graduate courses.\n\n\n\n\n\n\n\n\n\t\t\t\t\tLast Modified: 12/06/2023\n\n\t\t\t\t\tSubmitted by: TrentJaeger\n"
 }
}