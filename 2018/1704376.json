{
 "awd_id": "1704376",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CSR: Medium: Collaborative Research: Soup: Flexible Storage and Processing for On-Line Applications",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Erik Brunvand",
 "awd_eff_date": "2018-01-15",
 "awd_exp_date": "2021-12-31",
 "tot_intn_awd_amt": 400000.0,
 "awd_amount": 400000.0,
 "awd_min_amd_letter_date": "2017-11-30",
 "awd_max_amd_letter_date": "2020-10-15",
 "awd_abstract_narration": "The project aims to build a new kind of storage system for use in busy web sites, combining high performance with ease of programming. The project's key idea is to ask a web site's developers to declare in advance all the ways in which the web site will need to retrieve and process data. This allows the database to prepare all the required outputs in advance, and keep these outputs up to date as new data is inserted into the database. The result is that the web site can read data (and thus generate web pages) efficiently.\r\n\r\nThe project prototype, called Soup, uses a data-flow graph to keep materialized views up to date as database writes arrive; these views hold the results for the web site software's pre-declared queries. However, as the web site software evolves, it will change the set of queries it needs. Soup uses several novel techniques to handle these changes efficiently: re-use of state across successive versions of the data-flow graph, and partial materialization of views and internal data-flow state. Soup supports transactions by combining optimistic concurrency control with data-flow, and allows scale-up of throughput by spreading data and computation over multiple servers.\r\n\r\nWeb sites are an important part of modern life, and an enormous effort is invested in building and maintaining them. This effort could be significantly reduced if storage systems were better matched to the needs of web sites. Soup will provide this better match, by combining the ease of use of relational databases with much-increased speed and efficiency.\r\n\r\nThe project's main results will be a prototype implementation, along with sample applications, documentation, and research papers. The code (Soup and sample applications) will be maintained on GitHub, where anyone can examine and fetch the most recent versions. Documentation will also be maintained on GitHub, and papers will be available on the project web site. We intend to maintain the project repository for at least five years beyond the end of the project. All of these resources will be available from the project web page: https://pdos.csail.mit.edu/soup",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Edward",
   "pi_last_name": "Kohler",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Edward Kohler",
   "pi_email_addr": "kohler@seas.harvard.edu",
   "nsf_id": "000099226",
   "pi_start_date": "2017-11-30",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Harvard University",
  "inst_street_address": "1033 MASSACHUSETTS AVE STE 3",
  "inst_street_address_2": "",
  "inst_city_name": "CAMBRIDGE",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "6174955501",
  "inst_zip_code": "021385366",
  "inst_country_name": "United States",
  "cong_dist_code": "05",
  "st_cong_dist_code": "MA05",
  "org_lgl_bus_name": "PRESIDENT AND FELLOWS OF HARVARD COLLEGE",
  "org_prnt_uei_num": "",
  "org_uei_num": "LN53LCFJFL45"
 },
 "perf_inst": {
  "perf_inst_name": "Harvard University",
  "perf_str_addr": "1033 Massachusetts Ave",
  "perf_city_name": "Cambridge",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "021385366",
  "perf_ctry_code": "US",
  "perf_cong_dist": "05",
  "perf_st_cong_dist": "MA05",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "171400",
   "pgm_ele_name": "Special Projects - CNS"
  },
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "1045",
   "pgm_ref_txt": "CAREER-Faculty Erly Career Dev"
  },
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0121",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 123344.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 137208.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 139448.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The Soup project designed a new kind of database designed to serve the needs of applications, and showed how existing databases can be better and more fairly evaluated. Databases are critical infrastructure for the software we use every day. A database is responsible for saving and organizing user data, making that data outlast failures and making it available quickly on request. While current databases do this job well, they work best for simple data requests, like looking up a person by name. The kinds of requests that animate today?s applications are far more complex, requiring many lookups and information juggling, and databases often leave the work of optimizing these requests to applications.</p>\n<p>The Soup project?s core idea, partially-stateful dataflow, makes databases powerful enough to do that optimization on their own. With partially-stateful dataflow, the database can compute even complex queries before they are needed, and keep the results up to date as information changes. Applications get their results faster, with less effort, and without the kinds of error-prone optimizations that can cause software to crash or return wrong results. Partially-stateful dataflow can forget information when it?s no longer needed and update itself automatically as queries change. It can support real applications, and versions of its ideas are in use in several data system products.</p>\n<p>Soup and partially-stateful dataflow also let us build better applications, not just faster applications. In experimental work, we showed how partially-stateful dataflow can give better privacy guarantees?for instance, by providing a multiplicity of views that keep user data safe.</p>\n<p>Finally, in related work, we completed a comprehensive study of different approaches to implementing fast in-memory databases. Our study showed that many previous ideas for database improvement have less impact than previously thought; instead, we showed that measurement artifacts and unexpected implementation details can have unexpectedly large impact. Our results set a new standard for evaluating these databases that we hope will speed up future research.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 04/30/2022<br>\n\t\t\t\t\tModified by: Edward&nbsp;Kohler</p>\n</div>\n<div class=\"porSideCol\">\n<div class=\"each-gallery\">\n<div class=\"galContent\" id=\"gallery0\">\n<div class=\"photoCount\" id=\"photoCount0\">\n\t\t\t\t\t\t\t\t\tImages (<span id=\"selectedPhoto0\">1</span> of <span class=\"totalNumber\"></span>)\t\t\n\t\t\t\t\t\t\t\t</div>\n<div class=\"galControls\" id=\"controls0\"></div>\n<div class=\"galSlideshow\" id=\"slideshow0\"></div>\n<div class=\"galEmbox\" id=\"embox\">\n<div class=\"image-title\"></div>\n</div>\n</div>\n<div class=\"galNavigation\" id=\"navigation0\">\n<ul class=\"thumbs\" id=\"thumbs0\">\n<li>\n<a href=\"/por/images/Reports/POR/2022/1704376/1704376_10525138_1651365071707_ScreenShot2022-04-30at5.28.19PM--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2022/1704376/1704376_10525138_1651365071707_ScreenShot2022-04-30at5.28.19PM--rgov-800width.jpg\" title=\"Noria's design\"><img src=\"/por/images/Reports/POR/2022/1704376/1704376_10525138_1651365071707_ScreenShot2022-04-30at5.28.19PM--rgov-66x44.jpg\" alt=\"Noria's design\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">How the partially stateful dataflow design supports faster database operations. Writes (1) flow through the database (2) and update views (3) that are directly read by applications. These views provide all the data applications need with minimal computation.</div>\n<div class=\"imageCredit\">https://www.usenix.org/conference/osdi18/presentation/gjengset</div>\n<div class=\"imagePermisssions\">Royalty-free (unrestricted use)</div>\n<div class=\"imageSubmitted\">Edward&nbsp;Kohler</div>\n<div class=\"imageTitle\">Noria's design</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2022/1704376/1704376_10525138_1651365229169_noria-graph--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2022/1704376/1704376_10525138_1651365229169_noria-graph--rgov-800width.jpg\" title=\"Noria's performance\"><img src=\"/por/images/Reports/POR/2022/1704376/1704376_10525138_1651365229169_noria-graph--rgov-66x44.jpg\" alt=\"Noria's performance\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Partially-stateful dataflow lets the Noria dataflow system outperform a conventional database. As the database faces more load (toward the right), the MySQL database slows to a crawl (the delay to handle a request skyrockets).</div>\n<div class=\"imageCredit\">https://github.com/mit-pdos/noria/</div>\n<div class=\"imagePermisssions\">Royalty-free (unrestricted use)</div>\n<div class=\"imageSubmitted\">Edward&nbsp;Kohler</div>\n<div class=\"imageTitle\">Noria's performance</div>\n</div>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>",
  "por_txt_cntn": "\nThe Soup project designed a new kind of database designed to serve the needs of applications, and showed how existing databases can be better and more fairly evaluated. Databases are critical infrastructure for the software we use every day. A database is responsible for saving and organizing user data, making that data outlast failures and making it available quickly on request. While current databases do this job well, they work best for simple data requests, like looking up a person by name. The kinds of requests that animate today?s applications are far more complex, requiring many lookups and information juggling, and databases often leave the work of optimizing these requests to applications.\n\nThe Soup project?s core idea, partially-stateful dataflow, makes databases powerful enough to do that optimization on their own. With partially-stateful dataflow, the database can compute even complex queries before they are needed, and keep the results up to date as information changes. Applications get their results faster, with less effort, and without the kinds of error-prone optimizations that can cause software to crash or return wrong results. Partially-stateful dataflow can forget information when it?s no longer needed and update itself automatically as queries change. It can support real applications, and versions of its ideas are in use in several data system products.\n\nSoup and partially-stateful dataflow also let us build better applications, not just faster applications. In experimental work, we showed how partially-stateful dataflow can give better privacy guarantees?for instance, by providing a multiplicity of views that keep user data safe.\n\nFinally, in related work, we completed a comprehensive study of different approaches to implementing fast in-memory databases. Our study showed that many previous ideas for database improvement have less impact than previously thought; instead, we showed that measurement artifacts and unexpected implementation details can have unexpectedly large impact. Our results set a new standard for evaluating these databases that we hope will speed up future research.\n\n\t\t\t\t\tLast Modified: 04/30/2022\n\n\t\t\t\t\tSubmitted by: Edward Kohler"
 }
}