{
 "awd_id": "1837120",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "FMitF: Collaborative Research: User-Centered Verification and Repair of Trigger-Action Programs",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032922585",
 "po_email": "pprabhak@nsf.gov",
 "po_sign_block_name": "Pavithra Prabhakar",
 "awd_eff_date": "2018-09-01",
 "awd_exp_date": "2022-08-31",
 "tot_intn_awd_amt": 666666.0,
 "awd_amount": 666666.0,
 "awd_min_amd_letter_date": "2018-08-28",
 "awd_max_amd_letter_date": "2018-08-28",
 "awd_abstract_narration": "Modern data-centric systems, ranging from Internet-of-Things devices to online services, can benefit from helping people make clear their intent for how their devices and services should behave and interact with each other.  Generally, this requires people to engage in some amount of end-user programming, or programming by people who are not typically trained in programming.  Common examples of this include specifying that a light should only turn on when a room is occupied or that emails with certain words in the subject line should be routed into a particular folder.  Trigger-action programming (TAP), which consists of \"if-this-then-that\" rules, is the most common model for end-user programming because it is relatively easy to write simple TAP programs.  However, as the number and complexity of both rules and devices increases, TAP programs increasingly suffer from bugs and dependability problems and are hard to correct for inexperienced and trained programmers alike.  This project's goal is to make TAP programming, and thus people's ability to interact with devices that act on their behalf, more robust through developing a better understanding of end users' needs and abilities to write and debug TAP programs, computational techniques to both better model user intents and suggest TAP programs that meet them, and tools that use those techniques to help people more easily create correct TAP programs.  Apart from the potential benefits to people's well-being, the project will also provide educational benefits by developing course materials that increase awareness of both human aspects of, and formal methods for, programming.  Further, the tangible nature of such devices and the familiarity of popular online services are a fertile domain for engaging the public and training undergraduate students, K-12 students, and early-career graduate students in the computer science research lifecycle.\r\n\r\nTo accomplish these goals, the work combines techniques from formal methods, human-computer interaction, and machine learning. Contributions to formal methods include the design of systematic solutions to unique program repair, synthesis, and specification-refinement problems in the context of end-user programming. Contributions to cyber human systems include empirical studies and the design of data-driven interfaces for more accurately expressing intent. Specifically, the empirical human subjects studies seek to understand and improve the debugging process for trigger-action programming, create and distribute needed data sets of user-centric collections of trigger-action programs, and comparatively evaluate proposed interfaces. The interfaces developed in this work use data-driven methods to help users pinpoint and understand bugs in trigger-action programs, as well as to choose among candidates for automatically repaired trigger-action programs. Underlying these interfaces will be formal models of trigger-action programs, which are verified against specified properties written in linear temporal logic. The system developed will systematically synthesize program repairs, taking into account users' experiences and preferences. The system will also use a combination of machine learning and formal methods to automatically generate trigger-action programs and summarize specifications based on historical traces of user interaction with the system. In sum, helping non-technical users accurately communicate their intent through trigger-action programming benefits widely deployed end-user-programming systems for integrating internet-connected devices and online services.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Blase",
   "pi_last_name": "Ur",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Blase Ur",
   "pi_email_addr": "blase@uchicago.edu",
   "nsf_id": "000754479",
   "pi_start_date": "2018-08-28",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Shan",
   "pi_last_name": "Lu",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Shan Lu",
   "pi_email_addr": "shanlu@cs.uchicago.edu",
   "nsf_id": "000552962",
   "pi_start_date": "2018-08-28",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Ravi",
   "pi_last_name": "Chugh",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Ravi Chugh",
   "pi_email_addr": "rchugh@cs.uchicago.edu",
   "nsf_id": "000677688",
   "pi_start_date": "2018-08-28",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Chicago",
  "inst_street_address": "5801 S ELLIS AVE",
  "inst_street_address_2": "",
  "inst_city_name": "CHICAGO",
  "inst_state_code": "IL",
  "inst_state_name": "Illinois",
  "inst_phone_num": "7737028669",
  "inst_zip_code": "606375418",
  "inst_country_name": "United States",
  "cong_dist_code": "01",
  "st_cong_dist_code": "IL01",
  "org_lgl_bus_name": "UNIVERSITY OF CHICAGO",
  "org_prnt_uei_num": "ZUE9HKT2CLC9",
  "org_uei_num": "ZUE9HKT2CLC9"
 },
 "perf_inst": {
  "perf_inst_name": "University of Chicago",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "IL",
  "perf_st_name": "Illinois",
  "perf_zip_code": "606379415",
  "perf_ctry_code": "US",
  "perf_cong_dist": null,
  "perf_st_cong_dist": "IL",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "094Y00",
   "pgm_ele_name": "FMitF: Formal Methods in the F"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "062Z",
   "pgm_ref_txt": "Harnessing the Data Revolution"
  },
  {
   "pgm_ref_code": "071Z",
   "pgm_ref_txt": "FMitF-Formal Methods in the Field"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 666666.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Data-driven systems that connect Internet of Things (IoT) devices and online services benefit from letting users customize these connections by communicating their intent for how their devices and services should interact with each other. As IoT devices increasingly transition from future vision to reality, the benefits promised from connecting these devices to the internet center on this type of integration. Both industry and academia have repeatedly turned to event-driven, end-user programming to enable users without programming experience to communicate their intent to such systems. Trigger-action programming (TAP) is the most common model. In TAP, users create event-driven rules of the form ``IF a trigger occurs, THEN perform an action.'' For example, users can write simple rules like ``IF it starts raining THEN turn the lights blue,'' or far more complicated rules.</p>\n<p>While prior work has demonstrated that even users without any programming experience can write simple TAP rules accurately, they struggle to write more complex rules. They also struggle to understand how sets of related rules interact with each other. To solve these problems, the core intellectual approach of the project involved carefully co-designing novel user interfaces and novel underlying formal models and algorithms based on formal methods to enhance bidirectional communication between users and end-user programming systems. As part of its intellectual merit, the project first developed new scientific approaches for enabling users to specify properties a system should or should not have (e.g., the doors should always be locked if no one is home). The newly developed methods automatically translate users' intent from those user-intelligible forms to formal properties in linear temporal logic, using a formal model to either synthesize new TAP rules or modify existing TAP rules in typically desirable ways so that the system respects those desired properties. The project then introduced new methods based on the formal technique of SAT solving to automatically synthesize potentially desirable TAP rules from observed traces of humans' manual interactions with a system and the corresponding sensor readings a system collects. Subsequently, the project augmented those techniques by developing a new framework of end-user debugging of TAP systems, improving the ideas and interfaces developed earlier in the project to improve humans' ability to debug malfunctioning TAP programs.</p>\n<p>While the aforementioned advances focused on enhancing humans' abilities to communicate their intent to systems, the project also developed novel techniques for formal models of the system to better convey key information to humans, such as through interfaces that leveraged the formal models to show users how modifying a set of TAP rules would impact either specific outcomes or abstract properties of the system. In all phases of the project, the intellectual contributions were validated through rigorous user studies, including both online and field studies.</p>\n<p>Beyond broader impacts on the design of TAP systems, which are currectly widely used by entities like IFTTT, Mozilla, and Microsoft, the project also had important broader impacts for education. Numerous students, including Ph.D. students, undergraduates, and high school students, were trained in robust research methods as critical contributors to the research process. Many of these students are now using their improved technical knowledge in the U.S. technology industry or as part of their further academic education.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 12/23/2022<br>\n\t\t\t\t\tModified by: Blase&nbsp;Ur</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nData-driven systems that connect Internet of Things (IoT) devices and online services benefit from letting users customize these connections by communicating their intent for how their devices and services should interact with each other. As IoT devices increasingly transition from future vision to reality, the benefits promised from connecting these devices to the internet center on this type of integration. Both industry and academia have repeatedly turned to event-driven, end-user programming to enable users without programming experience to communicate their intent to such systems. Trigger-action programming (TAP) is the most common model. In TAP, users create event-driven rules of the form ``IF a trigger occurs, THEN perform an action.'' For example, users can write simple rules like ``IF it starts raining THEN turn the lights blue,'' or far more complicated rules.\n\nWhile prior work has demonstrated that even users without any programming experience can write simple TAP rules accurately, they struggle to write more complex rules. They also struggle to understand how sets of related rules interact with each other. To solve these problems, the core intellectual approach of the project involved carefully co-designing novel user interfaces and novel underlying formal models and algorithms based on formal methods to enhance bidirectional communication between users and end-user programming systems. As part of its intellectual merit, the project first developed new scientific approaches for enabling users to specify properties a system should or should not have (e.g., the doors should always be locked if no one is home). The newly developed methods automatically translate users' intent from those user-intelligible forms to formal properties in linear temporal logic, using a formal model to either synthesize new TAP rules or modify existing TAP rules in typically desirable ways so that the system respects those desired properties. The project then introduced new methods based on the formal technique of SAT solving to automatically synthesize potentially desirable TAP rules from observed traces of humans' manual interactions with a system and the corresponding sensor readings a system collects. Subsequently, the project augmented those techniques by developing a new framework of end-user debugging of TAP systems, improving the ideas and interfaces developed earlier in the project to improve humans' ability to debug malfunctioning TAP programs.\n\nWhile the aforementioned advances focused on enhancing humans' abilities to communicate their intent to systems, the project also developed novel techniques for formal models of the system to better convey key information to humans, such as through interfaces that leveraged the formal models to show users how modifying a set of TAP rules would impact either specific outcomes or abstract properties of the system. In all phases of the project, the intellectual contributions were validated through rigorous user studies, including both online and field studies.\n\nBeyond broader impacts on the design of TAP systems, which are currectly widely used by entities like IFTTT, Mozilla, and Microsoft, the project also had important broader impacts for education. Numerous students, including Ph.D. students, undergraduates, and high school students, were trained in robust research methods as critical contributors to the research process. Many of these students are now using their improved technical knowledge in the U.S. technology industry or as part of their further academic education.\n\n\t\t\t\t\tLast Modified: 12/23/2022\n\n\t\t\t\t\tSubmitted by: Blase Ur"
 }
}