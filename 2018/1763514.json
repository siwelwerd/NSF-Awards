{
 "awd_id": "1763514",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CCF: Medium: Enabling Real-Time Quantitative Decision Making over Streaming Data",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032922585",
 "po_email": "pprabhak@nsf.gov",
 "po_sign_block_name": "Pavithra Prabhakar",
 "awd_eff_date": "2018-06-01",
 "awd_exp_date": "2023-05-31",
 "tot_intn_awd_amt": 1200000.0,
 "awd_amount": 1200000.0,
 "awd_min_amd_letter_date": "2018-04-25",
 "awd_max_amd_letter_date": "2020-10-15",
 "awd_abstract_narration": "A key component of an effective Internet of Things (IoT) system is the ability to make decisions in real-time in response to data it receives. While the exact logic for making decisions in different applications requires domain-specific insights, it typically relies on computing quantitative summaries of large data streams in an efficient and incremental manner. Programming the desired logic is challenging due to the enormous volume of data and hard constraints on available memory and response time. This project aims to assist IoT programmers in meeting this challenge by designing a query language with natural and high-level constructs suitable for processing streaming data, supported by a compiler and run-time system to facilitate deployment while meeting the constraints of desired accuracy, memory footprint, and real-time response.\r\n\r\nThe design of the query language draws upon insights from two distinct paradigms: extensions of relational query languages for handling streaming data, and state-based languages for runtime monitoring and synchronous programming. The novel integration of linguistic constructs allows the programmer to impart input data stream a logical hierarchical structure  and also employ relational constructs to partition the input data by keys and to merge data streams from different sensors. While theory of approximation and streaming algorithms allows exploration of trade-offs among language features, accuracy, and processing time during compilation, distributed platforms such as Apache Storm are used for high performance processing.  Two application domains, device monitoring for physiological patient data and dynamic monitoring of network traffic for anomalies, are used for experimental evaluation. A course module on predictable real-time decision making is being developed, and can be used in an undergraduate course on data science, in graduate courses on database systems and cyber-physical systems, in summer schools, and as tutorials.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Rajeev",
   "pi_last_name": "Alur",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Rajeev Alur",
   "pi_email_addr": "alur@cis.upenn.edu",
   "nsf_id": "000448124",
   "pi_start_date": "2018-04-25",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Sanjeev",
   "pi_last_name": "Khanna",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Sanjeev Khanna",
   "pi_email_addr": "sanjeev@cis.upenn.edu",
   "nsf_id": "000308324",
   "pi_start_date": "2018-04-25",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Zachary",
   "pi_last_name": "Ives",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Zachary Ives",
   "pi_email_addr": "zives@cis.upenn.edu",
   "nsf_id": "000468327",
   "pi_start_date": "2018-04-25",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Boon Thau",
   "pi_last_name": "Loo",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Boon Thau Loo",
   "pi_email_addr": "boonloo@cis.upenn.edu",
   "nsf_id": "000488968",
   "pi_start_date": "2018-04-25",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Pennsylvania",
  "inst_street_address": "3451 WALNUT ST STE 440A",
  "inst_street_address_2": "",
  "inst_city_name": "PHILADELPHIA",
  "inst_state_code": "PA",
  "inst_state_name": "Pennsylvania",
  "inst_phone_num": "2158987293",
  "inst_zip_code": "191046205",
  "inst_country_name": "United States",
  "cong_dist_code": "03",
  "st_cong_dist_code": "PA03",
  "org_lgl_bus_name": "TRUSTEES OF THE UNIVERSITY OF PENNSYLVANIA, THE",
  "org_prnt_uei_num": "GM1XX56LEP58",
  "org_uei_num": "GM1XX56LEP58"
 },
 "perf_inst": {
  "perf_inst_name": "University of Pennsylvania",
  "perf_str_addr": "3451 Walnut",
  "perf_city_name": "Philadelphia",
  "perf_st_code": "PA",
  "perf_st_name": "Pennsylvania",
  "perf_zip_code": "191046205",
  "perf_ctry_code": "US",
  "perf_cong_dist": "03",
  "perf_st_cong_dist": "PA03",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "287800",
   "pgm_ele_name": "Special Projects - CCF"
  },
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  },
  {
   "pgm_ref_code": "8206",
   "pgm_ref_txt": "Formal Methods and Verification"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0121",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 683237.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 254956.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 261807.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The ability to make decisions in a timely, and yet predictable, manner in response to data it receives is central to today's distributed data processing systems. This project developed algorithms, programming abstractions, testing and verification tools, and runtime infrastructure to facilitate design and implementation of such systems. The collaborative research spanned algorithms, programming languages, formal methods, database systems, and networked systems, reflecting the diverse expertise of the investigators.&nbsp;</p>\n<p>One highlight of the research was the novel idea that in a distributed stream processing system, data should be modeled as a partially ordered set---more specifically as a labeled seris parallel graph, and operators processing data should be monotone functions over such structures. This view generalizes the abstractions used in current systems, and provides a solid semantic foundation for deterministic, and hence repeatable and testable, behavior. The research developed programming methodology, query languages, prototype implementation, and testing tools to support design of systems based on this view.</p>\n<p>Another key thread of research focused on understanding the basic computational complexity of processing graph structured data in a streaming fashion. This investigation led to new algorithms and lower bounds for a number of classical problems. For instance, it completely&nbsp; <span style=\"font-family: arial, sans-serif;\">resolved the  space-approximation tradeoff for solving the&nbsp; minimum dominating set  (MDS) problem in the streaming model of computation, considering both  insertion-only and insertion-deletion streams.</span></p>\n<p><span style=\"font-family: arial, sans-serif;\">The project also led to practical tools that are publicly available and deployable. The testing tool DiffStream is available as a library in the widely used stream processing system Flink. DiffStream allows the user to detect bugs in Flink programs that are related to incorrect parallelization (and thus leading to outputs that could occur in an unexpected order). The tool Sharingan helps network operators by automating the development of network traffic classifiers&nbsp; that can flag potentially malicious traffic. Sharingan allows a network operator to express the desired intent using positive and negative examples of network traffic, and generates the classification rules automatically using novel program synthesis techniques.<br /></span></p>\n<p>The results of the project have been published in conferences spanning theory (STOC'19, ICALP'20, FOCS'20, FOCS'21,  ITCS'22), databases (SIGMOD'20, PODS'21), formal methods (LICS'20,  OOPSLA'20, TACAS'21, and TACAS'22), and programming languages (PLDI'19,  PPoPP'22, POPL'23). The software implementations of the tools are publicly available in GitHub. The project results are also discussed in invited lectures and tutorials by the investigators at multiple venues including a keynote lecture at PODS'21.</p>\n<p>The project provided funding to the postdoctoral researcher Konstantinos Mamouras who is now Assistant Professor of Computer Science at Rice University. The project supported a number of PhD students, in particular the following three students whose dissertation topic was exactly aligned with the scope of this project: Caleb Stanford (PhD, Summer 2022) on programming abstractions for distributed stream processing, now an Assistant Professor of Computer Science at UC Davis; Lei Shi (PhD, Spring 2022) on network traffic engineering, now a researcher at Huawei; Yu Chen (PhD, Summer 2022) on algorithms for computations over streaming data, now a postdoctoral researcher at EPFL, Switzerland.</p>\n<p>Broadening participation activities included talks by the investigators in student mentoring workshops at conferences and summer programs for high school students.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 08/04/2023<br>\n\t\t\t\t\tModified by: Rajeev&nbsp;Alur</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThe ability to make decisions in a timely, and yet predictable, manner in response to data it receives is central to today's distributed data processing systems. This project developed algorithms, programming abstractions, testing and verification tools, and runtime infrastructure to facilitate design and implementation of such systems. The collaborative research spanned algorithms, programming languages, formal methods, database systems, and networked systems, reflecting the diverse expertise of the investigators. \n\nOne highlight of the research was the novel idea that in a distributed stream processing system, data should be modeled as a partially ordered set---more specifically as a labeled seris parallel graph, and operators processing data should be monotone functions over such structures. This view generalizes the abstractions used in current systems, and provides a solid semantic foundation for deterministic, and hence repeatable and testable, behavior. The research developed programming methodology, query languages, prototype implementation, and testing tools to support design of systems based on this view.\n\nAnother key thread of research focused on understanding the basic computational complexity of processing graph structured data in a streaming fashion. This investigation led to new algorithms and lower bounds for a number of classical problems. For instance, it completely  resolved the  space-approximation tradeoff for solving the  minimum dominating set  (MDS) problem in the streaming model of computation, considering both  insertion-only and insertion-deletion streams.\n\nThe project also led to practical tools that are publicly available and deployable. The testing tool DiffStream is available as a library in the widely used stream processing system Flink. DiffStream allows the user to detect bugs in Flink programs that are related to incorrect parallelization (and thus leading to outputs that could occur in an unexpected order). The tool Sharingan helps network operators by automating the development of network traffic classifiers  that can flag potentially malicious traffic. Sharingan allows a network operator to express the desired intent using positive and negative examples of network traffic, and generates the classification rules automatically using novel program synthesis techniques.\n\n\nThe results of the project have been published in conferences spanning theory (STOC'19, ICALP'20, FOCS'20, FOCS'21,  ITCS'22), databases (SIGMOD'20, PODS'21), formal methods (LICS'20,  OOPSLA'20, TACAS'21, and TACAS'22), and programming languages (PLDI'19,  PPoPP'22, POPL'23). The software implementations of the tools are publicly available in GitHub. The project results are also discussed in invited lectures and tutorials by the investigators at multiple venues including a keynote lecture at PODS'21.\n\nThe project provided funding to the postdoctoral researcher Konstantinos Mamouras who is now Assistant Professor of Computer Science at Rice University. The project supported a number of PhD students, in particular the following three students whose dissertation topic was exactly aligned with the scope of this project: Caleb Stanford (PhD, Summer 2022) on programming abstractions for distributed stream processing, now an Assistant Professor of Computer Science at UC Davis; Lei Shi (PhD, Spring 2022) on network traffic engineering, now a researcher at Huawei; Yu Chen (PhD, Summer 2022) on algorithms for computations over streaming data, now a postdoctoral researcher at EPFL, Switzerland.\n\nBroadening participation activities included talks by the investigators in student mentoring workshops at conferences and summer programs for high school students.\n\n\t\t\t\t\tLast Modified: 08/04/2023\n\n\t\t\t\t\tSubmitted by: Rajeev Alur"
 }
}