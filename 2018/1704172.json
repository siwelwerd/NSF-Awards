{
 "awd_id": "1704172",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CSR: Medium: Collaborative Research: Soup: Flexible Storage and Processing for On-Line Applications",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Erik Brunvand",
 "awd_eff_date": "2018-01-15",
 "awd_exp_date": "2021-12-31",
 "tot_intn_awd_amt": 800000.0,
 "awd_amount": 800000.0,
 "awd_min_amd_letter_date": "2017-11-30",
 "awd_max_amd_letter_date": "2021-01-28",
 "awd_abstract_narration": "The project aims to build a new kind of storage system for use in busy web sites, combining high performance with ease of programming. The project's key idea is to ask a web site's developers to declare in advance all the ways in which the web site will need to retrieve and process data. This allows the database to prepare all the required outputs in advance, and keep these outputs up to date as new data is inserted into the database. The result is that the web site can read data (and thus generate web pages) efficiently.\r\n\r\nThe project prototype, called Soup, uses a data-flow graph to keep materialized views up to date as database writes arrive; these views hold the results for the web site software's pre-declared queries. However, as the web site software evolves, it will change the set of queries it needs. Soup uses several novel techniques to handle these changes efficiently: re-use of state across successive versions of the data-flow graph, and partial materialization of views and internal data-flow state. Soup supports transactions by combining optimistic concurrency control with data-flow, and allows scale-up of throughput by spreading data and computation over multiple servers.\r\n\r\nWeb sites are an important part of modern life, and an enormous effort is invested in building and maintaining them. This effort could be significantly reduced if storage systems were better matched to the needs of web sites. Soup will provide this better match, by combining the ease of use of relational databases with much-increased speed and efficiency.\r\n\r\nThe project's main results will be a prototype implementation, along with sample applications, documentation, and research papers. The code (Soup and sample applications) will be maintained on GitHub, where anyone can examine and fetch the most recent versions. Documentation will also be maintained on GitHub, and papers will be available on the project web site. We intend to maintain the project repository for at least five years beyond the end of the project. All of these resources will be available from the project web page: https://pdos.csail.mit.edu/soup",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Robert",
   "pi_last_name": "Morris",
   "pi_mid_init": "T",
   "pi_sufx_name": "",
   "pi_full_name": "Robert T Morris",
   "pi_email_addr": "rtm@csail.mit.edu",
   "nsf_id": "000471357",
   "pi_start_date": "2017-11-30",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Marinus",
   "pi_last_name": "Kaashoek",
   "pi_mid_init": "F",
   "pi_sufx_name": "",
   "pi_full_name": "Marinus F Kaashoek",
   "pi_email_addr": "kaashoek@lcs.mit.edu",
   "nsf_id": "000098539",
   "pi_start_date": "2017-11-30",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Massachusetts Institute of Technology",
  "inst_street_address": "77 MASSACHUSETTS AVE",
  "inst_street_address_2": "",
  "inst_city_name": "CAMBRIDGE",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "6172531000",
  "inst_zip_code": "021394301",
  "inst_country_name": "United States",
  "cong_dist_code": "07",
  "st_cong_dist_code": "MA07",
  "org_lgl_bus_name": "MASSACHUSETTS INSTITUTE OF TECHNOLOGY",
  "org_prnt_uei_num": "E2NYLCDML6V1",
  "org_uei_num": "E2NYLCDML6V1"
 },
 "perf_inst": {
  "perf_inst_name": "Massachusetts Institute of Technology",
  "perf_str_addr": "77 Massachusetts Ave",
  "perf_city_name": "Cambridge",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "021394301",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "MA07",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "171400",
   "pgm_ele_name": "Special Projects - CNS"
  },
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0121",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 384062.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 200708.0
  },
  {
   "fund_oblg_fiscal_yr": 2021,
   "fund_oblg_amt": 215230.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Web sites that must handle a large volume of user requests face a difficult design problem. A typical web site consists of servers that run application code and a database that stores user and site information. Application code issues queries to retrieve data from the database; these queries are often complex and time-consuming for the database to satisfy. As a result, the database is often the limiting factor in performance.<br /><br />Noria relaxes this bottleneck. Its key idea is to maintain tables of pre-computed query results. On the one hand, these tables make reads very fast, since Noria has done the hard work of evaluating complex queries in advance of need. On the other hand, this strategy makes data updates more time-consuming, since Noria must update its tables of pre-computed results whenever the application modifies the underlying data. This strategy makes sense for applications that read from the database more than they write, which is typically the case for web sites. (This project was originally named Soup, but has been renamed Noria.)<br /><br />Noria uses a technique called streaming data-flow to organize and optimize the pre-computation of query results. Noria builds a data-flow graph that describes how to transform a write to underlying data into all the required modifications to pre-computed query result tables. The data-flow graph is derived from the set of all queries that the application needs to perform, expressed in the SQL database language.<br /><br />While processing writes with the data-flow graph is efficient, there are two related challenges Noria must solve. The first is coping with changes to the set of queries as the web site code evolves (\"schema changes\"): while Noria preserves the results of queries present in both old and new sets, a newly added query may pose a problem if it would require a lengthy pre-computation of its entire result table. The second challenge is coping with situations in which the database server does not have enough memory to store the full set of pre-computed query result records.<br /><br />Noria solves both of these problems using a new technique called \"partially-stateful data-flow\". The technique allows records to be missing from the pre-computed results tables, and reconstructs them on demand using \"upqueries\" that flow backwards in the data-flow graph, interacting correctly with concurrent forward data-flow processing. Partially-stateful data-flow solves the schema change problem by allowing the system to start with empty result tables when new queries are created, rather than having to fully populate them immediately. It solves the memory pressure problem by allowing eviction of little-used records from result tables, and transparently re-computing them if needed.&nbsp;<br /><br />The result is a database system that is compatible with existing practice (and thus easy for developers to use), but provides many times the performance of commonly-used existing technologies for typical web sites. The Noria software is freely available as open source.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 07/11/2022<br>\n\t\t\t\t\tModified by: Robert&nbsp;T&nbsp;Morris</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nWeb sites that must handle a large volume of user requests face a difficult design problem. A typical web site consists of servers that run application code and a database that stores user and site information. Application code issues queries to retrieve data from the database; these queries are often complex and time-consuming for the database to satisfy. As a result, the database is often the limiting factor in performance.\n\nNoria relaxes this bottleneck. Its key idea is to maintain tables of pre-computed query results. On the one hand, these tables make reads very fast, since Noria has done the hard work of evaluating complex queries in advance of need. On the other hand, this strategy makes data updates more time-consuming, since Noria must update its tables of pre-computed results whenever the application modifies the underlying data. This strategy makes sense for applications that read from the database more than they write, which is typically the case for web sites. (This project was originally named Soup, but has been renamed Noria.)\n\nNoria uses a technique called streaming data-flow to organize and optimize the pre-computation of query results. Noria builds a data-flow graph that describes how to transform a write to underlying data into all the required modifications to pre-computed query result tables. The data-flow graph is derived from the set of all queries that the application needs to perform, expressed in the SQL database language.\n\nWhile processing writes with the data-flow graph is efficient, there are two related challenges Noria must solve. The first is coping with changes to the set of queries as the web site code evolves (\"schema changes\"): while Noria preserves the results of queries present in both old and new sets, a newly added query may pose a problem if it would require a lengthy pre-computation of its entire result table. The second challenge is coping with situations in which the database server does not have enough memory to store the full set of pre-computed query result records.\n\nNoria solves both of these problems using a new technique called \"partially-stateful data-flow\". The technique allows records to be missing from the pre-computed results tables, and reconstructs them on demand using \"upqueries\" that flow backwards in the data-flow graph, interacting correctly with concurrent forward data-flow processing. Partially-stateful data-flow solves the schema change problem by allowing the system to start with empty result tables when new queries are created, rather than having to fully populate them immediately. It solves the memory pressure problem by allowing eviction of little-used records from result tables, and transparently re-computing them if needed. \n\nThe result is a database system that is compatible with existing practice (and thus easy for developers to use), but provides many times the performance of commonly-used existing technologies for typical web sites. The Noria software is freely available as open source.\n\n\t\t\t\t\tLast Modified: 07/11/2022\n\n\t\t\t\t\tSubmitted by: Robert T Morris"
 }
}