{
 "awd_id": "1763814",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "SHF: Medium: Collaborative Research: Program Analytics: Using Trace Data for Localization, Explanation and Synthesis",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2018-06-15",
 "awd_exp_date": "2023-05-31",
 "tot_intn_awd_amt": 900000.0,
 "awd_amount": 900000.0,
 "awd_min_amd_letter_date": "2018-05-03",
 "awd_max_amd_letter_date": "2021-06-14",
 "awd_abstract_narration": "Formal program analyses have long held out the promise of lowering the cost of\r\ncreating, maintaining and evolving programs. However, many crucial analysis\r\ntasks, such as localizing the sources of errors or suggesting code repairs, are\r\ninherently ambiguous: there is no unique right answer. This ambiguity\r\nfundamentally restricts the wider adoption of formal tools by limiting users to\r\nthose with enough expertise to effectively use such ambiguous results. The key\r\ninsight is that data-driven machine-learning approaches, which have proved\r\nsuccessful in other domains, can be applied to the data traces generated by\r\nprogrammers as they carry out development tasks. This research addresses the\r\nchallenge of ambiguity by extending classical program analysis into modern\r\nprogram analytics. This extension enhances classical symbolic methods with\r\nmodern data-driven approaches to collectively learn from fine-grained traces of\r\nprogrammers interacting with compilers or analysis tools to iteratively modify\r\nand fix software.\r\n\r\nThe research systematically develops program analytics by pursuing research\r\nalong two dimensions: language domains and programming tasks. First, it studies\r\ndifferent language domains, from dynamically typed languages (Python), to\r\nstatically typed functional languages with contract systems (Haskell), to\r\ninteractive proof assistants (Coq). Second, it targets different programming\r\ntasks, from localizing errors like null-dereferences, assertions or other\r\ndynamic type failures, to static type errors, to completing or fixing code to\r\neliminate an error or to obtain some desired functionality. This approach takes\r\nadvantage of a suite of new approaches that harness recent advances in\r\nstatistical machine learning and fine-grained, domain specific programmer\r\ninteractions. These advantages allow the research to address the fundamental\r\nproblem of ambiguity in classical program analysis. This has potential to\r\ntransform software development by yielding a new generation of program analysis\r\ntools that are efficient, applicable, and automatically customizable (e.g., to a\r\nparticular company, project, group or even individual).\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Ranjit",
   "pi_last_name": "Jhala",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Ranjit Jhala",
   "pi_email_addr": "jhala@cs.ucsd.edu",
   "nsf_id": "000486287",
   "pi_start_date": "2018-05-03",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Sorin",
   "pi_last_name": "Lerner",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Sorin Lerner",
   "pi_email_addr": "lerner@cs.ucsd.edu",
   "nsf_id": "000068847",
   "pi_start_date": "2018-05-03",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Kamalika",
   "pi_last_name": "Chaudhuri",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Kamalika Chaudhuri",
   "pi_email_addr": "kamalika@cs.ucsd.edu",
   "nsf_id": "000573596",
   "pi_start_date": "2018-05-03",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of California-San Diego",
  "inst_street_address": "9500 GILMAN DR",
  "inst_street_address_2": "",
  "inst_city_name": "LA JOLLA",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "8585344896",
  "inst_zip_code": "920930021",
  "inst_country_name": "United States",
  "cong_dist_code": "50",
  "st_cong_dist_code": "CA50",
  "org_lgl_bus_name": "UNIVERSITY OF CALIFORNIA, SAN DIEGO",
  "org_prnt_uei_num": "",
  "org_uei_num": "UYTTZT6G9DT1"
 },
 "perf_inst": {
  "perf_inst_name": "University of California-San Diego",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "920930404",
  "perf_ctry_code": "US",
  "perf_cong_dist": "50",
  "perf_st_cong_dist": "CA50",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7798",
   "pgm_ref_txt": "SOFTWARE & HARDWARE FOUNDATION"
  },
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0121",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 424785.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 234684.0
  },
  {
   "fund_oblg_fiscal_yr": 2021,
   "fund_oblg_amt": 240531.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><ul>\n</ul>\n<p>&nbsp;</p>\n<p>The project focused on improving computer science in general, and software engineering in particular, by leveraging and analyzing information from traces of programmer and program actions (\"trace analytics\"). This information was incorporated into the design of novel tools and algorithms to reduce the costs associated with software development, maintenance, and training, particularly for novice developers and students.<br /><br />The new trace analytics approach helped identify areas of programs (e.g., particular lines or methods in the code) that were relevant to the issues that novices encounter (e.g., bugs). Localizing such issues is difficult because multiple program areas may appear relevant formally, but not all areas are equally important to human developers. Our approached combined static and dynamic reasoning, contextual program features, and modern machine learning.<br /><br />In addition to analyzing programs, the project also involved human studies of developers. The project examined traces of how programmers make use of online resources (e.g., helpful websites) as well as how they navigate corporate policies. This led to the proposal of a novel training intervention -- activities that students can carry out beyond the normal classroom -- and in a longitudinal study, our training improved student outcomes (i.e., test scores) more than the established state-of-the-art training.<br /><br />Together, this trace information from programs and programmers supported the creation of multiple novel algorithms for reducing the costs associated with software engineering. We devised three algorithms: one to automatically fix syntax errors in programs (e.g., such as using the wrong keyword), one to fix type errors in programs (e.g., such as trying to combine incompatible data objects), and one to fix input errors in programs (e.g., such as formatting textual input incorrectly). In each case we conducted a human study to evaluate these algorithms, and in each case our new approaches outperformed the state-of-the-art and produced answers rapidly (e.g., suitable for interactive use by novices).<br /><br />The intellectual merit of the project centered around devising a novel lens for approaching classic problems in software engineering: \"trace analytics\" (combining static, dynamic, and contextual information with modern machine learning). That lens resulted in multiple novel algorithms, as well as rigorous models produced by surveys and studies of developers. Ultimately the work associated with the project resulted in 15 peer-reviewed scientific publications.<br /><br />In addition, the work associated with the project has the potential for a broader impact on society. First, the project featured a significant training and mentoring component, and four of the personnel associated with the project accepted faculty jobs in computer science, while two of the undergraduate personnel were accepted into graduate schools (three of those were from groups that are less represented in engineering). Second, the activity in the project associated with examining how developers interact with company policies has the potential to influence human resources policies, producing a greater alignment between between company goals and the assessments they use.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 08/30/2023<br>\n\t\t\t\t\tModified by: Ranjit&nbsp;Jhala</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n\n\n \n\nThe project focused on improving computer science in general, and software engineering in particular, by leveraging and analyzing information from traces of programmer and program actions (\"trace analytics\"). This information was incorporated into the design of novel tools and algorithms to reduce the costs associated with software development, maintenance, and training, particularly for novice developers and students.\n\nThe new trace analytics approach helped identify areas of programs (e.g., particular lines or methods in the code) that were relevant to the issues that novices encounter (e.g., bugs). Localizing such issues is difficult because multiple program areas may appear relevant formally, but not all areas are equally important to human developers. Our approached combined static and dynamic reasoning, contextual program features, and modern machine learning.\n\nIn addition to analyzing programs, the project also involved human studies of developers. The project examined traces of how programmers make use of online resources (e.g., helpful websites) as well as how they navigate corporate policies. This led to the proposal of a novel training intervention -- activities that students can carry out beyond the normal classroom -- and in a longitudinal study, our training improved student outcomes (i.e., test scores) more than the established state-of-the-art training.\n\nTogether, this trace information from programs and programmers supported the creation of multiple novel algorithms for reducing the costs associated with software engineering. We devised three algorithms: one to automatically fix syntax errors in programs (e.g., such as using the wrong keyword), one to fix type errors in programs (e.g., such as trying to combine incompatible data objects), and one to fix input errors in programs (e.g., such as formatting textual input incorrectly). In each case we conducted a human study to evaluate these algorithms, and in each case our new approaches outperformed the state-of-the-art and produced answers rapidly (e.g., suitable for interactive use by novices).\n\nThe intellectual merit of the project centered around devising a novel lens for approaching classic problems in software engineering: \"trace analytics\" (combining static, dynamic, and contextual information with modern machine learning). That lens resulted in multiple novel algorithms, as well as rigorous models produced by surveys and studies of developers. Ultimately the work associated with the project resulted in 15 peer-reviewed scientific publications.\n\nIn addition, the work associated with the project has the potential for a broader impact on society. First, the project featured a significant training and mentoring component, and four of the personnel associated with the project accepted faculty jobs in computer science, while two of the undergraduate personnel were accepted into graduate schools (three of those were from groups that are less represented in engineering). Second, the activity in the project associated with examining how developers interact with company policies has the potential to influence human resources policies, producing a greater alignment between between company goals and the assessments they use.\n\n\t\t\t\t\tLast Modified: 08/30/2023\n\n\t\t\t\t\tSubmitted by: Ranjit Jhala"
 }
}