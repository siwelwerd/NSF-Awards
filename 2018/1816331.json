{
 "awd_id": "1816331",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "NeTS: Small: Eiffel: Efficient and Flexible Software Packet Scheduling",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Darleen Fisher",
 "awd_eff_date": "2018-08-01",
 "awd_exp_date": "2023-07-31",
 "tot_intn_awd_amt": 500000.0,
 "awd_amount": 500000.0,
 "awd_min_amd_letter_date": "2018-07-16",
 "awd_max_amd_letter_date": "2018-07-16",
 "awd_abstract_narration": "Modern communication networks operate at high speeds that require sophisticated control of the timing of data transmissions to enable efficient sharing of network resources. The control of timing is performed by data packet scheduling functions deployed in core network components as well as user systems. This project considers the design and deployment of packet scheduling in network component software. Such deployment allows for 1) short development cycles, enabling the tracking of the state of the art, 2) enhanced flexibility of operation, and 3) function portability enabling the scheduling function to be deployed at multiple locations with minimal additional effort. The project will address the challenges of the software deployment of scheduling functions by developing and evaluating computation structures and algorithms that enable efficient software packet scheduling as well as mechanisms that allow users to tailor the scheduling functions to their needs. Advanced scheduling functions are central to successful modern high-speed networks, the core component of current and future advanced network applications infrastructure and data center networks.\r\n\r\nPacket scheduling is the core component of many recent innovations in optimizing network performance and utilization. The modern networks rely on packet schedulers in two specific ways: 1) traffic shaping and hierarchical bandwidth sharing at end-hosts, and 2) scheduling in hardware switches. For future networks, the scale in terms of number of flows and supported rates is expected to increase further with the growth of CPU (central processing unit) capacity and rates supported by network interface cards. Furthermore, network operators prefer programmable network components which have shorter development cycles. The focus of this project is on the design and deployment of efficient and flexible packet scheduling in software. While hardware implementation of network functionality will always be faster than its corresponding software implementation, software schedulers have several advantages including a shorter development cycle and the ability to deploy them on multiple platforms in multiple network locations. Software packet scheduling is challenging because of the inherent computational complexity of scheduling policy implementations, the difficulty of balancing efficiency with flexibility, and the need to carefully manage memory usage. Motivated by the importance of software packet scheduling and with these challenges in mind, the project aims to develop and evaluate approaches for efficient and flexible software packet schedulers. More specifically, the project seeks to: 1) Improve efficiency by equipping schedulers with efficient data structures, developing data structures that enable the scheduler to trade off accuracy for increased efficiency, and developing backpressure mechanisms that control memory usage, and 2) Improve flexibility without sacrificing efficiency by enabling the mapping of scheduling policies that require per-flow ranking in addition to or instead of packet ranking, and a re-ordering of packets or flows upon dequeue operation, and arbitrary shaping policies. The project will also develop accessible educational content for computer networking classes with specific emphasis on packet scheduling on modern networks.  Ultimately, the project's goal is to advance the state of the art in software schedulers, making them feasible for practical use in diverse locations in future networks.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Mostafa",
   "pi_last_name": "Ammar",
   "pi_mid_init": "H",
   "pi_sufx_name": "",
   "pi_full_name": "Mostafa H Ammar",
   "pi_email_addr": "ammar@cc.gatech.edu",
   "nsf_id": "000090781",
   "pi_start_date": "2018-07-16",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Ellen",
   "pi_last_name": "Zegura",
   "pi_mid_init": "W",
   "pi_sufx_name": "",
   "pi_full_name": "Ellen W Zegura",
   "pi_email_addr": "ewz@cc.gatech.edu",
   "nsf_id": "000233721",
   "pi_start_date": "2018-07-16",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Georgia Tech Research Corporation",
  "inst_street_address": "926 DALNEY ST NW",
  "inst_street_address_2": "",
  "inst_city_name": "ATLANTA",
  "inst_state_code": "GA",
  "inst_state_name": "Georgia",
  "inst_phone_num": "4048944819",
  "inst_zip_code": "303186395",
  "inst_country_name": "United States",
  "cong_dist_code": "05",
  "st_cong_dist_code": "GA05",
  "org_lgl_bus_name": "GEORGIA TECH RESEARCH CORP",
  "org_prnt_uei_num": "EMW9FC8J3HN4",
  "org_uei_num": "EMW9FC8J3HN4"
 },
 "perf_inst": {
  "perf_inst_name": "Georgia Institute of Technology",
  "perf_str_addr": "225 North Avenue",
  "perf_city_name": "Atlanta",
  "perf_st_code": "GA",
  "perf_st_name": "Georgia",
  "perf_zip_code": "303320002",
  "perf_ctry_code": "US",
  "perf_cong_dist": "05",
  "perf_st_cong_dist": "GA05",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "736300",
   "pgm_ele_name": "Networking Technology and Syst"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 500000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Packet scheduling is the core component of many recent innovations in optimizing network performance and utilization. Our focus in this project is on the design and deployment of packet scheduling in software which provides for flexibility and ease of deployment. Software packet scheduling, in turn, is challenging because of the need to balance flexibility with efficiency and the need to handle the significant traffic scale of modern networks. Motivated by this, our research aims to develop and evaluate approaches for efficient and flexible software packet schedulers.</p>\n<p>Our work on this project made the following contributions:</p>\n<p><strong>Efficient and Flexible Software Packet Scheduling</strong></p>\n<p>We substantially improve current software packet scheduling performance, while maintaining flexibility, by exploiting underlying features of packet ranking; namely, packet ranks are integers and, at any point in time, fall within a limited range of values. At the core is an integer priority queue based on the Find First Set (FFS) instruction and designed to support a wide range of policies and ranking functions efficiently. To support flexibility, we introduce novel programming abstractions to express scheduling policies that cannot be captured by current, state of-the-art scheduler programming models.</p>\n<p>&nbsp;</p>\n<p><strong>zD: A Scalable Zero-Drop Network Stack at End Hosts</strong></p>\n<p>We show that current end-host scheduling mechanisms can lead to high CPU utilization, high tail latency, and low throughput in cases of congestion of egress traffic within the end host. We design zD, a framework for applying backpressure from a congested queue to traffic sources at end hosts that can scale to thousands of flows. We implement zD to apply backpressure in two settings: i) between TCP sources and kernel queuing discipline, and ii) between VMs as traffic sources and kernel queuing discipline in the hypervisor.</p>\n<p><strong>Unison: Enabling Content Provider/ISP Collaboration using a vSwitch Abstraction</strong></p>\n<p>This work deals with scheduling traffic across inter-AS boundaries. BGP allows an autonomous system more control over outgoing traffic than incoming traffic. However, in the modern Internet routing decisions are mostly in the hands of traffic. This leads to suboptimal routing decisions as traffic sources can only estimate route capacity at the destination. We design Unison, a system that allows an ISP to jointly optimize its intra-domain routes and inter-domain routes, and hence how data is scheduled among different routing options, in collaboration with content providers. Unison provides the ISP operator and the neighbors of the ISP with an abstraction ISP network in the form of a virtual switch. This abstraction allows the content providers to program the virtual switch with their requirements. It also allows the ISP to use that information to optimize the overall performance of its network.&nbsp;</p>\n<p>&nbsp;</p>\n<p><strong>Annulus: A Dual Congestion Control Loop for Datacenter and WAN Traffic Aggregates</strong></p>\n<p>Cloud services are deployed in datacenters connected though high bandwidth Wide Area Networks (WANs). We find that WAN traffic negatively impacts the performance of datacenter traffic. This behavior is caused by the long round-trip time (RTT) for WAN traffic, combined with limited buffering in datacenter switches. The long WAN RTT forces datacenter traffic to take the full burden of reacting to congestion. Furthermore, datacenter traffic changes on a faster time-scale than the WAN RTT, making it difficult for WAN congestion control to estimate available bandwidth accurately. We developed Annulus, a congestion control scheme that relies on two control loops to address these challenges</p>\n<p><strong>Server Design for Million-Client Scalability.</strong></p>\n<p>One of the main challenges in packet scheduling is the ability to handle very large scale workloads. Such workloads are needed to keep up with demand on services. As a result, servers need to scale up to handle hundreds of thousands of clients simultaneously. Much of the focus of the community has been on scaling servers in terms of aggregate traffic intensity (packets transmitted per second). However, bottlenecks caused by the increasing number of concurrent clients, resulting in a large number of concurrent flows, have received little attention. In this work, we focus on identifying such bottlenecks. In particular, we define two broad categories of problems; namely, admitting more packets into the network stack than can be handled efficiently, and increasing per-packet overhead within the stack. We show that these problems contribute to high CPU usage and network performance degradation in terms of aggregate throughput and RTT.</p>\n<p><strong>High Performance QUIC Transport&nbsp; </strong></p>\n<p>QUIC design is centered around reducing connection establishment time, treating security as a first-class citizen, and allowing users to customize their implementation for their use cases. Most implementations of QUIC are focused on low-latency, low-throughput use cases. The flexibility and security of the QUIC stack are likely to attract more use cases, including high-throughput applications. However, current efforts for accelerating QUIC?s throughput are highly unstructured and typically customized for a single implementation. &nbsp;This work improves the performance of QUIC through the design of a novel generic QUIC architecture based on novel scheduling foundations.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 07/28/2023<br>\n\t\t\t\t\tModified by: Mostafa&nbsp;H&nbsp;Ammar</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nPacket scheduling is the core component of many recent innovations in optimizing network performance and utilization. Our focus in this project is on the design and deployment of packet scheduling in software which provides for flexibility and ease of deployment. Software packet scheduling, in turn, is challenging because of the need to balance flexibility with efficiency and the need to handle the significant traffic scale of modern networks. Motivated by this, our research aims to develop and evaluate approaches for efficient and flexible software packet schedulers.\n\nOur work on this project made the following contributions:\n\nEfficient and Flexible Software Packet Scheduling\n\nWe substantially improve current software packet scheduling performance, while maintaining flexibility, by exploiting underlying features of packet ranking; namely, packet ranks are integers and, at any point in time, fall within a limited range of values. At the core is an integer priority queue based on the Find First Set (FFS) instruction and designed to support a wide range of policies and ranking functions efficiently. To support flexibility, we introduce novel programming abstractions to express scheduling policies that cannot be captured by current, state of-the-art scheduler programming models.\n\n \n\nzD: A Scalable Zero-Drop Network Stack at End Hosts\n\nWe show that current end-host scheduling mechanisms can lead to high CPU utilization, high tail latency, and low throughput in cases of congestion of egress traffic within the end host. We design zD, a framework for applying backpressure from a congested queue to traffic sources at end hosts that can scale to thousands of flows. We implement zD to apply backpressure in two settings: i) between TCP sources and kernel queuing discipline, and ii) between VMs as traffic sources and kernel queuing discipline in the hypervisor.\n\nUnison: Enabling Content Provider/ISP Collaboration using a vSwitch Abstraction\n\nThis work deals with scheduling traffic across inter-AS boundaries. BGP allows an autonomous system more control over outgoing traffic than incoming traffic. However, in the modern Internet routing decisions are mostly in the hands of traffic. This leads to suboptimal routing decisions as traffic sources can only estimate route capacity at the destination. We design Unison, a system that allows an ISP to jointly optimize its intra-domain routes and inter-domain routes, and hence how data is scheduled among different routing options, in collaboration with content providers. Unison provides the ISP operator and the neighbors of the ISP with an abstraction ISP network in the form of a virtual switch. This abstraction allows the content providers to program the virtual switch with their requirements. It also allows the ISP to use that information to optimize the overall performance of its network. \n\n \n\nAnnulus: A Dual Congestion Control Loop for Datacenter and WAN Traffic Aggregates\n\nCloud services are deployed in datacenters connected though high bandwidth Wide Area Networks (WANs). We find that WAN traffic negatively impacts the performance of datacenter traffic. This behavior is caused by the long round-trip time (RTT) for WAN traffic, combined with limited buffering in datacenter switches. The long WAN RTT forces datacenter traffic to take the full burden of reacting to congestion. Furthermore, datacenter traffic changes on a faster time-scale than the WAN RTT, making it difficult for WAN congestion control to estimate available bandwidth accurately. We developed Annulus, a congestion control scheme that relies on two control loops to address these challenges\n\nServer Design for Million-Client Scalability.\n\nOne of the main challenges in packet scheduling is the ability to handle very large scale workloads. Such workloads are needed to keep up with demand on services. As a result, servers need to scale up to handle hundreds of thousands of clients simultaneously. Much of the focus of the community has been on scaling servers in terms of aggregate traffic intensity (packets transmitted per second). However, bottlenecks caused by the increasing number of concurrent clients, resulting in a large number of concurrent flows, have received little attention. In this work, we focus on identifying such bottlenecks. In particular, we define two broad categories of problems; namely, admitting more packets into the network stack than can be handled efficiently, and increasing per-packet overhead within the stack. We show that these problems contribute to high CPU usage and network performance degradation in terms of aggregate throughput and RTT.\n\nHigh Performance QUIC Transport  \n\nQUIC design is centered around reducing connection establishment time, treating security as a first-class citizen, and allowing users to customize their implementation for their use cases. Most implementations of QUIC are focused on low-latency, low-throughput use cases. The flexibility and security of the QUIC stack are likely to attract more use cases, including high-throughput applications. However, current efforts for accelerating QUIC?s throughput are highly unstructured and typically customized for a single implementation.  This work improves the performance of QUIC through the design of a novel generic QUIC architecture based on novel scheduling foundations.\n\n\t\t\t\t\tLast Modified: 07/28/2023\n\n\t\t\t\t\tSubmitted by: Mostafa H Ammar"
 }
}