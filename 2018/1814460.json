{
 "awd_id": "1814460",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Revisiting Elementary Denotational Semantics",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2018-10-01",
 "awd_exp_date": "2022-09-30",
 "tot_intn_awd_amt": 380714.0,
 "awd_amount": 380714.0,
 "awd_min_amd_letter_date": "2018-06-04",
 "awd_max_amd_letter_date": "2018-06-04",
 "awd_abstract_narration": "Advances in programming language theory and formal methods have enabled researchers to specify complete programming languages, verify the correctness of their compilers, and prove that particular programs are correct. However, with the current state of the art, such proofs are tedious and require heroic work. The project's impact will be to greatly simplify such work by discovering new techniques for specifying programming languages that better align with the structure of the proofs. The project's novelty is in the investigation of practical applications of denotational semantics that are elementary, based on set theory rather than domain theory.\r\n\r\nThe preferred approach today for specifying programming languages is operational semantics. Such semantics are mathematically simple and not too far removed from implementations. However, correctness proofs using operational semantics often require fiddly simulations and syntactic logical relations.  Looking back to the 1980s, researchers preferred denotational semantics, which enable compositional reasoning about program fragments. However, most denotational semantics involved sophisticated mathematics, which made for slow progress and created barriers to adoption. Most that is, but not all. In the 1970s, Scott, Plotkin, and Engeler invented graph models of the lambda calculus. In the late 1970s, the Torino group invented filter models. These so-called elementary models combine the best of both worlds: they are simple mathematically and they are compositional, which enables equational reasoning. Unfortunately, by some accident of history, these models did not become popular and were never applied to complete programming languages or proofs of compiler correctness. The project will determine whether elementary models are good for the day-to-day work of language specification, mechanized meta-theory, and compiler correctness.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Jeremy",
   "pi_last_name": "Siek",
   "pi_mid_init": "G",
   "pi_sufx_name": "",
   "pi_full_name": "Jeremy G Siek",
   "pi_email_addr": "jsiek@indiana.edu",
   "nsf_id": "000086759",
   "pi_start_date": "2018-06-04",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Indiana University",
  "inst_street_address": "107 S INDIANA AVE",
  "inst_street_address_2": "",
  "inst_city_name": "BLOOMINGTON",
  "inst_state_code": "IN",
  "inst_state_name": "Indiana",
  "inst_phone_num": "3172783473",
  "inst_zip_code": "474057000",
  "inst_country_name": "United States",
  "cong_dist_code": "09",
  "st_cong_dist_code": "IN09",
  "org_lgl_bus_name": "TRUSTEES OF INDIANA UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "YH86RTW2YVJ4"
 },
 "perf_inst": {
  "perf_inst_name": "Indiana University",
  "perf_str_addr": "150 S. Woodlawn",
  "perf_city_name": "Bloomington",
  "perf_st_code": "IN",
  "perf_st_name": "Indiana",
  "perf_zip_code": "474057104",
  "perf_ctry_code": "US",
  "perf_cong_dist": "09",
  "perf_st_cong_dist": "IN09",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 380714.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The project led by PI Siek, along with Ph.D. student Matthew<br />Heimerdinger, focused on investigating denotational semantics,<br />specifically filter and graph models, for mechanized proofs of<br />compiler correctness. The goal is to mitigate the high costs<br />associated with these proofs. Over the course of the project,<br />significant progress has been made across several fronts, including<br />research, dissemination, and educational impact.<br /><br /># Project Outcomes<br /><br />## Intellectual Merit<br /><br />### Filter Models<br /><br />The team investigated filter models, exploring their use in<br />compiler correctness proofs. They refined the graph representation to<br />ensure consistency, crucial for maintaining contextual equivalence<br />during compiler optimizations like common subexpression elimination.<br /><br />### Compiler Correctness Proofs<br /><br />Efforts were made to compare mechanized proofs using filter models<br />against operational semantics. Challenges were encountered,<br />particularly in the closure conversion pass. Despite obstacles,<br />progress was made in developing denotational and operational<br />correctness proofs for several other parts of a realistic compiler.<br /><br />The project contributes significantly to the field by advancing<br />understanding and application of denotational semantics in compiler<br />correctness proofs. Innovations include refining filter models and<br />investigating graph models, addressing challenges in compiler<br />optimizations, and enhancing theoretical frameworks in programming<br />language foundations.<br /><br />## Broader Impacts<br /><br />### Education<br /><br />The project provides unique educational experiences, particularly<br />through the publication of the \"Essentials of Compilation\" textbooks<br />for Racket and Python. These textbooks offer an incremental approach<br />to teaching compilers, providing deeper insights into compiler design<br />decisions and algorithms, benefiting students at multiple<br />universities.<br /><br />Part 3 of \"Programming Language Foundations in Agda\" authored by PI<br />Siek adds to the theoretical discourse, bringing filter models into<br />mainstream application within programming language semantics.<br /><br />### Professional Development<br /><br />The project nurtures talent through the mentorship of Ph.D. student<br />Matthew Heimerdinger. While facing challenges, such as those posed by<br />the COVID-19 pandemic, opportunities for training and professional<br />growth persist, albeit with adaptations to circumstances.<br /><br />### Dissemination<br /><br />The dissemination efforts include workshops, conference presentations,<br />and the release of the Abstract Binding Tree library. Additionally,<br />the publication of the \"Essentials of Compilation\" textbooks<br />facilitates widespread dissemination of knowledge and techniques<br />developed within the project.<br /><br /># Conclusion<br /><br />Overall, the project significantly advances the field of programming<br />language semantics and compiler correctness while providing valuable<br />educational resources and fostering talent in the academic community.</p><br>\n<p>\n Last Modified: 05/06/2024<br>\nModified by: Jeremy&nbsp;G&nbsp;Siek</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nThe project led by PI Siek, along with Ph.D. student Matthew\nHeimerdinger, focused on investigating denotational semantics,\nspecifically filter and graph models, for mechanized proofs of\ncompiler correctness. The goal is to mitigate the high costs\nassociated with these proofs. Over the course of the project,\nsignificant progress has been made across several fronts, including\nresearch, dissemination, and educational impact.\n\n# Project Outcomes\n\n## Intellectual Merit\n\n### Filter Models\n\nThe team investigated filter models, exploring their use in\ncompiler correctness proofs. They refined the graph representation to\nensure consistency, crucial for maintaining contextual equivalence\nduring compiler optimizations like common subexpression elimination.\n\n### Compiler Correctness Proofs\n\nEfforts were made to compare mechanized proofs using filter models\nagainst operational semantics. Challenges were encountered,\nparticularly in the closure conversion pass. Despite obstacles,\nprogress was made in developing denotational and operational\ncorrectness proofs for several other parts of a realistic compiler.\n\nThe project contributes significantly to the field by advancing\nunderstanding and application of denotational semantics in compiler\ncorrectness proofs. Innovations include refining filter models and\ninvestigating graph models, addressing challenges in compiler\noptimizations, and enhancing theoretical frameworks in programming\nlanguage foundations.\n\n## Broader Impacts\n\n### Education\n\nThe project provides unique educational experiences, particularly\nthrough the publication of the \"Essentials of Compilation\" textbooks\nfor Racket and Python. These textbooks offer an incremental approach\nto teaching compilers, providing deeper insights into compiler design\ndecisions and algorithms, benefiting students at multiple\nuniversities.\n\nPart 3 of \"Programming Language Foundations in Agda\" authored by PI\nSiek adds to the theoretical discourse, bringing filter models into\nmainstream application within programming language semantics.\n\n### Professional Development\n\nThe project nurtures talent through the mentorship of Ph.D. student\nMatthew Heimerdinger. While facing challenges, such as those posed by\nthe COVID-19 pandemic, opportunities for training and professional\ngrowth persist, albeit with adaptations to circumstances.\n\n### Dissemination\n\nThe dissemination efforts include workshops, conference presentations,\nand the release of the Abstract Binding Tree library. Additionally,\nthe publication of the \"Essentials of Compilation\" textbooks\nfacilitates widespread dissemination of knowledge and techniques\ndeveloped within the project.\n\n# Conclusion\n\nOverall, the project significantly advances the field of programming\nlanguage semantics and compiler correctness while providing valuable\neducational resources and fostering talent in the academic community.\t\t\t\t\tLast Modified: 05/06/2024\n\n\t\t\t\t\tSubmitted by: JeremyGSiek\n"
 }
}