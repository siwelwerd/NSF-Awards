{
 "awd_id": "1837506",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CPS:Small: Syntax-Guided Synthesis for Cyber-Physical Systems",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032922585",
 "po_email": "pprabhak@nsf.gov",
 "po_sign_block_name": "Pavithra Prabhakar",
 "awd_eff_date": "2018-10-01",
 "awd_exp_date": "2024-09-30",
 "tot_intn_awd_amt": 372998.0,
 "awd_amount": 372998.0,
 "awd_min_amd_letter_date": "2018-09-10",
 "awd_max_amd_letter_date": "2023-07-26",
 "awd_abstract_narration": "Nowadays, anyone can buy and put together sensors, actuators, and computation components,   but typically only highly trained engineers are able to compose systems that can autonomously perform complex tasks. This project makes the design of cyber-physical systems (CPS) accessible to anyone by creating computational tools that enable people to choose a set of building blocks and define what a system should do. The tools then automatically create a simple and easy to understand description of how to assemble the components and provide the control needed to accomplish the task. If the task cannot be done with a single system, the tools provide either multiple systems that need to be assembled and/or explanations as to why the task cannot be done, for example due to physical constraints. The project includes designing a competition to accelerate the development of design tools, and mentoring of students from underrepresented groups. \r\n\r\nInspired by advances in program synthesis, control synthesis and modular CPS, this project (i) defines formal specifications and synthesis processes for CPS whose task requires motion in the physical environment, and (ii) creates automated design tools that synthesize both the structure and control of the CPS and that guarantee either full or partial task satisfaction. The formalisms and tools are based on the Syntax-Guided Synthesis (SyGuS) paradigm where the design space is reduced by considering additional structure and leverages computational methods from satisfiability-modulo-theories (SMT) solvers to program synthesis tools, inverse kinematics solvers, motion planners and design optimization. The tools are evaluated on two physical and two simulated platforms.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Hadas",
   "pi_last_name": "Kress Gazit",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Hadas Kress Gazit",
   "pi_email_addr": "hadaskg@cornell.edu",
   "nsf_id": "000521463",
   "pi_start_date": "2018-09-10",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Cornell University",
  "inst_street_address": "341 PINE TREE RD",
  "inst_street_address_2": "",
  "inst_city_name": "ITHACA",
  "inst_state_code": "NY",
  "inst_state_name": "New York",
  "inst_phone_num": "6072555014",
  "inst_zip_code": "148502820",
  "inst_country_name": "United States",
  "cong_dist_code": "19",
  "st_cong_dist_code": "NY19",
  "org_lgl_bus_name": "CORNELL UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "G56PUALJ3KT5"
 },
 "perf_inst": {
  "perf_inst_name": "Cornell University",
  "perf_str_addr": "124 Hoy Rd",
  "perf_city_name": "Ithaca",
  "perf_st_code": "NY",
  "perf_st_name": "New York",
  "perf_zip_code": "148537501",
  "perf_ctry_code": "US",
  "perf_cong_dist": "19",
  "perf_st_cong_dist": "NY19",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "791800",
   "pgm_ele_name": "CPS-Cyber-Physical Systems"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "9102",
   "pgm_ref_txt": "WOMEN, MINORITY, DISABLED, NEC"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 372998.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Given a set of parts that we can use to build a robot arm, how can we define a task we want the robot arm to do and then automatically generate both &ldquo;IKEA-like&rdquo; instructions of how to build the arm, and the control commands for the arm, such that it will achieve the task?</p>\r\n<p>In this project, we created a specification language to describe 2D and 3D tasks a robot arm might perform, such as cleaning an area, moving items around a cabinet, and painting. This language allows a person to describe trajectories of the end effector of the arm, in addition to obstacles the robot arm must avoid, and constraints on where the robot arm is mounted.</p>\r\n<p>Given a task, we developed algorithms to automatically transform the task specifications into a robot design&mdash;the mounting location, link lengths, number of one degree of freedom joints, and mounting angles&mdash;and provide the control commands for the motors that ensure the robot achieves the task, if possible.</p>\r\n<p>If our algorithms cannot find a robot arm design that can achieve the task, we automatically provide either multiple designs that together can do the full task, or a single design that can do part of the task.</p>\r\n<p>In this work, we create both serial manipulators and quasi-serial manipulators whose structure is a serial chain with added local closed-loops. Furthermore, we consider timing, torque, and accuracy constraints as part of the task description.</p>\r\n<p>Finally, we produce fault-tolerant designs; these designs, if found, can achieve the task even if one of the joints of the arm gets stuck in an arbitrary angle during execution.</p>\r\n<p>&nbsp;</p><br>\n<p>\n Last Modified: 02/24/2025<br>\nModified by: Hadas&nbsp;Kress Gazit</p></div>\n<div class=\"porSideCol\"\n><div class=\"each-gallery\">\n<div class=\"galContent\" id=\"gallery0\">\n<div class=\"photoCount\" id=\"photoCount0\">\n\t\t\t\t\t\t\t\t\tImages (<span id=\"selectedPhoto0\">1</span> of <span class=\"totalNumber\"></span>)\t\n\t\t\t\t\t\t\t\t</div>\n<div class=\"galControls onePhoto\" id=\"controls0\"></div>\n<div class=\"galSlideshow\" id=\"slideshow0\"></div>\n<div class=\"galEmbox\" id=\"embox\">\n<div class=\"image-title\"></div>\n</div>\n</div>\n<div class=\"galNavigation\" id=\"navigation0\">\n<ul class=\"thumbs\" id=\"thumbs0\">\n<li>\n<a href=\"/por/images/Reports/POR/2025/1837506/1837506_10581559_1740399951593_parallel--rgov-214x142.png\" original=\"/por/images/Reports/POR/2025/1837506/1837506_10581559_1740399951593_parallel--rgov-800width.png\" title=\"Parallel Manipulator\"><img src=\"/por/images/Reports/POR/2025/1837506/1837506_10581559_1740399951593_parallel--rgov-66x44.png\" alt=\"Parallel Manipulator\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Task description (top) and results for (A) serial and (B) quasi-serial manipulators</div>\n<div class=\"imageCredit\">Thais Campos Farley</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Hadas&nbsp;Kress Gazit\n<div class=\"imageTitle\">Parallel Manipulator</div>\n</div>\n</li><li>\n<a href=\"/por/images/Reports/POR/2025/1837506/1837506_10581559_1740399214615_Rose--rgov-214x142.png\" original=\"/por/images/Reports/POR/2025/1837506/1837506_10581559_1740399214615_Rose--rgov-800width.png\" title=\"Manipulator for rose\"><img src=\"/por/images/Reports/POR/2025/1837506/1837506_10581559_1740399214615_Rose--rgov-66x44.png\" alt=\"Manipulator for rose\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Left: Task specifications (red are obstacles, black is base constraints, gray is the desired trajectory). Right: manipulator in action, painting a rose</div>\n<div class=\"imageCredit\">Thais Campos Farley</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Hadas&nbsp;Kress Gazit\n<div class=\"imageTitle\">Manipulator for rose</div>\n</div>\n</li></ul>\n</div>\n</div></div>\n</div>\n",
  "por_txt_cntn": "\n\nGiven a set of parts that we can use to build a robot arm, how can we define a task we want the robot arm to do and then automatically generate both IKEA-like instructions of how to build the arm, and the control commands for the arm, such that it will achieve the task?\r\n\n\nIn this project, we created a specification language to describe 2D and 3D tasks a robot arm might perform, such as cleaning an area, moving items around a cabinet, and painting. This language allows a person to describe trajectories of the end effector of the arm, in addition to obstacles the robot arm must avoid, and constraints on where the robot arm is mounted.\r\n\n\nGiven a task, we developed algorithms to automatically transform the task specifications into a robot designthe mounting location, link lengths, number of one degree of freedom joints, and mounting anglesand provide the control commands for the motors that ensure the robot achieves the task, if possible.\r\n\n\nIf our algorithms cannot find a robot arm design that can achieve the task, we automatically provide either multiple designs that together can do the full task, or a single design that can do part of the task.\r\n\n\nIn this work, we create both serial manipulators and quasi-serial manipulators whose structure is a serial chain with added local closed-loops. Furthermore, we consider timing, torque, and accuracy constraints as part of the task description.\r\n\n\nFinally, we produce fault-tolerant designs; these designs, if found, can achieve the task even if one of the joints of the arm gets stuck in an arbitrary angle during execution.\r\n\n\n\t\t\t\t\tLast Modified: 02/24/2025\n\n\t\t\t\t\tSubmitted by: HadasKress Gazit\n"
 }
}