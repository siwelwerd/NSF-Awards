{
 "awd_id": "1815633",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small:Verifying Complex Concurrent Data Structures with Flow Interfaces",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032922585",
 "po_email": "pprabhak@nsf.gov",
 "po_sign_block_name": "Pavithra Prabhakar",
 "awd_eff_date": "2018-10-01",
 "awd_exp_date": "2022-09-30",
 "tot_intn_awd_amt": 498496.0,
 "awd_amount": 498496.0,
 "awd_min_amd_letter_date": "2018-05-14",
 "awd_max_amd_letter_date": "2018-05-14",
 "awd_abstract_narration": "Among the most critical components of today's cyber-infrastructure are concurrent data structures that coordinate work between sub-computations. These software components are notoriously difficult to implement correctly. While formal verification tools can guarantee the reliability of software, there remains a gap between the highly complex concurrent data structures found in real systems and the relatively simple ones amenable to today's tools. This project aims to close this gap. The project maintains a repository of software tools and benchmarks that is publicly available under open source licenses. The educational objectives include involvement of undergraduate students and the dissemination of course materials created for this project. These activities are supplemented by the investigator's continued involvement in outreach programs for high-school students.\r\n \r\nConcurrent separation logic has helped to simplify formal correctness proofs for concurrent data structures. However, a recurring problem in such proofs is that data structure abstractions that work well for sequential software are much harder to reason about in a concurrent setting. The project takes a radically different approach to data structure abstraction that leads to a new semantic model of separation logic and can describe the complex concurrent data structures found in practice. The obtained abstractions admit proof rules that generalize over a wide variety of data structures. This gives rise to novel proof modularization techniques where abstract algorithm templates are proved correct once and for all and can then be refined to concrete data structure implementations, significantly reducing the proof effort compared to the state of the art.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Thomas",
   "pi_last_name": "Wies",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Thomas Wies",
   "pi_email_addr": "tw47@nyu.edu",
   "nsf_id": "000611335",
   "pi_start_date": "2018-05-14",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "New York University",
  "inst_street_address": "70 WASHINGTON SQ S",
  "inst_street_address_2": "",
  "inst_city_name": "NEW YORK",
  "inst_state_code": "NY",
  "inst_state_name": "New York",
  "inst_phone_num": "2129982121",
  "inst_zip_code": "100121019",
  "inst_country_name": "United States",
  "cong_dist_code": "10",
  "st_cong_dist_code": "NY10",
  "org_lgl_bus_name": "NEW YORK UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "NX9PXMKW5KW8"
 },
 "perf_inst": {
  "perf_inst_name": "New York University",
  "perf_str_addr": "251 Mercer Street, Rm 825",
  "perf_city_name": "New York",
  "perf_st_code": "NY",
  "perf_st_name": "New York",
  "perf_zip_code": "100121110",
  "perf_ctry_code": "US",
  "perf_cong_dist": "10",
  "perf_st_cong_dist": "NY10",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "8206",
   "pgm_ref_txt": "Formal Methods and Verification"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 498496.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Well-designed concurrent algorithms on shared data structures allow threads to execute in a way that minimizes the amount of time each thread spends waiting for&nbsp; other threads. These concurrent data structures are core components of critical applications such as database algorithms managing commercial, scientific, or government data. The goal is to support throughputs of millions of key-value operations per second. The research and practitioner communities have developed concurrent data structure algorithms that are fast, scalable, and adaptable to changing workloads.<br /><br />Unfortunately, these algorithms are also among the most difficult software artifacts to develop correctly. There have been many examples of concurrent algorithms in peer-reviewed articles and books with (pencil-and-paper) mathematical proofs that have later turned out to contain mistakes. In order to be able to verify existing algorithms and to develop safe new ones, we need systematic and dependable techniques to reason about and ensure the correctness of these complex algorithms.<br /><br />Concurrent separation logics (CSLs) have helped to significantly simplify formal correctness proofs for these algorithms. However, a recurring problem in such proofs is that data structure abstractions that work well in the sequential setting are much harder to reason about in a concurrent setting due to complex sharing and overlays. To overcome these limitations, this project developed the so-called flow framework. This framework provides a novel separation logic abstraction mechanism that allows one to reason about global inductive invariants of general graphs in a local manner, enabling easier proof automation. We demonstrated the versatility of the flow framework by using it to build new verification tools that can automatically verify concurrent data structures that could not be handled by previous techniques.<br /><br />The results of this research have been published in six papers that have appeared in major publication venues for Computer Science research. In addition, the software and proof artifacts that have been developed in the course of this project are publicly available under non-restrictive open source licenses.<br /><br />The project has provided training opportunities for five PhD students who conducted research related to the project. One student has successfully graduated during the project duration and has subsequently found employment as a postdoctoral researcher. The remaining four PhD students, currently in their fifth, respectively, third year of studies, have made significant progress towards the completion of their degree. In addition, one postdoctoral researcher has been involved in this project and one MS student has completed an MS thesis related to this research.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 02/27/2023<br>\n\t\t\t\t\tModified by: Thomas&nbsp;Wies</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nWell-designed concurrent algorithms on shared data structures allow threads to execute in a way that minimizes the amount of time each thread spends waiting for  other threads. These concurrent data structures are core components of critical applications such as database algorithms managing commercial, scientific, or government data. The goal is to support throughputs of millions of key-value operations per second. The research and practitioner communities have developed concurrent data structure algorithms that are fast, scalable, and adaptable to changing workloads.\n\nUnfortunately, these algorithms are also among the most difficult software artifacts to develop correctly. There have been many examples of concurrent algorithms in peer-reviewed articles and books with (pencil-and-paper) mathematical proofs that have later turned out to contain mistakes. In order to be able to verify existing algorithms and to develop safe new ones, we need systematic and dependable techniques to reason about and ensure the correctness of these complex algorithms.\n\nConcurrent separation logics (CSLs) have helped to significantly simplify formal correctness proofs for these algorithms. However, a recurring problem in such proofs is that data structure abstractions that work well in the sequential setting are much harder to reason about in a concurrent setting due to complex sharing and overlays. To overcome these limitations, this project developed the so-called flow framework. This framework provides a novel separation logic abstraction mechanism that allows one to reason about global inductive invariants of general graphs in a local manner, enabling easier proof automation. We demonstrated the versatility of the flow framework by using it to build new verification tools that can automatically verify concurrent data structures that could not be handled by previous techniques.\n\nThe results of this research have been published in six papers that have appeared in major publication venues for Computer Science research. In addition, the software and proof artifacts that have been developed in the course of this project are publicly available under non-restrictive open source licenses.\n\nThe project has provided training opportunities for five PhD students who conducted research related to the project. One student has successfully graduated during the project duration and has subsequently found employment as a postdoctoral researcher. The remaining four PhD students, currently in their fifth, respectively, third year of studies, have made significant progress towards the completion of their degree. In addition, one postdoctoral researcher has been involved in this project and one MS student has completed an MS thesis related to this research.\n\n\t\t\t\t\tLast Modified: 02/27/2023\n\n\t\t\t\t\tSubmitted by: Thomas Wies"
 }
}