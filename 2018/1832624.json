{
 "awd_id": "1832624",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Medium: Collaborative Research: Micro-Virtual Machines for Managed Languages: Abstraction, contained",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2017-08-12",
 "awd_exp_date": "2020-05-31",
 "tot_intn_awd_amt": 261554.0,
 "awd_amount": 261554.0,
 "awd_min_amd_letter_date": "2018-03-21",
 "awd_max_amd_letter_date": "2018-03-30",
 "awd_abstract_narration": "Title: Micro Virtual Machines for Managed Languages: Abstraction, contained\r\n\r\nA large fraction of today's software is written in managed languages. These languages increase software productivity by supporting programming at a very high level, hiding the complexity of modern computer hardware and operating systems. Examples include JavaScript, PHP, Objective-C, Java, C#, Python, and Ruby. These languages have great economic importance. Unfortunately, most of these languages are inefficient, imposing overheads as large as a factor of fifty compared to orthodox language choices such as C. The broader impacts of this research are two-fold: (1) Since managed languages are increasingly becoming economic linchpins, deployed in the engine rooms of global e-commerce platforms and Internet applications (including those of key software companies such as Amazon, Google, Facebook, Apple, Oracle, and Microsoft), improving the reliability and performance of these managed language platforms will lead to economic efficiencies as well as resource efficiencies in the form of reduced power costs to data centers and improved battery lifetime on mobile devices;(2) Concerning human diversity in the computing field, the research will engage undergraduates from under-represented groups, and encourage them to pursue graduate school and careers in computing and research.\r\n\r\nThis research project is defining, developing, evaluating, and refining the essential components of a new foundation layer for managed language implementation. In doing so, it addresses a key source of systemic inefficiency, by pioneering the \"micro virtual machine\" (microVM) as an efficient high-performance substrate for managed language implementation. The relationship between a microVM and existing managed language implementations is analogous to that between an operating system micro kernel and monolithic operating systems such as Linux. The microVM captures the insight that there exists a well-defined foundation common to most modern languages that can take responsibility for fundamental abstractions over hardware, concurrency, and memory. By isolating and exposing this substrate, the microVM embodies state-of-the-art base technology available to language implementers while isolating them from the pernicious complexities of these abstractions, freeing them to focus on all-important language-specific optimizations. The research is enabling more efficient software and a distinctly sharper focus for language implementation research and development. The intellectual merits of the research are: (1) Researching and identifying, via prototyping and evaluation, the right microVM abstractions, allowing clean separation of low-level language-neutral and high-level language-specific concerns, capturing the core behaviors, while also admitting high-performance language implementations; (2) Generating secondary research challenges, especially with regard to the effective and efficient combination of abstractions for hardware, concurrency, and memory; and (3) Creating a viable target for formal verification because the microVM has a relatively small code base, thus taking one step on the way towards trustworthy subsystems for assurance of managed software.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "J Eliot",
   "pi_last_name": "Moss",
   "pi_mid_init": "B",
   "pi_sufx_name": "",
   "pi_full_name": "J Eliot B Moss",
   "pi_email_addr": "moss@cs.umass.edu",
   "nsf_id": "000261930",
   "pi_start_date": "2018-03-30",
   "pi_end_date": null
  },
  {
   "pi_role": "Former Principal Investigator",
   "pi_first_name": "Antony",
   "pi_last_name": "Hosking",
   "pi_mid_init": "L",
   "pi_sufx_name": "",
   "pi_full_name": "Antony L Hosking",
   "pi_email_addr": "hosking@cs.umass.edu",
   "nsf_id": "000107257",
   "pi_start_date": "2018-03-21",
   "pi_end_date": "2018-03-30"
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Antony",
   "pi_last_name": "Hosking",
   "pi_mid_init": "L",
   "pi_sufx_name": "",
   "pi_full_name": "Antony L Hosking",
   "pi_email_addr": "hosking@cs.umass.edu",
   "nsf_id": "000107257",
   "pi_start_date": "2018-03-30",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Massachusetts Amherst",
  "inst_street_address": "101 COMMONWEALTH AVE",
  "inst_street_address_2": "",
  "inst_city_name": "AMHERST",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "4135450698",
  "inst_zip_code": "010039252",
  "inst_country_name": "United States",
  "cong_dist_code": "02",
  "st_cong_dist_code": "MA02",
  "org_lgl_bus_name": "UNIVERSITY OF MASSACHUSETTS",
  "org_prnt_uei_num": "VGJHK59NMPK9",
  "org_uei_num": "VGJHK59NMPK9"
 },
 "perf_inst": {
  "perf_inst_name": "University of Massachusetts Amherst",
  "perf_str_addr": "",
  "perf_city_name": "Amherst",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "010039264",
  "perf_ctry_code": "US",
  "perf_cong_dist": "02",
  "perf_st_cong_dist": "MA02",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  },
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7354",
   "pgm_ref_txt": "COMPUTER SYSTEMS"
  },
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0114",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001415DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2014,
   "fund_oblg_amt": 261553.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Programmers almost never write code directly for a \"bare\" machine, the \"raw\" hardware.&nbsp; Rather, they write programs intended to execute in a richer environment, providing a variety of services, such as ability to interact with a user via keyboard, mouse, and screen, to access and store data in files, to communicate over a computer network, etc.&nbsp; The collection of facilities provided in a given setting are termed a&nbsp;<em>virtual machine</em>.&nbsp; Some such machines are designed to make it easier to write a program that will work across a wide variety of computers without reprogramming.&nbsp; An example is the Java virtual machine (Java run-time system).&nbsp; A goal of the project was to contribute toward a virtual machine well suited not only for working across a variety of kinds of computers, but to support well a wide variety of programming languages.&nbsp; This makes it easier to develop new languages that bring new capabilities, while making those languages readily available across many computers - without forcing the language developer to do all the complex low-level work to provide their own language-specific virtual machine.&nbsp; Put another way, previously, language developers would build a virtual machine from scratch for their particular language.&nbsp; This project aimed to build a single virtual machine, independent of any particular language, but well suited to supporting a wide range of languages.</p>\n<p>This language-independent virtual machine, called Mu, was evaluated by prototyping implementations of diverse languages using Mu.&nbsp; These languages included Haskell, python (the pypy version), Java, and C.&nbsp; The reference (\"standard\") implementation of Mu was built using Scala, and a performant implementation, which includes support for generating somewhat optimized machine code, was written using the Rust programming language.&nbsp; This produced interesting results in how to implement advanced language support techniques,such as on-stack replacement, using Rust.</p>\n<p>Overall, the Mu project produced three PhD graduates at the Australian National University and supported two graduates each at the University of Massachusetts Amherst and Purdue University.</p>\n<p>As the project evolved, we focused more of our efforts toward understanding how we might guarantee the correctness of one of these virtual machines, since all code written in the languages that use a virtual machine must trust the virtual machine to function properly.&nbsp; Part of what makes this difficult is that modern computers have many \"cores\" all working at once, and often their synchronization with memory is complex and can result in surprising reorderings if not managed carefully.&nbsp; We considered how we might model a wide variety of makes of computers in this regard within one general model, which we could then use to prove things about the correctness of particular programs.&nbsp; We devised a model that can capture ways in which one core may be \"ahead\" of other cores in terms of its updates to memory, ways in which the core may be \"behind\", and ways in which the core may execute some of its instructions in an order different from that in the program, according to what a given computer design permits.</p>\n<p>In the long run this should contribute to our ability to trust critical computer infrastructure.&nbsp; Another broader contribution of the project is its education of students to undertake this and similar work in this generation, and its encouragement of undergraduate students to consider a career in science.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 07/30/2020<br>\n\t\t\t\t\tModified by: J. Eliot&nbsp;B&nbsp;Moss</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nProgrammers almost never write code directly for a \"bare\" machine, the \"raw\" hardware.  Rather, they write programs intended to execute in a richer environment, providing a variety of services, such as ability to interact with a user via keyboard, mouse, and screen, to access and store data in files, to communicate over a computer network, etc.  The collection of facilities provided in a given setting are termed a virtual machine.  Some such machines are designed to make it easier to write a program that will work across a wide variety of computers without reprogramming.  An example is the Java virtual machine (Java run-time system).  A goal of the project was to contribute toward a virtual machine well suited not only for working across a variety of kinds of computers, but to support well a wide variety of programming languages.  This makes it easier to develop new languages that bring new capabilities, while making those languages readily available across many computers - without forcing the language developer to do all the complex low-level work to provide their own language-specific virtual machine.  Put another way, previously, language developers would build a virtual machine from scratch for their particular language.  This project aimed to build a single virtual machine, independent of any particular language, but well suited to supporting a wide range of languages.\n\nThis language-independent virtual machine, called Mu, was evaluated by prototyping implementations of diverse languages using Mu.  These languages included Haskell, python (the pypy version), Java, and C.  The reference (\"standard\") implementation of Mu was built using Scala, and a performant implementation, which includes support for generating somewhat optimized machine code, was written using the Rust programming language.  This produced interesting results in how to implement advanced language support techniques,such as on-stack replacement, using Rust.\n\nOverall, the Mu project produced three PhD graduates at the Australian National University and supported two graduates each at the University of Massachusetts Amherst and Purdue University.\n\nAs the project evolved, we focused more of our efforts toward understanding how we might guarantee the correctness of one of these virtual machines, since all code written in the languages that use a virtual machine must trust the virtual machine to function properly.  Part of what makes this difficult is that modern computers have many \"cores\" all working at once, and often their synchronization with memory is complex and can result in surprising reorderings if not managed carefully.  We considered how we might model a wide variety of makes of computers in this regard within one general model, which we could then use to prove things about the correctness of particular programs.  We devised a model that can capture ways in which one core may be \"ahead\" of other cores in terms of its updates to memory, ways in which the core may be \"behind\", and ways in which the core may execute some of its instructions in an order different from that in the program, according to what a given computer design permits.\n\nIn the long run this should contribute to our ability to trust critical computer infrastructure.  Another broader contribution of the project is its education of students to undertake this and similar work in this generation, and its encouragement of undergraduate students to consider a career in science.\n\n\t\t\t\t\tLast Modified: 07/30/2020\n\n\t\t\t\t\tSubmitted by: J. Eliot B Moss"
 }
}