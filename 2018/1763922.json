{
 "awd_id": "1763922",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "SHF: MEDIUM: Performant Sound Gradual Typing",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2018-07-01",
 "awd_exp_date": "2023-06-30",
 "tot_intn_awd_amt": 1192054.0,
 "awd_amount": 1200054.0,
 "awd_min_amd_letter_date": "2018-05-03",
 "awd_max_amd_letter_date": "2020-10-15",
 "awd_abstract_narration": "Over the past two decades, software developers have switched to a new breed of computer languages. While these languages increase the developers' productivity and allow them to create software for novel devices, they also have the distinct disadvantage of not checking enough safety properties upfront. Failures show up once the software is deployed and may hurt customers.  Researchers have recently addressed this problem with the creation of hybrid languages, which embrace rapid production and a way to add safety checks gradually, while industrial developers have developed hybrid languages that omit safety entirely. The project's novelties are about the performance of these hybrid languages, which, as recently discovered, prevent their adoption. If successful, the project's impacts are likely to change the landscape of modern software development on a large scale, adding safety to the most common modern approach to rapid software production.\r\n\r\nThe research project addresses the specific problem of improving the performance of these hybrid languages. While prior research demonstrates that hybrid programming languages are indeed the flexible medium that software developers may want, it also reveals significant performance problems with these languages. The project therefore explores four different ideas of how to eliminate these performance bottlenecks: (1) principled relaxation of the safety guarantees; (2) compiler technology specifically tuned to the additional safety checks; (3) reduction of memory needed for these checks; and (4) application of software verification technology.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Sam",
   "pi_last_name": "Tobin-Hochstadt",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Sam Tobin-Hochstadt",
   "pi_email_addr": "samth@cs.indiana.edu",
   "nsf_id": "000611033",
   "pi_start_date": "2018-05-03",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Matthias",
   "pi_last_name": "Felleisen",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Matthias Felleisen",
   "pi_email_addr": "matthias@ccs.neu.edu",
   "nsf_id": "000286813",
   "pi_start_date": "2018-05-03",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Jeremy",
   "pi_last_name": "Siek",
   "pi_mid_init": "G",
   "pi_sufx_name": "",
   "pi_full_name": "Jeremy G Siek",
   "pi_email_addr": "jsiek@indiana.edu",
   "nsf_id": "000086759",
   "pi_start_date": "2018-05-03",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Indiana University",
  "inst_street_address": "107 S INDIANA AVE",
  "inst_street_address_2": "",
  "inst_city_name": "BLOOMINGTON",
  "inst_state_code": "IN",
  "inst_state_name": "Indiana",
  "inst_phone_num": "3172783473",
  "inst_zip_code": "474057000",
  "inst_country_name": "United States",
  "cong_dist_code": "09",
  "st_cong_dist_code": "IN09",
  "org_lgl_bus_name": "TRUSTEES OF INDIANA UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "YH86RTW2YVJ4"
 },
 "perf_inst": {
  "perf_inst_name": "Indiana University",
  "perf_str_addr": "150 S. Woodlawn",
  "perf_city_name": "Bloomington",
  "perf_st_code": "IN",
  "perf_st_name": "Indiana",
  "perf_zip_code": "474057104",
  "perf_ctry_code": "US",
  "perf_cong_dist": "09",
  "perf_st_cong_dist": "IN09",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "287800",
   "pgm_ele_name": "Special Projects - CCF"
  },
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7798",
   "pgm_ref_txt": "SOFTWARE & HARDWARE FOUNDATION"
  },
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0121",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 587620.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 297386.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 315048.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>&nbsp;</p>\n<div>\n<div><span>Gradual typing is a programming language paradigm that allows for the</span></div>\n<div><span>interoperation of typed and untyped code. This approach offers flexibility in</span></div>\n<div><span>choosing which parts of a program to type-check, allowing developers to balance</span></div>\n<div><span>the benefits of static and dynamic typing. However, this flexibility comes at a</span></div>\n<div><span>cost, as the interplay between typed and untyped code can result in performance</span></div>\n<div><span>issues. This project aimed to address these challenges through various</span></div>\n<div><span>approaches, including refining measurement techniques, developing new compilers,</span></div>\n<div><span>and exploring just-in-time compilation techniques.</span></div>\n<br />\n<div><span>One of the key developments was in the Pycket implementation, led by Sam</span></div>\n<div><span>Tobin-Hochstadt&rsquo;s team including Caner Derici, which demonstrated improvements</span></div>\n<div><span>in gradual typing performance via a Just-In-Time compiler for Racket. Pycket</span></div>\n<div><span>demonstrated significant ability to improve the performance of typed/untyped</span></div>\n<div><span>interoperation. </span></div>\n<br />\n<div><span>Similarly, Jeremy Siek's team, including Deyaaeldeen Almahallawi and Andre</span></div>\n<div><span>Kuhlenschmidt, made progress in developing a new compiler for gradually typed</span></div>\n<div><span>programs which demonstrated that static compiler techniques customized for the</span></div>\n<div><span>challenges of gradual typing can also be highly effective. </span></div>\n<br />\n<div><span>Additionally, the project improved the understanding of the causes and</span></div>\n<div><span>measurement of gradual typing performance. Led by Ben Greenman working with</span></div>\n<div><span>Matthias Felleisen, the team studied the performance of different approaches to</span></div>\n<div><span>gradual typing interoperation, and built tools that enabled accurate comparison</span></div>\n<div><span>of different approaches. </span></div>\n<br />\n<div><span>Finally, in collaboration with Prof. Van Horn and his student, Cameron Moy,</span></div>\n<div><span>Tobin-Hochstadt showed how contract verifiaction could automatically remove the</span></div>\n<div><span>dynamic checks that are often required in gradually typed programs.</span></div>\n<br />\n<div><span>Overall, the project demonstrated numerous runtime, compile-time, and</span></div>\n<div><span>verification approaches to improve the performance of gradual typing, as well as</span></div>\n<div><span>increasing our understanding of the causes of performance issues in gradually</span></div>\n<div><span>typed systems. </span></div>\n<br />\n<div><span>The project also made significant progress in the area of the design of</span></div>\n<div><span>gradually typed languages. Siek's team, including Deyaaeldeen Almahallawi,</span></div>\n<div><span>developed new primitives for expressing more information about the desired</span></div>\n<div><span>behavior in the language, which can lead to more efficient compilation.</span></div>\n<br />\n<div><span>Tobin-Hochstadt's team, with graduate student Yuquan Fu, developed a new type</span></div>\n<div><span>system for type checking \"method extraction\", a common pattern in</span></div>\n<div><span>object-oriented programming that is handled incorrectly in existing gradually</span></div>\n<div><span>typed languages. This work was integrated into the Typed Racket system and is</span></div>\n<div><span>now available for use by programmers.</span></div>\n<br />\n<div><span>Siek's team, including graduate student Tianyu Chen, developed a new type system</span></div>\n<div><span>for gradual information flow, which is an important security property. This work</span></div>\n<div><span>shows that it is possible to design a type system with the desirable properties</span></div>\n<div><span>of both security type systems and gradual typing.</span></div>\n<br />\n<div><span>Felleisen's team, including graduate student Sam Caldwell, applied lessons from</span></div>\n<div><span>gradual typing to the design of a type system for communicating processes, an</span></div>\n<div><span>innovative approach to designing concurrent systems. </span></div>\n<br />\n<div><span>In terms of training and professional development, the project supported several</span></div>\n<div><span>Ph.D. students. Ben Greenman completed his Ph.D and went on to a CRA-supported</span></div>\n<div><span>postdoc and then a faculty position at the University of Utah. Sam Caldwell</span></div>\n<div><span>completed his Ph.D and continued as a postdoc at Northeastern. Yuquan Fu and</span></div>\n<div><span>Tianyu Chen trained as Ph.D students at Indiana University. Cameron Moy, an</span></div>\n<div><span>undergraduate when working on the project, went on to a Ph.D. program at</span></div>\n<div><span>Northeastern University with Felleisen. </span></div>\n<br />\n<div><span>The results of the project have been shared through various publications in</span></div>\n<div><span>journals and conferences, including ICFP, OOPSLA, POPL, PLDI, LangSec, TOPLAS,</span></div>\n<div><span>and more. The integration of these findings into the Typed Racket open-source</span></div>\n<div><span>distribution as well as a variety of libraries available on GitHub has helped</span></div>\n<div><span>disseminate these advancements.</span></div>\n<br />\n<div><span>In summary, the project's efforts in addressing the performance challenges in</span></div>\n<div><span>gradually-typed languages have resulted in several noteworthy advancements, both</span></div>\n<div><span>directly in improving the performance of gradually-typed languages, in</span></div>\n<div><span>understanding the causes of performance issues, and in the design of gradually</span></div>\n<div><span>typed languages. These developments represent a step forward for gradual typing,</span></div>\n<div><span>which continues to be an important aspect of modern programming languages.</span></div>\n</div>\n<p>&nbsp;</p><br>\n<p>\n Last Modified: 01/06/2024<br>\nModified by: Sam&nbsp;Tobin-Hochstadt</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\n\n\nGradual typing is a programming language paradigm that allows for the\ninteroperation of typed and untyped code. This approach offers flexibility in\nchoosing which parts of a program to type-check, allowing developers to balance\nthe benefits of static and dynamic typing. However, this flexibility comes at a\ncost, as the interplay between typed and untyped code can result in performance\nissues. This project aimed to address these challenges through various\napproaches, including refining measurement techniques, developing new compilers,\nand exploring just-in-time compilation techniques.\n\n\nOne of the key developments was in the Pycket implementation, led by Sam\nTobin-Hochstadts team including Caner Derici, which demonstrated improvements\nin gradual typing performance via a Just-In-Time compiler for Racket. Pycket\ndemonstrated significant ability to improve the performance of typed/untyped\ninteroperation. \n\n\nSimilarly, Jeremy Siek's team, including Deyaaeldeen Almahallawi and Andre\nKuhlenschmidt, made progress in developing a new compiler for gradually typed\nprograms which demonstrated that static compiler techniques customized for the\nchallenges of gradual typing can also be highly effective. \n\n\nAdditionally, the project improved the understanding of the causes and\nmeasurement of gradual typing performance. Led by Ben Greenman working with\nMatthias Felleisen, the team studied the performance of different approaches to\ngradual typing interoperation, and built tools that enabled accurate comparison\nof different approaches. \n\n\nFinally, in collaboration with Prof. Van Horn and his student, Cameron Moy,\nTobin-Hochstadt showed how contract verifiaction could automatically remove the\ndynamic checks that are often required in gradually typed programs.\n\n\nOverall, the project demonstrated numerous runtime, compile-time, and\nverification approaches to improve the performance of gradual typing, as well as\nincreasing our understanding of the causes of performance issues in gradually\ntyped systems. \n\n\nThe project also made significant progress in the area of the design of\ngradually typed languages. Siek's team, including Deyaaeldeen Almahallawi,\ndeveloped new primitives for expressing more information about the desired\nbehavior in the language, which can lead to more efficient compilation.\n\n\nTobin-Hochstadt's team, with graduate student Yuquan Fu, developed a new type\nsystem for type checking \"method extraction\", a common pattern in\nobject-oriented programming that is handled incorrectly in existing gradually\ntyped languages. This work was integrated into the Typed Racket system and is\nnow available for use by programmers.\n\n\nSiek's team, including graduate student Tianyu Chen, developed a new type system\nfor gradual information flow, which is an important security property. This work\nshows that it is possible to design a type system with the desirable properties\nof both security type systems and gradual typing.\n\n\nFelleisen's team, including graduate student Sam Caldwell, applied lessons from\ngradual typing to the design of a type system for communicating processes, an\ninnovative approach to designing concurrent systems. \n\n\nIn terms of training and professional development, the project supported several\nPh.D. students. Ben Greenman completed his Ph.D and went on to a CRA-supported\npostdoc and then a faculty position at the University of Utah. Sam Caldwell\ncompleted his Ph.D and continued as a postdoc at Northeastern. Yuquan Fu and\nTianyu Chen trained as Ph.D students at Indiana University. Cameron Moy, an\nundergraduate when working on the project, went on to a Ph.D. program at\nNortheastern University with Felleisen. \n\n\nThe results of the project have been shared through various publications in\njournals and conferences, including ICFP, OOPSLA, POPL, PLDI, LangSec, TOPLAS,\nand more. The integration of these findings into the Typed Racket open-source\ndistribution as well as a variety of libraries available on GitHub has helped\ndisseminate these advancements.\n\n\nIn summary, the project's efforts in addressing the performance challenges in\ngradually-typed languages have resulted in several noteworthy advancements, both\ndirectly in improving the performance of gradually-typed languages, in\nunderstanding the causes of performance issues, and in the design of gradually\ntyped languages. These developments represent a step forward for gradual typing,\nwhich continues to be an important aspect of modern programming languages.\n\n\n\n\t\t\t\t\tLast Modified: 01/06/2024\n\n\t\t\t\t\tSubmitted by: SamTobin-Hochstadt\n"
 }
}