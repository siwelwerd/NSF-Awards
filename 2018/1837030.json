{
 "awd_id": "1837030",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "FMitF: OpenRDC: A Framework for Implementing Open, Reliable, Distributed, Network Control",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2018-10-01",
 "awd_exp_date": "2023-09-30",
 "tot_intn_awd_amt": 1000000.0,
 "awd_amount": 1039740.0,
 "awd_min_amd_letter_date": "2018-09-07",
 "awd_max_amd_letter_date": "2021-05-20",
 "awd_abstract_narration": "Computer networks, whether connecting servers across a data center or users across the globe, are an important part of society's critical infrastructure. However, existing network protocols and services are simply not worthy of the trust society now places in them. Today's networks suffer from poor performance, cyberattacks, configuration errors, software bugs, and more, leading to serious consequences for consumers, businesses, and governments alike. The goal of this project is to enable the design and operation of better networks which requires enabling both innovation (to create better protocols and services) and verification (to ensure these services work correctly). A major part of the functionality of the network depends on the software running in the control plane, which computes routes, collects and analyzes network measurement data, balances load over multiple paths or servers and even hosts in-network applications. This project involves the theory, design, and implementation of OpenRDC, a new platform constructed for programming reliable, distributed network control planes.  \r\n\r\nThe technical core of OpenRDC centers around computations of Stable Information Trees (SITs) that communicate information (e.g., traffic conditions, failure information, available external routes, end-host job statistics, etc.) across a network, and then perform local actions to change network functionality or record information gathered. These structured computations suffice to express core control plane algorithms and yet can also be converted into logical representations that can be used to verify a variety of important properties of operational networks ranging from reachability to access control to multi-path consistency. The OpenRDC platform will simultaneously: (1) allow researchers to develop new control-plane algorithms, (2) enable automatic verification of network properties, and (3) make use of emerging programmable switch capabilities. The project involves acceleration of the development of new control-plane algorithms, via new abstractions for network programming. The project will also define new compiler technology for translating these abstractions to programmable network hardware. In addition, its open source infrastructure will lay a foundation for academic and industrial engagement and for the training of students. The project will also have impact on formal methods, with new algorithms for the verification of graph-oriented programming languages based on abstraction and modular decomposition.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Aarti",
   "pi_last_name": "Gupta",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Aarti Gupta",
   "pi_email_addr": "aartig@princeton.edu",
   "nsf_id": "000689816",
   "pi_start_date": "2018-09-07",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Jennifer",
   "pi_last_name": "Rexford",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Jennifer Rexford",
   "pi_email_addr": "jrex@princeton.edu",
   "nsf_id": "000474054",
   "pi_start_date": "2018-09-07",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "David",
   "pi_last_name": "Walker",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "David Walker",
   "pi_email_addr": "dpw@cs.princeton.edu",
   "nsf_id": "000167001",
   "pi_start_date": "2018-09-07",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Princeton University",
  "inst_street_address": "1 NASSAU HALL",
  "inst_street_address_2": "",
  "inst_city_name": "PRINCETON",
  "inst_state_code": "NJ",
  "inst_state_name": "New Jersey",
  "inst_phone_num": "6092583090",
  "inst_zip_code": "085442001",
  "inst_country_name": "United States",
  "cong_dist_code": "12",
  "st_cong_dist_code": "NJ12",
  "org_lgl_bus_name": "THE TRUSTEES OF PRINCETON UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "NJ1YPQXQG7U5"
 },
 "perf_inst": {
  "perf_inst_name": "Princeton University",
  "perf_str_addr": "87 Prospect Avenue",
  "perf_city_name": "Princeton",
  "perf_st_code": "NJ",
  "perf_st_name": "New Jersey",
  "perf_zip_code": "085442020",
  "perf_ctry_code": "US",
  "perf_cong_dist": "12",
  "perf_st_cong_dist": "NJ12",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "094Y00",
   "pgm_ele_name": "FMitF: Formal Methods in the F"
  },
  {
   "pgm_ele_code": "287800",
   "pgm_ele_name": "Special Projects - CCF"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "062Z",
   "pgm_ref_txt": "Harnessing the Data Revolution"
  },
  {
   "pgm_ref_code": "071Z",
   "pgm_ref_txt": "FMitF-Formal Methods in the Field"
  },
  {
   "pgm_ref_code": "9102",
   "pgm_ref_txt": "WOMEN, MINORITY, DISABLED, NEC"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0121",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 1000000.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 12240.0
  },
  {
   "fund_oblg_fiscal_yr": 2021,
   "fund_oblg_amt": 27500.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-93c08ff6-7fff-4be9-4997-f74d40496e40\"> </span></p>\n<p dir=\"ltr\"><span><strong>Intellectual Merit</strong>: </span></p>\n<p dir=\"ltr\"><span>The project developed new methods and frameworks in the networking field for: (1) automated verification of distributed network control planes, (2) compilation to programmable network switches, (3) improving user programming experience in development of packet-processing programs, and (4) new networking systems. The project contributed new ideas and methods to formal methods: for verification of graph-based models, for compilation to resource-constrained hardware, and new languages to ease development of correct programs.</span><span><span> </span></span><span>&nbsp;</span></p>\n<p dir=\"ltr\"><span><em><span style=\"text-decoration: underline;\">Automated verification</span></em>:</span><span> </span><span>The main challenge in automated verification of networks is to support a rich set of properties, such as reachability and fault tolerance under multiple environments, while scaling the methods to real-world networks. Building on top of a general logic-based model of network behavior that enables use of automated solvers, such as for Satisfiability Modulo Theories (SMT), the project developed several new methods to improve scalability. These include: abstractions based on symmetry, abstract interpretation over routing announcements, a hierarchy of nondeterministic route selection abstractions and novel SMT encodings, stack-based abstractions for handling multilayer networks, a theory of assume-guarantee reasoning over modular fragments in a network, methods for checking modular interfaces provided by a user, and efficient methods for fault tolerance analysis of control planes. In addition, the project includes design and development of a new framework called NV (publicly available) that provides a compact, flexible and general intermediate language for modeling routing protocol semantics, and supports multiple backends for fast simulation and verification. The results on practical benchmarks have demonstrated improved ability to handle complex policies in real-world network configurations (e.g., using fast simulation and abstract interpretation), and significant improvements in performance (by several orders of magnitude in SMT solve time using compositional methods) and scalability (verifying several tens of thousands of routers using abstractions) in synthetic data center benchmarks.&nbsp;</span></p>\n<p dir=\"ltr\"><span><span> </span></span><span><span> </span></span><span><span> </span></span></p>\n<p dir=\"ltr\"><em><span style=\"text-decoration: underline;\">Compilation to programmable switches</span></em><span>:</span><span> The project developed several techniques for compiling high-level languages to programmable switch hardware. The Chipmunk compiler improved the performance of compiling complex P4 programs by leveraging program synthesis techniques. In the follow-up CaT compiler, synthesis performance was improved further by using problem decomposition, along with other solver-based techniques for resource transformation and resource allocation. These compilers were demonstrated successfully on several programs and achieved a minimum number of pipeline stages. A complementary technique provides language extensions (P4All) that allow programmers to express symbolic network programs and compiler technology to generate efficient implementations. Another technique supports declaration and synthesis of finite state machines that can </span><span>represent common network programming tasks, e.g., checking properties of TCP connections, enforcing security, or collecting statistics.&nbsp;</span></p>\n<p dir=\"ltr\"><span><em><span style=\"text-decoration: underline;\">Improving user programming experience</span></em>:</span><span> </span><span>The project developed a new high-level language and system called Lucid (publicly available) to improve user experience. Lucid includes static analysis techniques, formalized as new type systems, that constrain the legal programs and return easily-understood error messages that help programmers find their mistakes. It also provides support for distributed programming via event-based abstractions that make it easier for the user to develop new networking applications. An evaluation showed that Lucid programs have 5-10x fewer lines of code in comparison to P4.</span></p>\n<p dir=\"ltr\"><span><em><span style=\"text-decoration: underline;\">Designing new networking systems</span></em>:</span><span> </span><span>The project developed Contra, a system for performance-aware routing that can adapt to traffic changes at hardware speeds, and can be configured to operate seamlessly over any network topology and sophisticated routing policies. Users of Contra write network-wide policies that rank network paths based on their performance. Experiments showed that Contra scales to large networks, and that in terms of flow completion times, it is competitive with hand-crafted systems that have been customized for specific topologies and policies. The project also developed a new solution (based on integer linear programming) to address the joint IP/optical control planes and network design problem.&nbsp; Experiments showed cost savings of up to 29% compared to traditional network design techniques.&nbsp;</span></p>\n<p dir=\"ltr\"><span><span> </span></span><span><span> </span></span><span><span> </span></span><span><span> </span></span><span><span> </span></span><span><span> </span></span><span><span> </span></span><span><span> </span></span><span><span> </span></span><span><span> </span></span></p>\n<p dir=\"ltr\"><em><span style=\"text-decoration: underline;\">Contributions to formal methods: </span></em><span>This project developed new theories and tools for symmetry reduction, abstract interpretation, SMT encodings, and assume-guarantee reasoning for graph-based models that underlie networks. These models are significantly different from well-structured graphs that arise in program verification, leading to new ideas (e.g., temporal invariants) that can be potentially used in other systems with graph-based models. The project developed new synthesis and compilation techniques based on problem decomposition and novel formulations for SMT solvers. These can be potentially used in other domains where hardware resources are severely constrained. The project developed new domain-specific languages (NV, Lucid, P4All) that ease programming and development of correct programs.&nbsp;</span></p>\n<p><strong>Broader Impacts: </strong></p>\n<p><span id=\"docs-internal-guid-93c08ff6-7fff-4be9-4997-f74d40496e40\"><span>This project supported the research of </span><span>10 </span><span>PhD students, </span><span>1 </span><span>postdoctoral scholar, and </span><span>10 </span><span>undergraduate students (via REU supplements). It included collaboration with industry groups (Microsoft, AWS, AT&amp;T) for targeting real-world benchmarks. The new methods and results were published in </span><span>18</span><span>&nbsp;conference/journal papers, and the related frameworks and tools are publicly available (NV, Lucid, NAP, Shapeshifter, Kirigami, Timepiece). </span></span></p>\n<p>&nbsp;</p><br>\n<p>\n Last Modified: 01/23/2024<br>\nModified by: Aarti&nbsp;Gupta</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\n \n\n\nIntellectual Merit: \n\n\nThe project developed new methods and frameworks in the networking field for: (1) automated verification of distributed network control planes, (2) compilation to programmable network switches, (3) improving user programming experience in development of packet-processing programs, and (4) new networking systems. The project contributed new ideas and methods to formal methods: for verification of graph-based models, for compilation to resource-constrained hardware, and new languages to ease development of correct programs. \n\n\nAutomated verification: The main challenge in automated verification of networks is to support a rich set of properties, such as reachability and fault tolerance under multiple environments, while scaling the methods to real-world networks. Building on top of a general logic-based model of network behavior that enables use of automated solvers, such as for Satisfiability Modulo Theories (SMT), the project developed several new methods to improve scalability. These include: abstractions based on symmetry, abstract interpretation over routing announcements, a hierarchy of nondeterministic route selection abstractions and novel SMT encodings, stack-based abstractions for handling multilayer networks, a theory of assume-guarantee reasoning over modular fragments in a network, methods for checking modular interfaces provided by a user, and efficient methods for fault tolerance analysis of control planes. In addition, the project includes design and development of a new framework called NV (publicly available) that provides a compact, flexible and general intermediate language for modeling routing protocol semantics, and supports multiple backends for fast simulation and verification. The results on practical benchmarks have demonstrated improved ability to handle complex policies in real-world network configurations (e.g., using fast simulation and abstract interpretation), and significant improvements in performance (by several orders of magnitude in SMT solve time using compositional methods) and scalability (verifying several tens of thousands of routers using abstractions) in synthetic data center benchmarks.\n\n\n   \n\n\nCompilation to programmable switches: The project developed several techniques for compiling high-level languages to programmable switch hardware. The Chipmunk compiler improved the performance of compiling complex P4 programs by leveraging program synthesis techniques. In the follow-up CaT compiler, synthesis performance was improved further by using problem decomposition, along with other solver-based techniques for resource transformation and resource allocation. These compilers were demonstrated successfully on several programs and achieved a minimum number of pipeline stages. A complementary technique provides language extensions (P4All) that allow programmers to express symbolic network programs and compiler technology to generate efficient implementations. Another technique supports declaration and synthesis of finite state machines that can represent common network programming tasks, e.g., checking properties of TCP connections, enforcing security, or collecting statistics.\n\n\nImproving user programming experience: The project developed a new high-level language and system called Lucid (publicly available) to improve user experience. Lucid includes static analysis techniques, formalized as new type systems, that constrain the legal programs and return easily-understood error messages that help programmers find their mistakes. It also provides support for distributed programming via event-based abstractions that make it easier for the user to develop new networking applications. An evaluation showed that Lucid programs have 5-10x fewer lines of code in comparison to P4.\n\n\nDesigning new networking systems: The project developed Contra, a system for performance-aware routing that can adapt to traffic changes at hardware speeds, and can be configured to operate seamlessly over any network topology and sophisticated routing policies. Users of Contra write network-wide policies that rank network paths based on their performance. Experiments showed that Contra scales to large networks, and that in terms of flow completion times, it is competitive with hand-crafted systems that have been customized for specific topologies and policies. The project also developed a new solution (based on integer linear programming) to address the joint IP/optical control planes and network design problem. Experiments showed cost savings of up to 29% compared to traditional network design techniques.\n\n\n          \n\n\nContributions to formal methods: This project developed new theories and tools for symmetry reduction, abstract interpretation, SMT encodings, and assume-guarantee reasoning for graph-based models that underlie networks. These models are significantly different from well-structured graphs that arise in program verification, leading to new ideas (e.g., temporal invariants) that can be potentially used in other systems with graph-based models. The project developed new synthesis and compilation techniques based on problem decomposition and novel formulations for SMT solvers. These can be potentially used in other domains where hardware resources are severely constrained. The project developed new domain-specific languages (NV, Lucid, P4All) that ease programming and development of correct programs.\n\n\nBroader Impacts: \n\n\nThis project supported the research of 10 PhD students, 1 postdoctoral scholar, and 10 undergraduate students (via REU supplements). It included collaboration with industry groups (Microsoft, AWS, AT&T) for targeting real-world benchmarks. The new methods and results were published in 18conference/journal papers, and the related frameworks and tools are publicly available (NV, Lucid, NAP, Shapeshifter, Kirigami, Timepiece). \n\n\n\t\t\t\t\tLast Modified: 01/23/2024\n\n\t\t\t\t\tSubmitted by: AartiGupta\n"
 }
}