{
 "awd_id": "1823074",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CRI: CI-NEW: Collaborative Research: Constructing a Community-Wide Software Architecture Infrastructure",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2018-09-01",
 "awd_exp_date": "2023-08-31",
 "tot_intn_awd_amt": 126429.0,
 "awd_amount": 134429.0,
 "awd_min_amd_letter_date": "2018-08-08",
 "awd_max_amd_letter_date": "2021-06-22",
 "awd_abstract_narration": "A software system's life cycle is dominated by maintenance costs and efforts. A software system's architecture is acknowledged as a key determinant of the system's properties and its successful maintenance and evolution over the lifetime of a system. However, in the area of architecture-centered software maintenance, empirical research and technology transfer from academia to practice have been impeded by disjoint environments, redundant efforts, high costs associated with developing robust tools, and the lack of shared research infrastructure and datasets. To address these challenges, this project develops the Software Architecture INstrument (SAIN), a first-of-its-kind integration framework for assembling architecture-related techniques and tools with the goal of enabling empirical research in the context of software maintenance. SAIN will deliver a tool suite comprising four principal components: (1) a catalogued library of cutting-edge tools for reverse engineering and analyzing software systems' architectures, which increases reusability and eliminates redundant tool development across the community; (2) a plug-and-play instrument for integrating the tools and techniques to promote interoperability of existing solutions and enable the creation of new solutions; (3) reproducibility wizards to set up experiment-templates, produce replication packages, and release them in easy-to-run and modify formats, which promotes wide accessibility and smooth usage of existing techniques by researchers and practitioners; and (4) a public repository of software-architecture datasets and benchmarks for supporting a broad range of software-architecture empirical studies.  \r\n\r\nSAIN aims to bridge the gap between academic research and practice in the software-architecture domain. On the one hand, SAIN will enable extensive empirical research by providing a large repository of architectural artifacts, including interoperable tools and benchmark datasets. As such, researchers will be able to compare and contrast different techniques using the same datasets to identify gaps and inaccuracies. This will enable new solutions for improving the state-of-the-art in software-architecture research. On the other hand, SAIN will provide practitioners with an authoritative source offering interoperable tools and feedback, as well as a channel to contribute cutting-edge architectural artifacts. In summary, SAIN has the potential to transform software architecture research and practice by (1) facilitating the discovery and adoption of cutting-edge techniques and tools that are best-suited to modern problems and (2) ensuring architecture's central role in a broad range of software-engineering activities. SAIN will be available for public use and will foster much more effective university-industry collaboration than is the case today.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Lu",
   "pi_last_name": "xiao",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Lu xiao",
   "pi_email_addr": "lu.xiao@stevens.edu",
   "nsf_id": "000738630",
   "pi_start_date": "2018-08-08",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Stevens Institute of Technology",
  "inst_street_address": "ONE CASTLE POINT ON HUDSON",
  "inst_street_address_2": "",
  "inst_city_name": "HOBOKEN",
  "inst_state_code": "NJ",
  "inst_state_name": "New Jersey",
  "inst_phone_num": "2012168762",
  "inst_zip_code": "070305906",
  "inst_country_name": "United States",
  "cong_dist_code": "08",
  "st_cong_dist_code": "NJ08",
  "org_lgl_bus_name": "THE TRUSTEES OF THE STEVENS INSTITUTE OF TECHNOLOGY",
  "org_prnt_uei_num": "",
  "org_uei_num": "JJ6CN5Y5A2R5"
 },
 "perf_inst": {
  "perf_inst_name": "Stevens Institute of Technology",
  "perf_str_addr": "1 Castle Point Terrace",
  "perf_city_name": "Hoboken",
  "perf_st_code": "NJ",
  "perf_st_name": "New Jersey",
  "perf_zip_code": "070305991",
  "perf_ctry_code": "US",
  "perf_cong_dist": "08",
  "perf_st_cong_dist": "NJ08",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "171400",
   "pgm_ele_name": "Special Projects - CNS"
  },
  {
   "pgm_ele_code": "287800",
   "pgm_ele_name": "Special Projects - CCF"
  },
  {
   "pgm_ele_code": "735900",
   "pgm_ele_name": "CCRI-CISE Cmnty Rsrch Infrstrc"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7359",
   "pgm_ref_txt": "COMPUTING RES INFRASTRUCTURE"
  },
  {
   "pgm_ref_code": "9102",
   "pgm_ref_txt": "WOMEN, MINORITY, DISABLED, NEC"
  },
  {
   "pgm_ref_code": "9178",
   "pgm_ref_txt": "UNDERGRADUATE EDUCATION"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0121",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 126429.0
  },
  {
   "fund_oblg_fiscal_yr": 2021,
   "fund_oblg_amt": 8000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span>The goal of this proposal is to develop the Software Architecture INstrument (SAIN), a first-of-its-kind integration framework for assembling architecture-related techniques and tools with the goal of enabling empirical research in the context of software maintenance.&nbsp;</span>The research team accomplished the following goals:</p>\n<ul>\n<li>Developed and tested the SAIN platform containing 5 tool suites with integration capabilities and data uploading functionality. It is accesible here:&nbsp;https://www.sain.info/#/aboutsain</li>\n<li>Conducted novel experiments that integrate SAIN's constituent components</li>\n<li>Disseminated SAIN results to the community through research publications, presentations, and related activities.</li>\n</ul>\n<p><strong><span style=\"text-decoration: underline;\">SAIN Platform:</span></strong></p>\n<p><span dir=\"ltr\">SAIN</span><span dir=\"ltr\"> </span><span dir=\"ltr\">is delivered as a web-</span><span dir=\"ltr\">based platform consisting of three principal components:</span><span dir=\"ltr\"> </span><span dir=\"ltr\">1</span><span dir=\"ltr\"> </span><span dir=\"ltr\">a&nbsp;</span><span dir=\"ltr\">catalogued library</span><span dir=\"ltr\"> </span><span dir=\"ltr\">of cutting-edge tools for reverse engineering&nbsp;</span><span dir=\"ltr\">and analyzing software systems' architectures; these tools&nbsp;</span><span dir=\"ltr\">are either provided by their original authors or reproduced&nbsp;</span><span dir=\"ltr\">from literature;</span><span dir=\"ltr\"> </span><span dir=\"ltr\">2</span><span dir=\"ltr\"> </span><span dir=\"ltr\">a</span><span dir=\"ltr\"> </span><span dir=\"ltr\">plug-and-play instrument</span><span dir=\"ltr\"> </span><span dir=\"ltr\">for integrating&nbsp;</span><span dir=\"ltr\">the tools and techniques to facilitate empirical studies of&nbsp;</span><span dir=\"ltr\">software architectures; and</span><span dir=\"ltr\"> </span><span dir=\"ltr\">3</span><span dir=\"ltr\"> </span><span dir=\"ltr\">reproducibility wizards</span><span dir=\"ltr\"> </span><span dir=\"ltr\">to set&nbsp;</span><span dir=\"ltr\">up experiment templates, produce replication packages, and&nbsp;</span><span dir=\"ltr\">release them in easy-to-run and modify formats. </span><span dir=\"ltr\"><span dir=\"ltr\">SAIN currently hosts four types of tools.<span dir=\"ltr\">&nbsp;They include:&nbsp;</span></span></span>13 architecture recovery components<span dir=\"ltr\">;</span>&nbsp;8 components for computing architectural metrics or analyses;&nbsp;2 fact extractors, which&nbsp;<span dir=\"ltr\">are used to obtain</span><span dir=\"ltr\"> </span><span dir=\"ltr\">raw facts</span><span dir=\"ltr\"> </span><span dir=\"ltr\">about a software&nbsp;</span><span dir=\"ltr\">system</span><span dir=\"ltr\">;</span>&nbsp;and 9 utility components <span dir=\"ltr\">that provide \"helper\" functionality</span><span dir=\"ltr\">.&nbsp;</span><span dir=\"ltr\">To enable novel and reproducible experiment templates in&nbsp;</span><span dir=\"ltr\">SAIN</span><span dir=\"ltr\">, we provided features for construction of workflows&nbsp;</span><span dir=\"ltr\">involving</span><span dir=\"ltr\"> </span><span dir=\"ltr\">SAIN</span><span dir=\"ltr\"> </span><span dir=\"ltr\">artifacts and datasets. </span><span dir=\"ltr\">For example, Figure 1 shows the workflow of the&nbsp;</span><span dir=\"ltr\">seven components from three tool suites Titan, Archie, and AR</span><span dir=\"ltr\">CADE</span><span dir=\"ltr\">.&nbsp;</span></p>\n<p><strong>Integration Experiment Results:</strong></p>\n<p>We conducted a case study to showcase how SAIN can support the integration of different architecture analysis techniques originally developed by different research teams to provide novel analysis. The&nbsp;<span dir=\"ltr\">study subject is an open-source project, Hadoop,&nbsp;</span><span dir=\"ltr\">which is actively and widely used and maintained.&nbsp;</span><span dir=\"ltr\">We first integrate design space analysis&nbsp;<span dir=\"ltr\">and architectural tactic analysis. To this&nbsp;</span><span dir=\"ltr\">end, we can achieve a multi-perspective view of</span><span dir=\"ltr\">&nbsp;architecture design structure, error-proneness, and&nbsp;</span><span dir=\"ltr\">tactic implementation in software systems.</span><span dir=\"ltr\">&nbsp;Next,&nbsp;<span dir=\"ltr\">we integrated&nbsp;</span><span dir=\"ltr\">ARCADE's architectural smell detection with</span><span dir=\"ltr\"> </span><span dir=\"ltr\">the results of the first step</span><span dir=\"ltr\">.&nbsp;</span><span dir=\"ltr\"><span dir=\"ltr\">Practitioners can&nbsp;</span><span dir=\"ltr\">gain valuable insights by viewing</span><span dir=\"ltr\">&nbsp;</span><span dir=\"ltr\">the&nbsp;</span><span dir=\"ltr\">architectural smells, error-proness, and tactic implementation in combination. See more detail here:&nbsp;&nbsp;</span></span></span></span>Joshua Garcia, Mehdi Mirakhorli.&nbsp;(2021).&nbsp;Constructing a Shared Infrastructure for Software Architecture Analysis and Maintenance.&nbsp;&nbsp;<em>2021 IEEE 18th International Conference on Software Architecture (ICSA)</em></p>\n<p><span style=\"text-decoration: underline;\"><strong>Other Studies (Partially) Supported by this Project:&nbsp;</strong></span></p>\n<ul>\n<li><span><span>Lu Xiao, Gengwu Zhao, Maximilian Vierlboeck, Roshanak Nilchiani, \"A Framework on Early Decoupling Level Metric Assessment based on NLP4RE\", 2023 Conference on Systems Engineering Research.</span></span></li>\n</ul>\n<p>In this study, we leverage the architecture analysis tools to provide early assessment of the modular structure of design concepts extracted from system requirements. Figure 3 illustrates a recursive and iterative circular process of this early assessment approach.</p>\n<ul>\n<li><span>Lu Xiao, Yuanfang Cai.&nbsp;(2021).&nbsp;Detecting the Locations and Predicting the Costs of Compound Architectural Debts.&nbsp;&nbsp;</span><em>IEEE transactions on software engineering.&nbsp;</em></li>\n</ul>\n<p>In this study, we leverage the Titan tool suite with extended capabilities to invesitgate how instances of architectural debts are connected at a higher level. Figure 4 illustrates an example of compound debt <span dir=\"ltr\">analogous to the&nbsp;</span><span dir=\"ltr\">well-known \"ripple effect\". </span></p>\n<ul>\n<li><em><span>Zhao, Yutong and Xiao, Lu and Bondi, Andre and Chen, Bihuan and Liu, Yang.&nbsp;(2022).&nbsp;A Large-Scale Empirical Study of Real-Life Performance Issues in Open Source Projects.&nbsp;&nbsp;</span><em>IEEE transactions on software engineering</em><br /></em></li>\n</ul>\n<ul>\n<li><em>Zhao, Yutong and Xiao, Lu and Wang, Xiao and Sun, Lei and Chen, Bihuan and Liu, Yang and Bondi, Andre.&nbsp;(2020).&nbsp;How Are Performance Issues Caused and Resolved?-An Empirical Study from a Design Perspective.&nbsp;&nbsp;<em>Proceedings of the ACM/SPEC International Conference on Performance Engineering</em>.</em></li>\n</ul>\n<p>In the above two studies, we use Titan tool suites hosted on SAIN, to analyze the design structure change associated with performance issue fixes. We summarized recurring patterns of design level optimization (illustrated in FIgure 5).</p>\n<ul>\n<li><em><em><span>Zhao, Yutong and Xiao, Lu and Wang, Xiao and Chen, Zhifei and Chen, Bihuan and Liu, Yang.&nbsp;(2020).&nbsp;Butterfly Space: An Architectural Approach for Investigating Performance Issues.&nbsp;&nbsp;</span><em>2020 IEEE International Conference on Software Architecture (ICSA)</em><br /></em></em></li>\n</ul>\n<p>In this study, we built upon the Titan tool suite to provide more fine-grained analysis of how performance issues are architecturally connected to each other.</p>\n<ul>\n<li><em><em><em><span>Xiao, Lu and Pennock, Michael and Cardoso, Joana and Wang, Xiao.&nbsp;(2020).&nbsp;A Case Study on Modularity Violations in Cyber Physical Systems.&nbsp;&nbsp;</span><em>Systems engineering</em><span>.</span><br /></em></em></em></li>\n</ul>\n<p>In this study, we leverage Titan tool suite and Decoupling Metric to analyze how software and hardware modules co-eveolve in cyber-physical systems.</p>\n<ul>\n<li><em><em><em><span><span>Wang, Xiao and Xiao, Lu and Huang, Kaifeng and Chen, Bihuan and Zhao, Yutong and Liu, Yang.&nbsp;(2020).&nbsp;DesignDiff: Continuously Modeling Software Design Difference from Code Revisions.&nbsp;&nbsp;</span><em>2020 IEEE International Conference on Software Architecture (ICSA)</em></span></em></em></em></li>\n</ul>\n<p>In the above study, we constructed a modeling approach to analyze the design structure change (represented as a DSM) of each code commit. Figure 6 shows how the design structure change is visualized through operators.</p>\n<p>&nbsp;</p>\n<ul>\n</ul><br>\n<p>\n\t\t\t\t      \tLast Modified: 10/25/2023<br>\n\t\t\t\t\tModified by: Lu&nbsp;Xiao</p>\n</div>\n<div class=\"porSideCol\">\n<div class=\"each-gallery\">\n<div class=\"galContent\" id=\"gallery0\">\n<div class=\"photoCount\" id=\"photoCount0\">\n\t\t\t\t\t\t\t\t\tImages (<span id=\"selectedPhoto0\">1</span> of <span class=\"totalNumber\"></span>)\t\t\n\t\t\t\t\t\t\t\t</div>\n<div class=\"galControls\" id=\"controls0\"></div>\n<div class=\"galSlideshow\" id=\"slideshow0\"></div>\n<div class=\"galEmbox\" id=\"embox\">\n<div class=\"image-title\"></div>\n</div>\n</div>\n<div class=\"galNavigation\" id=\"navigation0\">\n<ul class=\"thumbs\" id=\"thumbs0\">\n<li>\n<a href=\"/por/images/Reports/POR/2023/1823074/1823074_10567960_1698179528635_sain-integration--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2023/1823074/1823074_10567960_1698179528635_sain-integration--rgov-800width.jpg\" title=\"Figure 1: SAIN Integration Workflow Example\"><img src=\"/por/images/Reports/POR/2023/1823074/1823074_10567960_1698179528635_sain-integration--rgov-66x44.jpg\" alt=\"Figure 1: SAIN Integration Workflow Example\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Figure 1: An experiment integrating three tools to study error-prone modules, architectural tactics, and architectural smells. The left pane has components that can be drag-and-dropped onto the canvas in the middle, where they can be integrated.</div>\n<div class=\"imageCredit\">Constructing a Shared Infrastructure for Software Architecture Analysis and Maintenance</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Lu&nbsp;Xiao</div>\n<div class=\"imageTitle\">Figure 1: SAIN Integration Workflow Example</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2023/1823074/1823074_10567960_1698244657760_tactic-root--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2023/1823074/1823074_10567960_1698244657760_tactic-root--rgov-800width.jpg\" title=\"Figure 2: Tactic Design Space with Smells and History Coupling\"><img src=\"/por/images/Reports/POR/2023/1823074/1823074_10567960_1698244657760_tactic-root--rgov-66x44.jpg\" alt=\"Figure 2: Tactic Design Space with Smells and History Coupling\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Figure 2: Tactic-ArchRoot-1 led by UserGroupInformation with Smells. Numbers along the diagonal refer to the ID of each file.</div>\n<div class=\"imageCredit\">Constructing a Shared Infrastructure for Software Architecture Analysis and Maintenance</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Lu&nbsp;Xiao</div>\n<div class=\"imageTitle\">Figure 2: Tactic Design Space with Smells and History Coupling</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2023/1823074/1823074_10567960_1698247693585_cser-23--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2023/1823074/1823074_10567960_1698247693585_cser-23--rgov-800width.jpg\" title=\"Figure 3: Recursive and Iterative Circular Process\"><img src=\"/por/images/Reports/POR/2023/1823074/1823074_10567960_1698247693585_cser-23--rgov-66x44.jpg\" alt=\"Figure 3: Recursive and Iterative Circular Process\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">A Framework on Early Decoupling Level Metric Assessment based on NLP4RE</div>\n<div class=\"imageCredit\">2023 Conference on Systems Engineering Research</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Lu&nbsp;Xiao</div>\n<div class=\"imageTitle\">Figure 3: Recursive and Iterative Circular Process</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2023/1823074/1823074_10567960_1698247959637_compound--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2023/1823074/1823074_10567960_1698247959637_compound--rgov-800width.jpg\" title=\"Figure 4: Compound Architectural Debt Example with Overlapping Files\"><img src=\"/por/images/Reports/POR/2023/1823074/1823074_10567960_1698247959637_compound--rgov-66x44.jpg\" alt=\"Figure 4: Compound Architectural Debt Example with Overlapping Files\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">A compound architectural debt with change propagation, through multiple debts, is analogous to thewell-known \ufffdripple effect\ufffd.</div>\n<div class=\"imageCredit\">Detecting the Locations and Predicting the Maintenance Costs of Compound Architectural Debts</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Lu&nbsp;Xiao</div>\n<div class=\"imageTitle\">Figure 4: Compound Architectural Debt Example with Overlapping Files</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2023/1823074/1823074_10567960_1698248223448_perf-desgin--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2023/1823074/1823074_10567960_1698248223448_perf-desgin--rgov-800width.jpg\" title=\"Figure 5: Design Level Performance Optimization\"><img src=\"/por/images/Reports/POR/2023/1823074/1823074_10567960_1698248223448_perf-desgin--rgov-66x44.jpg\" alt=\"Figure 5: Design Level Performance Optimization\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Figure 5: Four Recurring Patterns of Design Level Performance Optimization</div>\n<div class=\"imageCredit\">A Large-Scale Empirical Study of Real-Life Performance Issues in Open Source Projects</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Lu&nbsp;Xiao</div>\n<div class=\"imageTitle\">Figure 5: Design Level Performance Optimization</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2023/1823074/1823074_10567960_1698248371933_diff--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2023/1823074/1823074_10567960_1698248371933_diff--rgov-800width.jpg\" title=\"Figure 6: Design Diff Operator View\"><img src=\"/por/images/Reports/POR/2023/1823074/1823074_10567960_1698248371933_diff--rgov-66x44.jpg\" alt=\"Figure 6: Design Diff Operator View\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Figure 6: Design Diff Operator View for Showing the Design Difference of Factory Method Pattern Implementation</div>\n<div class=\"imageCredit\">DESIGNDIFF: Continuously Modeling Software Design Difference from Code Revisions</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Lu&nbsp;Xiao</div>\n<div class=\"imageTitle\">Figure 6: Design Diff Operator View</div>\n</div>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>",
  "por_txt_cntn": "\nThe goal of this proposal is to develop the Software Architecture INstrument (SAIN), a first-of-its-kind integration framework for assembling architecture-related techniques and tools with the goal of enabling empirical research in the context of software maintenance. The research team accomplished the following goals:\n\nDeveloped and tested the SAIN platform containing 5 tool suites with integration capabilities and data uploading functionality. It is accesible here: https://www.sain.info/#/aboutsain\nConducted novel experiments that integrate SAIN's constituent components\nDisseminated SAIN results to the community through research publications, presentations, and related activities.\n\n\nSAIN Platform:\n\nSAIN is delivered as a web-based platform consisting of three principal components: 1 a catalogued library of cutting-edge tools for reverse engineering and analyzing software systems' architectures; these tools are either provided by their original authors or reproduced from literature; 2 a plug-and-play instrument for integrating the tools and techniques to facilitate empirical studies of software architectures; and 3 reproducibility wizards to set up experiment templates, produce replication packages, and release them in easy-to-run and modify formats. SAIN currently hosts four types of tools. They include: 13 architecture recovery components; 8 components for computing architectural metrics or analyses; 2 fact extractors, which are used to obtain raw facts about a software system; and 9 utility components that provide \"helper\" functionality. To enable novel and reproducible experiment templates in SAIN, we provided features for construction of workflows involving SAIN artifacts and datasets. For example, Figure 1 shows the workflow of the seven components from three tool suites Titan, Archie, and ARCADE. \n\nIntegration Experiment Results:\n\nWe conducted a case study to showcase how SAIN can support the integration of different architecture analysis techniques originally developed by different research teams to provide novel analysis. The study subject is an open-source project, Hadoop, which is actively and widely used and maintained. We first integrate design space analysis and architectural tactic analysis. To this end, we can achieve a multi-perspective view of architecture design structure, error-proneness, and tactic implementation in software systems. Next, we integrated ARCADE's architectural smell detection with the results of the first step. Practitioners can gain valuable insights by viewing the architectural smells, error-proness, and tactic implementation in combination. See more detail here:  Joshua Garcia, Mehdi Mirakhorli. (2021). Constructing a Shared Infrastructure for Software Architecture Analysis and Maintenance.  2021 IEEE 18th International Conference on Software Architecture (ICSA)\n\nOther Studies (Partially) Supported by this Project: \n\nLu Xiao, Gengwu Zhao, Maximilian Vierlboeck, Roshanak Nilchiani, \"A Framework on Early Decoupling Level Metric Assessment based on NLP4RE\", 2023 Conference on Systems Engineering Research.\n\n\nIn this study, we leverage the architecture analysis tools to provide early assessment of the modular structure of design concepts extracted from system requirements. Figure 3 illustrates a recursive and iterative circular process of this early assessment approach.\n\nLu Xiao, Yuanfang Cai. (2021). Detecting the Locations and Predicting the Costs of Compound Architectural Debts.  IEEE transactions on software engineering. \n\n\nIn this study, we leverage the Titan tool suite with extended capabilities to invesitgate how instances of architectural debts are connected at a higher level. Figure 4 illustrates an example of compound debt analogous to the well-known \"ripple effect\". \n\nZhao, Yutong and Xiao, Lu and Bondi, Andre and Chen, Bihuan and Liu, Yang. (2022). A Large-Scale Empirical Study of Real-Life Performance Issues in Open Source Projects.  IEEE transactions on software engineering\n\n\n\nZhao, Yutong and Xiao, Lu and Wang, Xiao and Sun, Lei and Chen, Bihuan and Liu, Yang and Bondi, Andre. (2020). How Are Performance Issues Caused and Resolved?-An Empirical Study from a Design Perspective.  Proceedings of the ACM/SPEC International Conference on Performance Engineering.\n\n\nIn the above two studies, we use Titan tool suites hosted on SAIN, to analyze the design structure change associated with performance issue fixes. We summarized recurring patterns of design level optimization (illustrated in FIgure 5).\n\nZhao, Yutong and Xiao, Lu and Wang, Xiao and Chen, Zhifei and Chen, Bihuan and Liu, Yang. (2020). Butterfly Space: An Architectural Approach for Investigating Performance Issues.  2020 IEEE International Conference on Software Architecture (ICSA)\n\n\n\nIn this study, we built upon the Titan tool suite to provide more fine-grained analysis of how performance issues are architecturally connected to each other.\n\nXiao, Lu and Pennock, Michael and Cardoso, Joana and Wang, Xiao. (2020). A Case Study on Modularity Violations in Cyber Physical Systems.  Systems engineering.\n\n\n\nIn this study, we leverage Titan tool suite and Decoupling Metric to analyze how software and hardware modules co-eveolve in cyber-physical systems.\n\nWang, Xiao and Xiao, Lu and Huang, Kaifeng and Chen, Bihuan and Zhao, Yutong and Liu, Yang. (2020). DesignDiff: Continuously Modeling Software Design Difference from Code Revisions.  2020 IEEE International Conference on Software Architecture (ICSA)\n\n\nIn the above study, we constructed a modeling approach to analyze the design structure change (represented as a DSM) of each code commit. Figure 6 shows how the design structure change is visualized through operators.\n\n \n\n\n\n\t\t\t\t\tLast Modified: 10/25/2023\n\n\t\t\t\t\tSubmitted by: Lu Xiao"
 }
}