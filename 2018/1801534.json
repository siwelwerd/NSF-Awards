{
 "awd_id": "1801534",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SaTC: CORE: Medium: Collaborative: Threat-Aware Defense: Evaluating Threats for Continuous Improvement",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2018-08-15",
 "awd_exp_date": "2024-07-31",
 "tot_intn_awd_amt": 800000.0,
 "awd_amount": 800000.0,
 "awd_min_amd_letter_date": "2018-08-08",
 "awd_max_amd_letter_date": "2018-08-08",
 "awd_abstract_narration": "Adversaries are outpacing developers in the race to find program vulnerabilities. Where programmers have to find all potential software flaws in their programs and determine whether they are exploitable across all deployments to prevent vulnerabilities, adversaries need only find one software flaw that enables them to achieve their goals in any one deployment. Current techniques to rid programs of vulnerabilities cannot find all such flaws due to the complexity of modern software and their deployments. Rather than proving the absence of flaws, recent vulnerability detection research is exploring more powerful techniques to automate exploit generation. However, such exploit generation often lacks a systematic model of modern and emerging defenses, which may be useful in assessing the utility of defenses. In addition, once an exploit is generated, defenses to prevent that exploit must be added manually to the program.  As a result, vulnerability detection does not yet pay enough attention to defenses to assess their effectiveness nor generate additional defenses when necessary.\r\n\r\nThis project proposes a theory and techniques to improve defenses continuously and iteratively to counter threats that cause vulnerabilities. A method is developed that searches programs for security policy violations and extends existing defenses to prevent detected violations automatically.  The main insight is to link the threats and defenses of each program into one coherent model, called the Program Threat Graph (PTG), to evaluate proactively whether threats enable adversaries to violate program security policies given current defenses and automate the improvement of defenses to prevent such violations.  The project explores how to find security violations given a program's internal and environmental defenses.  Security violations are used to generate both targeted defenses and/or systematic defenses to block this exploit efficiently and block potentially unknown exploits that may leverage other flaws under given performance constraints. The goal of this research is to continuously improve defenses against vulnerabilities. The approach discovers security violations given a specification for both current and upcoming defenses, tightening them automatically and recovering from attempted attacks without disrupting program functionality. All tools, benchmarks, and analyses developed during this project are released as open-source. For outreach, the focus is on capture-the-flag competitions and summer software security courses.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Trent",
   "pi_last_name": "Jaeger",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Trent Jaeger",
   "pi_email_addr": "trentj@ucr.edu",
   "nsf_id": "000465544",
   "pi_start_date": "2018-08-08",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Gang",
   "pi_last_name": "Tan",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Gang Tan",
   "pi_email_addr": "gtan@psu.edu",
   "nsf_id": "000193259",
   "pi_start_date": "2018-08-08",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Pennsylvania State Univ University Park",
  "inst_street_address": "201 OLD MAIN",
  "inst_street_address_2": "",
  "inst_city_name": "UNIVERSITY PARK",
  "inst_state_code": "PA",
  "inst_state_name": "Pennsylvania",
  "inst_phone_num": "8148651372",
  "inst_zip_code": "168021503",
  "inst_country_name": "United States",
  "cong_dist_code": "15",
  "st_cong_dist_code": "PA15",
  "org_lgl_bus_name": "THE PENNSYLVANIA STATE UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "NPM2J7MSCF61"
 },
 "perf_inst": {
  "perf_inst_name": "Pennsylvania State Univ University Park",
  "perf_str_addr": "W359 Westgate Building",
  "perf_city_name": "University Park",
  "perf_st_code": "PA",
  "perf_st_name": "Pennsylvania",
  "perf_zip_code": "168027000",
  "perf_ctry_code": "US",
  "perf_cong_dist": null,
  "perf_st_cong_dist": "PA",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 800000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>In this project, we developed methods that produced graph models of programs to assess possible threats to harden programs and apply defenses more effectively. &nbsp;We developed novel methods to identify objects whose memory accesses must all satisfy memory safety to elide unnecessary checks, apply inexpensive defenses to protect these objects, and prevent errors made in the application of prior defenses (i.e., when they are applied to objects that cannot be validated as safe). &nbsp;We explored applying these methods using ARM Morello (CHERI) hardware to reduce runtime checks. &nbsp;We also developed the techniques to automate the key tasks in privilege separation within the kernel that minimize the amount of shared data between the kernel and untrusted domains. &nbsp;Finally, we developed novel, domain-aware fuzzing methods to detect flaws more efficiently.We have developed several open-source systems, and applied these techniques to production software (Samsung) and held discussions with Microsoft. &nbsp;Many of our results have been published in top conferences in computer security and related domains. &nbsp;We detail these individual outcomes below.</p>\n<p><br />First, we developed comprehensive memory safety validation methods for C/C++ programs. &nbsp;Researchers often create strong defenses with the aim of applying those defenses to the entire program (i.e., complete coverage). &nbsp;However, one-dimensional defenses often have overheads that are too high for adoption, so all data objects in C/C++ programs remain prone to attack today. &nbsp;We have devised an alternative approach that aims to identify the objects whose accesses from all aliases must satisfy all classes of memory safety (i.e., comprehensive memory safety). &nbsp;We have developed memory safety validation for the stack (DataGuard, NDSS 2022) and the heap (Uriah, ACM CCS 2024) and shown that a large fraction of objects can be protected for low cost (IEEE SecDev 2023) and that there are significant benefits to using memory safety validation for security (IEEE S&amp;P Special Issue on Memory Safety). &nbsp;We have applied these techniques to production software at Samsung and are discussing this approach with researchers and engineers at Microsoft, although no concrete plans have developed yet.</p>\n<p><br />Second, we developed program analyses to automate key challenges in privilege separation. &nbsp;After developing the first analysis to reason about pointers accurately in privilege separation (PtrSplit, prior to the project), we developed methods to enable privilege separation that enable programmers to balance performance and security in determining isolation boundaries (ProgramMandering, ACM CCS 2019) and minimize shared data between protection domains (KSplit, OSDI 2022). &nbsp;We are actively working on a \"systemization of knowledge\" paper about characterizing the threats to the kernel from using data from an untrusted domain and have initialized efforts to develop fuzz testing methods to triage such threats.</p>\n<p>Third, we have explored customizing fuzzing to certain niches. Our key observation is that customization can greatly improve performance and make fuzzing a viable bug finding technique in areas that are otherwise already well explored. We especially explored grammar-guided fuzzing (ISSTA 2021), directed fuzzing (ACSAC 2022), and, in particular, leveraging fuzzing to explore complex Java programs not to find bugs but to find deserialization violations (FSE 2023).</p>\n<p>The key outcomes of this project include the novel techniques (described above), new open-source systems, tools for improving memory safety and applying privilege separation, and student theses. &nbsp;The methods for memory safety validation, privilege separation, and fuzz testing have been (or will be very shortly) open sourced. &nbsp;We are exploring using memory safety validation to check memory isolation for the Linux eBPF framework, where many vulnerabilities have been reported. &nbsp;This project has contributed to four Ph.D theses (three in progress, but two will be completed soon). &nbsp;The materials developed in this project will be applied in future Computer Security courses, particularly for the Software Security undergraduate course.</p><br>\n<p>\n Last Modified: 09/30/2024<br>\nModified by: Trent&nbsp;Jaeger</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nIn this project, we developed methods that produced graph models of programs to assess possible threats to harden programs and apply defenses more effectively. We developed novel methods to identify objects whose memory accesses must all satisfy memory safety to elide unnecessary checks, apply inexpensive defenses to protect these objects, and prevent errors made in the application of prior defenses (i.e., when they are applied to objects that cannot be validated as safe). We explored applying these methods using ARM Morello (CHERI) hardware to reduce runtime checks. We also developed the techniques to automate the key tasks in privilege separation within the kernel that minimize the amount of shared data between the kernel and untrusted domains. Finally, we developed novel, domain-aware fuzzing methods to detect flaws more efficiently.We have developed several open-source systems, and applied these techniques to production software (Samsung) and held discussions with Microsoft. Many of our results have been published in top conferences in computer security and related domains. We detail these individual outcomes below.\n\n\n\nFirst, we developed comprehensive memory safety validation methods for C/C++ programs. Researchers often create strong defenses with the aim of applying those defenses to the entire program (i.e., complete coverage). However, one-dimensional defenses often have overheads that are too high for adoption, so all data objects in C/C++ programs remain prone to attack today. We have devised an alternative approach that aims to identify the objects whose accesses from all aliases must satisfy all classes of memory safety (i.e., comprehensive memory safety). We have developed memory safety validation for the stack (DataGuard, NDSS 2022) and the heap (Uriah, ACM CCS 2024) and shown that a large fraction of objects can be protected for low cost (IEEE SecDev 2023) and that there are significant benefits to using memory safety validation for security (IEEE S&P Special Issue on Memory Safety). We have applied these techniques to production software at Samsung and are discussing this approach with researchers and engineers at Microsoft, although no concrete plans have developed yet.\n\n\n\nSecond, we developed program analyses to automate key challenges in privilege separation. After developing the first analysis to reason about pointers accurately in privilege separation (PtrSplit, prior to the project), we developed methods to enable privilege separation that enable programmers to balance performance and security in determining isolation boundaries (ProgramMandering, ACM CCS 2019) and minimize shared data between protection domains (KSplit, OSDI 2022). We are actively working on a \"systemization of knowledge\" paper about characterizing the threats to the kernel from using data from an untrusted domain and have initialized efforts to develop fuzz testing methods to triage such threats.\n\n\nThird, we have explored customizing fuzzing to certain niches. Our key observation is that customization can greatly improve performance and make fuzzing a viable bug finding technique in areas that are otherwise already well explored. We especially explored grammar-guided fuzzing (ISSTA 2021), directed fuzzing (ACSAC 2022), and, in particular, leveraging fuzzing to explore complex Java programs not to find bugs but to find deserialization violations (FSE 2023).\n\n\nThe key outcomes of this project include the novel techniques (described above), new open-source systems, tools for improving memory safety and applying privilege separation, and student theses. The methods for memory safety validation, privilege separation, and fuzz testing have been (or will be very shortly) open sourced. We are exploring using memory safety validation to check memory isolation for the Linux eBPF framework, where many vulnerabilities have been reported. This project has contributed to four Ph.D theses (three in progress, but two will be completed soon). The materials developed in this project will be applied in future Computer Security courses, particularly for the Software Security undergraduate course.\t\t\t\t\tLast Modified: 09/30/2024\n\n\t\t\t\t\tSubmitted by: TrentJaeger\n"
 }
}