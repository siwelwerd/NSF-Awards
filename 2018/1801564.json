{
 "awd_id": "1801564",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "SaTC: CORE: Medium: Towards Mechanized Proofs of Composable Security Properties",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2018-08-15",
 "awd_exp_date": "2024-07-31",
 "tot_intn_awd_amt": 1199484.0,
 "awd_amount": 1199484.0,
 "awd_min_amd_letter_date": "2018-08-03",
 "awd_max_amd_letter_date": "2021-07-13",
 "awd_abstract_narration": "Securing computing systems is a formidable task that becomes harder as systems become more complex, widespread and intertwined with our daily lives. This is especially true for protection mechanisms that use cryptographic schemes and protocols. This interdisciplinary project strives to combine two complementary approaches to analyzing the security of complex protocols. The first is modularity: The ability to deduce the security of a complex system from the security of its simpler components. The second is mechanization: the use of computer tools in which mathematical proofs are formalized on the computer, eliminating the errors that may lurk in paper-and-pencil proofs. More broadly, the project is working to foster deeper connections between the cryptography community and the programming languages and formal methods community. In particular, it is training graduate students from both sides of this divide in the methodologies of the other side.\r\n\r\nSpecifically, the project is combining the universally composable (UC) security framework with the EasyCrypt cryptographic proof assistant, so as to obtain a proof assistant and related tools and methodologies enabling security proofs that are rigorous and cryptographically sound, as well as mechanized and modular. In order to find common ground between the UC framework, which was not designed for automation, and the EasyCrypt mechanized proof assistant, the project brings together an interdisciplinary team with expertise in theoretical cryptography, programming languages, and the design and implementation of proof assistants. The project is bridging the gap between the coroutine-based execution model of the UC framework and the traditional procedural execution model of EasyCrypt, developing a domain-specific extension of the EasyCrypt programming language for representing UC protocols and security specifications, and implementing the UC composition operation and theorem within EasyCrypt. The project is progressing through a series of stages, first developing an EasyCrypt architecture supporting UC, and testing this architecture by hand via simple case studies, and then gradually moving toward greater ease of protocol expression and proof automation. The tools and methodologies developed during the project are being evaluated via a series of increasingly complex case studies, working up to real-world systems that combine algorithmic and systems security, such as the Signal messaging system, the OpenStack cloud management framework, and secure multi-party computation systems. Outreach events such as hackathons and tutorials are being used to increase the impact of the developed technology to students and the research community.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Alley",
   "pi_last_name": "Stoughton",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Alley Stoughton",
   "pi_email_addr": "stough@bu.edu",
   "nsf_id": "000759077",
   "pi_start_date": "2018-08-03",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Assaf",
   "pi_last_name": "Kfoury",
   "pi_mid_init": "J",
   "pi_sufx_name": "",
   "pi_full_name": "Assaf J Kfoury",
   "pi_email_addr": "kfoury@bu.edu",
   "nsf_id": "000106770",
   "pi_start_date": "2018-08-03",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Ran",
   "pi_last_name": "Canetti",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Ran Canetti",
   "pi_email_addr": "canetti@bu.edu",
   "nsf_id": "000611117",
   "pi_start_date": "2018-08-03",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Mayank",
   "pi_last_name": "Varia",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Mayank Varia",
   "pi_email_addr": "varia@bu.edu",
   "nsf_id": "000703604",
   "pi_start_date": "2018-08-03",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Trustees of Boston University",
  "inst_street_address": "1 SILBER WAY",
  "inst_street_address_2": "",
  "inst_city_name": "BOSTON",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "6173534365",
  "inst_zip_code": "022151703",
  "inst_country_name": "United States",
  "cong_dist_code": "07",
  "st_cong_dist_code": "MA07",
  "org_lgl_bus_name": "TRUSTEES OF BOSTON UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "THL6A6JLE1S7"
 },
 "perf_inst": {
  "perf_inst_name": "Trustees of Boston University",
  "perf_str_addr": "111 Cummington Mall",
  "perf_city_name": "Boston",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "022151300",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "MA07",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  },
  {
   "pgm_ref_code": "9102",
   "pgm_ref_txt": "WOMEN, MINORITY, DISABLED, NEC"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0121",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 270485.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 301143.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 309581.0
  },
  {
   "fund_oblg_fiscal_yr": 2021,
   "fund_oblg_amt": 318275.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-8031406f-7fff-e795-4c65-f79838d5adce\"> </span></p>\n<p dir=\"ltr\"><span>Securing computing systems is a formidable task that becomes harder as systems become more complex, widespread and intertwined with our daily lives. This is especially true for protection mechanisms that use cryptographic schemes and protocols. This interdisciplinary project combined two complementary approaches to analyzing the security of complex protocols. The first is modularity: the ability to deduce the security of a complex system from the security of its simpler components. The second is mechanization: the use of computer tools in which mathematical proofs are formalized on the computer, eliminating the errors that may lurk in paper-and-pencil proofs. Specifically, the project combined the universally composable (UC) security framework with the EasyCrypt cryptographic proof assistant, obtaining tools and methodologies (EasyUC) enabling security proofs that are rigorous and cryptographically sound, as well as mechanized and modular.</span></p>\n<p dir=\"ltr\"><span>The project first developed a proof-of-concept EasyCrypt formalization and proof of security of a two-party protocol for securely communicating a message using encryption via a one-time pad agreed using Diffie-Hellman key exchange. This work included the proof and application of an instance of the UC composition theorem. The lessons learned from this case study drove much of the rest of the project. Expressing UC designs directly in EasyCrypt's procedural (and so stack-based) module language was tedious and error prone, and so the project responded by developing a message passing-based domain specific language (DSL) for expressing UC designs (the UC DSL) -- a formalism that cryptographers find natural. The project's robust and open source implementation of the DSL employs type-checking in order to catch many errors and an interpreter/debugger lets one experiment with designs, ensuring they work as expected. A translator into EasyCrypt's procedure-based module language has also been completed, and the EasyCrypt proof infrastructure needed to carry out security proofs is partly finished. In particular, a general proof of the EasyUC version of the UC composition theorem is now underway, generalizing from the specialized proof of the project's initial case study. (See </span><a href=\"https://github.com/easyuc/EasyUC\"><span>https://github.com/easyuc/EasyUC</span></a><span> for the current state of this work.) The project's DSL is already being used in a Government-supported research project on the security of </span><span>Unified Extensible Firmware Interface</span><span> (UEFI) and related protocols.</span></p>\n<p dir=\"ltr\"><span>The project also resulted in significant contributions to the theoretical foundations of UC as well as paper-and-pencil applications of this theory. The 20 research papers published over the course of the grant include several advances in both the modeling and application of UC security. On the modeling side, project outcomes include a revised and extended journal version of the UC framework, and a simplification of UC with global setup so it can be captured within the plain UC model. On the application side, the project team used UC to analyze the security of the Signal messaging system, a new secure multiparty computation protocol, and a private account recovery protocol.</span></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p><br>\n<p>\n Last Modified: 11/19/2024<br>\nModified by: Alley&nbsp;Stoughton</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\n \n\n\nSecuring computing systems is a formidable task that becomes harder as systems become more complex, widespread and intertwined with our daily lives. This is especially true for protection mechanisms that use cryptographic schemes and protocols. This interdisciplinary project combined two complementary approaches to analyzing the security of complex protocols. The first is modularity: the ability to deduce the security of a complex system from the security of its simpler components. The second is mechanization: the use of computer tools in which mathematical proofs are formalized on the computer, eliminating the errors that may lurk in paper-and-pencil proofs. Specifically, the project combined the universally composable (UC) security framework with the EasyCrypt cryptographic proof assistant, obtaining tools and methodologies (EasyUC) enabling security proofs that are rigorous and cryptographically sound, as well as mechanized and modular.\n\n\nThe project first developed a proof-of-concept EasyCrypt formalization and proof of security of a two-party protocol for securely communicating a message using encryption via a one-time pad agreed using Diffie-Hellman key exchange. This work included the proof and application of an instance of the UC composition theorem. The lessons learned from this case study drove much of the rest of the project. Expressing UC designs directly in EasyCrypt's procedural (and so stack-based) module language was tedious and error prone, and so the project responded by developing a message passing-based domain specific language (DSL) for expressing UC designs (the UC DSL) -- a formalism that cryptographers find natural. The project's robust and open source implementation of the DSL employs type-checking in order to catch many errors and an interpreter/debugger lets one experiment with designs, ensuring they work as expected. A translator into EasyCrypt's procedure-based module language has also been completed, and the EasyCrypt proof infrastructure needed to carry out security proofs is partly finished. In particular, a general proof of the EasyUC version of the UC composition theorem is now underway, generalizing from the specialized proof of the project's initial case study. (See https://github.com/easyuc/EasyUC for the current state of this work.) The project's DSL is already being used in a Government-supported research project on the security of Unified Extensible Firmware Interface (UEFI) and related protocols.\n\n\nThe project also resulted in significant contributions to the theoretical foundations of UC as well as paper-and-pencil applications of this theory. The 20 research papers published over the course of the grant include several advances in both the modeling and application of UC security. On the modeling side, project outcomes include a revised and extended journal version of the UC framework, and a simplification of UC with global setup so it can be captured within the plain UC model. On the application side, the project team used UC to analyze the security of the Signal messaging system, a new secure multiparty computation protocol, and a private account recovery protocol.\n\n\n\n\n\n\t\t\t\t\tLast Modified: 11/19/2024\n\n\t\t\t\t\tSubmitted by: AlleyStoughton\n"
 }
}