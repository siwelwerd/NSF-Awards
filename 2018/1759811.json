{
 "awd_id": "1759811",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "Collaborative Research: ABI Development: Improving the stability, usability, and speed of the RevBayes platform for phylogenetic analysis",
 "cfda_num": "47.074",
 "org_code": "08080000",
 "po_phone": "7032927163",
 "po_email": "rsbeaman@nsf.gov",
 "po_sign_block_name": "Reed Beaman",
 "awd_eff_date": "2018-07-01",
 "awd_exp_date": "2022-06-30",
 "tot_intn_awd_amt": 546766.0,
 "awd_amount": 546766.0,
 "awd_min_amd_letter_date": "2018-04-12",
 "awd_max_amd_letter_date": "2018-04-12",
 "awd_abstract_narration": "All species are related to one another through an unknown genealogical tree: the `Tree of Life.' Genealogical trees for small parts of the Tree of Life are called `phylogenies' by biologists; there is more interest in phylogenies today than at any time in the past. Phylogenies are crucial in fields such as epidemiology where they are used to track the spread of infectious disease and molecular biology where they are used to understand how molecular pathways developed. The `Tree of Life' can be discovered by comparing the characteristics of different organisms. Traditionally, phylogenies were reconstructed by comparing anatomical traits across different species. More recently, DNA sequence information from individual genes, or even full genomes, are compared to estimate phylogenies. This project will continue the development of the RevBayes computer program that biologists use to reconstruct phylogenies. The program takes as input the comparative information from the organisms of interest. The output of the program is the probabilities of the best phylogenies that explain the comparative data. Specifically, the project will improve the speed, usability, and reliability of the program.\r\n\r\nRevBayes is the successor of the MrBayes program which is widely used by biologists to estimate phylogeny. However, the RevBayes program represents a significant departure from MrBayes. The RevBayes program implements an R-like language to describe statistical models. The model is represented in computer memory as a graph in which the vertices of the graph are the parameters and the edges represent the dependencies between parameters. RevBayes uses Markov chain Monte Carlo to approximate the posterior probability distribution of parameters. This project will improve the RevBayes program in several signficant ways: (1) unit and integration testing will be implemented to improve the reliability of the program; (2) computational resources, such as multiple cores or GPUs, will be taken better advantage of, to improve the speed of the program; (3) a cross-platform graphical user interface will be developed to improve the usability of the program; (4) output will be bundled to improve the reproducibility of the program; and (5) the program will be made to work with other software programs, to improve its interoperability. Finally, several workshops will be hosted by the participants in which phylogenetic theory will be described with emphasis of application of the theory to real-world problems using RevBayes. The source code can be found on the Github site at http://revbayes.github.io/about.html\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "BIO",
 "org_dir_long_name": "Directorate for Biological Sciences",
 "div_abbr": "DBI",
 "org_div_long_name": "Division of Biological Infrastructure",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "John",
   "pi_last_name": "Huelsenbeck",
   "pi_mid_init": "P",
   "pi_sufx_name": "",
   "pi_full_name": "John P Huelsenbeck",
   "pi_email_addr": "johnh@berkeley.edu",
   "nsf_id": "000445458",
   "pi_start_date": "2018-04-12",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of California-Berkeley",
  "inst_street_address": "1608 4TH ST STE 201",
  "inst_street_address_2": "",
  "inst_city_name": "BERKELEY",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "5106433891",
  "inst_zip_code": "947101749",
  "inst_country_name": "United States",
  "cong_dist_code": "12",
  "st_cong_dist_code": "CA12",
  "org_lgl_bus_name": "REGENTS OF THE UNIVERSITY OF CALIFORNIA, THE",
  "org_prnt_uei_num": "",
  "org_uei_num": "GS3YEVSS12N6"
 },
 "perf_inst": {
  "perf_inst_name": "University of California-Berkeley",
  "perf_str_addr": "Valley Life Science Bldg, #4161",
  "perf_city_name": "Berkeley",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "947203140",
  "perf_ctry_code": "US",
  "perf_cong_dist": "12",
  "perf_st_cong_dist": "CA12",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "116500",
   "pgm_ele_name": "ADVANCES IN BIO INFORMATICS"
  }
 ],
 "pgm_ref": null,
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 546766.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Phylogenies are representations of the evolutionary history of a group and are typically depicted as tree-like diagrams. Phylogenies are of widespread use in biology, with applications ranging from the esoteric such as what are the relationships of an obscure group of organisms to the more practical, such as how and when did a particular virus originate. For example, the history of SARS-CoV-2 is understood using phylogenies.</p>\n<p>RevBayes is a program for estimating phylogenies. Typically, an alignment of DNA sequences sampled from a group of organisms is the input for the program. The output is a set of trees sampled in proportion to their probabilities. Specifically, the program takes a Bayesian statistical approach to phylogeny estimation, using a numerical method called Markov chain Monte Carlo (or MCMC) to sample trees (and other parameters of the phylogenetic model) in proportion to their posterior probabilities.</p>\n<p>The strength of RevBayes is its flexibility. The biologist can make and test a wide variety of assumptions about how DNA evolves. The model is specified by an R-like language which is rich and powerful. However, the strength of the program also limits its wide spread adoption by biologists; there are many options the biologist can implement and many biologists find the flexibility of the program off-putting.&nbsp;</p>\n<p>Another concern with RevBayes, as well as all other phylogeny programs, is ensuring the correctness of the code. This is quite important as thousands of biologists use these programs every day as part of their research. It&rsquo;s important that the output of the programs be correct. MCMC presents its own set of difficulties in insuring code correctness. MCMC is a stochastic algorithm. Every run of the program under the same assumptions and the same data should produce the same results, up to the Monte Carlo error associated with the stochastic nature of the algorithm. In other words, the results from different runs of the program should be similar, but will not be identical, to each other.</p>\n<p>This grant funded important improvements to the RevBayes program. These improvements can be divided into three general areas: (1) ensuring code correctness, (2) improving workflow for the team of programmers who are developing the program, and (3) developing a graphical user interface to help users navigate the complexity of the program.</p>\n<p>Ensuring code correctness: A typical way to test code is to write unit tests, which test the correctness of parts o the code. Testing the correctness of MCMC is more difficult for the reasons described above. For that reason, we developed an integration test procedure (<a href=\"https://revbayes.github.io/developer/tests/\">https://revbayes.github.io/developer/tests/</a>). New code must pass the integration tests before being integrated into the development branch of the code. Specifically, each function or analysis has a corresponding integration test, which is a file with commands and a start seed. The system we use runs through all of the integration tests. The programmer can then look at the summary of the output, making certain the integration tests were passed. The integration tests are performed every time code is pushed to the RevBayes Git repository, using Github Actions. Specifically,&nbsp; the automated workflow runs tests on the tutorials, integration tests, and likelihood calculations (using testiphy).&nbsp;</p>\n<p>Improving workflow: We also developed protocols for RevBayes developers to follow, described at https://revbayes.github.io/developer/git-flow.html. We make it easy for interested biologists to join the development team, outlining details on how to get started with the code and how to contribute new code (e.g., https://revbayes.github.io/developer/.) Perhaps most importantly, we developed a peer review system in which new code is checked by peers before being incorporated into the program.&nbsp;</p>\n<p>Tools to help biologists use RevBayes: We developed two tools to help biologists take advantage of the RevBayes program. First, we developed an online tool (<a href=\"https://revbayes.github.io/revscripter/\">https://revbayes.github.io/revscripter/</a>) that generates the Rev commands needed to perform typical analyses. Second, we developed a tool-based graphical user interface (GUI; <a href=\"https://revbayes.github.io/gui\">https://revbayes.github.io/gui</a>). The GUI is written for the MacOS using the Swift programming language and the Apple Cocoa libraries. The most challenging (and still incomplete) tool is the model tool. The problem: how to keep the GUI up-to-date when the C++ code base for the RevBayes program changes so rapidly because of contributions from its many developers? Our solution: every time the model tool is used in an analysis, it checks a portion of the RevBayes program were an instance of all functions, probability distributions, and data types reside. Through a process called type-casting, the tool can figure out what menus to populate. Importantly, the GUI Model Tool then stays up-to-date with the newest implemented features of the program</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 02/13/2023<br>\n\t\t\t\t\tModified by: John&nbsp;P&nbsp;Huelsenbeck</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nPhylogenies are representations of the evolutionary history of a group and are typically depicted as tree-like diagrams. Phylogenies are of widespread use in biology, with applications ranging from the esoteric such as what are the relationships of an obscure group of organisms to the more practical, such as how and when did a particular virus originate. For example, the history of SARS-CoV-2 is understood using phylogenies.\n\nRevBayes is a program for estimating phylogenies. Typically, an alignment of DNA sequences sampled from a group of organisms is the input for the program. The output is a set of trees sampled in proportion to their probabilities. Specifically, the program takes a Bayesian statistical approach to phylogeny estimation, using a numerical method called Markov chain Monte Carlo (or MCMC) to sample trees (and other parameters of the phylogenetic model) in proportion to their posterior probabilities.\n\nThe strength of RevBayes is its flexibility. The biologist can make and test a wide variety of assumptions about how DNA evolves. The model is specified by an R-like language which is rich and powerful. However, the strength of the program also limits its wide spread adoption by biologists; there are many options the biologist can implement and many biologists find the flexibility of the program off-putting. \n\nAnother concern with RevBayes, as well as all other phylogeny programs, is ensuring the correctness of the code. This is quite important as thousands of biologists use these programs every day as part of their research. It\u2019s important that the output of the programs be correct. MCMC presents its own set of difficulties in insuring code correctness. MCMC is a stochastic algorithm. Every run of the program under the same assumptions and the same data should produce the same results, up to the Monte Carlo error associated with the stochastic nature of the algorithm. In other words, the results from different runs of the program should be similar, but will not be identical, to each other.\n\nThis grant funded important improvements to the RevBayes program. These improvements can be divided into three general areas: (1) ensuring code correctness, (2) improving workflow for the team of programmers who are developing the program, and (3) developing a graphical user interface to help users navigate the complexity of the program.\n\nEnsuring code correctness: A typical way to test code is to write unit tests, which test the correctness of parts o the code. Testing the correctness of MCMC is more difficult for the reasons described above. For that reason, we developed an integration test procedure (https://revbayes.github.io/developer/tests/). New code must pass the integration tests before being integrated into the development branch of the code. Specifically, each function or analysis has a corresponding integration test, which is a file with commands and a start seed. The system we use runs through all of the integration tests. The programmer can then look at the summary of the output, making certain the integration tests were passed. The integration tests are performed every time code is pushed to the RevBayes Git repository, using Github Actions. Specifically,  the automated workflow runs tests on the tutorials, integration tests, and likelihood calculations (using testiphy). \n\nImproving workflow: We also developed protocols for RevBayes developers to follow, described at https://revbayes.github.io/developer/git-flow.html. We make it easy for interested biologists to join the development team, outlining details on how to get started with the code and how to contribute new code (e.g., https://revbayes.github.io/developer/.) Perhaps most importantly, we developed a peer review system in which new code is checked by peers before being incorporated into the program. \n\nTools to help biologists use RevBayes: We developed two tools to help biologists take advantage of the RevBayes program. First, we developed an online tool (https://revbayes.github.io/revscripter/) that generates the Rev commands needed to perform typical analyses. Second, we developed a tool-based graphical user interface (GUI; https://revbayes.github.io/gui). The GUI is written for the MacOS using the Swift programming language and the Apple Cocoa libraries. The most challenging (and still incomplete) tool is the model tool. The problem: how to keep the GUI up-to-date when the C++ code base for the RevBayes program changes so rapidly because of contributions from its many developers? Our solution: every time the model tool is used in an analysis, it checks a portion of the RevBayes program were an instance of all functions, probability distributions, and data types reside. Through a process called type-casting, the tool can figure out what menus to populate. Importantly, the GUI Model Tool then stays up-to-date with the newest implemented features of the program\n\n \n\n\t\t\t\t\tLast Modified: 02/13/2023\n\n\t\t\t\t\tSubmitted by: John P Huelsenbeck"
 }
}