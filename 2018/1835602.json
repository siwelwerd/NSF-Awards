{
 "awd_id": "1835602",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "Framework: Software: Collaborative Research: CyberWater-An open and sustainable framework for diverse data and model integration with provenance and access to HPC",
 "cfda_num": "47.070",
 "org_code": "05090000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Ashok Srinivasan",
 "awd_eff_date": "2019-01-01",
 "awd_exp_date": "2023-12-31",
 "tot_intn_awd_amt": 39996.0,
 "awd_amount": 39996.0,
 "awd_min_amd_letter_date": "2018-09-07",
 "awd_max_amd_letter_date": "2018-09-07",
 "awd_abstract_narration": "This project addresses a high priority need for water research communities: interoperability among a wide variety of data sources and models, and integration of different computational models into water research communities.  The project will develop an open and sustainable software framework enabling integration of hydrologic data and models for interdisciplinary teamwork and discovery.   The models and datasets cover fields such as hydrology, biology, environmental engineering and climate.  The project also addresses one of the key issues for extreme-scale computing:  scalable file systems.  The collaboration draws upon computing, modeling, and hydrology expertise at six institutions: University of Pittsburgh, University of Iowa, Ball State University, North Carolina State University, Indiana University, and the Consortium of Universities for the Advancement of Hydrologic Science, Inc. (CUAHSI).  \r\n\r\nThe project develops CyberWater, a community-driven software framework that integrates a wide range of models and datasets across disparate temporal and spatial scales. The CyberWater framework allows scientists to bypass challenges associated with model and dataset complexity.  The project designs a model agent tool enabling users to generate model agents for common model types without coding, and integrates multiple existing software codes/elements that provide for broad-scale use.  To develop such a diverse modeling framework, the project brings together hydrologists, climate experts, meteorologists, computer scientists and cyberinfrastructure experts.  The project builds upon an existing prototype developed by the lead investigator;  basic elements for the system were developed, consisting of plugged-in models and data sources with corresponding agents and a workflow engine allowing user workflow control.  The prototype was successfully demonstrated for two models, making use of datasets plugged in from NASA, USGS and CUAHSI.  For the current project, new models and datasets are added to the framework; the ability to use high performance computing resources is also incorporated.  The team will use the CUAHSI HydroShare System to distribute CyberWater software and its associate model agents, including instructions on how to establish a local CyberWater environment, models and model agents. The project will enable substantial scientific advances for water related issues, and the solution can be applied to other research disciplines. \r\n\r\nThis award by the Office of Advanced Cyberinfrastructure is jointly supported by the NSF Directorate for Geosciences.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "OAC",
 "org_div_long_name": "Office of Advanced Cyberinfrastructure (OAC)",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Lan",
   "pi_last_name": "Lin",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Lan Lin",
   "pi_email_addr": "llin4@bsu.edu",
   "nsf_id": "000697078",
   "pi_start_date": "2018-09-07",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Ball State University",
  "inst_street_address": "2000 W UNIVERSITY AVE",
  "inst_street_address_2": "",
  "inst_city_name": "MUNCIE",
  "inst_state_code": "IN",
  "inst_state_name": "Indiana",
  "inst_phone_num": "7652851600",
  "inst_zip_code": "473061099",
  "inst_country_name": "United States",
  "cong_dist_code": "05",
  "st_cong_dist_code": "IN05",
  "org_lgl_bus_name": "BALL STATE UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "KDP6QKY6QLM1"
 },
 "perf_inst": {
  "perf_inst_name": "Ball State University",
  "perf_str_addr": "2000 W. University Avenue",
  "perf_city_name": "Muncie",
  "perf_st_code": "IN",
  "perf_st_name": "Indiana",
  "perf_zip_code": "473061022",
  "perf_ctry_code": "US",
  "perf_cong_dist": "05",
  "perf_st_cong_dist": "IN05",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "772600",
   "pgm_ele_name": "Data Cyberinfrastructure"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "062Z",
   "pgm_ref_txt": "Harnessing the Data Revolution"
  },
  {
   "pgm_ref_code": "077Z",
   "pgm_ref_txt": "CSSI-1: Cyberinfr for Sustained Scientif"
  },
  {
   "pgm_ref_code": "7925",
   "pgm_ref_txt": "LARGE PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 39996.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The <em>CyberWater</em> project builds an open data, open modeling framework to significantly reduce the time and effort users need for hydrologic modeling studies and expedite the knowledge discovery process for water scientists. The developed software allows easy and incremental integration of heterogeneous data sources and diverse computational models and facilitates the execution of complex workflows with on-demand high-performance computing (HPC) resources. The BSU team oversees the entire software development process, enforcing the workflow and applying software engineering methodologies and best industry practices to the development, testing, and deployment of this open-source software to achieve production quality upon project delivery.</p>\n<p>In the early phases of the project, we assisted the development team in setting up a source code repository, establishing project management and issue tracking systems, defining a branching strategy, a pull request strategy, and a coding standard, and implementing a continuous integration/continuous deployment (CI/CD) pipeline for regression testing using the <em>Jenkins</em> automation server. Once the workflow was in place, we focused on fully automating unit and functional testing of key components of the software. One major challenge we encountered in testing was the complexity introduced by integration with <em>VisTrails</em>, a Windows GUI-based tool for workflow management. To automate functional testing with user-triggered use cases without relying on any proprietary Windows-based GUI testing tools, we proposed a novel technique called object method replacement to cleanly separate the computational engine of a module from its GUI front-end. After testing it with a proof-of-concept small example, we successfully implemented this approach to write all the back-end black-box unit tests, utilizing two <em>Python</em> unit test frameworks (<em>Python unittest</em> and <em>ptest</em>), and fully automated test execution in <em>Jenkins</em>.</p>\n<p>We applied this strategy and developed a comprehensive suite of unit and functional tests for the <em>GenericModelAgent </em>toolkit, comprising <em>MainGenerator</em>, <em>AreaWiseParamGenerator</em>, <em>InitialStateFileGenerator</em>, <em>ForcingDataFileGenerator</em>, <em>RunModuleAgent</em>, and <em>HPC</em> modules, along with several other modules outside the toolkit (e.g., <em>TimeRange</em>, <em>SpaceRange</em>, and <em>USGSAgent</em>, for integration testing). For each module tested and integrated, we generated extensive documentation, including a rewritten tester-oriented module specification, a module functionality diagram, a unit/integration test design, test cases, test results, identified issues in the code/design, and suggested code fixes. Additionally, we presented and trained the development team on writing effective unit tests and clear, succinct code specifications, as well as designing software in a manner that supports its testability.</p>\n<p>Based on our reflections on the many well-adopted best software engineering practices we applied to the <em>CyberWater </em>software development and testing, which have proven effective, we published papers aimed at teaching domain science researchers how to develop high-quality research software for the domain, covering topics ranging from basic <em>Git</em> usage to software testing and code specification. Along similar lines, we also developed and delivered a crash course to the development team, consisting of four modules: (1) Version control and software engineering: The basics; (2) Version control and software engineering: Advanced; (3) Software engineering best practices; and (4) Software testing, accompanied by training materials, videos, labs, and tutorials. Through these efforts, we aim to provide just enough software engineering knowledge -- focusing on the most effective and well-adopted practices -- that a domain scientist tasked with software development may need. Our goal is to equip them to develop the best domain software possible while minimizing the time, effort, and budget required in the process.</p>\n<p>All the software engineering research conducted in the <em>CyberWater</em> project at the BSU site was carried out by undergraduate students, including underrepresented students in computer science. This project exposed them to many software engineering best practices that are not typically included in a university curriculum. By learning these practices and applying them extensively to a research project, they accumulated valuable hands-on experience to solve real-world problems. This preparation equipped them for entering the work force by gaining the skills, credentials, and experiences desired by their future employers, and motivates them to pursue and excel in STEM-related fields. Furthermore, the research experience they obtained by working on an interdisciplinary collaborative team, presenting their work in professional settings to the research community, and engaging in insightful discussions with scholars outside our university and around the globe helped them grow professionally as researchers. One of my undergraduate students, due to her work and contributions to the project, was recognized as a top student in the National Student Employee of the Year rankings in the Critical Thinking category, and the only BSU student to win one of the national categories in that year. Additionally, this project provided ample opportunities to train not only computer science students but also domain science students in important software engineering practices, processes, workflows, and methodologies to ensure the good quality of their developed software. It prepared them with the mindset that the quality of a product cannot be tested in <em>but </em>needs to be built into the product or process from the outset.</p><br>\n<p>\n Last Modified: 05/02/2024<br>\nModified by: Lan&nbsp;Lin</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nThe CyberWater project builds an open data, open modeling framework to significantly reduce the time and effort users need for hydrologic modeling studies and expedite the knowledge discovery process for water scientists. The developed software allows easy and incremental integration of heterogeneous data sources and diverse computational models and facilitates the execution of complex workflows with on-demand high-performance computing (HPC) resources. The BSU team oversees the entire software development process, enforcing the workflow and applying software engineering methodologies and best industry practices to the development, testing, and deployment of this open-source software to achieve production quality upon project delivery.\n\n\nIn the early phases of the project, we assisted the development team in setting up a source code repository, establishing project management and issue tracking systems, defining a branching strategy, a pull request strategy, and a coding standard, and implementing a continuous integration/continuous deployment (CI/CD) pipeline for regression testing using the Jenkins automation server. Once the workflow was in place, we focused on fully automating unit and functional testing of key components of the software. One major challenge we encountered in testing was the complexity introduced by integration with VisTrails, a Windows GUI-based tool for workflow management. To automate functional testing with user-triggered use cases without relying on any proprietary Windows-based GUI testing tools, we proposed a novel technique called object method replacement to cleanly separate the computational engine of a module from its GUI front-end. After testing it with a proof-of-concept small example, we successfully implemented this approach to write all the back-end black-box unit tests, utilizing two Python unit test frameworks (Python unittest and ptest), and fully automated test execution in Jenkins.\n\n\nWe applied this strategy and developed a comprehensive suite of unit and functional tests for the GenericModelAgent toolkit, comprising MainGenerator, AreaWiseParamGenerator, InitialStateFileGenerator, ForcingDataFileGenerator, RunModuleAgent, and HPC modules, along with several other modules outside the toolkit (e.g., TimeRange, SpaceRange, and USGSAgent, for integration testing). For each module tested and integrated, we generated extensive documentation, including a rewritten tester-oriented module specification, a module functionality diagram, a unit/integration test design, test cases, test results, identified issues in the code/design, and suggested code fixes. Additionally, we presented and trained the development team on writing effective unit tests and clear, succinct code specifications, as well as designing software in a manner that supports its testability.\n\n\nBased on our reflections on the many well-adopted best software engineering practices we applied to the CyberWater software development and testing, which have proven effective, we published papers aimed at teaching domain science researchers how to develop high-quality research software for the domain, covering topics ranging from basic Git usage to software testing and code specification. Along similar lines, we also developed and delivered a crash course to the development team, consisting of four modules: (1) Version control and software engineering: The basics; (2) Version control and software engineering: Advanced; (3) Software engineering best practices; and (4) Software testing, accompanied by training materials, videos, labs, and tutorials. Through these efforts, we aim to provide just enough software engineering knowledge -- focusing on the most effective and well-adopted practices -- that a domain scientist tasked with software development may need. Our goal is to equip them to develop the best domain software possible while minimizing the time, effort, and budget required in the process.\n\n\nAll the software engineering research conducted in the CyberWater project at the BSU site was carried out by undergraduate students, including underrepresented students in computer science. This project exposed them to many software engineering best practices that are not typically included in a university curriculum. By learning these practices and applying them extensively to a research project, they accumulated valuable hands-on experience to solve real-world problems. This preparation equipped them for entering the work force by gaining the skills, credentials, and experiences desired by their future employers, and motivates them to pursue and excel in STEM-related fields. Furthermore, the research experience they obtained by working on an interdisciplinary collaborative team, presenting their work in professional settings to the research community, and engaging in insightful discussions with scholars outside our university and around the globe helped them grow professionally as researchers. One of my undergraduate students, due to her work and contributions to the project, was recognized as a top student in the National Student Employee of the Year rankings in the Critical Thinking category, and the only BSU student to win one of the national categories in that year. Additionally, this project provided ample opportunities to train not only computer science students but also domain science students in important software engineering practices, processes, workflows, and methodologies to ensure the good quality of their developed software. It prepared them with the mindset that the quality of a product cannot be tested in but needs to be built into the product or process from the outset.\t\t\t\t\tLast Modified: 05/02/2024\n\n\t\t\t\t\tSubmitted by: LanLin\n"
 }
}