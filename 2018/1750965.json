{
 "awd_id": "1750965",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CAREER: Program Synthesis with Quantitative Guarantees",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032922585",
 "po_email": "pprabhak@nsf.gov",
 "po_sign_block_name": "Pavithra Prabhakar",
 "awd_eff_date": "2018-09-01",
 "awd_exp_date": "2024-08-31",
 "tot_intn_awd_amt": 500000.0,
 "awd_amount": 500000.0,
 "awd_min_amd_letter_date": "2017-12-13",
 "awd_max_amd_letter_date": "2022-08-09",
 "awd_abstract_narration": "Software has been changing our lives for many decades, but despite the advances in programming language design, how we write programs has not changed much: programmers keep repeating similar mistakes, writing similar programs, and fixing similar bugs. Program synthesis, the art of automatically generating programs that meet user intents, promises to increase the productivity of programmers and end-users of computing devices by automating tedious, error-prone, and time-consuming tasks. Despite the practical successes of program synthesis, we still do not have systematic frameworks to synthesize programs that are good according to certain metrics-e.g., produce programs of a reasonable size or with good running time-and to understand when synthesis can result in such good programs. This project investigates the problem of performing program synthesis in the presence of quantitative objectives while providing quantitative guarantees on the results and on the performance of the synthesis algorithms. \r\n\r\nThis project investigates new formal methods such as weighted grammars and weighted logics, to specify quantitative objectives on the syntax, semantics, and probabilistic outcomes of the synthesized programs, as well as new synthesis algorithms for solving problems expressible in such formalisms. The proposed work will lead to more predictable, accurate, and robust synthesis algorithms, which will be integrated widely used synthesis applications such as tools for personalized education, network synthesis, programming by examples, and automated program repair. The investigator will organize a series of lectures about the impact of program synthesis on the labor force and will lead several diversity and outreach efforts to undergraduates, women, under-represented minorities, and non-traditional students.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Loris",
   "pi_last_name": "DAntoni",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Loris DAntoni",
   "pi_email_addr": "ldantoni@ucsd.edu",
   "nsf_id": "000701818",
   "pi_start_date": "2017-12-13",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Wisconsin-Madison",
  "inst_street_address": "21 N PARK ST STE 6301",
  "inst_street_address_2": "",
  "inst_city_name": "MADISON",
  "inst_state_code": "WI",
  "inst_state_name": "Wisconsin",
  "inst_phone_num": "6082623822",
  "inst_zip_code": "537151218",
  "inst_country_name": "United States",
  "cong_dist_code": "02",
  "st_cong_dist_code": "WI02",
  "org_lgl_bus_name": "UNIVERSITY OF WISCONSIN SYSTEM",
  "org_prnt_uei_num": "",
  "org_uei_num": "LCLSJAGTNZQ7"
 },
 "perf_inst": {
  "perf_inst_name": "University of Wisconsin-Madison",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "WI",
  "perf_st_name": "Wisconsin",
  "perf_zip_code": "537061613",
  "perf_ctry_code": "US",
  "perf_cong_dist": "02",
  "perf_st_cong_dist": "WI02",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "1045",
   "pgm_ref_txt": "CAREER-Faculty Erly Career Dev"
  },
  {
   "pgm_ref_code": "8206",
   "pgm_ref_txt": "Formal Methods and Verification"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0121",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0122",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002223DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 93468.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 96049.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 102096.0
  },
  {
   "fund_oblg_fiscal_yr": 2021,
   "fund_oblg_amt": 104951.0
  },
  {
   "fund_oblg_fiscal_yr": 2022,
   "fund_oblg_amt": 103436.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-b1130d4c-7fff-4730-7d74-26b3e840e042\"> </span></p>\n<p dir=\"ltr\"><span>Program synthesis is the automated generation of programs from high-level specifications, and while it has achieved significant practical successes, challenges remain in controlling the size, performance, and other qualitative aspects of generated programs. This work aimed to address these gaps by developing systematic frameworks to guide the synthesis process according to specific quantitative criteria.</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>Intellectual Merit</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>Our main contribution lies in the development of new formal methods and algorithms for program synthesis that incorporate quantitative objectives. The key innovation is QSyGuS (Quantitative Syntax-Guided Synthesis), a framework for describing synthesis problems using weighted grammars. This formalism provides a flexible mechanism to express various quantitative objectives such as size, efficiency, and resource usage. By leveraging closure properties of weighted grammars, our algorithms efficiently solve QSyGuS problems with minimal computational overhead, thereby improving the quality of synthesized programs. This work sets a foundation for creating synthesis tools that can better meet practical performance requirements.</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>Another major contribution is the development of tools for proving unrealizability of synthesis problems, where no valid program can meet the given specification. Our tool, \"Nope,\" converts synthesis problems into reachability problems, enabling automatic proof of unrealizability for problems that other tools cannot solve. This was followed by the introduction of \"Nay,\" an improved tool that can solve more problems and operates faster, demonstrating superior performance.</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>We also introduced a new framework called Semantics-Guided Synthesis (SemGuS), which allows the specification of synthesis problems across different domains and languages. This framework opens new avenues for synthesizing complex programs, including imperative programs, and has already proven successful in solving previously unsolvable synthesis problems.&nbsp;</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>Broader Impacts</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>The broader impacts of this project extend beyond theoretical advancements in program synthesis. By improving the efficiency and predictability of synthesis algorithms, this work has the potential to enhance a wide range of applications, including personalized education tools, network synthesis, programming by examples, and automated program repair. The tools and frameworks developed in this project can be directly integrated into widely used synthesis platforms, making it easier for practitioners and developers to generate optimized, reliable programs.</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>We also placed a strong emphasis on outreach and diversity. The project involved training graduate students, including underrepresented groups in computer science, contributing to building the next generation of researchers in formal methods and synthesis. The principal investigator led efforts to organize lectures and workshops aimed at educating broader audiences about the impacts of program synthesis on the workforce, particularly in the context of automation and labor markets.</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>Overall, this project has provided significant insights into the challenges and possibilities of program synthesis with quantitative objectives, advancing both the theoretical understanding and practical tools needed to achieve high-quality automated program generation.</span></p>\n<div><span><br /></span></div>\n<p>&nbsp;</p>\n<p>&nbsp;</p><br>\n<p>\n Last Modified: 10/30/2024<br>\nModified by: Loris&nbsp;Dantoni</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\n \n\n\nProgram synthesis is the automated generation of programs from high-level specifications, and while it has achieved significant practical successes, challenges remain in controlling the size, performance, and other qualitative aspects of generated programs. This work aimed to address these gaps by developing systematic frameworks to guide the synthesis process according to specific quantitative criteria.\n\n\n\n\n\nIntellectual Merit\n\n\n\n\n\nOur main contribution lies in the development of new formal methods and algorithms for program synthesis that incorporate quantitative objectives. The key innovation is QSyGuS (Quantitative Syntax-Guided Synthesis), a framework for describing synthesis problems using weighted grammars. This formalism provides a flexible mechanism to express various quantitative objectives such as size, efficiency, and resource usage. By leveraging closure properties of weighted grammars, our algorithms efficiently solve QSyGuS problems with minimal computational overhead, thereby improving the quality of synthesized programs. This work sets a foundation for creating synthesis tools that can better meet practical performance requirements.\n\n\n\n\n\nAnother major contribution is the development of tools for proving unrealizability of synthesis problems, where no valid program can meet the given specification. Our tool, \"Nope,\" converts synthesis problems into reachability problems, enabling automatic proof of unrealizability for problems that other tools cannot solve. This was followed by the introduction of \"Nay,\" an improved tool that can solve more problems and operates faster, demonstrating superior performance.\n\n\n\n\n\nWe also introduced a new framework called Semantics-Guided Synthesis (SemGuS), which allows the specification of synthesis problems across different domains and languages. This framework opens new avenues for synthesizing complex programs, including imperative programs, and has already proven successful in solving previously unsolvable synthesis problems.\n\n\n\n\n\nBroader Impacts\n\n\n\n\n\nThe broader impacts of this project extend beyond theoretical advancements in program synthesis. By improving the efficiency and predictability of synthesis algorithms, this work has the potential to enhance a wide range of applications, including personalized education tools, network synthesis, programming by examples, and automated program repair. The tools and frameworks developed in this project can be directly integrated into widely used synthesis platforms, making it easier for practitioners and developers to generate optimized, reliable programs.\n\n\n\n\n\nWe also placed a strong emphasis on outreach and diversity. The project involved training graduate students, including underrepresented groups in computer science, contributing to building the next generation of researchers in formal methods and synthesis. The principal investigator led efforts to organize lectures and workshops aimed at educating broader audiences about the impacts of program synthesis on the workforce, particularly in the context of automation and labor markets.\n\n\n\n\n\nOverall, this project has provided significant insights into the challenges and possibilities of program synthesis with quantitative objectives, advancing both the theoretical understanding and practical tools needed to achieve high-quality automated program generation.\n\n\n\n\n\n\n\n\t\t\t\t\tLast Modified: 10/30/2024\n\n\t\t\t\t\tSubmitted by: LorisDantoni\n"
 }
}