{
 "awd_id": "1800665",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "TWC: Small: STRUCT: Enabling Secure and Trustworthy Compartments in Mobile Applications",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Shannon Beck",
 "awd_eff_date": "2017-11-01",
 "awd_exp_date": "2019-08-31",
 "tot_intn_awd_amt": 273065.0,
 "awd_amount": 286065.0,
 "awd_min_amd_letter_date": "2017-10-27",
 "awd_max_amd_letter_date": "2017-10-27",
 "awd_abstract_narration": "Society's dependence on mobile technologies rapidly increases as we entrust mobile applications with more and more private information and capabilities. Existing security research follows a common threat model that treats apps as monolithic entities and only captures attack surface between apps. However, recent research reveals that app internal attacks are emerging quickly as complex entities with conflicting interests are commonly included inside a single app to allow for rich features and fast development.  \r\n\r\nThis project, known as STRUCT, systematically investigates app compartmentalization as a novel and general approach to mitigating the critical yet unaddressed internal threats of apps. It applies this approach to major mobile platforms via solving four challenging and interesting research problems: (1) Deriving principles and models for designing intra-app security mechanisms; (2) Building compiler toolchains for automatically and securely compartmentalizing apps; (3) Building system-level enforcement mechanisms for open platforms; (4) Building app-level system-agnostic enforcement mechanisms for closed platforms.  Solutions to these challenges together form a foundation to the design and implementation of intra-app security isolation and policy enforcement, which is currently nonexistent but in high demand. \r\n\r\nSTRUCT has its broader impact in fostering a new direction in mobile security research and education as well as increasing society's adoption of mobile technology in security-sensitive scenarios.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Long",
   "pi_last_name": "Lu",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Long Lu",
   "pi_email_addr": "l.lu@northeastern.edu",
   "nsf_id": "000655768",
   "pi_start_date": "2017-10-27",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Northeastern University",
  "inst_street_address": "360 HUNTINGTON AVE",
  "inst_street_address_2": "",
  "inst_city_name": "BOSTON",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "6173735600",
  "inst_zip_code": "021155005",
  "inst_country_name": "United States",
  "cong_dist_code": "07",
  "st_cong_dist_code": "MA07",
  "org_lgl_bus_name": "NORTHEASTERN UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "HLTMVS2JZBS6"
 },
 "perf_inst": {
  "perf_inst_name": "Northeastern University",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "021155005",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "MA07",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "171400",
   "pgm_ele_name": "Special Projects - CNS"
  },
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "9178",
   "pgm_ref_txt": "UNDERGRADUATE EDUCATION"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0114",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001415DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2014,
   "fund_oblg_amt": 273065.0
  },
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 13000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>We comprehensively studied a broad category of security risks that are imposed<br />by one entity to another within the same app. We found libraries take aggressive<br />advantage of the core app or other libraries, which usually happens without<br />violating any security policy or being noticed because they share the same<br />protection domain as the victim entities. Moreover, if a library or component is<br />vulnerable and fall control under an attacker, it can be exploited to steal data<br />or perform malicious activities inside the victim app. <br /><br />We systematically investigated app compartmentalization as a generic defense<br />against this category of threats. We created a new perspective to app security<br />and explore a new direction in security research. More concretely, our work<br />enabled robust, flexible, and efficient intra-app isolation, which is tailored<br />to the unique security and performance needs of mobile platforms. In particular,<br />we built the tools, generalize the methods, and derive the models and principles<br />for the automatic creation and the lightweight enforcement of intra-app<br />protection domains (i.e., compartments). Below, we highlight a few key findings<br />and achievements from this project. <br /><br />We invented Shreds, a set of OS-backed programming primitives that addresses<br />developers? currently unmet needs for fine-grained, convenient, and efficient<br />protection of sensitive memory content against in-process adversaries. A shred<br />can be viewed as a flexibly defined segment of a thread execution (hence the<br />name).Each shred is associated with a protected memory pool, which is accessible<br />only to code running in the shred. Shreds also provide the essential data flow<br />and control flow guarantees for running sensitive code. We have built the<br />compiler tool-chain and the OS module that together enable Shreds on Linux. The<br />results showed that Shreds are fairly easy to use and incur low runtime overhead<br />(4.67%).<br /><br />We invented InstaGuard, a new approach to hot-patch for mobile devices that<br />allows for instant deployment of patches and fast patch development for device<br />vendors. Unlike existing hot-patching techniques, InstaGuard avoids injecting<br />new code to programs being patched. Instead, it enforces instantly updatable<br />rules that contain no code (i.e., non-intrusive) to block exploits of unpatched<br />vulnerabilities in a timely fashion. To demonstrate the coverage of InstaGuard,<br />we showed that InstaGuard can patch all critical vulnerabilities from Android<br />Security Bulletins reported in 2016. We also conduct unit tests using critical<br />vulnerabilities from 4 different categories. On average, InstaGuard increases<br />program memory footprint by 1.69% and slows down program execution by 2.70%,<br />which are unnoticeable to device users in practice. <br /><br />We designed compiler-assisted code randomization (CCR), which relies on<br />compiler?rewriter cooperation to enable fast and robust fine-grained code<br />randomization on end-user systems, while maintaining compatibility with existing<br />software distribution models. With CCR, a broad range of software attacks and<br />exploits can be prevented and legacy software can be protected. The results of<br />our experimental evaluation demonstrate the feasibility and practicality of CCR.<br />On average, it incurs a modest file size increase of 11.46% and a negligible<br />runtime overhead of 0.28%, while it is compatible with link-time optimization<br />and control flow integrity. <br /><br />All our findings and results generated during this project were presented in<br />peer-reviewed academic publications.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 10/07/2019<br>\n\t\t\t\t\tModified by: Long&nbsp;Lu</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nWe comprehensively studied a broad category of security risks that are imposed\nby one entity to another within the same app. We found libraries take aggressive\nadvantage of the core app or other libraries, which usually happens without\nviolating any security policy or being noticed because they share the same\nprotection domain as the victim entities. Moreover, if a library or component is\nvulnerable and fall control under an attacker, it can be exploited to steal data\nor perform malicious activities inside the victim app. \n\nWe systematically investigated app compartmentalization as a generic defense\nagainst this category of threats. We created a new perspective to app security\nand explore a new direction in security research. More concretely, our work\nenabled robust, flexible, and efficient intra-app isolation, which is tailored\nto the unique security and performance needs of mobile platforms. In particular,\nwe built the tools, generalize the methods, and derive the models and principles\nfor the automatic creation and the lightweight enforcement of intra-app\nprotection domains (i.e., compartments). Below, we highlight a few key findings\nand achievements from this project. \n\nWe invented Shreds, a set of OS-backed programming primitives that addresses\ndevelopers? currently unmet needs for fine-grained, convenient, and efficient\nprotection of sensitive memory content against in-process adversaries. A shred\ncan be viewed as a flexibly defined segment of a thread execution (hence the\nname).Each shred is associated with a protected memory pool, which is accessible\nonly to code running in the shred. Shreds also provide the essential data flow\nand control flow guarantees for running sensitive code. We have built the\ncompiler tool-chain and the OS module that together enable Shreds on Linux. The\nresults showed that Shreds are fairly easy to use and incur low runtime overhead\n(4.67%).\n\nWe invented InstaGuard, a new approach to hot-patch for mobile devices that\nallows for instant deployment of patches and fast patch development for device\nvendors. Unlike existing hot-patching techniques, InstaGuard avoids injecting\nnew code to programs being patched. Instead, it enforces instantly updatable\nrules that contain no code (i.e., non-intrusive) to block exploits of unpatched\nvulnerabilities in a timely fashion. To demonstrate the coverage of InstaGuard,\nwe showed that InstaGuard can patch all critical vulnerabilities from Android\nSecurity Bulletins reported in 2016. We also conduct unit tests using critical\nvulnerabilities from 4 different categories. On average, InstaGuard increases\nprogram memory footprint by 1.69% and slows down program execution by 2.70%,\nwhich are unnoticeable to device users in practice. \n\nWe designed compiler-assisted code randomization (CCR), which relies on\ncompiler?rewriter cooperation to enable fast and robust fine-grained code\nrandomization on end-user systems, while maintaining compatibility with existing\nsoftware distribution models. With CCR, a broad range of software attacks and\nexploits can be prevented and legacy software can be protected. The results of\nour experimental evaluation demonstrate the feasibility and practicality of CCR.\nOn average, it incurs a modest file size increase of 11.46% and a negligible\nruntime overhead of 0.28%, while it is compatible with link-time optimization\nand control flow integrity. \n\nAll our findings and results generated during this project were presented in\npeer-reviewed academic publications.\n\n\t\t\t\t\tLast Modified: 10/07/2019\n\n\t\t\t\t\tSubmitted by: Long Lu"
 }
}