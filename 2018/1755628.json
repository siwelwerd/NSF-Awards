{
 "awd_id": "1755628",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CRII: CHS: Automatically Praising Learning Process to Promote the Growth Mindset in Computer Science",
 "cfda_num": "47.070",
 "org_code": "05020000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Balakrishnan Prabhakaran",
 "awd_eff_date": "2018-03-15",
 "awd_exp_date": "2022-02-28",
 "tot_intn_awd_amt": 174738.0,
 "awd_amount": 174738.0,
 "awd_min_amd_letter_date": "2018-03-09",
 "awd_max_amd_letter_date": "2018-03-09",
 "awd_abstract_narration": "There is a pressing need to train large numbers of computer scientists to meet the demands of our nation's economy, but many students struggle in introductory programming courses. Recent studies show that these courses often promote the fixed mindset, or the belief that programming aptitude is an inborn trait. Psychology research shows that students with the fixed mindset view mistakes as indications of low ability and perform poorly in the face of challenge. In contrast, students with the growth mindset believe that programming aptitude is malleable and excel when challenged. This project aims to design, build, and evaluate programming tools that help students develop the growth mindset by automatically detecting and praising good learning behaviors as students write code. This research will contribute scientific knowledge about the growth mindset in the domain of computer science and provide insights about the process of learning to program. The project team will deploy the tools to hundreds of students at their own university and release them for free online for any student or teacher to use. If successful, this intervention has the potential to improve the experiences, skills, and diversity of students who successfully complete programming courses and go on to participate in employment and research in STEM fields.\r\n\r\nThis project aims to develop a new growth mindset intervention that leverages the programming environment by using artificial intelligence techniques to automatically detect and praise good learning processes in real time. Programming environments provide a unique opportunity to track and understand student learning behaviors, and offer a scalable environment for praising good practices automatically. By exposing and praising the learning process, this intervention will teach students to attribute their successes and failures to malleable learning processes, rather than an innate aptitude for computer science. This research will be conducted in two phases. First, the project team will develop heuristics that detect good learning processes using behavioral log data, leveraging the computer science education literature and studying the behavior of fixed and growth mindset students to identify good processes. Second, the team will iteratively design and build a programming environment extension that uses the validated heuristics to automatically detect and praise good learning process, and evaluate this intervention through a controlled ten-week study with university students.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "IIS",
 "org_div_long_name": "Division of Information & Intelligent Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Eleanor",
   "pi_last_name": "O'Rourke",
   "pi_mid_init": "M",
   "pi_sufx_name": "",
   "pi_full_name": "Eleanor M O'Rourke",
   "pi_email_addr": "eorourke@northwestern.edu",
   "nsf_id": "000741884",
   "pi_start_date": "2018-03-09",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Northwestern University",
  "inst_street_address": "633 CLARK ST",
  "inst_street_address_2": "",
  "inst_city_name": "EVANSTON",
  "inst_state_code": "IL",
  "inst_state_name": "Illinois",
  "inst_phone_num": "3125037955",
  "inst_zip_code": "602080001",
  "inst_country_name": "United States",
  "cong_dist_code": "09",
  "st_cong_dist_code": "IL09",
  "org_lgl_bus_name": "NORTHWESTERN UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "EXZVPWZBLUE8"
 },
 "perf_inst": {
  "perf_inst_name": "Northwestern University",
  "perf_str_addr": "2120 Campus Drive",
  "perf_city_name": "Evanston",
  "perf_st_code": "IL",
  "perf_st_name": "Illinois",
  "perf_zip_code": "602082610",
  "perf_ctry_code": "US",
  "perf_cong_dist": "09",
  "perf_st_cong_dist": "IL09",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "736700",
   "pgm_ele_name": "HCC-Human-Centered Computing"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7367",
   "pgm_ref_txt": "Cyber-Human Systems"
  },
  {
   "pgm_ref_code": "8228",
   "pgm_ref_txt": "CISE Resrch Initiatn Initiatve"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 174738.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-30f45c4d-7fff-421e-497a-d52e0aed860a\"> </span></p>\n<p dir=\"ltr\"><span>Many students struggle in their introductory computer science courses at the university level, leading to poor retention rates in the major. One factor that could impact persistence in the field is students' mindsets about programming aptitude. Based on research in other domains, we would expect computer science students with a growth mindset to be persistent in the face of struggles while programming, and students with a fixed mindset to view struggle as a sign of low ability. However, the link between mindsets and learning behaviors had yet to be studied in the domain of computer science. The research under this award begins to address this gap through investigations into the design of an intervention to promote the growth mindset by automatically detecting and praising effective learning strategies as students write computer programs.</span></p>\n<p dir=\"ltr\"><span>We began this work by building prototypes of the proposed intervention. We expected to find a relationship between student responses to a mindset survey and their learning behaviors, but early evaluations of our prototype showed that students' talk did not always align with surveys. This suggested that mindset surveys might not accurately capture the nuances of student beliefs about ability. To better understand how mindsets are enacted in the domain of computer science, we interviewed nine students. We found that only one student's talk aligned with mindset theory. The other eight students' talk either included a combination of fixed and growth mindset statements or was misaligned with their learning strategies. We also found that the students frequently assessed their own ability using a variety of criteria, such as how easily they were able to debug their programs. We conducted a follow-up survey with 103 students and confirmed that students us a variety of \"self-assessment criteria\" to define and measure programming ability.</span></p>\n<p dir=\"ltr\"><span>These results suggest that there is no clear relationship between students' programming behaviors and their beliefs about intelligence in computer science. Students often engage in behaviors that they think are signs of low ability, and then feel badly about resorting to those behaviors. This means that there may not be a set of effective programming behaviors associated with the growth mindset as we had expected. Furthermore, many of the programming behaviors that lead students to negatively self-assess are natural and expected parts of programming, such as needing to look up syntax or struggling to find a bug. Given these findings we decided that it would be more effective to design an intervention to combat overly negative self-assessments and improve student confidence, rather than aiming to promote the growth mindset.</span></p>\n<p dir=\"ltr\"><span>Toward this end, we first conducted a survey study to confirm that students evaluate their ability during specific programming moments that are aligned with the self-assessment criteria we identified in our previous study. A survey study of 214 introductory computer science students at three universities found that many students negatively self-assess when they experience these programming moments, with some moments leading to more self-assessments than others. There were almost no differences in the results across the three schools, showing that the self-assessment moments are surprisingly general across populations. We also found that students who negatively self-assess more frequently and more strongly tend to have lower self-efficacy, a measure of confidence in your own ability to succeed.&nbsp;</span></p>\n<p dir=\"ltr\"><span>Given the robustness of these findings, we were ready to move forward with our efforts to build models to automatically detect self-assessment moments. One challenge in developing these models is that we had to determine when nuanced moments, such as struggling to fix a bug, were happening. We developed an approach in which students worked on programming problems and then participated in a retrospective interview with us to help identify when specific moments occurred. We then used this information to develop a model to detect self-assessment moments from student interactions with the programming environment. We evaluated our models with 33 students, comparing the automatically detected moments to ones that were hand-labeled by researchers, and found that our models had good performance.</span></p>\n<p dir=\"ltr\"><span>Collectively, this body of work has established that introductory computer science students negatively assess their own ability often, using specific programming moments as signs of low ability. We can automatically detect many of these moments directly from student interactions with the programming environment. These findings have broad implications for designing training programs and interventions that develop student confidence and motivate students to persist in computer science. Looking forward, we will continue this line of research to develop and evaluate the proposed intervention that will provide automatic feedback in response to negative self-assessment moments, with the ultimate goal of helping students develop increased confidence and more accurate expectations about the programming process. Foreseeable future impacts of this work include increased student resilience, improved student grades, and increased retention in the computer science major.</span></p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 10/12/2022<br>\n\t\t\t\t\tModified by: Eleanor&nbsp;M&nbsp;O'rourke</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n \nMany students struggle in their introductory computer science courses at the university level, leading to poor retention rates in the major. One factor that could impact persistence in the field is students' mindsets about programming aptitude. Based on research in other domains, we would expect computer science students with a growth mindset to be persistent in the face of struggles while programming, and students with a fixed mindset to view struggle as a sign of low ability. However, the link between mindsets and learning behaviors had yet to be studied in the domain of computer science. The research under this award begins to address this gap through investigations into the design of an intervention to promote the growth mindset by automatically detecting and praising effective learning strategies as students write computer programs.\nWe began this work by building prototypes of the proposed intervention. We expected to find a relationship between student responses to a mindset survey and their learning behaviors, but early evaluations of our prototype showed that students' talk did not always align with surveys. This suggested that mindset surveys might not accurately capture the nuances of student beliefs about ability. To better understand how mindsets are enacted in the domain of computer science, we interviewed nine students. We found that only one student's talk aligned with mindset theory. The other eight students' talk either included a combination of fixed and growth mindset statements or was misaligned with their learning strategies. We also found that the students frequently assessed their own ability using a variety of criteria, such as how easily they were able to debug their programs. We conducted a follow-up survey with 103 students and confirmed that students us a variety of \"self-assessment criteria\" to define and measure programming ability.\nThese results suggest that there is no clear relationship between students' programming behaviors and their beliefs about intelligence in computer science. Students often engage in behaviors that they think are signs of low ability, and then feel badly about resorting to those behaviors. This means that there may not be a set of effective programming behaviors associated with the growth mindset as we had expected. Furthermore, many of the programming behaviors that lead students to negatively self-assess are natural and expected parts of programming, such as needing to look up syntax or struggling to find a bug. Given these findings we decided that it would be more effective to design an intervention to combat overly negative self-assessments and improve student confidence, rather than aiming to promote the growth mindset.\nToward this end, we first conducted a survey study to confirm that students evaluate their ability during specific programming moments that are aligned with the self-assessment criteria we identified in our previous study. A survey study of 214 introductory computer science students at three universities found that many students negatively self-assess when they experience these programming moments, with some moments leading to more self-assessments than others. There were almost no differences in the results across the three schools, showing that the self-assessment moments are surprisingly general across populations. We also found that students who negatively self-assess more frequently and more strongly tend to have lower self-efficacy, a measure of confidence in your own ability to succeed. \nGiven the robustness of these findings, we were ready to move forward with our efforts to build models to automatically detect self-assessment moments. One challenge in developing these models is that we had to determine when nuanced moments, such as struggling to fix a bug, were happening. We developed an approach in which students worked on programming problems and then participated in a retrospective interview with us to help identify when specific moments occurred. We then used this information to develop a model to detect self-assessment moments from student interactions with the programming environment. We evaluated our models with 33 students, comparing the automatically detected moments to ones that were hand-labeled by researchers, and found that our models had good performance.\nCollectively, this body of work has established that introductory computer science students negatively assess their own ability often, using specific programming moments as signs of low ability. We can automatically detect many of these moments directly from student interactions with the programming environment. These findings have broad implications for designing training programs and interventions that develop student confidence and motivate students to persist in computer science. Looking forward, we will continue this line of research to develop and evaluate the proposed intervention that will provide automatic feedback in response to negative self-assessment moments, with the ultimate goal of helping students develop increased confidence and more accurate expectations about the programming process. Foreseeable future impacts of this work include increased student resilience, improved student grades, and increased retention in the computer science major.\n\n \n\n\t\t\t\t\tLast Modified: 10/12/2022\n\n\t\t\t\t\tSubmitted by: Eleanor M O'rourke"
 }
}