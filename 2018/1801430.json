{
 "awd_id": "1801430",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SaTC: TTP: Medium: Collaborative: Securing the Software Supply Chain",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Rob Beverly",
 "awd_eff_date": "2018-07-01",
 "awd_exp_date": "2022-06-30",
 "tot_intn_awd_amt": 465676.0,
 "awd_amount": 465676.0,
 "awd_min_amd_letter_date": "2018-07-03",
 "awd_max_amd_letter_date": "2018-07-03",
 "awd_abstract_narration": "Making modern software involves tools such as a source code management system, a verify/build/package system, and a repository for distributing software and updates. The security of this software chain is dramatically overlooked today, as many recent incidents demonstrate. Existing defenses provide piecemeal solutions to individual problems and, when combined, do not provide end-to-end guarantees. \r\n \r\nThis project seeks to transition into widespread practical use a system called \"in-toto\", which provides insights and end-to-end guarantees about the software supply chain. in-toto protects software from the moment it is written by a developer and ensures that the chain of trust can be followed all the way to the software that gets installed on user devices. In-toto generates cryptographically signed metadata for each step in the chain, and links together and carries these metadata throughout the entire chain.\r\n \r\nThe salient positive impact comes from making the software development process transparent and publicly verifiable. in-toto provides a natural way to make the code review and testing practices publicly visible, thus incentivizing developers to follow safe software practices.  Through ongoing and future collaborations, in-toto is being integrated into several large software projects that will positively impact millions of computers.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Reza",
   "pi_last_name": "Curtmola",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Reza Curtmola",
   "pi_email_addr": "crix@njit.edu",
   "nsf_id": "000520913",
   "pi_start_date": "2018-07-03",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "New Jersey Institute of Technology",
  "inst_street_address": "323 DR MARTIN LUTHER KING JR BLVD",
  "inst_street_address_2": "",
  "inst_city_name": "NEWARK",
  "inst_state_code": "NJ",
  "inst_state_name": "New Jersey",
  "inst_phone_num": "9735965275",
  "inst_zip_code": "071021824",
  "inst_country_name": "United States",
  "cong_dist_code": "10",
  "st_cong_dist_code": "NJ10",
  "org_lgl_bus_name": "NEW JERSEY INSTITUTE OF TECHNOLOGY",
  "org_prnt_uei_num": "",
  "org_uei_num": "SGBMHQ7VXNH5"
 },
 "perf_inst": {
  "perf_inst_name": "New Jersey Institute of Technology",
  "perf_str_addr": "University Heights",
  "perf_city_name": "Newark",
  "perf_st_code": "NJ",
  "perf_st_name": "New Jersey",
  "perf_zip_code": "071021982",
  "perf_ctry_code": "US",
  "perf_cong_dist": "10",
  "perf_st_cong_dist": "NJ10",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  },
  {
   "pgm_ref_code": "9178",
   "pgm_ref_txt": "UNDERGRADUATE EDUCATION"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 465676.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-4cf7b3d6-7fff-81c8-76a7-e4e9b4f06f17\"> <span id=\"docs-internal-guid-4cf7b3d6-7fff-81c8-76a7-e4e9b4f06f17\"> </span></span></p>\n<p dir=\"ltr\"><span>The main goal of this project is to transition a system, in-toto, that provides end-to-end guarantees about the software supply chain into widespread practical use. in-toto protects software from the moment it is written by a developer and ensures that the chain of trust can be followed all the way to the software that gets installed on user devices. in-toto generates cryptographically signed metadata for each step in the chain, and links together and carries these metadata throughout the entire chain. in-toto attests to the integrity and verifiability of all the actions performed while writing code, compiling, testing, and deploying software. It does so by making it transparent to the user what steps were performed, by whom and in what order. As a result, given guidance by the group creating the software, in-toto allows the end user to verify if a step in the supply chain was intended to be performed, if the step was performed by the right actor, and attests that inputs to steps (e.g., source code) were not tampered with between steps. Furthermore, in-toto provides a natural way to make the code review and testing practices publicly visible, which incentivizes developers to follow safe software development practices.</span></p>\n<p dir=\"ltr\"><span>&nbsp;</span>In addition, we have improved the security of popular tools throughout the software supply chain. The goal of this effort is twofold. First, we aim to resolve security issues in their design to improve the security of all users, whether they use in-toto or not. Second, we have leveraged these interactions to further the in-toto adoption across a wider array of projects.</p>\n<p dir=\"ltr\"><span>The outcomes of this project are:</span></p>\n<p dir=\"ltr\"><strong>1) Through integration into several large software projects / companies and outreach efforts, in-toto has improved the security of millions of users:</strong></p>\n<ul>\n<li><span id=\"docs-internal-guid-4cf7b3d6-7fff-81c8-76a7-e4e9b4f06f17\"><span id=\"docs-internal-guid-4cf7b3d6-7fff-81c8-76a7-e4e9b4f06f17\">in-toto has been integrated into several large-scale software projects, including: Debian Linux, Arch Linux, Datadog, ControlPlane, Grafeas, Microsoft, SPDX, SPIRE, Claire, Sigstore, SolarWinds, Jenkins, Kubesec, and Reproducible Builds.</span></span></li>\n<li><span id=\"docs-internal-guid-4cf7b3d6-7fff-81c8-76a7-e4e9b4f06f17\"><span id=\"docs-internal-guid-4cf7b3d6-7fff-81c8-76a7-e4e9b4f06f17\">in-toto was adopted as a Linux Foundation project (under Cloud Native Computing Foundation). As of March 2022, in-toto has moved to the ?incubation? maturity level.</span></span></li>\n<li><span id=\"docs-internal-guid-4cf7b3d6-7fff-81c8-76a7-e4e9b4f06f17\"><span id=\"docs-internal-guid-4cf7b3d6-7fff-81c8-76a7-e4e9b4f06f17\">in-toto has a stable and growing community. There is an in-toto community meeting held on a monthly basis, with participants from industry, open source community, and academia, including Google, Intel, VMWare, MITRE, Datadog, Arch Linux, SPDX, and SolarWinds.</span></span></li>\n<li><span id=\"docs-internal-guid-4cf7b3d6-7fff-81c8-76a7-e4e9b4f06f17\"><span id=\"docs-internal-guid-4cf7b3d6-7fff-81c8-76a7-e4e9b4f06f17\">As part of our outreach efforts, we targeted relevant software development communities through presentations at large events such as DockerCon, KubeCon, KubeCon Europe, DebianConf, CloudNativeCon Europe, and the academic community through presentations at top security conferences (USENIX Security Symposium).</span></span></li>\n<li><span id=\"docs-internal-guid-4cf7b3d6-7fff-81c8-76a7-e4e9b4f06f17\"><span id=\"docs-internal-guid-4cf7b3d6-7fff-81c8-76a7-e4e9b4f06f17\">Following the unraveling of the SolarWinds attack in December 2020, we have actively engaged in outreach efforts to media, industry and government to bring the in-toto project in focus as a potential framework to strengthen software supply chain security. For example, in-toto was mentioned in Microsoft?s president Brad Smith testimony to the U.S. Congress (Feb 26, 2021). As a result of our continuous outreach efforts, in-toto is on the radar of several government and standardization bodies.</span></span></li>\n<li><span id=\"docs-internal-guid-4cf7b3d6-7fff-81c8-76a7-e4e9b4f06f17\"><span id=\"docs-internal-guid-4cf7b3d6-7fff-81c8-76a7-e4e9b4f06f17\">The project website is hosted at: <a href=\"https://in-toto.io/\">https://in-toto.io/</a></span></span></li>\n</ul>\n<p dir=\"ltr\"><strong>2) Improving the security of web-based Git repositories:</strong></p>\n<p dir=\"ltr\"><span>We have shown a range of high-impact attacks that can be executed stealthily when developers use the webUI of popular Git hosting services such as GitHub and GitLab. To address these, we have proposed le-git-imate, a defense against these attacks which provides security guarantees comparable and compatible with Git?s standard commit signing mechanism. This enables users to take advantage of GitHub/GitLab?s web-based features without sacrificing security, thus paving the way towards verifiable web-based Git repositories.</span></p>\n<p dir=\"ltr\"><strong>3) Improving the security of code review systems:</strong></p>\n<p dir=\"ltr\"><span>Code review systems are an important and necessary component in any software development chain.Unfortunately, their security is under-studied and under-developed. We show several high-impact attacks that can be executed stealthily when developers use the web UI of code review systems such as GitHub and Gerrit. To address these, we have proposed SafeReview, a mechanism that adds verifiability to web-based code review systems. With SafeReview in place, auditors can validate the integrity of the code review process.</span></p>\n<p dir=\"ltr\"><strong>4) Improving the security of centralized version control systems:</strong></p>\n<p dir=\"ltr\"><span>We have designed the first commit signing mechanism for centralized version control systems (VCS-es), which supports features such as working with a subset of the repository and allowing clients to work on disjoint sets of files without having to retrieve each other?s changes. We have implemented a prototype for the proposed commitsigning mechanism on top of the SVN codebase and show experimentally that it only incurs a modest overhead. With our solution in place, the security model of VCS-es such as the well-known Apache Subversion (SVN) is substantially improved.</span></p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 08/07/2022<br>\n\t\t\t\t\tModified by: Reza&nbsp;Curtmola</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n  \nThe main goal of this project is to transition a system, in-toto, that provides end-to-end guarantees about the software supply chain into widespread practical use. in-toto protects software from the moment it is written by a developer and ensures that the chain of trust can be followed all the way to the software that gets installed on user devices. in-toto generates cryptographically signed metadata for each step in the chain, and links together and carries these metadata throughout the entire chain. in-toto attests to the integrity and verifiability of all the actions performed while writing code, compiling, testing, and deploying software. It does so by making it transparent to the user what steps were performed, by whom and in what order. As a result, given guidance by the group creating the software, in-toto allows the end user to verify if a step in the supply chain was intended to be performed, if the step was performed by the right actor, and attests that inputs to steps (e.g., source code) were not tampered with between steps. Furthermore, in-toto provides a natural way to make the code review and testing practices publicly visible, which incentivizes developers to follow safe software development practices.\n In addition, we have improved the security of popular tools throughout the software supply chain. The goal of this effort is twofold. First, we aim to resolve security issues in their design to improve the security of all users, whether they use in-toto or not. Second, we have leveraged these interactions to further the in-toto adoption across a wider array of projects.\nThe outcomes of this project are:\n1) Through integration into several large software projects / companies and outreach efforts, in-toto has improved the security of millions of users:\n\nin-toto has been integrated into several large-scale software projects, including: Debian Linux, Arch Linux, Datadog, ControlPlane, Grafeas, Microsoft, SPDX, SPIRE, Claire, Sigstore, SolarWinds, Jenkins, Kubesec, and Reproducible Builds.\nin-toto was adopted as a Linux Foundation project (under Cloud Native Computing Foundation). As of March 2022, in-toto has moved to the ?incubation? maturity level.\nin-toto has a stable and growing community. There is an in-toto community meeting held on a monthly basis, with participants from industry, open source community, and academia, including Google, Intel, VMWare, MITRE, Datadog, Arch Linux, SPDX, and SolarWinds.\nAs part of our outreach efforts, we targeted relevant software development communities through presentations at large events such as DockerCon, KubeCon, KubeCon Europe, DebianConf, CloudNativeCon Europe, and the academic community through presentations at top security conferences (USENIX Security Symposium).\nFollowing the unraveling of the SolarWinds attack in December 2020, we have actively engaged in outreach efforts to media, industry and government to bring the in-toto project in focus as a potential framework to strengthen software supply chain security. For example, in-toto was mentioned in Microsoft?s president Brad Smith testimony to the U.S. Congress (Feb 26, 2021). As a result of our continuous outreach efforts, in-toto is on the radar of several government and standardization bodies.\nThe project website is hosted at: https://in-toto.io/\n\n2) Improving the security of web-based Git repositories:\nWe have shown a range of high-impact attacks that can be executed stealthily when developers use the webUI of popular Git hosting services such as GitHub and GitLab. To address these, we have proposed le-git-imate, a defense against these attacks which provides security guarantees comparable and compatible with Git?s standard commit signing mechanism. This enables users to take advantage of GitHub/GitLab?s web-based features without sacrificing security, thus paving the way towards verifiable web-based Git repositories.\n3) Improving the security of code review systems:\nCode review systems are an important and necessary component in any software development chain.Unfortunately, their security is under-studied and under-developed. We show several high-impact attacks that can be executed stealthily when developers use the web UI of code review systems such as GitHub and Gerrit. To address these, we have proposed SafeReview, a mechanism that adds verifiability to web-based code review systems. With SafeReview in place, auditors can validate the integrity of the code review process.\n4) Improving the security of centralized version control systems:\nWe have designed the first commit signing mechanism for centralized version control systems (VCS-es), which supports features such as working with a subset of the repository and allowing clients to work on disjoint sets of files without having to retrieve each other?s changes. We have implemented a prototype for the proposed commitsigning mechanism on top of the SVN codebase and show experimentally that it only incurs a modest overhead. With our solution in place, the security model of VCS-es such as the well-known Apache Subversion (SVN) is substantially improved.\n\n \n\n\t\t\t\t\tLast Modified: 08/07/2022\n\n\t\t\t\t\tSubmitted by: Reza Curtmola"
 }
}