{
 "awd_id": "1618756",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Collaborative Research: Online Verification-Validation",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2016-09-01",
 "awd_exp_date": "2019-08-31",
 "tot_intn_awd_amt": 140009.0,
 "awd_amount": 156009.0,
 "awd_min_amd_letter_date": "2016-05-13",
 "awd_max_amd_letter_date": "2018-04-23",
 "awd_abstract_narration": "Increasingly, modern software on the web is richly extensible, accelerating its evolution and dramatically reducing the time between development and deployment.  The intellectual merit of this research consists of challenging the false choice between creating software that is extensible (easy to reuse and extend) and software that is correct (meets its specifications). The new approach advanced by this work, Incremental Verification-Validation, enables programmers to bring domain-specific safely disciplines to extensible systems, by providing a framework where these disciplines are communicated both precisely and usefully, as executable code.  The project's broader significance and importance consist in changing the way programmers approach building correct extensible software for the web. The research targets ECMAScript (JavaScript), enabling this research to have a direct impact on the vast number of languages and systems that create and use JavaScript.  Further, the project represents a new collaboration across the University of Colorado and University of Maryland, bringing together experts across verification, incremental computing, and runtime systems. Finally, this project benefits the graduate and undergraduate teaching mission at the participating universities, as aspects of the project enriches the program analysis and programming language courses.\r\n\r\nIncremental Verification-Validation encourages programmers to co-design their systems with executable specifications that check these systems dynamically, as they execute. Moreover, unlike typical assertions, which execute dynamically and non-incrementally, the proposed  are subject to novel patterns that enhance their performance: In regressive validation, verification partially discharges some checks, dynamically rewriting the program with residual versions; in progressive verification, online verification occurs in passes that each cache and reuse work, to avoid from-scratch verification of facts that still hold from earlier passes. Finally, to avoid forcing analysis programmers to reason about incremental changes explicitly in each analysis that they create, the meta layer expresses incremental computations implicitly, using an implicitly-incremental meta language whose abstractions hide reasoning on a per-change basis.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "David",
   "pi_last_name": "Van Horn",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "David Van Horn",
   "pi_email_addr": "dvanhorn@cs.umd.edu",
   "nsf_id": "000572933",
   "pi_start_date": "2016-05-13",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Maryland, College Park",
  "inst_street_address": "3112 LEE BUILDING",
  "inst_street_address_2": "",
  "inst_city_name": "COLLEGE PARK",
  "inst_state_code": "MD",
  "inst_state_name": "Maryland",
  "inst_phone_num": "3014056269",
  "inst_zip_code": "207425100",
  "inst_country_name": "United States",
  "cong_dist_code": "04",
  "st_cong_dist_code": "MD04",
  "org_lgl_bus_name": "UNIVERSITY OF MARYLAND, COLLEGE PARK",
  "org_prnt_uei_num": "NPU8ULVAAS23",
  "org_uei_num": "NPU8ULVAAS23"
 },
 "perf_inst": {
  "perf_inst_name": "University of Maryland College Park",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "MD",
  "perf_st_name": "Maryland",
  "perf_zip_code": "207425141",
  "perf_ctry_code": "US",
  "perf_cong_dist": "04",
  "perf_st_cong_dist": "MD04",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7798",
   "pgm_ref_txt": "SOFTWARE & HARDWARE FOUNDATION"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 140009.0
  },
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 16000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Increasingly, modern software on the web is richly extensible,  accelerating its evolution and dramatically reducing the time between  development and deployment. The intellectual merit of this research  consists of challenging the false choice between creating software that  is extensible (easy to reuse and extend) and software that is correct  (meets its specifications). The new approach developed in this project,  Incremental Verification-Validation, has made it possible for programmers to bring  domain-specific safety disciplines to extensible systems by providing a  framework where these disciplines are communicated both precisely and  usefully, as executable code. The project's broader significance and  importance have had impact on changing the way programmers approach building  correct extensible software for the web. Incremental  Verification-Validation encourages programmers to co-design their  systems with executable specifications that check these systems  dynamically, as they execute. Moreover, unlike typical assertions, which  execute dynamically and non-incrementally, the mechanism developed in this project are subject to  novel patterns that enhance their performance: In regressive validation,  verification partially discharges some checks, dynamically rewriting  the program with residual versions; in progressive verification, online  verification occurs in passes that each cache and reuse work, to avoid  from-scratch verification of facts that still hold from earlier passes.  Finally, to avoid forcing analysis programmers to reason about  incremental changes explicitly in each analysis that they create, the  meta layer expresses incremental computations implicitly, using an  implicitly-incremental meta language whose abstractions hide reasoning  on a per-change basis.&nbsp; As a whole the project has advanced the state-of-the-art for developing highly reliable and trustworthy software systems.</p>\n<p>This project has lead to a number of publications in top-tier scientific  conferences and journals.&nbsp; The ideas have been broadly disseminated to  the community through conference presentations, video recordings, and  guest lectures.&nbsp; The materials has been incorporated into graduate  courses and course notes.&nbsp; The project has developed several software  artifacts that have been peer-evaluated as part of the artifact  evaluation process now common in programming language and software  engineering publications.&nbsp; These software systems are available as  open-source software projects and archived on the ACM Digital Library.&nbsp;  The project has supported the training of both graduate and  undergraduate researchers who will shape the future theory and practice  of software.&nbsp; Specifically, the project has advanced the start of the  art of run-time analysis methods based on novel run-time architecture  design and has had important practical impact on widely used programming  language concepts such as static analysis and type systems.</p>\n<div class=\"tinyMCEContent\">\n<p>The primary impact on society stem from two efforts of this project:</p>\n<p>1. The technical ideas developed in this project will materially  advance the reliability and trustworthiness of software, which will have  a broad positive effect on society's reliance on software systems.</p>\n<p>2. The graduate and undergraduate researchers trained as part of this  project will contribute positively to their fields over the course of  their careers.</p>\n</div><br>\n<p>\n\t\t\t\t      \tLast Modified: 05/15/2020<br>\n\t\t\t\t\tModified by: David&nbsp;Van Horn</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nIncreasingly, modern software on the web is richly extensible,  accelerating its evolution and dramatically reducing the time between  development and deployment. The intellectual merit of this research  consists of challenging the false choice between creating software that  is extensible (easy to reuse and extend) and software that is correct  (meets its specifications). The new approach developed in this project,  Incremental Verification-Validation, has made it possible for programmers to bring  domain-specific safety disciplines to extensible systems by providing a  framework where these disciplines are communicated both precisely and  usefully, as executable code. The project's broader significance and  importance have had impact on changing the way programmers approach building  correct extensible software for the web. Incremental  Verification-Validation encourages programmers to co-design their  systems with executable specifications that check these systems  dynamically, as they execute. Moreover, unlike typical assertions, which  execute dynamically and non-incrementally, the mechanism developed in this project are subject to  novel patterns that enhance their performance: In regressive validation,  verification partially discharges some checks, dynamically rewriting  the program with residual versions; in progressive verification, online  verification occurs in passes that each cache and reuse work, to avoid  from-scratch verification of facts that still hold from earlier passes.  Finally, to avoid forcing analysis programmers to reason about  incremental changes explicitly in each analysis that they create, the  meta layer expresses incremental computations implicitly, using an  implicitly-incremental meta language whose abstractions hide reasoning  on a per-change basis.  As a whole the project has advanced the state-of-the-art for developing highly reliable and trustworthy software systems.\n\nThis project has lead to a number of publications in top-tier scientific  conferences and journals.  The ideas have been broadly disseminated to  the community through conference presentations, video recordings, and  guest lectures.  The materials has been incorporated into graduate  courses and course notes.  The project has developed several software  artifacts that have been peer-evaluated as part of the artifact  evaluation process now common in programming language and software  engineering publications.  These software systems are available as  open-source software projects and archived on the ACM Digital Library.   The project has supported the training of both graduate and  undergraduate researchers who will shape the future theory and practice  of software.  Specifically, the project has advanced the start of the  art of run-time analysis methods based on novel run-time architecture  design and has had important practical impact on widely used programming  language concepts such as static analysis and type systems.\n\n\nThe primary impact on society stem from two efforts of this project:\n\n1. The technical ideas developed in this project will materially  advance the reliability and trustworthiness of software, which will have  a broad positive effect on society's reliance on software systems.\n\n2. The graduate and undergraduate researchers trained as part of this  project will contribute positively to their fields over the course of  their careers.\n\n\n\t\t\t\t\tLast Modified: 05/15/2020\n\n\t\t\t\t\tSubmitted by: David Van Horn"
 }
}