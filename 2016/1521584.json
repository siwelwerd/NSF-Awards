{
 "awd_id": "1521584",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "Collaborative Research: Expeditions in Computing: The Science of Deep Specification",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2015-12-15",
 "awd_exp_date": "2020-11-30",
 "tot_intn_awd_amt": 1148325.0,
 "awd_amount": 1148325.0,
 "awd_min_amd_letter_date": "2015-12-17",
 "awd_max_amd_letter_date": "2017-07-24",
 "awd_abstract_narration": "In our interconnected world, software bugs and security vulnerabilities pose enormous costs and risks.  The Deep Specification (\"DeepSpec\", deepspec.org) project addresses this problem by showing how to build software that does what it is supposed to do, no less and (just as important) no more: No unintended backdoors that allow hackers in, no bugs that crash your app, your computer, or your car.  \"What the software is supposed to do\" is called its specification.  The DeepSpec project will develop new science, technology, and tools--for specifying what programs should do, for building programs that conform to those specifications, and for verifying that programs do behave exactly as intended.  The key enabling technology for this effort is modern interactive proof assistants, which support rigorous mathematical proofs about complex software artifacts.  Project activities will focus on core software-systems infrastructure such as operating systems, programming-language compilers, and computer chips, with applications such as elections and voting systems, cars, and smartphones.\r\n\r\n\r\nBetter-specified and better-behaved software will benefit us all.  Many high-profile security breaches and low-profile intrusions use software bugs as their entry points.  Building on decades of previous work, DeepSpec will advance methods for specifying and verifying software so they can be used by the software industry.  The project will include workshops and summer schools to bring in industrial collaborators for technology transfer.  But the broader use of specifications in engineering also requires software engineers trained in specification and verification--so DeepSpec has a major component in education: the development of introductory and intermediate curriculum in how to think logically about specifications, how to use specifications in building systems-software components, or how to connect to such components.  The education component includes textbook and on-line course material to be developed at Princeton, Penn, MIT, and Yale, and to be available for use by students and instructors worldwide.  There will also be a summer school to train the teachers who can bring this science to colleges nationwide.\r\n\r\n\r\nAbstraction and modularity underlie all successful hardware and software systems: We build complex artifacts by decomposing them into parts that can be understood separately. Modular decomposition depends crucially on the artful choice of interfaces between pieces. As these interfaces become more expressive, we think of them as specifications of components or layers. Rich specifications based on formal logic are little used in industry today, but a practical platform for working with them will significantly reduce the costs of system implementation and evolution by identifying vulnerabilities, helping programmers understand the behavior of new components, facilitating rigorous change-impact analysis, and supporting maintainable machine-checked verifications that components are correct and fit together correctly.   This Expedition focuses on a particularly rich class of specifications, \"deep specifications.\" These impose strong functional correctness requirements on individual components such that they connect together with rigorous composition theorems. The Expedition's goal is to focus the efforts of the programming languages and formal methods communities on developing and using deep specifications in the large.  Working in a formal proof management system, the project will concentrate particularly on connecting infrastructure components together at specification interfaces: compilers, operating systems, program analysis tools, and processor architectures.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Adam",
   "pi_last_name": "Chlipala",
   "pi_mid_init": "J",
   "pi_sufx_name": "",
   "pi_full_name": "Adam J Chlipala",
   "pi_email_addr": "adamc@csail.mit.edu",
   "nsf_id": "000610723",
   "pi_start_date": "2015-12-17",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Massachusetts Institute of Technology",
  "inst_street_address": "77 MASSACHUSETTS AVE",
  "inst_street_address_2": "",
  "inst_city_name": "CAMBRIDGE",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "6172531000",
  "inst_zip_code": "021394301",
  "inst_country_name": "United States",
  "cong_dist_code": "07",
  "st_cong_dist_code": "MA07",
  "org_lgl_bus_name": "MASSACHUSETTS INSTITUTE OF TECHNOLOGY",
  "org_prnt_uei_num": "E2NYLCDML6V1",
  "org_uei_num": "E2NYLCDML6V1"
 },
 "perf_inst": {
  "perf_inst_name": "Massachusetts Institute of Technology",
  "perf_str_addr": "77 Massachusetts Avenue",
  "perf_city_name": "Cambridge",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "021394307",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "MA07",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "772300",
   "pgm_ele_name": "Expeditions in Computing"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7723",
   "pgm_ref_txt": "EXPERIMENTAL EXPEDITIONS"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 676541.0
  },
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 471784.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Bugs in computer software and hardware are collectively extremely costly to society today.&nbsp; Mathematical techniques for <em>proving</em> correctness of these systems are promising but have not been deployed too widely so far.&nbsp; The NSF Expedition on the Science of Deep Specification studied foundations for more complete and convincing proof of realistic systems.&nbsp; The project name was based on coined terminology of \"deep specification\" to crystallize ideas from the research community -- specifications giving very detailed requirements, with associated evidence that can be checked automatically for complete software-hardware systems.<br /><br />The team across four universities developed new methods for both proving individual parts of systems and connecting those proofs together into full-system results.&nbsp; The individual parts studied included (in order of lower-level pieces to higher-level pieces that build on them) computer processors and other hardware, the C programming language and its compilers, operating systems, code libraries for purposes like networking, and application software like network servers.&nbsp; Cross-cutting approaches for connecting these proofs included the development of <em>interaction trees</em>, a specification formalism for systems that engage in unpredictable input and output with the external world.&nbsp; Specific demonstration systems included a web server with a proof that it implements the associated protocol correctly, where reasoning had to be pushed through the levels of the application, the C programming language, and the operating system.<br /><br />The Expedition also helped prepare the next generations of engineers to apply these ideas, through (as of this writing) two summer schools, serving about 200 students total.&nbsp; The team also extended a number of popular online books presenting the foundational and practical material, which were in turn used in a number of revamped course offerings that introduced mechanized specifications to traditional subjects like compilers and operating systems.<br /><br />Highlights from MIT's contribution include tools for cryptography and hardware.&nbsp; The Fiat Cryptography toolchain was developed, to automate generation of intricate low-level code for cryptographic primitives, with mechanized proof of correctness, replacing painstaking effort previously repeated by experts for each new set of numerical parameters for an algorithm.&nbsp; This toolchain has been adopted by a number of prominent open-source projects, for instance with both the Chrome and Firefox browsers using Fiat Cryptography to generate small but important parts of their implementations for TLS, the protocol driving secure browsing, for instance to hide credit-card information in-transit.&nbsp; The MIT team also improved the Kami framework and introduced the new Koika framework for development of proved hardware designs like computer processors.&nbsp; Koika adds both streamlined tools for developers and the ability to reason about lack of timing side channels, as were highlighted by the relatively recent Spectre and Meltdown attacks and their many follow-ons.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 02/10/2021<br>\n\t\t\t\t\tModified by: Adam&nbsp;J&nbsp;Chlipala</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nBugs in computer software and hardware are collectively extremely costly to society today.  Mathematical techniques for proving correctness of these systems are promising but have not been deployed too widely so far.  The NSF Expedition on the Science of Deep Specification studied foundations for more complete and convincing proof of realistic systems.  The project name was based on coined terminology of \"deep specification\" to crystallize ideas from the research community -- specifications giving very detailed requirements, with associated evidence that can be checked automatically for complete software-hardware systems.\n\nThe team across four universities developed new methods for both proving individual parts of systems and connecting those proofs together into full-system results.  The individual parts studied included (in order of lower-level pieces to higher-level pieces that build on them) computer processors and other hardware, the C programming language and its compilers, operating systems, code libraries for purposes like networking, and application software like network servers.  Cross-cutting approaches for connecting these proofs included the development of interaction trees, a specification formalism for systems that engage in unpredictable input and output with the external world.  Specific demonstration systems included a web server with a proof that it implements the associated protocol correctly, where reasoning had to be pushed through the levels of the application, the C programming language, and the operating system.\n\nThe Expedition also helped prepare the next generations of engineers to apply these ideas, through (as of this writing) two summer schools, serving about 200 students total.  The team also extended a number of popular online books presenting the foundational and practical material, which were in turn used in a number of revamped course offerings that introduced mechanized specifications to traditional subjects like compilers and operating systems.\n\nHighlights from MIT's contribution include tools for cryptography and hardware.  The Fiat Cryptography toolchain was developed, to automate generation of intricate low-level code for cryptographic primitives, with mechanized proof of correctness, replacing painstaking effort previously repeated by experts for each new set of numerical parameters for an algorithm.  This toolchain has been adopted by a number of prominent open-source projects, for instance with both the Chrome and Firefox browsers using Fiat Cryptography to generate small but important parts of their implementations for TLS, the protocol driving secure browsing, for instance to hide credit-card information in-transit.  The MIT team also improved the Kami framework and introduced the new Koika framework for development of proved hardware designs like computer processors.  Koika adds both streamlined tools for developers and the ability to reason about lack of timing side channels, as were highlighted by the relatively recent Spectre and Meltdown attacks and their many follow-ons.\n\n\t\t\t\t\tLast Modified: 02/10/2021\n\n\t\t\t\t\tSubmitted by: Adam J Chlipala"
 }
}