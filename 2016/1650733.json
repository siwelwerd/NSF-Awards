{
 "awd_id": "1650733",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "EAGER: Testing Pseudorandom Distributions",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Tracy Kimbrel",
 "awd_eff_date": "2016-09-01",
 "awd_exp_date": "2018-08-31",
 "tot_intn_awd_amt": 300000.0,
 "awd_amount": 300000.0,
 "awd_min_amd_letter_date": "2016-08-08",
 "awd_max_amd_letter_date": "2016-08-08",
 "awd_abstract_narration": "It is common scientific practice to propose a model which randomly generates combinatorial objects that are intended to be good approximations of data that we see in the real world.  Such models include widely studied random graph models, preferential attachment models and small world networks.  Since these models are in such widespread use, many analytical algorithms have been proposed to work with data assumed to be generated according to them.  This project has the larger goal of giving a methodology for understanding when these hypothesized models accurately describe the actual data.   Unfortunately, it can be shown that for these and other related models, testing that the data comes from such a model requires a tremendous number of samples in the worst case.  This project studies methods of making the problem more tractable by determining whether the models are \"good enough\" descriptions of the data: that is, determining whether the actual data yields the same behavior as the data generated by the models, from the point of view of the analytical algorithms being used.  The PIs will exploit potential computational limitations of the analytical algorithms to expedite the tasks of testing randomness properties of the actual samples.  In technical terms, this project investigates ways of testing the pseudo-randomness of distributions against various specific classes of algorithms and circuits.  Connections to the complexity theoretic concepts of derandomization and circuit lower bounds will be explored.\r\n\r\nThe broader impact of this project includes engagement in Computer Science Unplugged activities for elementary school children, MIT PRIMES mathematical research with high school students, participation in activities for promoting women in research, mentoring and education of young researchers, development of new courses, and dissemination of results through publications, surveys, and public lectures.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Ronitt",
   "pi_last_name": "Rubinfeld",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Ronitt Rubinfeld",
   "pi_email_addr": "ronitt@csail.mit.edu",
   "nsf_id": "000322655",
   "pi_start_date": "2016-08-08",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Constantinos",
   "pi_last_name": "Daskalakis",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Constantinos Daskalakis",
   "pi_email_addr": "costis@csail.mit.edu",
   "nsf_id": "000537704",
   "pi_start_date": "2016-08-08",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Massachusetts Institute of Technology",
  "inst_street_address": "77 MASSACHUSETTS AVE",
  "inst_street_address_2": "",
  "inst_city_name": "CAMBRIDGE",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "6172531000",
  "inst_zip_code": "021394301",
  "inst_country_name": "United States",
  "cong_dist_code": "07",
  "st_cong_dist_code": "MA07",
  "org_lgl_bus_name": "MASSACHUSETTS INSTITUTE OF TECHNOLOGY",
  "org_prnt_uei_num": "E2NYLCDML6V1",
  "org_uei_num": "E2NYLCDML6V1"
 },
 "perf_inst": {
  "perf_inst_name": "Massachusetts Institute of Technology",
  "perf_str_addr": "77 Massachusetts Ave",
  "perf_city_name": "Cambridge",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "021394307",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "MA07",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779600",
   "pgm_ele_name": "Algorithmic Foundations"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7916",
   "pgm_ref_txt": "EAGER"
  },
  {
   "pgm_ref_code": "7926",
   "pgm_ref_txt": "ALGORITHMS"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 300000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>This project investigates the question of how to validate whether or not a source of randomness is \"good enough\" for a particular use.&nbsp;&nbsp; More specifically, it may be known that the randomness source is not uniformly distributed and perhaps has a number of badly-understood dependencies. Nevertheless, the source may be good enough to be used as a&nbsp;source of randomness for a particular class of&nbsp; algorithms -- if this is the<br /> case, we say the source is \"pseudo-random\". This project has investigated the possibility of finding sample-efficient algorithms for testing whether a a given randomness source is \"pseudo-random\". We show a precise sense in which the ability to perform this \"pseudo-randomness testing\" task has an intimate connection with the ability to *find* strings that \"look random\" to a the same class of algorithms. However, we show that for certain sources that have enough randomness in them,&nbsp; and for simple enough classes of algorithms, a number of samples that is sublinear in the domain size is sufficient for determining whether the source is \"pseudo-random\".<br /> <br /> A second direction is to identify and understand questions of a \"converse\"&nbsp; nature to the above -- that is, if a distribution is pseudorandom,&nbsp;then does it necessarily have other properties which are associated with pseudorandomness, such as limited independence? One concrete such question is as follows: Consider a distribution&nbsp;that appears random to all simple computational devices -- such as those described by small depth&nbsp; and small size circuits -- can we conclude that they must have certain types of limited independence properties?&nbsp; &nbsp;If we could make such a conclusion, it would suggest that testing for limited independence would be a good first step in testing pseudorandomness, and conversely that the known lower bounds for testing k-wise independence might yield lower bounds on our pseudorandomness testing problem. However, this project has shown that it is unlikely that all pseudorandom distributions have such limited independence properties.<br /> <br /> Finally, this project considers whether it is possible to generate random graphs in a local \"on-the-fly\" manner -- so that instead of having to first generate the entire graph up front before running algorithms on it, one can just generate the specific parts of the graph that need to be accessed.&nbsp;&nbsp; This project has identified certain important classes of commonly studied random&nbsp; models for which \"on-the-fly\" generation is possible, including the Erdos-Renyi G(n,p) model, the stochastistic block model and certain models of small-world networks.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 02/20/2019<br>\n\t\t\t\t\tModified by: Constantinos&nbsp;Daskalakis</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThis project investigates the question of how to validate whether or not a source of randomness is \"good enough\" for a particular use.   More specifically, it may be known that the randomness source is not uniformly distributed and perhaps has a number of badly-understood dependencies. Nevertheless, the source may be good enough to be used as a source of randomness for a particular class of  algorithms -- if this is the\n case, we say the source is \"pseudo-random\". This project has investigated the possibility of finding sample-efficient algorithms for testing whether a a given randomness source is \"pseudo-random\". We show a precise sense in which the ability to perform this \"pseudo-randomness testing\" task has an intimate connection with the ability to *find* strings that \"look random\" to a the same class of algorithms. However, we show that for certain sources that have enough randomness in them,  and for simple enough classes of algorithms, a number of samples that is sublinear in the domain size is sufficient for determining whether the source is \"pseudo-random\".\n \n A second direction is to identify and understand questions of a \"converse\"  nature to the above -- that is, if a distribution is pseudorandom, then does it necessarily have other properties which are associated with pseudorandomness, such as limited independence? One concrete such question is as follows: Consider a distribution that appears random to all simple computational devices -- such as those described by small depth  and small size circuits -- can we conclude that they must have certain types of limited independence properties?   If we could make such a conclusion, it would suggest that testing for limited independence would be a good first step in testing pseudorandomness, and conversely that the known lower bounds for testing k-wise independence might yield lower bounds on our pseudorandomness testing problem. However, this project has shown that it is unlikely that all pseudorandom distributions have such limited independence properties.\n \n Finally, this project considers whether it is possible to generate random graphs in a local \"on-the-fly\" manner -- so that instead of having to first generate the entire graph up front before running algorithms on it, one can just generate the specific parts of the graph that need to be accessed.   This project has identified certain important classes of commonly studied random  models for which \"on-the-fly\" generation is possible, including the Erdos-Renyi G(n,p) model, the stochastistic block model and certain models of small-world networks.\n\n\t\t\t\t\tLast Modified: 02/20/2019\n\n\t\t\t\t\tSubmitted by: Constantinos Daskalakis"
 }
}