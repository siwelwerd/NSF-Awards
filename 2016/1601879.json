{
 "awd_id": "1601879",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CAREER: Practical Oblivious Computation",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2015-09-01",
 "awd_exp_date": "2021-05-31",
 "tot_intn_awd_amt": 490010.0,
 "awd_amount": 490010.0,
 "awd_min_amd_letter_date": "2015-11-24",
 "awd_max_amd_letter_date": "2019-06-10",
 "awd_abstract_narration": "The explosion of digital data carries a wealth of opportunities. The ability to collect and mine data at scale continues to enable new applications and transform our lives. However, privacy concerns are seen as a major hurdle towards data sharing and analytics. This project develops a practical framework for \"oblivious computation\", which allows general computation over sensitive data, but without disclosing the data. \r\n\r\nThe proposed work takes a combined algorithms and programming language lens. On the programming language side, the proposed work designs friendly programming abstractions that facilitate the compilation of programs into efficient, oblivious representations. On the algorithms side, the proposed work designs efficient oblivious algorithms for a wide characterization of realistic tasks. The resulting framework, ObliVM, allows non-expert developers to write programs much as they do today, and ObliVM automatically generates the corresponding oblivious computation implementation. ObliVM supports several different architectures for implementing oblivious computation, including those based on trusted hardware and those based on cryptographic secure computation. ObliVM offers a unified programming framework such that a developer can write a program irrespective of the backend architecture -- through a universal intermediate representation, this program can be compiled to either a trusted hardware-based or a cryptography-based backend architecture. ObliVM can facilitate the deployment of oblivious computation in real-life scenarios, and allow businesses and individuals to monetize sensitive data without the risk of exposure.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Elaine",
   "pi_last_name": "Shi",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Elaine Shi",
   "pi_email_addr": "runting@cs.cmu.edu",
   "nsf_id": "000624210",
   "pi_start_date": "2015-11-24",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Cornell University",
  "inst_street_address": "341 PINE TREE RD",
  "inst_street_address_2": "",
  "inst_city_name": "ITHACA",
  "inst_state_code": "NY",
  "inst_state_name": "New York",
  "inst_phone_num": "6072555014",
  "inst_zip_code": "148502820",
  "inst_country_name": "United States",
  "cong_dist_code": "19",
  "st_cong_dist_code": "NY19",
  "org_lgl_bus_name": "CORNELL UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "G56PUALJ3KT5"
 },
 "perf_inst": {
  "perf_inst_name": "Cornell University",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "NY",
  "perf_st_name": "New York",
  "perf_zip_code": "148502820",
  "perf_ctry_code": "US",
  "perf_cong_dist": "19",
  "perf_st_cong_dist": "NY19",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "1045",
   "pgm_ref_txt": "CAREER-Faculty Erly Career Dev"
  },
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "9102",
   "pgm_ref_txt": "WOMEN, MINORITY, DISABLED, NEC"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 97645.0
  },
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 94489.0
  },
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 96188.0
  },
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 99255.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 102433.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>We solved the biggest open question in the oblivious computation line of work, which had been open for 30+ years. We came up with an optimal ORAM scheme called OptORAMa. It matched the long-known logarithmic lower bound on ORAM first shown by Goldreich and Ostrovsky.</p>\n<p><br />We designed, built, and open sourced the ObliVM framework, a programming framework for oblivious computation. In ObliVM, a non-expert programmer can use our source language to express a computation task, without having to understand obliviousness. Our optimizing compiler will compile the program to an oblivious format that is suitable for secure two-party computation. Our source code is available at http://oblivm.com/</p>\n<p><br />We initiated the study of data-oblivious computation for prevalent parallel computing architectures widely adopted today, including the Massively Parallel Computation framework (e.g., MapReduce, Spark), and multicore secure processors (e.g., Intel SGX with hyperthreading). In a couple of recent works, we showed that obliviousness can come for free or with very little overhead in common cases in these parallel computing frameworks.&nbsp;</p>\n<p><br />We further studied oblivious algorithms. For example, we designed a new and extremely simple oblivious priority queue algorithm. The source code is available at https://github.com/obliviousram/PathOHeap.</p>\n<p><br />We developed relaxations of the obliviousness notion. Specifically, we proposed a new notion of differential obliviousness. We systematically explored this new notion, and showed that in various applications, this relaxed notion can offer privacy at bare minimum overhead, and can allow us to circumvent some of the lower bounds pertaining to full obliviousness.</p>\n<p><br />We observed an intriguigng connection between optimal ORAM and sorting circuits for short keys. We discovered new upper- and lower- bounds that advanced the state of our understanding regarding the complexity of sorting circuits.</p>\n<p>&nbsp;</p>\n<p>The project has provided training opportunities to undergraduate, master, and Ph.D. students, as well as post-doctoral researchers.&nbsp;</p>\n<p>Our work has built a bridge between several communities, including algorithms, cryptography, architecture, security, systems, and formal methods. Our work has had impact in these various fields of computer science.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 06/06/2021<br>\n\t\t\t\t\tModified by: Elaine&nbsp;Shi</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nWe solved the biggest open question in the oblivious computation line of work, which had been open for 30+ years. We came up with an optimal ORAM scheme called OptORAMa. It matched the long-known logarithmic lower bound on ORAM first shown by Goldreich and Ostrovsky.\n\n\nWe designed, built, and open sourced the ObliVM framework, a programming framework for oblivious computation. In ObliVM, a non-expert programmer can use our source language to express a computation task, without having to understand obliviousness. Our optimizing compiler will compile the program to an oblivious format that is suitable for secure two-party computation. Our source code is available at http://oblivm.com/\n\n\nWe initiated the study of data-oblivious computation for prevalent parallel computing architectures widely adopted today, including the Massively Parallel Computation framework (e.g., MapReduce, Spark), and multicore secure processors (e.g., Intel SGX with hyperthreading). In a couple of recent works, we showed that obliviousness can come for free or with very little overhead in common cases in these parallel computing frameworks. \n\n\nWe further studied oblivious algorithms. For example, we designed a new and extremely simple oblivious priority queue algorithm. The source code is available at https://github.com/obliviousram/PathOHeap.\n\n\nWe developed relaxations of the obliviousness notion. Specifically, we proposed a new notion of differential obliviousness. We systematically explored this new notion, and showed that in various applications, this relaxed notion can offer privacy at bare minimum overhead, and can allow us to circumvent some of the lower bounds pertaining to full obliviousness.\n\n\nWe observed an intriguigng connection between optimal ORAM and sorting circuits for short keys. We discovered new upper- and lower- bounds that advanced the state of our understanding regarding the complexity of sorting circuits.\n\n \n\nThe project has provided training opportunities to undergraduate, master, and Ph.D. students, as well as post-doctoral researchers. \n\nOur work has built a bridge between several communities, including algorithms, cryptography, architecture, security, systems, and formal methods. Our work has had impact in these various fields of computer science.\n\n\t\t\t\t\tLast Modified: 06/06/2021\n\n\t\t\t\t\tSubmitted by: Elaine Shi"
 }
}