{
 "awd_id": "1644285",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: RUI: Characterizing, Detecting, and Fixing Performance Bugs That Have Non-Intrusive Fixes",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2016-06-01",
 "awd_exp_date": "2020-06-30",
 "tot_intn_awd_amt": 217415.0,
 "awd_amount": 217415.0,
 "awd_min_amd_letter_date": "2016-06-28",
 "awd_max_amd_letter_date": "2018-10-16",
 "awd_abstract_narration": "Software performance is critical for the success of a software\r\nproject.  Performance bugs are programming errors that slow down\r\nexecution.  Many recent techniques have been proposed to detect\r\nvarious performance bugs.  However, there are still many performance\r\nbugs that cannot be detected by existing techniques.  Furthermore, a\r\ncrucial and practical aspect of performance bugs has not received the\r\nattention it deserves: How likely are developers to fix a detected\r\nperformance bug?\r\n\r\nTo significantly improve software performance, this project will\r\ndevelop a set of novel techniques that focus on a class of performance\r\nbugs that are very likely to be fixed by developers, specifically on\r\nperformance bugs that have non-intrusive fixes.  Performance bugs that\r\nhave non-intrusive fixes are very likely to be fixed by developers\r\nbecause the benefits of the fix (i.e., code speedup) clearly outweigh\r\nthe drawbacks of the fix (e.g., introducing new correctness bugs,\r\nbreaking good software engineering practices, development time and\r\neffort, etc).  This project will address three fundamental challenges:\r\n(1) What performance bugs have non-intrusive fixes and what are their\r\ndefining characteristics?  (2) How to automatically detect performance\r\nbugs and how to establish that their fixes will be non-intrusive?  (3)\r\nHow to automatically fix some of the detected performance bugs?  This\r\nwork will broaden our understanding of an understudied yet important\r\naspect of software performance and will provide automated solutions to\r\nimprove software performance.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Sonia",
   "pi_last_name": "Haiduc",
   "pi_mid_init": "C",
   "pi_sufx_name": "",
   "pi_full_name": "Sonia C Haiduc",
   "pi_email_addr": "shaiduc@cs.fsu.edu",
   "nsf_id": "000662623",
   "pi_start_date": "2018-10-16",
   "pi_end_date": null
  },
  {
   "pi_role": "Former Principal Investigator",
   "pi_first_name": "Adrian",
   "pi_last_name": "Nistor",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Adrian Nistor",
   "pi_email_addr": "nistor@cs.fsu.edu",
   "nsf_id": "000677954",
   "pi_start_date": "2016-06-28",
   "pi_end_date": "2018-10-16"
  }
 ],
 "inst": {
  "inst_name": "Florida State University",
  "inst_street_address": "874 TRADITIONS WAY",
  "inst_street_address_2": "",
  "inst_city_name": "TALLAHASSEE",
  "inst_state_code": "FL",
  "inst_state_name": "Florida",
  "inst_phone_num": "8506445260",
  "inst_zip_code": "323060001",
  "inst_country_name": "United States",
  "cong_dist_code": "02",
  "st_cong_dist_code": "FL02",
  "org_lgl_bus_name": "FLORIDA STATE UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "JF2BLNN4PJC3"
 },
 "perf_inst": {
  "perf_inst_name": "Florida State University",
  "perf_str_addr": "874 Traditions Way",
  "perf_city_name": "TALLAHASSEE",
  "perf_st_code": "FL",
  "perf_st_name": "Florida",
  "perf_zip_code": "323064166",
  "perf_ctry_code": "US",
  "perf_cong_dist": "02",
  "perf_st_cong_dist": "FL02",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 217415.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Software has become essential for almost every area of our modern lives. Therefore, the success of software systems is extremely important not only for software engineers, but also for society at large. Software performance is critical for the success of a software project. Performance bugs are programming errors or choices that slow down execution. Performance bugs affect the user-perceived software quality. Even expert programmers introduce performance bugs, which caused many high-profile incidents. Even well-tested commercial products such as Internet Explorer, Microsoft SQLServer, Visual Studio, and Acrobat Reader are affected by performance bugs.</p>\n<p>Many recent techniques were proposed to detect various performance bugs. However, there are still many performance bugs that cannot be detected by existing techniques. Furthermore, a crucial and practical aspect of performance bugs has not received the attention it deserves: How likely are developers to fix a detected performance bug?</p>\n<p>In practice, when developers decide if they should fix a performance bug, developers face a difficult choice between the potential drawbacks and the potential benefits of the fix. Drawbacks include: introducing severe correctness bugs, breaking good software engineering practices, spending development time/effort/budget, and slowing down other code. The benefit is code speedup, but unfortunately the exact speedup---and thus the magnitude of the benefit---is difficult to assess. In practice, developers fix performance bugs when the benefits outweigh the drawbacks. Specifically, developers are very likely to fix performance bugs that have simple and non-intrusive fixes. For this type of performance bugs, the choice between benefits and drawbacks is made easy for developers: because the fixes are simple and non-intrusive, fixing the bugs brings only benefits.</p>\n<p>To significantly improve software performance, this project proposed to investigate performance bugs that have non-intrusive fixes. The project started by investigating a set of performance bugs found in open source software systems in order to understand the nature of existing performance bugs and to identify types of performance bugs with potential non-intrusive fixes. During this activity, it was observed that some performance bugs can be caused by poor choices of programming language constructs, such as the type of loops and list-like structures used in a program. While these loops and list structures perform similar functionality and a software developer can use any of them almost interchangeably to perform a specific task, their performance footprint can be different.</p>\n<p>In order to investigate this further, the project continued by performing a large-scale evaluation on the impact of the choice of loops and list-like structures on the performance of programs written in three programming languages (C++, C#, and Python). The results unveiled that there is a significant difference between the performance of some of the programming structures studied, which can lead to noticeable performance delays in the software execution when inefficient loops and data structures are used. Therefore, the grant led to the discovery of a type of performance bugs that can be easily detected and fixed using non-intrusive fixes. This can lead to performance improvements in many software systems in existence, leading to overall better performing software in society.&nbsp;</p>\n<p class=\"Default\">During the duration of the grant, four graduate students worked on topics related to this project under the direct advising of the PI and two of them were from underrepresented groups (Hispanic/Latino). This grant contributed to the training and professional development of the supported graduate students, by allowing the students to learn various aspects of performing research in software engineering, such as performing literature surveys, collecting data, formulating hypotheses, performing empirical studies to test these hypotheses, and drafting research manuscripts.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 09/29/2020<br>\n\t\t\t\t\tModified by: Sonia&nbsp;C&nbsp;Haiduc</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nSoftware has become essential for almost every area of our modern lives. Therefore, the success of software systems is extremely important not only for software engineers, but also for society at large. Software performance is critical for the success of a software project. Performance bugs are programming errors or choices that slow down execution. Performance bugs affect the user-perceived software quality. Even expert programmers introduce performance bugs, which caused many high-profile incidents. Even well-tested commercial products such as Internet Explorer, Microsoft SQLServer, Visual Studio, and Acrobat Reader are affected by performance bugs.\n\nMany recent techniques were proposed to detect various performance bugs. However, there are still many performance bugs that cannot be detected by existing techniques. Furthermore, a crucial and practical aspect of performance bugs has not received the attention it deserves: How likely are developers to fix a detected performance bug?\n\nIn practice, when developers decide if they should fix a performance bug, developers face a difficult choice between the potential drawbacks and the potential benefits of the fix. Drawbacks include: introducing severe correctness bugs, breaking good software engineering practices, spending development time/effort/budget, and slowing down other code. The benefit is code speedup, but unfortunately the exact speedup---and thus the magnitude of the benefit---is difficult to assess. In practice, developers fix performance bugs when the benefits outweigh the drawbacks. Specifically, developers are very likely to fix performance bugs that have simple and non-intrusive fixes. For this type of performance bugs, the choice between benefits and drawbacks is made easy for developers: because the fixes are simple and non-intrusive, fixing the bugs brings only benefits.\n\nTo significantly improve software performance, this project proposed to investigate performance bugs that have non-intrusive fixes. The project started by investigating a set of performance bugs found in open source software systems in order to understand the nature of existing performance bugs and to identify types of performance bugs with potential non-intrusive fixes. During this activity, it was observed that some performance bugs can be caused by poor choices of programming language constructs, such as the type of loops and list-like structures used in a program. While these loops and list structures perform similar functionality and a software developer can use any of them almost interchangeably to perform a specific task, their performance footprint can be different.\n\nIn order to investigate this further, the project continued by performing a large-scale evaluation on the impact of the choice of loops and list-like structures on the performance of programs written in three programming languages (C++, C#, and Python). The results unveiled that there is a significant difference between the performance of some of the programming structures studied, which can lead to noticeable performance delays in the software execution when inefficient loops and data structures are used. Therefore, the grant led to the discovery of a type of performance bugs that can be easily detected and fixed using non-intrusive fixes. This can lead to performance improvements in many software systems in existence, leading to overall better performing software in society. \nDuring the duration of the grant, four graduate students worked on topics related to this project under the direct advising of the PI and two of them were from underrepresented groups (Hispanic/Latino). This grant contributed to the training and professional development of the supported graduate students, by allowing the students to learn various aspects of performing research in software engineering, such as performing literature surveys, collecting data, formulating hypotheses, performing empirical studies to test these hypotheses, and drafting research manuscripts.\n\n\t\t\t\t\tLast Modified: 09/29/2020\n\n\t\t\t\t\tSubmitted by: Sonia C Haiduc"
 }
}