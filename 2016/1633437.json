{
 "awd_id": "1633437",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "BIGDATA: Collaborative Research: IA: OSCAR - Open Source Supply Chains and Avoidance of Risk: An Evidence Based Approach to Improve FLOSS Supply Chains",
 "cfda_num": "47.070",
 "org_code": "05020000",
 "po_phone": "7032927498",
 "po_email": "achtchel@nsf.gov",
 "po_sign_block_name": "Almadena Chtchelkanova",
 "awd_eff_date": "2016-09-01",
 "awd_exp_date": "2021-08-31",
 "tot_intn_awd_amt": 1300000.0,
 "awd_amount": 1300000.0,
 "awd_min_amd_letter_date": "2016-09-20",
 "awd_max_amd_letter_date": "2016-09-20",
 "awd_abstract_narration": "Open source software is an engine for innovation and a critical infrastructure for the nation and yet it is implemented by communities formed from a loose collection of individuals. With each software project relying on thousands of other software projects, this complex and dynamic supply chain introduces new risks and unpredictability, since, unlike in traditional software projects, no contractual relationships with the community exist and individuals could simply lose interest or move on to other activities.\r\nThe big data-based approach to software supply chains will stimulate academic and practical work. The tools and practices to quantify and mitigate risks in the rapidly changing global environment with no centralized control or authority will lead to dramatic reductions in risk manifested in, for example, the spread of vulnerabilities thus making the nation both safer and more innovative. The theoretical frameworks and approaches developed will likely influence research and practice in other supply chain contexts.\r\n\r\nThe objective of this research is to advance the state of knowledge of software supply chains by collecting and integrating massive public operational data representing development activity and source code from all open source projects and using it to develop novel theories, methods, and tools.   The construction and analysis of the entire open source supply chain provides static and dynamic properties of the network, risk propagation, and system-level risks.  Novel statistical and game-theoretic models are used to assess and mitigate these risks, while methods to contextualize, augment, and correct operational data provide ways to cope with data?s size, complexity, and observational nature.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "IIS",
 "org_div_long_name": "Division of Information & Intelligent Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Audris",
   "pi_last_name": "Mockus",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Audris Mockus",
   "pi_email_addr": "audris@utk.edu",
   "nsf_id": "000210658",
   "pi_start_date": "2016-09-20",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Russell",
   "pi_last_name": "Zaretzki",
   "pi_mid_init": "L",
   "pi_sufx_name": "",
   "pi_full_name": "Russell L Zaretzki",
   "pi_email_addr": "rzaretzk@utk.edu",
   "nsf_id": "000508296",
   "pi_start_date": "2016-09-20",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Bogdan",
   "pi_last_name": "Bichescu",
   "pi_mid_init": "C",
   "pi_sufx_name": "",
   "pi_full_name": "Bogdan C Bichescu",
   "pi_email_addr": "bbichescu@utk.edu",
   "nsf_id": "000717955",
   "pi_start_date": "2016-09-20",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Randy",
   "pi_last_name": "Bradley",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Randy  Bradley",
   "pi_email_addr": "rbradley@utk.edu\t",
   "nsf_id": "000717957",
   "pi_start_date": "2016-09-20",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Tennessee Knoxville",
  "inst_street_address": "201 ANDY HOLT TOWER",
  "inst_street_address_2": "",
  "inst_city_name": "KNOXVILLE",
  "inst_state_code": "TN",
  "inst_state_name": "Tennessee",
  "inst_phone_num": "8659743466",
  "inst_zip_code": "379960001",
  "inst_country_name": "United States",
  "cong_dist_code": "02",
  "st_cong_dist_code": "TN02",
  "org_lgl_bus_name": "UNIVERSITY OF TENNESSEE",
  "org_prnt_uei_num": "LXG4F9K8YZK5",
  "org_uei_num": "FN2YCS2YAUW3"
 },
 "perf_inst": {
  "perf_inst_name": "The University of Tennessee",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "TN",
  "perf_st_name": "Tennessee",
  "perf_zip_code": "379960003",
  "perf_ctry_code": "US",
  "perf_cong_dist": "02",
  "perf_st_cong_dist": "TN02",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "808300",
   "pgm_ele_name": "Big Data Science &Engineering"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7433",
   "pgm_ref_txt": "CyberInfra Frmwrk 21st (CIF21)"
  },
  {
   "pgm_ref_code": "8083",
   "pgm_ref_txt": "Big Data Science &Engineering"
  },
  {
   "pgm_ref_code": "9150",
   "pgm_ref_txt": "EXP PROG TO STIM COMP RES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 1300000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Software supply chains (SSCs) allow the reuse of existing software assets but also pose major risks (e.g., SolarWind, HartBleed) as software is created and maintained by independent projects. Unlike the traditional supply chains, SSCs are not well understood or studied, especially the SSC for open source software (OSS) which is the critical part of most SSCs.&nbsp;&nbsp;</span></p>\n<p><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">The aim of this project was to help understand the source code SSCs for OSS, quantify the risks such SSCs pose, and to design ways to mitigate these risks. We first had to collect and curate a complete multi-petabyte data concerning all the nodes and links of the OSS supply chain distributed over hundreds of millions of software repositories. Without a nearly complete collection it was not possible to determine key attributes of an SSC: number of downstream projects, the provenance of a particular file, or activities of a developer.&nbsp;</span></p>\n<p><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">We designed and implementated a big data system we refer to as World of Code (WoC) to create computational infrastructure for cleaning, augmentation, cross-referencing, and other types of curation necessary to make this massive data collection suitable for reconstructing the nodes and links and their associated attributes.</span></p>\n<p><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">We investigated the types of SSCs and discovered three conceptually distinct source code supply chains. The SSCs of the first kind have software components (e.g., libraries or frameworks) as nodes and the dependencies needed to build or run a node representing links. The analog for physical products that flow in traditional SCs is the maintenance effort that is spent in component's upstream or downstream. The SSCs of the second kind represent the flow of the source code among projects resulting from copying the source code from one project to another project. The licensing terms of OSS software typically permit such reuse leading to high prevalence of such SSCs in OSS. The SSCs of the third kind are knowledge transfers embodied in developers' changing the source code. The nodes are developers and source code. The links are modifications by a developer of the source code. Each modification is a knowledge transfer: developers first need to understand the logic of the code they will modify and then to impart their own knowledge in the logic of the implemented change.&nbsp;The SSCs of each kind have unique benefits and risks. For example, the supply chains of the first and second kind tradeoff the future maintenance effort supplied by external entities in the former with a greater control over the exact functionality afforded by the latter.&nbsp; </span></p>\n<p><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Our research made thirteen major discoveries concerning SSC risks. The key risk for SSCs of the first kind is the availability of future maintenance effort. We discovered that the investments in product quality, the diversity of contributors, and the number of downstream nodes increase the vigor of the future maintenance effort and enhance chances of projects' survival. The owners of the immediately downstream projects were the contributors who sustained the upstream project, but they almost never&nbsp; contributed further upstream. This discovery suggests that an increased visibility of maintenance further upstream would drastically increase the pool of potential contributors.</span></p>\n<p><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">The popularity (and the propensity to attract contributor effort) of a component is affected by the popularity of downstream dependencies in, for example, NPMs SSC where we found that the number and popularity of the dependencies predicted future popularity of the package. Moreover, future popularity increased the most for packages having fewer, more popular packages as dependencies (either upstream or downstream). This demonstrates that future maintainability is not just the property of individual nodes, but depends on the entire SSC.</span></p>\n<p><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">A study of over a thousand of developers choosing a packages showed that their preferences were guided by the extent of existing deployment, the use of the package in the developer's knowledge SSC neighborhood, and properties of the package, such as performance and responsiveness. Choice models from economics and social contagion theory allowed us to unravel these preferences and suggested a roadmap on how to increase the deployed base and, with it, the pool of potential contributors.</span></p>\n<p><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">A developer looking for a suitable component or a project looking for a qualified contributor struggles with millions of projects and developers in OSS. To match the specific skills of developers with projects' needs we invented, operationalized, and evaluated the concept of skill space where the patterns of packages used in files modified by a developer (and in a project) are embedded in a vector space. The resulting skill space affords comparison among packages, projects and developers helping predict what developers will do and who will join a project.&nbsp; Skill space can help mitigate risks posed by unknown contributors making low-quality contributions, by helping project maintainers focus on high quality contributions, and by allowing more general matching of projects and suitably skilled potential contributors.</span></p><br>\n<p>\n\t\t\t\t      \tLast Modified: 10/15/2021<br>\n\t\t\t\t\tModified by: Audris&nbsp;Mockus</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nSoftware supply chains (SSCs) allow the reuse of existing software assets but also pose major risks (e.g., SolarWind, HartBleed) as software is created and maintained by independent projects. Unlike the traditional supply chains, SSCs are not well understood or studied, especially the SSC for open source software (OSS) which is the critical part of most SSCs.  \n\nThe aim of this project was to help understand the source code SSCs for OSS, quantify the risks such SSCs pose, and to design ways to mitigate these risks. We first had to collect and curate a complete multi-petabyte data concerning all the nodes and links of the OSS supply chain distributed over hundreds of millions of software repositories. Without a nearly complete collection it was not possible to determine key attributes of an SSC: number of downstream projects, the provenance of a particular file, or activities of a developer. \n\nWe designed and implementated a big data system we refer to as World of Code (WoC) to create computational infrastructure for cleaning, augmentation, cross-referencing, and other types of curation necessary to make this massive data collection suitable for reconstructing the nodes and links and their associated attributes.\n\nWe investigated the types of SSCs and discovered three conceptually distinct source code supply chains. The SSCs of the first kind have software components (e.g., libraries or frameworks) as nodes and the dependencies needed to build or run a node representing links. The analog for physical products that flow in traditional SCs is the maintenance effort that is spent in component's upstream or downstream. The SSCs of the second kind represent the flow of the source code among projects resulting from copying the source code from one project to another project. The licensing terms of OSS software typically permit such reuse leading to high prevalence of such SSCs in OSS. The SSCs of the third kind are knowledge transfers embodied in developers' changing the source code. The nodes are developers and source code. The links are modifications by a developer of the source code. Each modification is a knowledge transfer: developers first need to understand the logic of the code they will modify and then to impart their own knowledge in the logic of the implemented change. The SSCs of each kind have unique benefits and risks. For example, the supply chains of the first and second kind tradeoff the future maintenance effort supplied by external entities in the former with a greater control over the exact functionality afforded by the latter.  \n\nOur research made thirteen major discoveries concerning SSC risks. The key risk for SSCs of the first kind is the availability of future maintenance effort. We discovered that the investments in product quality, the diversity of contributors, and the number of downstream nodes increase the vigor of the future maintenance effort and enhance chances of projects' survival. The owners of the immediately downstream projects were the contributors who sustained the upstream project, but they almost never  contributed further upstream. This discovery suggests that an increased visibility of maintenance further upstream would drastically increase the pool of potential contributors.\n\nThe popularity (and the propensity to attract contributor effort) of a component is affected by the popularity of downstream dependencies in, for example, NPMs SSC where we found that the number and popularity of the dependencies predicted future popularity of the package. Moreover, future popularity increased the most for packages having fewer, more popular packages as dependencies (either upstream or downstream). This demonstrates that future maintainability is not just the property of individual nodes, but depends on the entire SSC.\n\nA study of over a thousand of developers choosing a packages showed that their preferences were guided by the extent of existing deployment, the use of the package in the developer's knowledge SSC neighborhood, and properties of the package, such as performance and responsiveness. Choice models from economics and social contagion theory allowed us to unravel these preferences and suggested a roadmap on how to increase the deployed base and, with it, the pool of potential contributors.\n\nA developer looking for a suitable component or a project looking for a qualified contributor struggles with millions of projects and developers in OSS. To match the specific skills of developers with projects' needs we invented, operationalized, and evaluated the concept of skill space where the patterns of packages used in files modified by a developer (and in a project) are embedded in a vector space. The resulting skill space affords comparison among packages, projects and developers helping predict what developers will do and who will join a project.  Skill space can help mitigate risks posed by unknown contributors making low-quality contributions, by helping project maintainers focus on high quality contributions, and by allowing more general matching of projects and suitably skilled potential contributors.\n\n\t\t\t\t\tLast Modified: 10/15/2021\n\n\t\t\t\t\tSubmitted by: Audris Mockus"
 }
}