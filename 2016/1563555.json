{
 "awd_id": "1563555",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "TWC: Medium: Toward Trustworthy Mutable Replay for Security Patches",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2016-09-01",
 "awd_exp_date": "2021-08-31",
 "tot_intn_awd_amt": 1200000.0,
 "awd_amount": 1200000.0,
 "awd_min_amd_letter_date": "2016-05-31",
 "awd_max_amd_letter_date": "2016-05-31",
 "awd_abstract_narration": "Society is increasingly reliant on software, but deployed software contains security vulnerabilities and other bugs that can threaten privacy, property and even human lives.  When a security vulnerability or critical error is discovered, a software patch is issued to attempt to fix the problem, but patches themselves can be incorrect, inadequate, and break necessarily functionality.  This project investigates the full workflow for the developer to rapidly diagnose the root cause of the vulnerability or error, for the developer to test that a prospective patch indeed completely removes the defect, and for users to check the issued patch on their own configurations and workloads before adopting the patch.  \r\n\r\nThis project explores the use of mutable replay to help reproduce, diagnose, and fix software bugs.  A low-overhead recorder records the execution of software in case a failure or exploit occurs, allowing the developer to replay the recorded log to reproduce the problem.  Mutable replay allows logs recorded with the buggy version to be replayed after the modest code changes typical of critical patches to show that patches work correctly to resolve detected problems.  This project leverages semantic information readily available to the developer to conduct well-understood static and dynamic analyses to correctly transform the recorded log to enable mutable replay.  The results of this research will benefit society and individuals by simplifying and hastening both generation and validation of patches, ultimately making software more reliable and secure.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Gail",
   "pi_last_name": "Kaiser",
   "pi_mid_init": "E",
   "pi_sufx_name": "",
   "pi_full_name": "Gail E Kaiser",
   "pi_email_addr": "kaiser@cs.columbia.edu",
   "nsf_id": "000094973",
   "pi_start_date": "2016-05-31",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Jason",
   "pi_last_name": "Nieh",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Jason Nieh",
   "pi_email_addr": "nieh@cs.columbia.edu",
   "nsf_id": "000304769",
   "pi_start_date": "2016-05-31",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Columbia University",
  "inst_street_address": "615 W 131ST ST",
  "inst_street_address_2": "MC 8741",
  "inst_city_name": "NEW YORK",
  "inst_state_code": "NY",
  "inst_state_name": "New York",
  "inst_phone_num": "2128546851",
  "inst_zip_code": "100277922",
  "inst_country_name": "United States",
  "cong_dist_code": "13",
  "st_cong_dist_code": "NY13",
  "org_lgl_bus_name": "THE TRUSTEES OF COLUMBIA UNIVERSITY IN THE CITY OF NEW YORK",
  "org_prnt_uei_num": "",
  "org_uei_num": "F4N1QNPB95M4"
 },
 "perf_inst": {
  "perf_inst_name": "Columbia University",
  "perf_str_addr": "500 West 120th St",
  "perf_city_name": "New York",
  "perf_st_code": "NY",
  "perf_st_name": "New York",
  "perf_zip_code": "100276902",
  "perf_ctry_code": "US",
  "perf_cong_dist": "13",
  "perf_st_cong_dist": "NY13",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  },
  {
   "pgm_ref_code": "9102",
   "pgm_ref_txt": "WOMEN, MINORITY, DISABLED, NEC"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 1200000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Society is increasingly reliant on software, but deployed software often contains security vulnerabilities and other defects that can threaten privacy, property and even human lives.&nbsp; When a security vulnerability or critical error was not caught by the developer's pre-release testing, but is discovered after the software has been deployed and is relied on by users, an urgent software patch is issued to attempt to fix the problem. But patches themselves can be incorrect, inadequate, and break necessary functionality.&nbsp; This project investigates technology that enables the developer to rapidly diagnose the root cause of the software defect, for the developer to test that a prospective patch indeed completely removes the defect, and for users to check the issued patch on their own configurations and workloads before adopting the patch.&nbsp;&nbsp;</p>\n<p><br />This project extends existing record/replay technology that already helps developers reproduce and diagnose software defects found by users after deployment, but previously did not provide any tools or techniques for the developer to check the correctness of candidate fixes for those defects.&nbsp; The developer's existing pre-release testing was clearly inadequate, or the software containing the defect would not have been deployed to users in the first place.&nbsp; Our new technology makes it easy for developers to test whether their candidate fix would have worked correctly, or not, had that fix been in place at the time the bug occurred in the user environment.&nbsp; This mitigates the common problem that quickly-released security patches do not actually remove the defect and sometimes introduce additional defects that cause users' mission-critical functionality to fail.&nbsp; The results of this research benefit society and individuals by simplifying and hastening both generation and validation of patches, ultimately making software more reliable and secure.</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 09/30/2021<br>\n\t\t\t\t\tModified by: Gail&nbsp;E&nbsp;Kaiser</p>\n</div>\n<div class=\"porSideCol\">\n<div class=\"each-gallery\">\n<div class=\"galContent\" id=\"gallery0\">\n<div class=\"photoCount\" id=\"photoCount0\">\n\t\t\t\t\t\t\t\t\tImage\n\t\t\t\t\t\t\t\t</div>\n<div class=\"galControls onePhoto\" id=\"controls0\"></div>\n<div class=\"galSlideshow\" id=\"slideshow0\"></div>\n<div class=\"galEmbox\" id=\"embox\">\n<div class=\"image-title\"></div>\n</div>\n</div>\n<div class=\"galNavigation onePhoto\" id=\"navigation0\">\n<ul class=\"thumbs\" id=\"thumbs0\">\n<li>\n<a href=\"/por/images/Reports/POR/2021/1563555/1563555_10430439_1632752454579_attune-workflow--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2021/1563555/1563555_10430439_1632752454579_attune-workflow--rgov-800width.jpg\" title=\"attune workflow\"><img src=\"/por/images/Reports/POR/2021/1563555/1563555_10430439_1632752454579_attune-workflow--rgov-66x44.jpg\" alt=\"attune workflow\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Ad Hoc Test Generation</div>\n<div class=\"imageCredit\">Columbia University</div>\n<div class=\"imagePermisssions\">Creative Commons</div>\n<div class=\"imageSubmitted\">Gail&nbsp;E&nbsp;Kaiser</div>\n<div class=\"imageTitle\">attune workflow</div>\n</div>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>",
  "por_txt_cntn": "\nSociety is increasingly reliant on software, but deployed software often contains security vulnerabilities and other defects that can threaten privacy, property and even human lives.  When a security vulnerability or critical error was not caught by the developer's pre-release testing, but is discovered after the software has been deployed and is relied on by users, an urgent software patch is issued to attempt to fix the problem. But patches themselves can be incorrect, inadequate, and break necessary functionality.  This project investigates technology that enables the developer to rapidly diagnose the root cause of the software defect, for the developer to test that a prospective patch indeed completely removes the defect, and for users to check the issued patch on their own configurations and workloads before adopting the patch.  \n\n\nThis project extends existing record/replay technology that already helps developers reproduce and diagnose software defects found by users after deployment, but previously did not provide any tools or techniques for the developer to check the correctness of candidate fixes for those defects.  The developer's existing pre-release testing was clearly inadequate, or the software containing the defect would not have been deployed to users in the first place.  Our new technology makes it easy for developers to test whether their candidate fix would have worked correctly, or not, had that fix been in place at the time the bug occurred in the user environment.  This mitigates the common problem that quickly-released security patches do not actually remove the defect and sometimes introduce additional defects that cause users' mission-critical functionality to fail.  The results of this research benefit society and individuals by simplifying and hastening both generation and validation of patches, ultimately making software more reliable and secure.\n\n \n\n\t\t\t\t\tLast Modified: 09/30/2021\n\n\t\t\t\t\tSubmitted by: Gail E Kaiser"
 }
}