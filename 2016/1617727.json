{
 "awd_id": "1617727",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "AF: Small: Collaborative Research: Maintaining order",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "A. Funda Ergun",
 "awd_eff_date": "2016-09-01",
 "awd_exp_date": "2019-08-31",
 "tot_intn_awd_amt": 239703.0,
 "awd_amount": 239703.0,
 "awd_min_amd_letter_date": "2016-05-20",
 "awd_max_amd_letter_date": "2016-05-20",
 "awd_abstract_narration": "This project investigates \"order structures,\" that is, data structures for maintaining total orders on dynamic data sets.  Order structures are applicable in surprisingly diverse settings.  The PIs aim to answer fundamental theoretical questions relating to order structures. The investigation takes place in the context of two high-impact application areas: (1) tools for debugging parallel programs and (2) data structures used in databases and file systems to organize data on disk or SSDs.  As part of the project, the PIs will develop publicly available educational materials and reference implementations on order structures to be incorporated into courses at their institutions and shared openly on the web.\r\n\r\nThe order structures addressed in this project are order-maintenance data structures, sparse tables, and data structures for incremental topological ordering.  The investigation comprises (1) new algorithms with good worst-case guarantees, (2) algorithms with strong common-case guarantees, i.e., optimized for common input distributions, (3) provably good concurrent algorithms, (4) algorithms that leverage randomization in surprising ways (e.g., to achieve history independence), and (5) robust lower bounds that also apply to the randomized setting. In the context of the target applications, the PIs will design and use order structures to implement race detectors, which uncover determinacy races in parallel programs. The PIs will also use orders structures to build external-memory key-value stores to make databases and file systems run faster.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Jeremy",
   "pi_last_name": "Fineman",
   "pi_mid_init": "T",
   "pi_sufx_name": "",
   "pi_full_name": "Jeremy T Fineman",
   "pi_email_addr": "jfineman@cs.georgetown.edu",
   "nsf_id": "000610554",
   "pi_start_date": "2016-05-20",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Georgetown University",
  "inst_street_address": "MAIN CAMPUS",
  "inst_street_address_2": "",
  "inst_city_name": "WASHINGTON",
  "inst_state_code": "DC",
  "inst_state_name": "District of Columbia",
  "inst_phone_num": "2026250100",
  "inst_zip_code": "20057",
  "inst_country_name": "United States",
  "cong_dist_code": "00",
  "st_cong_dist_code": "DC00",
  "org_lgl_bus_name": "GEORGETOWN UNIVERSITY",
  "org_prnt_uei_num": "TF2CMKY1HMX9",
  "org_uei_num": "TF2CMKY1HMX9"
 },
 "perf_inst": {
  "perf_inst_name": "Georgetown University",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "DC",
  "perf_st_name": "District of Columbia",
  "perf_zip_code": "200571789",
  "perf_ctry_code": "US",
  "perf_cong_dist": "00",
  "perf_st_cong_dist": "DC00",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779600",
   "pgm_ele_name": "Algorithmic Foundations"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7926",
   "pgm_ref_txt": "ALGORITHMS"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 239703.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The main goal of this project is to investigate foundational  questions about \"order structures,\" that is, data structures for  maintaining total orders on dynamic sets. Such structures are applicable  in surprisingly diverse settings, including databases, file systems,  and debugging or analyzing of computer programs.</p>\n<p>The main outcomes of the project are:</p>\n<p>1)  New algorithms for determinacy race detection. A determinacy race  occurs when two conflicting data accesses in a parallel program may be  scheduled in nondeterministic order. These race conditions are often  bugs, but exhibiting an unintended behavior may require specific timing  of the scheduler/execution. As such, these race conditions are difficult  to debug through normal debugging techniques. Race detectors are  debugging tools that execute the program once, but that determine  whether it may be possible for a different valid schedule to produce a  different result. Previous work on race detectors focuses primarily on  one form of parallelism called nested parallelism. This project includes  new algorithms and new implementations of race detectors for more  general forms of parallelism including futurues.</p>\n<p>2) New data  structures for maintaining a total order. Most notably, the  file-maintenance problem is that of keeping a sequence of elements in  order in memory, subject to insertions and deletions at any point in the  sequence. Efficient file-maintenance data structures are directly  applicable to file systems and databases, where keeping data in order  yields performance benefits. The standard solution has good amortized  cost, meaning that the average cost per operation is low but that  individual operations are allowed to have high cost. This project  includes a novel data structure with optimal worst-case guarantees on  each operation.</p>\n<p>3) New algorithms for producing a topological sort  (a total order) of a directed graph (a partial order). This project  includes new parallel algorithms and new I/O-efficient algorithms for  the problem. Both settings are important when looking for solutions that  scale to large inputs. These algorithms repesent significant advanaces  to the state of the art for any nontrivial problems on directed graphs  in the parallel or I/O-efficient settings.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 02/02/2020<br>\n\t\t\t\t\tModified by: Jeremy&nbsp;T&nbsp;Fineman</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThe main goal of this project is to investigate foundational  questions about \"order structures,\" that is, data structures for  maintaining total orders on dynamic sets. Such structures are applicable  in surprisingly diverse settings, including databases, file systems,  and debugging or analyzing of computer programs.\n\nThe main outcomes of the project are:\n\n1)  New algorithms for determinacy race detection. A determinacy race  occurs when two conflicting data accesses in a parallel program may be  scheduled in nondeterministic order. These race conditions are often  bugs, but exhibiting an unintended behavior may require specific timing  of the scheduler/execution. As such, these race conditions are difficult  to debug through normal debugging techniques. Race detectors are  debugging tools that execute the program once, but that determine  whether it may be possible for a different valid schedule to produce a  different result. Previous work on race detectors focuses primarily on  one form of parallelism called nested parallelism. This project includes  new algorithms and new implementations of race detectors for more  general forms of parallelism including futurues.\n\n2) New data  structures for maintaining a total order. Most notably, the  file-maintenance problem is that of keeping a sequence of elements in  order in memory, subject to insertions and deletions at any point in the  sequence. Efficient file-maintenance data structures are directly  applicable to file systems and databases, where keeping data in order  yields performance benefits. The standard solution has good amortized  cost, meaning that the average cost per operation is low but that  individual operations are allowed to have high cost. This project  includes a novel data structure with optimal worst-case guarantees on  each operation.\n\n3) New algorithms for producing a topological sort  (a total order) of a directed graph (a partial order). This project  includes new parallel algorithms and new I/O-efficient algorithms for  the problem. Both settings are important when looking for solutions that  scale to large inputs. These algorithms repesent significant advanaces  to the state of the art for any nontrivial problems on directed graphs  in the parallel or I/O-efficient settings.\n\n\t\t\t\t\tLast Modified: 02/02/2020\n\n\t\t\t\t\tSubmitted by: Jeremy T Fineman"
 }
}