{
 "awd_id": "1636774",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "Workshop: Programming: Logics, Models, Algorithms and Concurrency",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927991",
 "po_email": "namla@nsf.gov",
 "po_sign_block_name": "Nina Amla",
 "awd_eff_date": "2016-04-15",
 "awd_exp_date": "2017-03-31",
 "tot_intn_awd_amt": 15000.0,
 "awd_amount": 15000.0,
 "awd_min_amd_letter_date": "2016-04-11",
 "awd_max_amd_letter_date": "2016-04-11",
 "awd_abstract_narration": "This award will provide travel grants for US-based students to attend the two day workshop on Programming: Logics, Models, Algorithms and Concurrency to be held at the University of Texas at Austin, April 29-30, 2016. This workshop will bring together leading researchers in the area of programming theory for distributed applications, from logic to models, from algorithms to concurrency, to present recent results and tutorials, bring the current research in perspective through an historical lens, and discuss the challenges ahead.  \r\n\r\nThe workshop will be open to graduate and undergraduate students, who will be able to attend talks and participate in discussions. Tutorials will provide them with a unique opportunity to gain perspective on the field through the eyes of the leaders who shaped it and to interact with and be inspired by them. Special emphasis will be placed on the participation of graduate and undergraduate women computer scientists and underrepresented minorities.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Lorenzo",
   "pi_last_name": "Alvisi",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Lorenzo Alvisi",
   "pi_email_addr": "la13@cornell.edu",
   "nsf_id": "000217257",
   "pi_start_date": "2016-04-11",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Texas at Austin",
  "inst_street_address": "110 INNER CAMPUS DR",
  "inst_street_address_2": "",
  "inst_city_name": "AUSTIN",
  "inst_state_code": "TX",
  "inst_state_name": "Texas",
  "inst_phone_num": "5124716424",
  "inst_zip_code": "787121139",
  "inst_country_name": "United States",
  "cong_dist_code": "25",
  "st_cong_dist_code": "TX25",
  "org_lgl_bus_name": "UNIVERSITY OF TEXAS AT AUSTIN",
  "org_prnt_uei_num": "",
  "org_uei_num": "V6AFQPN18437"
 },
 "perf_inst": {
  "perf_inst_name": "University of Texas at Austin",
  "perf_str_addr": "101 E. 27th Street, Suite 5.300",
  "perf_city_name": "Austin",
  "perf_st_code": "TX",
  "perf_st_name": "Texas",
  "perf_zip_code": "787121532",
  "perf_ctry_code": "US",
  "perf_cong_dist": "25",
  "perf_st_cong_dist": "TX25",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7556",
   "pgm_ref_txt": "CONFERENCE AND WORKSHOPS"
  },
  {
   "pgm_ref_code": "8206",
   "pgm_ref_txt": "Formal Methods and Verification"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 15000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Government, businesses, and, indeed, all of us are relying ever more on complex software to help in our daily activities&nbsp;. As software takes on greater responsibilities, the effect of errors, whether simple programming bugs or design flaws, can rise from just an annoyance to actual disasters that can irreparably ruin a business' reputation or, worse, cost lives. Program verification is a branch of computer science dedicated to improve&nbsp;software's robustness&nbsp;by&nbsp;<em>proving&nbsp;</em>rigorously its correctness.&nbsp;Its goals and ambitions were articulated in the 60's, but until recently most practitioners appeared skeptical that verification could be applied to large-scale systems. No longer: from industry to academia, a growing consensus about the potential of verification to serve as an effective tool for improving the robustness of complex software is merging.</p>\n<p>In this context, this project funded a &nbsp;two day workshop on \"Programming: Logics, Models, Algorithms and Concurrency\" at UT Austin, reuniting&nbsp;many of the researchers that have been the catalysts for &nbsp;verification's new centrality. Fittingly, &nbsp;UT played a seminal role in the development of the research agenda for program verification when, 25 years ago, it hosted a year-long initiative called the Year of Programming, which offered leading researchers from around the world the opportunity for extended visit to UT's CS Department, to collaborate with UT faculty and with each other.</p>\n<p>Over two days of presentations, panels, and lively discussions, attended by over a hundred graduate and undergraduate students the participants debated the technical and educational challenges that must still be address to further the successful application of formal verification to real-world problems. The rare opportunity to have together &nbsp;so many of the pioneers in the field allowed the speakers to provide also an historical perspective on the development of this research area, which proved not just very valuable per se, but truly inspiring for the over 100 students in attendance.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 07/20/2017<br>\n\t\t\t\t\tModified by: Lorenzo&nbsp;Alvisi</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nGovernment, businesses, and, indeed, all of us are relying ever more on complex software to help in our daily activities . As software takes on greater responsibilities, the effect of errors, whether simple programming bugs or design flaws, can rise from just an annoyance to actual disasters that can irreparably ruin a business' reputation or, worse, cost lives. Program verification is a branch of computer science dedicated to improve software's robustness by proving rigorously its correctness. Its goals and ambitions were articulated in the 60's, but until recently most practitioners appeared skeptical that verification could be applied to large-scale systems. No longer: from industry to academia, a growing consensus about the potential of verification to serve as an effective tool for improving the robustness of complex software is merging.\n\nIn this context, this project funded a  two day workshop on \"Programming: Logics, Models, Algorithms and Concurrency\" at UT Austin, reuniting many of the researchers that have been the catalysts for  verification's new centrality. Fittingly,  UT played a seminal role in the development of the research agenda for program verification when, 25 years ago, it hosted a year-long initiative called the Year of Programming, which offered leading researchers from around the world the opportunity for extended visit to UT's CS Department, to collaborate with UT faculty and with each other.\n\nOver two days of presentations, panels, and lively discussions, attended by over a hundred graduate and undergraduate students the participants debated the technical and educational challenges that must still be address to further the successful application of formal verification to real-world problems. The rare opportunity to have together  so many of the pioneers in the field allowed the speakers to provide also an historical perspective on the development of this research area, which proved not just very valuable per se, but truly inspiring for the over 100 students in attendance.\n\n\t\t\t\t\tLast Modified: 07/20/2017\n\n\t\t\t\t\tSubmitted by: Lorenzo Alvisi"
 }
}