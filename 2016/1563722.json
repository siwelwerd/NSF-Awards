{
 "awd_id": "1563722",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "TWC: Medium: Collaborative: New Protocols and Systems for RAM-Based Secure Computation",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Jeremy Epstein",
 "awd_eff_date": "2016-05-15",
 "awd_exp_date": "2021-04-30",
 "tot_intn_awd_amt": 464196.0,
 "awd_amount": 484196.0,
 "awd_min_amd_letter_date": "2016-05-17",
 "awd_max_amd_letter_date": "2017-01-13",
 "awd_abstract_narration": "Secure computation allows users to collaboratively compute any program on their private data, while ensuring that they learn nothing beyond the output of the computation. Existing protocols for secure computation primarily rely on a boolean-circuit representation for the program being evaluated, which can be highly inefficient. This project focuses on developing secure-computation protocols in the RAM model of computation. Particularly challenging here is the need to ensure that memory accesses are oblivious, and do not leak information about private data. We are designing efficient oblivious data structures that can be used as general-purpose building blocks for secure protocols in the RAM model of computation. \r\n\r\nThis project develops a framework that enables programmers to write high-level code that can then be compiled by a back-end algorithm that analyzes the code and makes use of the oblivious data structures we provide. This work is influenced by the needs of real applications, and the techniques to analyze the exact requirements of the program will evaluated and to tailor the resulting protocol to those requirements. This project aims to develop tools making secure computation more accessible to non-specialists, so it can be more broadly used to perform computations on private data. The PIs on this project mentor both graduate and undergraduate students and actively encourage involvement of minority students. The project develops new course materials and interact with the broader community through involvement in the IEEE cybersecurity initiative and the Maryland Cybersecurity Council.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Jonathan",
   "pi_last_name": "Katz",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Jonathan Katz",
   "pi_email_addr": "jkatz@cs.umd.edu",
   "nsf_id": "000148714",
   "pi_start_date": "2016-05-17",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Michael",
   "pi_last_name": "Hicks",
   "pi_mid_init": "W",
   "pi_sufx_name": "",
   "pi_full_name": "Michael W Hicks",
   "pi_email_addr": "mwh@cs.umd.edu",
   "nsf_id": "000116426",
   "pi_start_date": "2016-05-17",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Maryland, College Park",
  "inst_street_address": "3112 LEE BUILDING",
  "inst_street_address_2": "",
  "inst_city_name": "COLLEGE PARK",
  "inst_state_code": "MD",
  "inst_state_name": "Maryland",
  "inst_phone_num": "3014056269",
  "inst_zip_code": "207425100",
  "inst_country_name": "United States",
  "cong_dist_code": "04",
  "st_cong_dist_code": "MD04",
  "org_lgl_bus_name": "UNIVERSITY OF MARYLAND, COLLEGE PARK",
  "org_prnt_uei_num": "NPU8ULVAAS23",
  "org_uei_num": "NPU8ULVAAS23"
 },
 "perf_inst": {
  "perf_inst_name": "University of Maryland College Park",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "MD",
  "perf_st_name": "Maryland",
  "perf_zip_code": "207425141",
  "perf_ctry_code": "US",
  "perf_cong_dist": "04",
  "perf_st_cong_dist": "MD04",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "7556",
   "pgm_ref_txt": "CONFERENCE AND WORKSHOPS"
  },
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 464196.0
  },
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 20000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><strong id=\"docs-internal-guid-8d57ecfb-7fff-b911-411d-0731b630ae31\" style=\"font-weight: normal;\"><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Protocols for secure computation enable multiple distrusting parties, each with their own private input, to interact and perform some agree-upon computation robustly, without revealing anything other than the result of that computation. Traditionally, protocols for secure computation were designed in the circuit model of computation. While theoretically convenient, this does not match the random-access machine (RAM) model of computation used by modern processors that also underlies the mental model of computation used by most programmers.<br /><br />The aim of this project was to develop efficient techniques for RAM-based secure computation. Work included:<br />(1) Development of new oblivious algorithms and data structures, which can serve as a component of RAM-based secure-computation protocols. This included novel oblivious RAM protcols in the 2-server and 3-server settings.<br /><br />(2) Design, implementation, and application of a programming language that allows programmers to express oblivious algorithms easily while offering formal guarantees of obliviousness. Our language helped uncover sublte bugs in previously published oblivious data structures.<br /><br />(3) Development of new protocols suited for the RAM model of computation, including a protocol for oblivious shuffling that has applications to differential privacy and a state-of-the-art protocol for giving zero-knowledge proofs in the RAM model.<br /><br />Several PhD students and postdoctoral researchers have been involved in the work related to this project, several of whom have gone on to tenure-track faculty positions.</span></strong></p><br>\n<p>\n\t\t\t\t      \tLast Modified: 06/29/2021<br>\n\t\t\t\t\tModified by: Jonathan&nbsp;Katz</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nProtocols for secure computation enable multiple distrusting parties, each with their own private input, to interact and perform some agree-upon computation robustly, without revealing anything other than the result of that computation. Traditionally, protocols for secure computation were designed in the circuit model of computation. While theoretically convenient, this does not match the random-access machine (RAM) model of computation used by modern processors that also underlies the mental model of computation used by most programmers.\n\nThe aim of this project was to develop efficient techniques for RAM-based secure computation. Work included:\n(1) Development of new oblivious algorithms and data structures, which can serve as a component of RAM-based secure-computation protocols. This included novel oblivious RAM protcols in the 2-server and 3-server settings.\n\n(2) Design, implementation, and application of a programming language that allows programmers to express oblivious algorithms easily while offering formal guarantees of obliviousness. Our language helped uncover sublte bugs in previously published oblivious data structures.\n\n(3) Development of new protocols suited for the RAM model of computation, including a protocol for oblivious shuffling that has applications to differential privacy and a state-of-the-art protocol for giving zero-knowledge proofs in the RAM model.\n\nSeveral PhD students and postdoctoral researchers have been involved in the work related to this project, several of whom have gone on to tenure-track faculty positions.\n\n\t\t\t\t\tLast Modified: 06/29/2021\n\n\t\t\t\t\tSubmitted by: Jonathan Katz"
 }
}