{
 "awd_id": "1618595",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CSR: Small: Exploiting the Potential for Fine-Grained Memory Management via a Virtual Memory Framework Enhanced by Page Overlays",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Matt Mutka",
 "awd_eff_date": "2016-09-01",
 "awd_exp_date": "2020-08-31",
 "tot_intn_awd_amt": 499714.0,
 "awd_amount": 499714.0,
 "awd_min_amd_letter_date": "2016-08-08",
 "awd_max_amd_letter_date": "2016-08-08",
 "awd_abstract_narration": "Many areas of science and technology have experienced transformational changes in recent years as a result of computing on extremely large data sets.  To help enable future breakthroughs in science and technology, we also need breakthroughs in the ability of computers to efficiently perform data-intensive computations.  Perhaps one of the most important inventions in the history of operating systems and computer hardware was the creation of virtual memory support.  Virtual memory support not only fulfilled its original motivation of giving the operating system the flexibility to manage the hardware memory resources in a way that is convenient for programmers, it also provided unexpected benefits, such as enabling the 'copy-on-write' mechanism that dramatically reduces the effective cost of duplicating large amounts of memory. While virtual memory is a powerful tool, it has one major shortcoming: it provides flexibility at only a relatively coarse granularity (e.g., 8KB \"pages\" of contiguous memory).  This research is exploring how a new technique for eliminating this shortcoming can enable a number of new fundamental mechanisms for performing data-intensive computations much more efficiently.\r\n\r\nThe key insight in this project is that through a modest extension of the hardware that supports virtual memory (called 'page overlays'), the benefits of virtual memory can be provided at a much finer granularity: e.g., 32B rather than 8KB.  This orders-of-magnitude improvement in precision does not simply make existing virtual-memory-enabled optimizations more efficient: it enables fundamental new optimizations that had previously been impractical.  For example, preliminary work has demonstrated that this new page overlays mechanism can dramatically improve the performance of the 'copy-on-write' optimization by enabling a new (much more efficient) 'overlay-on-write' mechanism.   This project is exploring how page overlays can enable six additional fundamental new mechanisms for making data-intensive computations faster and more energy-efficient.  With these six new mechanisms, future computer systems should be better suited to the increasingly data-intensive workloads of the future.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Todd",
   "pi_last_name": "Mowry",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Todd Mowry",
   "pi_email_addr": "tcm@cs.cmu.edu",
   "nsf_id": "000216388",
   "pi_start_date": "2016-08-08",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Carnegie-Mellon University",
  "inst_street_address": "5000 FORBES AVE",
  "inst_street_address_2": "",
  "inst_city_name": "PITTSBURGH",
  "inst_state_code": "PA",
  "inst_state_name": "Pennsylvania",
  "inst_phone_num": "4122688746",
  "inst_zip_code": "152133815",
  "inst_country_name": "United States",
  "cong_dist_code": "12",
  "st_cong_dist_code": "PA12",
  "org_lgl_bus_name": "CARNEGIE MELLON UNIVERSITY",
  "org_prnt_uei_num": "U3NKNFLNQ613",
  "org_uei_num": "U3NKNFLNQ613"
 },
 "perf_inst": {
  "perf_inst_name": "Carnegie-Mellon University",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "PA",
  "perf_st_name": "Pennsylvania",
  "perf_zip_code": "152133890",
  "perf_ctry_code": "US",
  "perf_cong_dist": "12",
  "perf_st_cong_dist": "PA12",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 499714.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Although <em>virtual memory </em>is one of the most important and ubiquitous inventions in the fields of operating systems and computer architecture, the fact that it manages memory at a relatively coarse granularity (e.g., 8KB pages) significantly limits its potential benefits for boosting performance and efficiency.&nbsp; To address this limitation, we proposed a new virtual memory framework (called \"page overlays\") that enables memory management at a much finer granularity (e.g., 64 bytes) while providing backward compatibility with today's virtual memory frameworks.&nbsp; In this project, we explored a number of new memory optimization techniques that leverage our page overlays framework.</p>\n<p><br />Our first major outcome was an experimental evaluation of applying page overlays at an even coarser granularity: i.e. with virtual memory \"superpages\". Whereas a regular virtual memory page is typically 8KB, superpages are typically 2MB or 1GB.&nbsp; While superpages are useful for reducing translation overheads for data-intensive programs (with very large memory footprints), they unfortunately render an important mechanism for quickly duplicating large chunks of data (called \"copy-on-write\") impractical.&nbsp; Our experimental results demonstrate that by applying page overlays to superpages, we can retain the low TLB translation overhead of superpages while also achieving an order-of-magnitude performance improvement in a main memory backup system that uses copy-on-write.</p>\n<p><br />Our second major outcome was extending our original page overlays design to support multiple overlays for virtual addresses.&nbsp; This extension enabled us to implement a multi-versioning memory system, where a particular virtual address may correspond to one of several different versions of memory (i.e. overlays).&nbsp; One important implication of our multi-versioning page overlays design is that we need to use physical addresses to index into the caches to locate the overlays, rather than virtual addresses (as in our original design).&nbsp; This multi-versioning support became the basis of several of our other major outcomes in the project.</p>\n<p><br />Our third major outcome was using our multi-versioning page overlays design to implement a new, more efficient hardware transactional memory system (called OverlayTM).&nbsp; OverlayTM uses page overlays to quickly allocate new, small pieces of physical memory that store the speculative state during transactions.&nbsp; While still maintaining serializability, we were able to essentially match the performance of a much weaker transactional model.&nbsp; Our design also supports long-running transactions, it provides isolation between transactions, and also efficiently supports making transactions durable (and not just atomic).</p>\n<p><br />Our fourth major outcome was extending our multi-versioning page overlays framework to support high-frequency snapshotting of main memory to non-volatile memory (NVM) while avoiding write amplification.&nbsp; Our goal was not merely to support crash recovery, but to also enable other compelling uses cases that involve bursty snapshotting to NVM, such as time-traveling debugging of distributed cloud applications.&nbsp; By logging overlay translations to NVM rather than logging modified data, we were able to avoid the performance overhead of persistence barriers while roughly cutting in half the amount of NVM traffic compared with state-of-the-art hardware-assisted logging techniques.&nbsp; Another major advantage of our approach is that to the extent that we can keep these (relatively small) overlay mapping logs around in NVM, they allow us to randomly access any snapshot (not just the most recent one), thereby enabling time-traveling debuggers (and not just crash recovery).</p>\n<p><br />Our fifth major outcome was the design of a framework for performing cache compression not only across contiguous addresses within an overlay, but also across different overlays for the same virtual address.&nbsp; This \"multi-dimensional\" form of cache compression shows significant promise, and it has a rich design space of possible optimizations.&nbsp;&nbsp;<br /><br /><br /></p><br>\n<p>\n\t\t\t\t      \tLast Modified: 01/29/2021<br>\n\t\t\t\t\tModified by: Todd&nbsp;Mowry</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nAlthough virtual memory is one of the most important and ubiquitous inventions in the fields of operating systems and computer architecture, the fact that it manages memory at a relatively coarse granularity (e.g., 8KB pages) significantly limits its potential benefits for boosting performance and efficiency.  To address this limitation, we proposed a new virtual memory framework (called \"page overlays\") that enables memory management at a much finer granularity (e.g., 64 bytes) while providing backward compatibility with today's virtual memory frameworks.  In this project, we explored a number of new memory optimization techniques that leverage our page overlays framework.\n\n\nOur first major outcome was an experimental evaluation of applying page overlays at an even coarser granularity: i.e. with virtual memory \"superpages\". Whereas a regular virtual memory page is typically 8KB, superpages are typically 2MB or 1GB.  While superpages are useful for reducing translation overheads for data-intensive programs (with very large memory footprints), they unfortunately render an important mechanism for quickly duplicating large chunks of data (called \"copy-on-write\") impractical.  Our experimental results demonstrate that by applying page overlays to superpages, we can retain the low TLB translation overhead of superpages while also achieving an order-of-magnitude performance improvement in a main memory backup system that uses copy-on-write.\n\n\nOur second major outcome was extending our original page overlays design to support multiple overlays for virtual addresses.  This extension enabled us to implement a multi-versioning memory system, where a particular virtual address may correspond to one of several different versions of memory (i.e. overlays).  One important implication of our multi-versioning page overlays design is that we need to use physical addresses to index into the caches to locate the overlays, rather than virtual addresses (as in our original design).  This multi-versioning support became the basis of several of our other major outcomes in the project.\n\n\nOur third major outcome was using our multi-versioning page overlays design to implement a new, more efficient hardware transactional memory system (called OverlayTM).  OverlayTM uses page overlays to quickly allocate new, small pieces of physical memory that store the speculative state during transactions.  While still maintaining serializability, we were able to essentially match the performance of a much weaker transactional model.  Our design also supports long-running transactions, it provides isolation between transactions, and also efficiently supports making transactions durable (and not just atomic).\n\n\nOur fourth major outcome was extending our multi-versioning page overlays framework to support high-frequency snapshotting of main memory to non-volatile memory (NVM) while avoiding write amplification.  Our goal was not merely to support crash recovery, but to also enable other compelling uses cases that involve bursty snapshotting to NVM, such as time-traveling debugging of distributed cloud applications.  By logging overlay translations to NVM rather than logging modified data, we were able to avoid the performance overhead of persistence barriers while roughly cutting in half the amount of NVM traffic compared with state-of-the-art hardware-assisted logging techniques.  Another major advantage of our approach is that to the extent that we can keep these (relatively small) overlay mapping logs around in NVM, they allow us to randomly access any snapshot (not just the most recent one), thereby enabling time-traveling debuggers (and not just crash recovery).\n\n\nOur fifth major outcome was the design of a framework for performing cache compression not only across contiguous addresses within an overlay, but also across different overlays for the same virtual address.  This \"multi-dimensional\" form of cache compression shows significant promise, and it has a rich design space of possible optimizations.  \n\n\n\n\n\t\t\t\t\tLast Modified: 01/29/2021\n\n\t\t\t\t\tSubmitted by: Todd Mowry"
 }
}