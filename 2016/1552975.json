{
 "awd_id": "1552975",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CAREER: Formal Methods for Approximate Computing",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032922585",
 "po_email": "pprabhak@nsf.gov",
 "po_sign_block_name": "Pavithra Prabhakar",
 "awd_eff_date": "2016-05-01",
 "awd_exp_date": "2023-04-30",
 "tot_intn_awd_amt": 494511.0,
 "awd_amount": 510511.0,
 "awd_min_amd_letter_date": "2016-04-29",
 "awd_max_amd_letter_date": "2020-05-21",
 "awd_abstract_narration": "Nowadays, power and energy constraints are the main driving force of\r\nimprovements in computing abilities, and approximate computing has emerged as a\r\npromising technique for enabling these improvements.  The main idea behind\r\napproximate computing is to trade the accuracy of computations in order to\r\nenable novel optimizations that improve performance or energy efficiency.  This\r\nleverages the fact that many applications are resilient to errors to some extent, \r\nand hence do not require absolute correctness of computations. Clearly, developing \r\nsoftware for future approximate computing platforms will not be an easy task: a \r\ndeveloper must introduce as many approximations as possible, while at the same time\r\nensuring that correctness and the results quality requirements of an\r\napplication are met.\r\n\r\nThis project explores automated techniques and tools to assist developers by\r\nallowing them to explore approximate computing trade-offs. The techniques are\r\nbased around a rigorous, automated, and precise analysis of program\r\napproximations. The main novelty is to leverage recent advances in automated\r\nsoftware verification in the context of approximate computing. The project will\r\ndevelop an open platform for the rigorous analysis of approximate programs.  \r\nBy focusing on improving developer's experience when writing code for future \r\napproximate computing platforms, this work has the potential to achieve significant \r\nimpact across a wide spectrum of industries and applications.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Zvonimir",
   "pi_last_name": "Rakamaric",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Zvonimir Rakamaric",
   "pi_email_addr": "zvonimir@cs.utah.edu",
   "nsf_id": "000623290",
   "pi_start_date": "2016-04-29",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Utah",
  "inst_street_address": "201 PRESIDENTS CIR",
  "inst_street_address_2": "",
  "inst_city_name": "SALT LAKE CITY",
  "inst_state_code": "UT",
  "inst_state_name": "Utah",
  "inst_phone_num": "8015816903",
  "inst_zip_code": "841129049",
  "inst_country_name": "United States",
  "cong_dist_code": "01",
  "st_cong_dist_code": "UT01",
  "org_lgl_bus_name": "UNIVERSITY OF UTAH",
  "org_prnt_uei_num": "",
  "org_uei_num": "LL8GLEVH6MG3"
 },
 "perf_inst": {
  "perf_inst_name": "University of Utah",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "UT",
  "perf_st_name": "Utah",
  "perf_zip_code": "841129205",
  "perf_ctry_code": "US",
  "perf_cong_dist": "01",
  "perf_st_cong_dist": "UT01",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "287800",
   "pgm_ele_name": "Special Projects - CCF"
  },
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "1045",
   "pgm_ref_txt": "CAREER-Faculty Erly Career Dev"
  },
  {
   "pgm_ref_code": "8206",
   "pgm_ref_txt": "Formal Methods and Verification"
  },
  {
   "pgm_ref_code": "9150",
   "pgm_ref_txt": "EXP PROG TO STIM COMP RES"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 66846.0
  },
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 232676.0
  },
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 120616.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 90373.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Developing&nbsp;<span><span>approxima</span></span><span><span>te</span></span>&nbsp;computations, such as programs that compute using floating-point or fixed-point arithmetic, is a complex, challenging task that is typically done by highly-trained and experienced domain experts. There are many issues that developers face in this space, such as dealing with correctness in the presence of, for&nbsp;<span><span>examp</span></span><span><span>le</span></span>,&nbsp;floating-point errors,&nbsp;<span><span>whi</span></span><span><span>le</span></span>&nbsp;at the same time pushing performance boundaries. This&nbsp;<span>leads to comp</span>lex implementations that are&nbsp;<span><span>chal</span></span><span><span>lenging</span></span>&nbsp;to maintain and update. Moreover, ensuring&nbsp;<span><span>adequa</span></span><span><span>te</span></span>&nbsp;<span>testing&nbsp;</span>coverage is&nbsp;<span>all but&nbsp;</span><span><span>im</span></span><span><span>possib</span></span><span><span>le</span></span>&nbsp;given the extremely large input search space, and hence&nbsp;<span><span>subt</span></span><span><span>le</span></span>&nbsp;bugs often surface only&nbsp;<span><span>af</span></span><span><span>ter</span></span>&nbsp;years of usage in production.&nbsp;Finally, there is also a&nbsp;<span><span>noticeab</span></span><span><span>le</span></span>&nbsp;lack of&nbsp;development tools to aid&nbsp;programmers in this space.</p>\n<p>The project&nbsp;develops&nbsp;rigorous,&nbsp;<span><span>automa</span></span><span><span>ted</span></span>&nbsp;<span>techniques for&nbsp;</span>addressing the&nbsp;<span>aforementioned</span>&nbsp;<span>challenges. In&nbsp;</span>particular, form<span><span>al</span></span>&nbsp;methods are used&nbsp;for the analysis and&nbsp;synthesis of&nbsp;different&nbsp;kinds of&nbsp;<span><span>approxima</span></span><span><span>te</span></span>&nbsp;computations.&nbsp;Leveraging&nbsp;form<span><span>al</span></span>&nbsp;methods allows&nbsp;having rigorous&nbsp;proofs about the&nbsp;<span><span>approxima</span></span><span><span>te</span></span>&nbsp;behaviors of the an<span><span>alyzed</span></span>&nbsp;computations,&nbsp;such as&nbsp;strict&nbsp;bounds on the allowed&nbsp;floating-point errors or their&nbsp;probabilistic distributions. When it comes to broader&nbsp;<span>impacts,</span>&nbsp;the&nbsp;project&nbsp;develops an&nbsp;inclusive&nbsp;<span><span>LGBTQ</span></span>-focused set of homework prob<span><span>lems</span></span>&nbsp;for&nbsp;<span><span>discre</span></span><span><span>te</span></span>&nbsp;mathematics, and shows how to&nbsp;effectively&nbsp;<span><span>incorpora</span></span><span><span>te</span></span>&nbsp;them into a&nbsp;<span><span>discre</span></span><span><span>te</span></span>&nbsp;mathematics&nbsp;curriculum.</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 09/24/2023<br>\n\t\t\t\t\tModified by: Zvonimir&nbsp;Rakamaric</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nDeveloping approximate computations, such as programs that compute using floating-point or fixed-point arithmetic, is a complex, challenging task that is typically done by highly-trained and experienced domain experts. There are many issues that developers face in this space, such as dealing with correctness in the presence of, for example, floating-point errors, while at the same time pushing performance boundaries. This leads to complex implementations that are challenging to maintain and update. Moreover, ensuring adequate testing coverage is all but impossible given the extremely large input search space, and hence subtle bugs often surface only after years of usage in production. Finally, there is also a noticeable lack of development tools to aid programmers in this space.\n\nThe project develops rigorous, automated techniques for addressing the aforementioned challenges. In particular, formal methods are used for the analysis and synthesis of different kinds of approximate computations. Leveraging formal methods allows having rigorous proofs about the approximate behaviors of the analyzed computations, such as strict bounds on the allowed floating-point errors or their probabilistic distributions. When it comes to broader impacts, the project develops an inclusive LGBTQ-focused set of homework problems for discrete mathematics, and shows how to effectively incorporate them into a discrete mathematics curriculum.\n\n \n\n\t\t\t\t\tLast Modified: 09/24/2023\n\n\t\t\t\t\tSubmitted by: Zvonimir Rakamaric"
 }
}