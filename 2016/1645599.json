{
 "awd_id": "1645599",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "EAGER: Towards Automated Characterization of the Data-Movement Complexity of Large Scale Analytics Applications",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927498",
 "po_email": "achtchel@nsf.gov",
 "po_sign_block_name": "Almadena Chtchelkanova",
 "awd_eff_date": "2016-08-15",
 "awd_exp_date": "2019-07-31",
 "tot_intn_awd_amt": 300000.0,
 "awd_amount": 300000.0,
 "awd_min_amd_letter_date": "2016-08-11",
 "awd_max_amd_letter_date": "2016-08-11",
 "awd_abstract_narration": "We have entered a new era where power/energy limitations have become fundamental drivers of technological trends.  The cost in both time and energy for moving data from off-chip main memory to the processor is significantly higher than the cost of a double-precision floating-point computation.  With future technologies, this ratio will only get worse.  Therefore the characterization of the inherent data movement costs of algorithms is very important, and is particularly critical for large scale data-analytic applications.  However, unlike the well-understood computational complexity of algorithms, the data movement complexity is known only for a small number of algorithms.\r\n\r\nPrior techniques for characterizing the data movement complexity of algorithms has either been restricted to subclasses of computations, or has required ad hoc manual reasoning. This project develops a scalable automated tool for analyzing the data movement complexity of arbitrary unstructured computations, expressed as computational directed acyclic graphs (CDAGs). The researchers explore several directions including out-of-core strategies, decomposition/recomposition of graphs, directional component analysis, and empirical function fitting, to address scalability challenges.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Ponnuswamy",
   "pi_last_name": "Sadayappan",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Ponnuswamy Sadayappan",
   "pi_email_addr": "saday@cs.utah.edu",
   "nsf_id": "000182536",
   "pi_start_date": "2016-08-11",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Srinivasan",
   "pi_last_name": "Parthasarathy",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Srinivasan Parthasarathy",
   "pi_email_addr": "srini@cse.ohio-state.edu",
   "nsf_id": "000227551",
   "pi_start_date": "2016-08-11",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Ohio State University",
  "inst_street_address": "1960 KENNY RD",
  "inst_street_address_2": "",
  "inst_city_name": "COLUMBUS",
  "inst_state_code": "OH",
  "inst_state_name": "Ohio",
  "inst_phone_num": "6146888735",
  "inst_zip_code": "432101016",
  "inst_country_name": "United States",
  "cong_dist_code": "03",
  "st_cong_dist_code": "OH03",
  "org_lgl_bus_name": "OHIO STATE UNIVERSITY, THE",
  "org_prnt_uei_num": "MN4MDDMN8529",
  "org_uei_num": "DLWBSLWAJWR1"
 },
 "perf_inst": {
  "perf_inst_name": "Ohio State University",
  "perf_str_addr": "1960 Kenny Road",
  "perf_city_name": "Columbus",
  "perf_st_code": "OH",
  "perf_st_name": "Ohio",
  "perf_zip_code": "432101016",
  "perf_ctry_code": "US",
  "perf_cong_dist": "03",
  "perf_st_cong_dist": "OH03",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7916",
   "pgm_ref_txt": "EAGER"
  },
  {
   "pgm_ref_code": "7942",
   "pgm_ref_txt": "HIGH-PERFORMANCE COMPUTING"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 300000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>&nbsp;</p>\n<p>The cost of data movement greatly exceeds that of performing arithmetic/logic operations, both in terms of time and energy.&nbsp;&nbsp;&nbsp;While the computational complexity of algorithms is well understood data movement costs depend both on capacity in the memory hierarchy as well as the order of execution. Often the abstraction of choice for modeling such data movement is a directed&nbsp;graph (DG). The minimum data-movement requirement for most algorithms is currently unknown. This project investigated methods to advance our understanding of the data-movement complexity of algorithms, with a specific focus on data analytic tasks.&nbsp; A secondary but important focus was the efficient processing and clustering DGs for this purpose.</p>\n<p>&nbsp;</p>\n<p>They key project outcomes include:</p>\n<p>&nbsp;</p>\n<ol>\n<li>We analyzed the inherent data movement requirements for several sparse matrix kernels that are frequently utilized in data analytics workflows.&nbsp;&nbsp;&nbsp;A key insight from our analysis was the recognition that the non-zero patterns of sparse matrices arising in practice do not have a uniformly random distribution over the 2D index space of the matrix, but have significant non-uniformity, with some regions of the sparse matrix being extremely sparse, while significant local clustering of non-zeors occurs in other regions. This insight led to the development of several novel schemes for data partitioning and placement such that the resulting realization of these kernels achieves high data-movement efficiency and effective parallelization.&nbsp;&nbsp;These results have been presented and the libraries have been publicly released.</li>\n<li>Asymptotic parametric expressions of data movement costs (lower bounds) have previously been manually derived for a limited number of algorithms, often without scaling constants. Since the bandwidth of channels and buses for data movement in computer systems is a significant limiting factor, it is of importance to characterize not only the asymptotic data movement complexity of algorithms but also include the scaling constants of the highest order terms. We have developed&nbsp;the first compile-time approach for deriving parametric expressions with scaling constants for data movement lower bounds of arbitrary affine computations.&nbsp;The approach has been implemented in a fully automatic tool (IOLB) that can generate these lower bounds for input affine programs.&nbsp;Its use has been demonstrated by exercising it on all the benchmarks of the PolyBench suite.</li>\n<li>Asymmetric transitivity is an essential property of directed graphs, since it can play an important role in downstream graph inference and analysis. Maintaining such properties, while reducing the graph to a lower-dimensional vector embedding space, was a key focus. The techniques we developed, incorporates graph hierarchy and reachability information naturally by relying on a non-linear transformation that operates on the core reachability and implicit hierarchy within such graphs. Subsequently, the methodology levers a factorization-based approach to generate two embedding vectors for each node within the graph, to capture the asymmetric transitivity.&nbsp;&nbsp;These results have broad applicability even beyond the goals of this project.&nbsp;&nbsp;For instance, one of the key methods we leveraged has been adopted by Wikipedia for managing their software repository.</li>\n<li>Two PhD students were trained on this project. One Phd student has graduated and joined a research group in industry while the other is making good progress towards completion. &nbsp;</li>\n</ol>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 01/24/2020<br>\n\t\t\t\t\tModified by: Srinivasan&nbsp;Parthasarathy</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n \n\nThe cost of data movement greatly exceeds that of performing arithmetic/logic operations, both in terms of time and energy.   While the computational complexity of algorithms is well understood data movement costs depend both on capacity in the memory hierarchy as well as the order of execution. Often the abstraction of choice for modeling such data movement is a directed graph (DG). The minimum data-movement requirement for most algorithms is currently unknown. This project investigated methods to advance our understanding of the data-movement complexity of algorithms, with a specific focus on data analytic tasks.  A secondary but important focus was the efficient processing and clustering DGs for this purpose.\n\n \n\nThey key project outcomes include:\n\n \n\nWe analyzed the inherent data movement requirements for several sparse matrix kernels that are frequently utilized in data analytics workflows.   A key insight from our analysis was the recognition that the non-zero patterns of sparse matrices arising in practice do not have a uniformly random distribution over the 2D index space of the matrix, but have significant non-uniformity, with some regions of the sparse matrix being extremely sparse, while significant local clustering of non-zeors occurs in other regions. This insight led to the development of several novel schemes for data partitioning and placement such that the resulting realization of these kernels achieves high data-movement efficiency and effective parallelization.  These results have been presented and the libraries have been publicly released.\nAsymptotic parametric expressions of data movement costs (lower bounds) have previously been manually derived for a limited number of algorithms, often without scaling constants. Since the bandwidth of channels and buses for data movement in computer systems is a significant limiting factor, it is of importance to characterize not only the asymptotic data movement complexity of algorithms but also include the scaling constants of the highest order terms. We have developed the first compile-time approach for deriving parametric expressions with scaling constants for data movement lower bounds of arbitrary affine computations. The approach has been implemented in a fully automatic tool (IOLB) that can generate these lower bounds for input affine programs. Its use has been demonstrated by exercising it on all the benchmarks of the PolyBench suite.\nAsymmetric transitivity is an essential property of directed graphs, since it can play an important role in downstream graph inference and analysis. Maintaining such properties, while reducing the graph to a lower-dimensional vector embedding space, was a key focus. The techniques we developed, incorporates graph hierarchy and reachability information naturally by relying on a non-linear transformation that operates on the core reachability and implicit hierarchy within such graphs. Subsequently, the methodology levers a factorization-based approach to generate two embedding vectors for each node within the graph, to capture the asymmetric transitivity.  These results have broad applicability even beyond the goals of this project.  For instance, one of the key methods we leveraged has been adopted by Wikipedia for managing their software repository.\nTwo PhD students were trained on this project. One Phd student has graduated and joined a research group in industry while the other is making good progress towards completion.  \n\n\n \n\n\t\t\t\t\tLast Modified: 01/24/2020\n\n\t\t\t\t\tSubmitted by: Srinivasan Parthasarathy"
 }
}