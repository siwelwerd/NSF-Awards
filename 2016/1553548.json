{
 "awd_id": "1553548",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CAREER: Automated Analysis of Security Hyperproperties",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2016-07-01",
 "awd_exp_date": "2023-06-30",
 "tot_intn_awd_amt": 436035.0,
 "awd_amount": 436035.0,
 "awd_min_amd_letter_date": "2016-04-25",
 "awd_max_amd_letter_date": "2020-07-22",
 "awd_abstract_narration": "Computer programs and cryptographic protocols are increasingly being used to access confidential and private information on the Internet. Due to their complex nature, they often have subtle errors that can be exploited by malicious entities. As security flaws can have serious consequences, it is important to ensure that computer programs and cryptographic protocols achieve their security objectives. As such systems have a large (potentially infinite) number of states due to presence of malicious adversaries and the concurrent nature of Internet, `pen and paper' reasoning about their correctness is challenging. In addition to the state explosion, reasoning about correctness is also challenging within the context of security because standard security objectives such as confidentiality and privacy turn out to be hyperproperties.  The challenge lies in the fact that when reasoning about hyperproperties, one has to reason about correctness of the set of all executions of a system as a whole instead of correctness of individual executions. Therefore, the development of techniques to automate this reasoning is of vital importance, and is the research focus of this project. \r\n\r\nFormally, hyperproperties generalize properties that are used to express safety and liveness guarantees in classical automated verification. A property is a set of allowable executions. A system violates a property if it exhibits an execution that is not allowed. In contrast, security objectives such as confidentiality, non-interference, privacy, and anonymity are hyperproperties. A hyperproperty is a collection of allowable sets of executions. A system violates a hyperproperty if the set of its executions is not in the collection specified by the hyperproperty. Current state-of-the art automated tools for verifying security guarantees do not scale very well as they are often aimed at certain security guarantees and often make restrictive assumptions on the systems. This project aims to develop new scalable state-of-the-art techniques in automated verification of hyperproperties by undertaking primarily three research tasks. First, we will develop and implement new symbolic algorithms for verifying finite-state systems against an expressive set of hyperproperties. The second task shall be devoted to scaling the analysis by a novel combination of automated analysis and automated counterexample generation designed specifically for hyperproperties. Finally, we shall establish theoretical results that shall reduce the problem of verifying cryptographic protocols in the presence of unbounded message sizes and nonces to the finite case.  The research aims of the proposal will be paired with curriculum development at the University of Missouri where a new concentration in security will be introduced in the undergraduate curriculum that will integrate security design with software development.  The results of this project will be integrated in the courses, and the project will support both undergraduate and graduate student research.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Rohit",
   "pi_last_name": "Chadha",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Rohit Chadha",
   "pi_email_addr": "chadhar@missouri.edu",
   "nsf_id": "000629410",
   "pi_start_date": "2016-04-25",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Missouri-Columbia",
  "inst_street_address": "121 UNIVERSITY HALL",
  "inst_street_address_2": "",
  "inst_city_name": "COLUMBIA",
  "inst_state_code": "MO",
  "inst_state_name": "Missouri",
  "inst_phone_num": "5738827560",
  "inst_zip_code": "652113020",
  "inst_country_name": "United States",
  "cong_dist_code": "03",
  "st_cong_dist_code": "MO03",
  "org_lgl_bus_name": "UNIVERSITY OF MISSOURI SYSTEM",
  "org_prnt_uei_num": "",
  "org_uei_num": "SZPJL5ZRCLF4"
 },
 "perf_inst": {
  "perf_inst_name": "University of Missouri-Columbia",
  "perf_str_addr": "201 Engineering Building West",
  "perf_city_name": "Columbia",
  "perf_st_code": "MO",
  "perf_st_name": "Missouri",
  "perf_zip_code": "652112060",
  "perf_ctry_code": "US",
  "perf_cong_dist": "03",
  "perf_st_cong_dist": "MO03",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "1045",
   "pgm_ref_txt": "CAREER-Faculty Erly Career Dev"
  },
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "9150",
   "pgm_ref_txt": "EXP PROG TO STIM COMP RES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 60426.0
  },
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 96196.0
  },
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 205353.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 74060.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span>Computer programs and cryptographic protocols allow the access of confidential and private information on the Internet. Due to their intricate design, they often have subtle security bugs that can be exploited by malicious entities, compromising the confidentiality of sensitive data and the privacy of individuals. Reasoning about the security of such systems is challenging as security guarantees involve reasoning about sets of related executions instead of individual executions. Such security guarantees are often called&nbsp;hyperproperties&nbsp;and are a generalization of properties used to express safety and liveness guarantees in classical automated verification. Formally, a&nbsp;hyperproperty&nbsp;is a collection of allowable sets of executions. A system violates a&nbsp;hyperproperty&nbsp;if the set of its executions is not in the collection specified by the&nbsp;hyperproperty. Thus, reasoning about&nbsp;hyperproperties&nbsp;is challenging because one has to reason about the correctness of the set of all executions of a system as a whole instead of the correctness of individual executions. The main research aims of the project were to build algorithms and reasoning techniques tools to analyze computer programs and cryptographic protocols against desired security guarantees expressed as&nbsp;hyperproperties. &nbsp;</span></p>\n<p><span>The&nbsp;significant&nbsp;outcomes of the project&nbsp;were the development of new algorithms for verifying&nbsp;hyperproperties&nbsp;of randomized protocols and programs, recursive programs, and real-time systems.&nbsp;Graduate&nbsp;students were trained in&nbsp;cybersecurity, formal methods, and logic&nbsp;as part of the project. A master's level certificate was developed as part of the project.</span></p>\n<p><strong>Intellectual Merit:&nbsp;</strong><span>We investigated theoretical foundations and practical algorithms for verifying&nbsp;hyperproperties.</span></p>\n<ul>\n<li><span>Our investigation into the problem of checking branching&nbsp;hyperproperties&nbsp;of procedural (recursive) programs yielded novel findings. While verifying such&nbsp;hyperproperties&nbsp;is undecidable, we recovered the decidability of considering&nbsp;hyperproperties&nbsp;that relate only to executions with the same call-stack access pattern. For such cases, we coined the term 'stack-aware&nbsp;hyperproperties'. We also developed a logic and an algorithm to verify recursive programs against&nbsp;hyperproperties&nbsp;expressed in this logic, and we precisely characterized the complexity of the verification problem.</span></li>\n<li><span>Security&nbsp;hyperproperties&nbsp;for real-time systems relate&nbsp;</span><em>to time-annotated&nbsp;</em><span>executions, namely executions that include the time at which each observation of the system occurs. Timed&nbsp;hyperproperties&nbsp;are essential to reason about the timing behaviors of a system, such as the absence of timing leaks,&nbsp;unlinkability&nbsp;in cryptographic protocols, and timeliness of optimistic contract signing. We systemically studied the problem of specifying and verifying branching time&nbsp;hyperproperties&nbsp;when we assumed a dense time model. We designed a logic to express these&nbsp;hyperproperties&nbsp;and developed an algorithm to verify finite state timed systems to verify them.</span></li>\n<li><span>We developed a core axiomatic framework to symbolically verify&nbsp;hyperproperties&nbsp;of cryptographic protocols that can be expressed as computational&nbsp;indistinguishability&nbsp;in the provable security model. Using this framework (called computationally complete symbolic attacker (CCSA&nbsp;framework)), we analyzed vote privacy in Internet-based voting protocols and bid privacy in auction protocols.&nbsp; Our analysis revealed previously unknown attacks, and we were able to propose fixes and verify the fixes. The framework was also mechanized in a formal theorem-prover&nbsp;Coq.</span></li>\n<li><span>A dynamic agent logic for reasoning about safety critical information flow among system components was developed as part of the project. The logic, Dynamic Agent Safety Logic (DASL), which is based on Dynamic Epistemic Logic (DEL), reasons about the safety of actions of the components as well as epistemic reasoning (both belief and knowledge properties) in a single framework. The logic allows for the inference of safety-critical information that may be missing from a component before it executes the unsafe action. An axiomatic system was developed for this logic,&nbsp;and the logic&nbsp;was applied to case studies on air mishaps. The axiomatic system case study was formalized using the&nbsp;Coq&nbsp;proof assistant.</span></li>\n<li><span>We developed algorithms for verifying privacy&nbsp;hyperproperties&nbsp;for randomized security protocols and for randomized programs, which were implemented in software and used to analyze published security protocols and differential privacy mechanisms.</span></li>\n</ul>\n<p><strong>Broader Impacts:&nbsp;</strong><span>The project significantly advanced the state-of-the-art automated verification of security&nbsp;hyperproperties&nbsp;for security protocols and programs by providing theoretical foundations and software tools. The software developed as part of this project is publicly available and includes the mechanization&nbsp;of the Computationally Complete Symbolic Attacker framework, Stochastic Protocol Analyzer (SPAN), a tool for verifying privacy and&nbsp;hyperproperties&nbsp;of protocols, and Differential Privacy Checker (DiPC+) and Differential Privacy Automaton (DiPA), a&nbsp;tool for verifying&nbsp;privacy&nbsp;hyperproperties&nbsp;of programs.&nbsp;&nbsp;</span></p>\n<p>&nbsp;Graduate&nbsp;students were trained in&nbsp;cybersecurity, formal methods, and logic as part of the project.&nbsp;The PI mentored three Ph.D. students.&nbsp;The PI introduced two new&nbsp;cybersecurity&nbsp;courses at the University of Missouri, and the&nbsp;research outcomes of the project&nbsp;were integrated into these courses.&nbsp;The PI was also instrumental in developing the Master's certificate in&nbsp;cyber&nbsp;security at the University of Missouri, launched in Fall 2022.</p>\n<p>&nbsp;</p><br>\n<p>\n Last Modified: 06/03/2024<br>\nModified by: Rohit&nbsp;Chadha</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nComputer programs and cryptographic protocols allow the access of confidential and private information on the Internet. Due to their intricate design, they often have subtle security bugs that can be exploited by malicious entities, compromising the confidentiality of sensitive data and the privacy of individuals. Reasoning about the security of such systems is challenging as security guarantees involve reasoning about sets of related executions instead of individual executions. Such security guarantees are often calledhyperpropertiesand are a generalization of properties used to express safety and liveness guarantees in classical automated verification. Formally, ahyperpropertyis a collection of allowable sets of executions. A system violates ahyperpropertyif the set of its executions is not in the collection specified by thehyperproperty. Thus, reasoning abouthyperpropertiesis challenging because one has to reason about the correctness of the set of all executions of a system as a whole instead of the correctness of individual executions. The main research aims of the project were to build algorithms and reasoning techniques tools to analyze computer programs and cryptographic protocols against desired security guarantees expressed ashyperproperties. \n\n\nThesignificantoutcomes of the projectwere the development of new algorithms for verifyinghyperpropertiesof randomized protocols and programs, recursive programs, and real-time systems.Graduatestudents were trained incybersecurity, formal methods, and logicas part of the project. A master's level certificate was developed as part of the project.\n\n\nIntellectual Merit:We investigated theoretical foundations and practical algorithms for verifyinghyperproperties.\n\nOur investigation into the problem of checking branchinghyperpropertiesof procedural (recursive) programs yielded novel findings. While verifying suchhyperpropertiesis undecidable, we recovered the decidability of consideringhyperpropertiesthat relate only to executions with the same call-stack access pattern. For such cases, we coined the term 'stack-awarehyperproperties'. We also developed a logic and an algorithm to verify recursive programs againsthyperpropertiesexpressed in this logic, and we precisely characterized the complexity of the verification problem.\nSecurityhyperpropertiesfor real-time systems relateto time-annotatedexecutions, namely executions that include the time at which each observation of the system occurs. Timedhyperpropertiesare essential to reason about the timing behaviors of a system, such as the absence of timing leaks,unlinkabilityin cryptographic protocols, and timeliness of optimistic contract signing. We systemically studied the problem of specifying and verifying branching timehyperpropertieswhen we assumed a dense time model. We designed a logic to express thesehyperpropertiesand developed an algorithm to verify finite state timed systems to verify them.\nWe developed a core axiomatic framework to symbolically verifyhyperpropertiesof cryptographic protocols that can be expressed as computationalindistinguishabilityin the provable security model. Using this framework (called computationally complete symbolic attacker (CCSAframework)), we analyzed vote privacy in Internet-based voting protocols and bid privacy in auction protocols. Our analysis revealed previously unknown attacks, and we were able to propose fixes and verify the fixes. The framework was also mechanized in a formal theorem-proverCoq.\nA dynamic agent logic for reasoning about safety critical information flow among system components was developed as part of the project. The logic, Dynamic Agent Safety Logic (DASL), which is based on Dynamic Epistemic Logic (DEL), reasons about the safety of actions of the components as well as epistemic reasoning (both belief and knowledge properties) in a single framework. The logic allows for the inference of safety-critical information that may be missing from a component before it executes the unsafe action. An axiomatic system was developed for this logic,and the logicwas applied to case studies on air mishaps. The axiomatic system case study was formalized using theCoqproof assistant.\nWe developed algorithms for verifying privacyhyperpropertiesfor randomized security protocols and for randomized programs, which were implemented in software and used to analyze published security protocols and differential privacy mechanisms.\n\n\n\nBroader Impacts:The project significantly advanced the state-of-the-art automated verification of securityhyperpropertiesfor security protocols and programs by providing theoretical foundations and software tools. The software developed as part of this project is publicly available and includes the mechanizationof the Computationally Complete Symbolic Attacker framework, Stochastic Protocol Analyzer (SPAN), a tool for verifying privacy andhyperpropertiesof protocols, and Differential Privacy Checker (DiPC+) and Differential Privacy Automaton (DiPA), atool for verifyingprivacyhyperpropertiesof programs.\n\n\nGraduatestudents were trained incybersecurity, formal methods, and logic as part of the project.The PI mentored three Ph.D. students.The PI introduced two newcybersecuritycourses at the University of Missouri, and theresearch outcomes of the projectwere integrated into these courses.The PI was also instrumental in developing the Master's certificate incybersecurity at the University of Missouri, launched in Fall 2022.\n\n\n\t\t\t\t\tLast Modified: 06/03/2024\n\n\t\t\t\t\tSubmitted by: RohitChadha\n"
 }
}