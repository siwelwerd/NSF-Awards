{
 "awd_id": "1642397",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SI2 - SSE: A Next-Generation Decision Diagram Library",
 "cfda_num": "47.070",
 "org_code": "05090000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Seung-Jong Park",
 "awd_eff_date": "2017-01-01",
 "awd_exp_date": "2021-06-30",
 "tot_intn_awd_amt": 498672.0,
 "awd_amount": 498672.0,
 "awd_min_amd_letter_date": "2016-09-08",
 "awd_max_amd_letter_date": "2016-09-08",
 "awd_abstract_narration": "There are a variety of scientific problems whose solution is made difficult because of the extremely large number of possibilities that must be considered and evaluated. Often, the difficulty is caused by a large number of combinations of interacting components, even though the individual components are relatively simple. Relevant practical problems are measuring the reliability of a communication network where links may fail (made difficult by the number of different communication paths in the network), or determining that an automobile's brakes will always work (made difficult by the number of combinations of the interacting software and hardware components in an automobile), or determining that the failure of one power generator will not cause a cascading failure that affects a large portion of the nation's power grid. This class of problem is conceptually similar to finding an optimal solution for Rubik's cube (which is made difficult by the large number of different possible configurations) or, in chess, determining if there is a sequence of moves in chess such that white can always force a win (made difficult by the huge number of different possible chess games). The goal of this project is to develop a software library called Meddly that various applications can use to build and represent solutions to these types of combinatoric problems. The underlying technology of Meddly is decision diagrams, a mechanism for organizing data in such a way that repeated patterns or subpatterns are automatically discovered and exploited during computation. The project will add to the capabilities of decision diagram technology, help to advance the understanding of this technology as well as apply it to more types of problems. Several researchers from around the world have expressed interest in Meddly, and as part of this project, developers will assist those researchers to integrate Meddly into existing tools, which will then be applied to real problems. The project also has educational goals, through the engagement of students in the project, and the incorporation of this work in existing courses.\r\n\r\nMany computer-based scientific or engineering applications need to store, analyze, and manipulate large data. Often, this data has enough structure that specialized data structures and algorithms can have dramatically smaller memory and time requirements than explicit approaches. An important such case is symbolic verification of hardware and software, where, traditionally, binary decision diagrams (BDDs) have been successfully employed to study systems with enormous state spaces. Several software libraries for BDDs have arisen to support these operations, and BDDs have been applied to diverse applications as a means to exploit structure that is often hidden. However, in the past decade, decision diagram theory has continued to advance, by generalizing BDDs to variants with multi-way decisions (MDDs), multi-way or numerical outcomes, or edge values to encode real-valued data, and by proposing a variety of reduction rules to change (and often shrink) the decision diagram shape, as well as many important algorithmic improvements. Unfortunately, decision diagram libraries have not kept up with these theoretical advances. The proposed work seeks to fill this gap, by merging and expanding two existing prototype libraries developed by the two invesigators, Meddly and TEDDY, into a powerful, next-generation decision diagram library that supports a more general theory of decision diagrams. The new library will encompass (1) non-binary variables, including a-priori unbounded discrete domains and even infinite domains under certain restrictions, (2) non-boolean function values, attached either to terminal nodes or to the edges of the decision diagram, and (3) a more general definition of canonicitythat includes a wide spectrum of reduction rules. Several proposed activities will help smooth the learning curve for users adopting this library, from proven methods such as user manuals, tutorials, examples, wikis, and user groups, to novel ones such as the development of visualization techniques to aid the debugging and understanding of decision diagrams. The proposed software will push decision diagram library support far beyond the capabilities of today's typical BDD libraries, allowing exciting new applications to emerge in diverse fields well beyond classic ones such as symbolic model checking. Additionally, the proposed research activities will improve our understanding of decision diagram technology, providing deep new insights into the nature of structured functions and their representations.  This has the potential to advance the state of the art both in fields that currently utilize decision diagrams, as improved library support can lead to the ability to tackle problem instances of unprecedented size, and in fields where the availability of a library implementing the proposed decision diagram variants will allow researchers to tackle classic problems with novel approaches based on decision diagrams. A next-generation decision diagram library will positively impact disciplines ranging from engineering to computer science theory to biology, via improved software applications that manage large and structured data. Letters of support attest to the many research groups worldwide eager to include more general and powerful decision diagram capabilities in their tools. The anticipated educational impact includes development of publicly available online tutorials; research, implementation, and experimentation opportunities for both undergraduate and graduate students; and integration of the developed techniques and software into existing courses via lectures, assignments, and projects. The underlying theory and developed software resulting from the proposed activities will reinforce concepts that students will retain and apply during their careers.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "OAC",
 "org_div_long_name": "Office of Advanced Cyberinfrastructure (OAC)",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Andrew",
   "pi_last_name": "Miner",
   "pi_mid_init": "S",
   "pi_sufx_name": "",
   "pi_full_name": "Andrew S Miner",
   "pi_email_addr": "asminer@iastate.edu",
   "nsf_id": "000232634",
   "pi_start_date": "2016-09-08",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Gianfranco",
   "pi_last_name": "Ciardo",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Gianfranco Ciardo",
   "pi_email_addr": "ciardo@iastate.edu",
   "nsf_id": "000254304",
   "pi_start_date": "2016-09-08",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Iowa State University",
  "inst_street_address": "1350 BEARDSHEAR HALL",
  "inst_street_address_2": "515 MORRILL ROAD",
  "inst_city_name": "AMES",
  "inst_state_code": "IA",
  "inst_state_name": "Iowa",
  "inst_phone_num": "5152945225",
  "inst_zip_code": "500112103",
  "inst_country_name": "United States",
  "cong_dist_code": "04",
  "st_cong_dist_code": "IA04",
  "org_lgl_bus_name": "IOWA STATE UNIVERSITY OF SCIENCE AND TECHNOLOGY",
  "org_prnt_uei_num": "DQDBM7FGJPC5",
  "org_uei_num": "DQDBM7FGJPC5"
 },
 "perf_inst": {
  "perf_inst_name": "Iowa State University",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "IA",
  "perf_st_name": "Iowa",
  "perf_zip_code": "500112207",
  "perf_ctry_code": "US",
  "perf_cong_dist": null,
  "perf_st_cong_dist": "IA",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "800400",
   "pgm_ele_name": "Software Institutes"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "026Z",
   "pgm_ref_txt": "NSCI: National Strategic Computing Initi"
  },
  {
   "pgm_ref_code": "7433",
   "pgm_ref_txt": "CyberInfra Frmwrk 21st (CIF21)"
  },
  {
   "pgm_ref_code": "7942",
   "pgm_ref_txt": "HIGH-PERFORMANCE COMPUTING"
  },
  {
   "pgm_ref_code": "8004",
   "pgm_ref_txt": "Software Institutes"
  },
  {
   "pgm_ref_code": "8005",
   "pgm_ref_txt": "Scientific Software Elements"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 498672.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span>Binary decision diagrams (BDDs) are a graph-based data structure&nbsp;</span>used to represent and manipulate boolean functions over boolean variables. Several software libraries for BDDs have arisen to implement BDDs, and as a result, BDDs have been successfully employed in a variety of applications, including hardware verification, model checking, constraint solving, and other combinatorial problems, as a means to exploit structure that is often hidden in enormous problem spaces. This project seeks to close the gap between existing BDD libraries, and decision diagram theory that has both generalized and advanced BDDs to variants in several directions, including multi-way decisions (MDDs), multi-way or numerical outcomes, edge values to encode integer-valued or real-valued data, other reduction rules to change (and often shrink) the decision diagram shape, and many algorithmic improvements. This was achieved by extending and improving MEDDLY (Multi-terminal and Edge valued Decision Diagram LibrarY), an open-source library for decision diagrams written in C++ and available on github.</p>\n<p><span>Researchers have made the following theoretical advances and implementation&nbsp;</span>improvements in MEDDLY as part of this project.</p>\n<ul>\n<li>The implementation of saturation in MEDDLY was improved. Saturation is an efficient algorithm for generating all states that are reachable from an initial state in a system, modeled by a collection of transition relations, one per system event.</li>\n<li> Extensible nodes were implemented, for \"on-the-fly\" saturation, which is required for models whose state variable bounds are not known.</li>\n<li>Implicit nodes were developed and implemented. These are a generalization and improvement of extensible nodes, for efficiently and statically storing the transition relations for system events, for use with saturation. The benefit of this work is a more compact and faster to construct representation for transition relations, for a certain class of models. This work led to one conference article.</li>\n<li>Hybridized relations were developed and implemented, allowing relations to contain both implicit nodes and ordinary nodes. The benefit of this work is it allows to exploit implicit nodes where possible, and ordinary nodes otherwise, in models where not all events can utilize implicit nodes. This work led to one conference article.</li>\n<li>Parameterized implicit nodes were developed and implemented. This is a generalization of implicit nodes, where nodes are allowed to pass information, using parameters, to other nodes in the relation. Results are still preliminary, but this extends the class of models for which implicit nodes may be used. This work is included in one PhD thesis, and still needs to be disseminated more broadly.</li>\n<li>Operations for EV+MDDs, where MDD edges hold integer values that are summed along the path to the terminal node, were implemented. This includes versions of saturation for sets or relations with distance information. Practical application of this work includes counter-example generation (an important feature of model checking), where the distance information allows generation of shortest counter examples. This work led to one conference article, and was included in one PhD thesis.</li>\n<li>Variable ordering and reordering heuristics were developed and tested. It is well-known that the size of a decision diagram is often sensitive to the choice of variable order. Two articles on static ordering heuristics were published, in which a variable order is determined by examining the problem structure. One article was published on variable reordering, in which a schedule of adjacent variable swaps is determined to change the decision diagram from one order to another given order.</li>\n<li>Some general improvements to the library were implemented, including mark and sweep garbage collection (in addition to reference counting), the ability to select the garbage collection mechanism at run time, a more general interface for compute table entries, and working toward a single, unified, simpler interface for saturation.</li>\n<li>A new theory for edge-specified reduction rules was developed. This allows competing variants of BDDs with different reduction rules, including BDDs and zero suppressed BDDs, to be used simultaneously and exploiting the benefits of both reductions. Additional reduction rules were developed. This work was published in a conference article, and an expanded version of this work has been accepted for publication in a journal.</li>\n<li>Efforts to remove barriers to adoption of the software include implementation of better visualization support (decision diagrams can be exported to dot, a standard, open-source graph visualization tool), migration from sourceforge to github, and addition of documentation on github pages.</li>\n</ul>\n<ol> </ol>\n<p><span>This project supported four PhD students (with three&nbsp;</span>completing their PhDs during the project), three Masters students, and two undergraduate students (partially). So far, results have been disseminated via eight conference articles, one accepted journal article, and three PhD dissertations.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 11/05/2021<br>\n\t\t\t\t\tModified by: Andrew&nbsp;Miner</p>\n</div>\n<div class=\"porSideCol\">\n<div class=\"each-gallery\">\n<div class=\"galContent\" id=\"gallery0\">\n<div class=\"photoCount\" id=\"photoCount0\">\n\t\t\t\t\t\t\t\t\tImage\n\t\t\t\t\t\t\t\t</div>\n<div class=\"galControls onePhoto\" id=\"controls0\"></div>\n<div class=\"galSlideshow\" id=\"slideshow0\"></div>\n<div class=\"galEmbox\" id=\"embox\">\n<div class=\"image-title\"></div>\n</div>\n</div>\n<div class=\"galNavigation onePhoto\" id=\"navigation0\">\n<ul class=\"thumbs\" id=\"thumbs0\">\n<li>\n<a href=\"/por/images/Reports/POR/2021/1642397/1642397_10459533_1635546075157_meddly--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2021/1642397/1642397_10459533_1635546075157_meddly--rgov-800width.jpg\" title=\"MEDDLY architecture\"><img src=\"/por/images/Reports/POR/2021/1642397/1642397_10459533_1635546075157_meddly--rgov-66x44.jpg\" alt=\"MEDDLY architecture\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Overview of MEDDLY's features and software architecture</div>\n<div class=\"imageCredit\">Shruti Biswal</div>\n<div class=\"imagePermisssions\">Creative Commons</div>\n<div class=\"imageSubmitted\">Andrew&nbsp;Miner</div>\n<div class=\"imageTitle\">MEDDLY architecture</div>\n</div>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>",
  "por_txt_cntn": "\nBinary decision diagrams (BDDs) are a graph-based data structure used to represent and manipulate boolean functions over boolean variables. Several software libraries for BDDs have arisen to implement BDDs, and as a result, BDDs have been successfully employed in a variety of applications, including hardware verification, model checking, constraint solving, and other combinatorial problems, as a means to exploit structure that is often hidden in enormous problem spaces. This project seeks to close the gap between existing BDD libraries, and decision diagram theory that has both generalized and advanced BDDs to variants in several directions, including multi-way decisions (MDDs), multi-way or numerical outcomes, edge values to encode integer-valued or real-valued data, other reduction rules to change (and often shrink) the decision diagram shape, and many algorithmic improvements. This was achieved by extending and improving MEDDLY (Multi-terminal and Edge valued Decision Diagram LibrarY), an open-source library for decision diagrams written in C++ and available on github.\n\nResearchers have made the following theoretical advances and implementation improvements in MEDDLY as part of this project.\n\nThe implementation of saturation in MEDDLY was improved. Saturation is an efficient algorithm for generating all states that are reachable from an initial state in a system, modeled by a collection of transition relations, one per system event.\n Extensible nodes were implemented, for \"on-the-fly\" saturation, which is required for models whose state variable bounds are not known.\nImplicit nodes were developed and implemented. These are a generalization and improvement of extensible nodes, for efficiently and statically storing the transition relations for system events, for use with saturation. The benefit of this work is a more compact and faster to construct representation for transition relations, for a certain class of models. This work led to one conference article.\nHybridized relations were developed and implemented, allowing relations to contain both implicit nodes and ordinary nodes. The benefit of this work is it allows to exploit implicit nodes where possible, and ordinary nodes otherwise, in models where not all events can utilize implicit nodes. This work led to one conference article.\nParameterized implicit nodes were developed and implemented. This is a generalization of implicit nodes, where nodes are allowed to pass information, using parameters, to other nodes in the relation. Results are still preliminary, but this extends the class of models for which implicit nodes may be used. This work is included in one PhD thesis, and still needs to be disseminated more broadly.\nOperations for EV+MDDs, where MDD edges hold integer values that are summed along the path to the terminal node, were implemented. This includes versions of saturation for sets or relations with distance information. Practical application of this work includes counter-example generation (an important feature of model checking), where the distance information allows generation of shortest counter examples. This work led to one conference article, and was included in one PhD thesis.\nVariable ordering and reordering heuristics were developed and tested. It is well-known that the size of a decision diagram is often sensitive to the choice of variable order. Two articles on static ordering heuristics were published, in which a variable order is determined by examining the problem structure. One article was published on variable reordering, in which a schedule of adjacent variable swaps is determined to change the decision diagram from one order to another given order.\nSome general improvements to the library were implemented, including mark and sweep garbage collection (in addition to reference counting), the ability to select the garbage collection mechanism at run time, a more general interface for compute table entries, and working toward a single, unified, simpler interface for saturation.\nA new theory for edge-specified reduction rules was developed. This allows competing variants of BDDs with different reduction rules, including BDDs and zero suppressed BDDs, to be used simultaneously and exploiting the benefits of both reductions. Additional reduction rules were developed. This work was published in a conference article, and an expanded version of this work has been accepted for publication in a journal.\nEfforts to remove barriers to adoption of the software include implementation of better visualization support (decision diagrams can be exported to dot, a standard, open-source graph visualization tool), migration from sourceforge to github, and addition of documentation on github pages.\n\n \n\nThis project supported four PhD students (with three completing their PhDs during the project), three Masters students, and two undergraduate students (partially). So far, results have been disseminated via eight conference articles, one accepted journal article, and three PhD dissertations.\n\n\t\t\t\t\tLast Modified: 11/05/2021\n\n\t\t\t\t\tSubmitted by: Andrew Miner"
 }
}