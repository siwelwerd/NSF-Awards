{
 "awd_id": "1559657",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "HCC: Large: Collaborative Research: Variations to Support Exploratory Programming",
 "cfda_num": "47.070",
 "org_code": "05020000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Ephraim Glinert",
 "awd_eff_date": "2015-08-01",
 "awd_exp_date": "2019-07-31",
 "tot_intn_awd_amt": 663848.0,
 "awd_amount": 695848.0,
 "awd_min_amd_letter_date": "2015-10-15",
 "awd_max_amd_letter_date": "2018-05-08",
 "awd_abstract_narration": "In any design or learning activity, exploration is a key component.  Significant research and conventional wisdom show that the best way to achieve a high-quality design is to explore multiple variations and iteratively evaluate them.  When novices learn a new skill or system, they must explore and practice the available options.  Similarly, when experts try to understand and improve an existing design, they must explore different approaches to modifying its behavior.  Unfortunately, exploration is risky, error-prone, and cumbersome using today's tools.  For instance, when users decide their current design is not effective, the only mechanisms available for selectively backtracking out of changes are linear undo and version control, which make it difficult to isolate backtracking to specific edits, or else users must manually remove undesired edits, which is slow and fallible.  Further, today's tools do not support comparing two variants of a design or combining elements from multiple variants.  Research is showing that these manual processes inhibit exploration, making users and designs less effective.\r\n\r\nTo address these problems PIs from four partner institutions have come together to undertake a research program that is both broad and deep, focusing on the creation and management of variations during a system's implementation and evolution.  The goal is to discover new theories, algorithms, visualizations, and tools that support variations in code.  The team will evaluate all of their approaches through lab and field studies, and they will investigate how users can be educated in more effective ways to work with variations.  Based on a choice calculus for representing variations in software, they will develop a theory for formally defining and reasoning about variations.  They will leverage theories of human behavior such as Minimalist Learning, Attention Investment, and Information Foraging, to develop a theory of Variation Foraging.  They will develop an infrastructure including multiple levels of transcripts of users' editing operations that will support a novel form of selective undo and enable users to investigate their existing variants, return to any previous variant, and mix and match elements from multiple variants. They will develop algorithms to enable recording of interactions with variants so they can be explored and reused to explore and test new variants; these recordings will be augmented with automatically created data to help users understand behaviors they have not explicitly explored.  Using this infrastructure the PIs will invent visualizations, search facilities, and interaction techniques that provide effective ways for users to find, understand, explore, reuse and create variants, and be able to ask \"why\" questions to understand the differences among variations of a system.  For novices, an \"Idea Garden\" will help them explore new strategies for identifying which variations can help solve a problem and how to implement them.\r\n\r\nBroader Impacts:  This research will enhance infrastructure for research and education by producing an integrated, open source web development environment for use by researchers and the world.  The work will therefore benefit society by empowering the tens of millions of end-user programmers to creatively build content and applications for the web.  The PIs will advance discovery while promoting learning by integrating their research into undergraduate courses on creativity and software engineering, and by supporting summer camps for at least 300 high school students per year.  Project outcomes will be disseminated to researchers through publications and presentations, to computing educators through the above-mentioned camps and the National Girls Collaborative Project, and through public deployment.  The PIs expect high interest because the work will be based on JavaScript, which is today's most popular programming language and for which there is a high demand for better tools.  The research will address underrepresentation via its focus on investigating how to support both male and female end-user programmers, by involving high-school members of underrepresented groups, and by engaging many of the PIs? female students.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "IIS",
 "org_div_long_name": "Division of Information & Intelligent Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Anita",
   "pi_last_name": "Sarma",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Anita Sarma",
   "pi_email_addr": "anita.sarma@oregonstate.edu",
   "nsf_id": "000518767",
   "pi_start_date": "2015-10-15",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Oregon State University",
  "inst_street_address": "1500 SW JEFFERSON AVE",
  "inst_street_address_2": "",
  "inst_city_name": "CORVALLIS",
  "inst_state_code": "OR",
  "inst_state_name": "Oregon",
  "inst_phone_num": "5417374933",
  "inst_zip_code": "973318655",
  "inst_country_name": "United States",
  "cong_dist_code": "04",
  "st_cong_dist_code": "OR04",
  "org_lgl_bus_name": "OREGON STATE UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "MZ4DYXE1SL98"
 },
 "perf_inst": {
  "perf_inst_name": "Oregon State University",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "OR",
  "perf_st_name": "Oregon",
  "perf_zip_code": "973318507",
  "perf_ctry_code": "US",
  "perf_cong_dist": "04",
  "perf_st_cong_dist": "OR04",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "736700",
   "pgm_ele_name": "HCC-Human-Centered Computing"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7367",
   "pgm_ref_txt": "Cyber-Human Systems"
  },
  {
   "pgm_ref_code": "7925",
   "pgm_ref_txt": "LARGE PROJECT"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0113",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001314DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2013,
   "fund_oblg_amt": 663848.0
  },
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 16000.0
  },
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 16000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-1531c98c-7fff-805a-b4d5-08d975608aa0\">\n<p dir=\"ltr\"><span>When people write computer programs, they explore, often creating many alternatives of one idea and choosing the best one. Or, they plan multiple versions of a program and try to manage them all at once. Unfortunately, there is little support for either of these types of exploration in modern computer programming tools. The result is that software is often less powerful than it could be, or more buggy than we&rsquo;d like it to be.</span></p>\n<br />\n<p dir=\"ltr\"><span>In this project, we explored ways to improve support for exploration, creating new theories of variation in programs, inventing new tools to support exploration, and evaluating these tools to ensure they better support developers. We invented ways of helping scientists better explore data with code. We discovered ways of ensuring that changes in code do not break software. We devised theories of how programs can express variation, to support more systematic management of alternative designs. We created new editors that track, visualize, and help navigate edit history. In addition to tools, we also devised several new ways for computer programmers to plan for change, including new ways of teaching and supporting problem solving, new methods for ensuring the inclusive design of software, and new techniques for learning to code. These discoveries are impacting many areas of research, including programming languages, software engineering, the science of how people interact with computers, and the science of how people learn to code.</span></p>\n<br />\n<p dir=\"ltr\"><span>However, the impact is more than just on research. Many of the inventions from this research have been released as free, publicly available research prototypes. Some of those prototypes are in the process of being incorporated into commercial products. Other projects have begun to reshape how computer programmers are educated in higher education. The project also directly trained more than two dozen doctoral students and more than three dozen undergraduates on research. Many of these doctoral students are now faculty, and many of the undergraduates are now pursuing PhDs, or have secured jobs in industry as software engineers, data scientists, and designers. The project also offered six summer coding bootcamps to high school students, reaching hundreds of youth, including many girls, youth from underrepresented groups, and youth from low-income regions of the United States.</span></p>\n<br />\n<p dir=\"ltr\"><span>The ideas from this research will continue to impact products, services, education, and our workforce for years to come, helping to improve the reliability, inclusiveness, and value of software over the coming decades.</span></p>\n</span></p><br>\n<p>\n\t\t\t\t      \tLast Modified: 11/29/2019<br>\n\t\t\t\t\tModified by: Anita&nbsp;Sarma</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n\nWhen people write computer programs, they explore, often creating many alternatives of one idea and choosing the best one. Or, they plan multiple versions of a program and try to manage them all at once. Unfortunately, there is little support for either of these types of exploration in modern computer programming tools. The result is that software is often less powerful than it could be, or more buggy than we\u2019d like it to be.\n\n\nIn this project, we explored ways to improve support for exploration, creating new theories of variation in programs, inventing new tools to support exploration, and evaluating these tools to ensure they better support developers. We invented ways of helping scientists better explore data with code. We discovered ways of ensuring that changes in code do not break software. We devised theories of how programs can express variation, to support more systematic management of alternative designs. We created new editors that track, visualize, and help navigate edit history. In addition to tools, we also devised several new ways for computer programmers to plan for change, including new ways of teaching and supporting problem solving, new methods for ensuring the inclusive design of software, and new techniques for learning to code. These discoveries are impacting many areas of research, including programming languages, software engineering, the science of how people interact with computers, and the science of how people learn to code.\n\n\nHowever, the impact is more than just on research. Many of the inventions from this research have been released as free, publicly available research prototypes. Some of those prototypes are in the process of being incorporated into commercial products. Other projects have begun to reshape how computer programmers are educated in higher education. The project also directly trained more than two dozen doctoral students and more than three dozen undergraduates on research. Many of these doctoral students are now faculty, and many of the undergraduates are now pursuing PhDs, or have secured jobs in industry as software engineers, data scientists, and designers. The project also offered six summer coding bootcamps to high school students, reaching hundreds of youth, including many girls, youth from underrepresented groups, and youth from low-income regions of the United States.\n\n\nThe ideas from this research will continue to impact products, services, education, and our workforce for years to come, helping to improve the reliability, inclusiveness, and value of software over the coming decades.\n\n\n\t\t\t\t\tLast Modified: 11/29/2019\n\n\t\t\t\t\tSubmitted by: Anita Sarma"
 }
}