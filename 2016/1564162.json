{
 "awd_id": "1564162",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "SHF: Medium: Collaborative Research: Semi and Fully Automated Program Repair and Synthesis via Semantic Code Search",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2016-07-01",
 "awd_exp_date": "2022-06-30",
 "tot_intn_awd_amt": 400000.0,
 "awd_amount": 457329.0,
 "awd_min_amd_letter_date": "2016-05-17",
 "awd_max_amd_letter_date": "2021-05-28",
 "awd_abstract_narration": "Many aspects of our economy rely heavily on software working correctly. However, software errors are common, routinely cause security breaches, and cost our economy billions of dollars annually. Despite the well-known high costs of software errors, the software industry struggles to overcome this challenge, as new errors are reported faster than they can be fixed. Recent research has demonstrated the potential of automated program repair techniques to address this challenge.   In this research, we develop new techniques to fix software errors and implement new features automatically. The challenge is to fix code while not breaking other functionality, and to work toward repairing code of increasing complexity.\r\n\r\nThe approach takes advantage of the high availability of open-source code that already implements many functions required for a new software project. The approach is to search for relevant code in open-source projects, adapt that code to its new context using automated software repair and generation techniques, and then validate the changed software. A key component of the approach is semantic code search, which queries large databases of code to find code snippets that satisfy a behavioral specification. The project develops novel techniques that (1) encode large, searchable bodies of code as behavioral profiles, (2) localize bugs and features to code blocks, modules, and components, (3) extract the desired behavioral profiles of those blocks, modules, and components, (4) use the extracted profiles to search the database for potential patches, (5) adapt the potential patches to fit into the code context, and (6) validate the potential patches. The project focuses on producing high-quality code, verifying that the injected code does not break existing functionality.  The broader impacts come mainly from goal of radically improving software productivity through reuse and adaptation of existing code.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Yuriy",
   "pi_last_name": "Brun",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Yuriy Brun",
   "pi_email_addr": "brun@cs.umass.edu",
   "nsf_id": "000559414",
   "pi_start_date": "2016-05-17",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Massachusetts Amherst",
  "inst_street_address": "101 COMMONWEALTH AVE",
  "inst_street_address_2": "",
  "inst_city_name": "AMHERST",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "4135450698",
  "inst_zip_code": "010039252",
  "inst_country_name": "United States",
  "cong_dist_code": "02",
  "st_cong_dist_code": "MA02",
  "org_lgl_bus_name": "UNIVERSITY OF MASSACHUSETTS",
  "org_prnt_uei_num": "VGJHK59NMPK9",
  "org_uei_num": "VGJHK59NMPK9"
 },
 "perf_inst": {
  "perf_inst_name": "University of Massachusetts Amherst",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "010039242",
  "perf_ctry_code": "US",
  "perf_cong_dist": "02",
  "perf_st_cong_dist": "MA02",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "164000",
   "pgm_ele_name": "Information Technology Researc"
  },
  {
   "pgm_ele_code": "287800",
   "pgm_ele_name": "Special Projects - CCF"
  },
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "1640",
   "pgm_ref_txt": "INFORMATION TECHNOLOGY RESEARC"
  },
  {
   "pgm_ref_code": "2878",
   "pgm_ref_txt": "SPECIAL PROJECTS - CCF"
  },
  {
   "pgm_ref_code": "7798",
   "pgm_ref_txt": "SOFTWARE & HARDWARE FOUNDATION"
  },
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  },
  {
   "pgm_ref_code": "CL10",
   "pgm_ref_txt": "CLB-Career Life Balance"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0121",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 117400.0
  },
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 106861.0
  },
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 175739.0
  },
  {
   "fund_oblg_fiscal_yr": 2021,
   "fund_oblg_amt": 57329.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Software defects negatively impact society and result in significant economic and societal costs. New defects are ofter reported faster than developers can fix them, and so automated program repair techniques can potentially play an important and necessary role in improving software quality. This project led to the development of novel techniques that automatically repair defects in software written in multiple programming languages, focusing on overcoming challenges inherent to repairing defects in real-world software, and making progress on the overfitting problem that occurs when automated repair techniques introduce new defects while repairing others.</p>\n<p>Intellectual Merit: The project developed new techniques to reliably and automatically repair real-world defects in multiple programming languages. Improvements to the automated program repair process include (1) better techniques for localizing defects in large code bases, (2) better methods for finding donor code to use to replace defective code, (3) an increase in the complexity of the defects that can be repaired, and (4) the ability to repair code in multiple programming languages. Furthermore, this project advanced knowledge in cross-language code search and transformation, demonstrated the feasibility of using metaheuristic search for formal verification, and quantified repair quality and overfitting in program repair in real-world settings.</p>\n<p>Broader Impacts: Techniques that automatically repair defects can lead to higher-quality production software, which, in turn, can reduce the negative economic and societal effects of software defects. This project led to educational innovations that use program repair to enhance student learning, better preparing students for jobs in the software engineering industry. Finally, this project supported the training of multiple PhD, MS, and undergraduate students.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 07/14/2022<br>\n\t\t\t\t\tModified by: Yuriy&nbsp;Brun</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nSoftware defects negatively impact society and result in significant economic and societal costs. New defects are ofter reported faster than developers can fix them, and so automated program repair techniques can potentially play an important and necessary role in improving software quality. This project led to the development of novel techniques that automatically repair defects in software written in multiple programming languages, focusing on overcoming challenges inherent to repairing defects in real-world software, and making progress on the overfitting problem that occurs when automated repair techniques introduce new defects while repairing others.\n\nIntellectual Merit: The project developed new techniques to reliably and automatically repair real-world defects in multiple programming languages. Improvements to the automated program repair process include (1) better techniques for localizing defects in large code bases, (2) better methods for finding donor code to use to replace defective code, (3) an increase in the complexity of the defects that can be repaired, and (4) the ability to repair code in multiple programming languages. Furthermore, this project advanced knowledge in cross-language code search and transformation, demonstrated the feasibility of using metaheuristic search for formal verification, and quantified repair quality and overfitting in program repair in real-world settings.\n\nBroader Impacts: Techniques that automatically repair defects can lead to higher-quality production software, which, in turn, can reduce the negative economic and societal effects of software defects. This project led to educational innovations that use program repair to enhance student learning, better preparing students for jobs in the software engineering industry. Finally, this project supported the training of multiple PhD, MS, and undergraduate students.\n\n\t\t\t\t\tLast Modified: 07/14/2022\n\n\t\t\t\t\tSubmitted by: Yuriy Brun"
 }
}