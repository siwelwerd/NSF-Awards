{
 "awd_id": "1618923",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CSR: Small: Elastic and Robust Cloud Programming",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032925197",
 "po_email": "mmcclure@nsf.gov",
 "po_sign_block_name": "Marilyn McClure",
 "awd_eff_date": "2016-10-01",
 "awd_exp_date": "2021-09-30",
 "tot_intn_awd_amt": 485504.0,
 "awd_amount": 485504.0,
 "awd_min_amd_letter_date": "2016-08-11",
 "awd_max_amd_letter_date": "2017-03-03",
 "awd_abstract_narration": "The emergence of cloud computing is undoubtedly one of the major paradigm shifts of the last decade in information technology, and one with substantial economic impact. Indeed, the ability to rent computing resources on a need basis (as opposed to acquiring and managing infrastructure provisioned for peak work loads that may occur only rarely) supports many businesses of different kinds and sizes. However, while cloud infrastructures allow computing resources to be allocated and released very dynamically, developing software that leverages this potential to automatically adjust its usage of resources to its workload (e.g., the number of client connections) and performance goals at runtime is a hard task for software engineers. The goal of this project is thus to provide programmers support in the form of a programming model and runtime environment for developing such elastic applications. \r\n\r\nDevising such a generic programming model is however very challenging as it must reconcile simplicity (for programmers) with scalability (by facilitating parallelism and distribution) and robustness (by handling partial failures). Unfortunately, these properties may conflict. This project addresses the challenges through the following contributions. (1) Programming model and language: a novel object-oriented programming model variant called Atomic Events and Ownership Network (AEON) is proposed. AEON combines a simplified object model to reason about units of application state with a novel type of multiple ownership to streamline interaction between these units, and a novel notion of events for atomic client-server interaction. (2) Distributed runtime environment: a highly scalable and decentralized runtime environment for AEON is implemented, with support for dynamically adding and removing computational units, as well as for supporting the restructuring of their relationships without hampering consistency or conversely stalling progress. Heuristics to efficiently (re-)partition AEON applications are also proposed. (3) Resource management and fault tolerance: a resource management framework is leveraged for facilitating the mapping between application units and underlying resources; it is augmented to provide a notion of dependable resources achieving fault tolerance. (4) Evaluation: the developed support is evaluated on a wide variety of applications and across different cloud infrastructures. All developments are based on open-source software.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Former Principal Investigator",
   "pi_first_name": "Patrick",
   "pi_last_name": "Eugster",
   "pi_mid_init": "T",
   "pi_sufx_name": "",
   "pi_full_name": "Patrick T Eugster",
   "pi_email_addr": "peugster@cs.purdue.edu",
   "nsf_id": "000233715",
   "pi_start_date": "2016-08-11",
   "pi_end_date": "2017-03-03"
  },
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Xiangyu",
   "pi_last_name": "Zhang",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Xiangyu Zhang",
   "pi_email_addr": "xyzhang@cs.purdue.edu",
   "nsf_id": "000494973",
   "pi_start_date": "2016-12-05",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Patrick",
   "pi_last_name": "Eugster",
   "pi_mid_init": "T",
   "pi_sufx_name": "",
   "pi_full_name": "Patrick T Eugster",
   "pi_email_addr": "peugster@cs.purdue.edu",
   "nsf_id": "000233715",
   "pi_start_date": "2017-03-03",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Srivatsan",
   "pi_last_name": "Ravi",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Srivatsan Ravi",
   "pi_email_addr": "sravi@isi.edu",
   "nsf_id": "000731885",
   "pi_start_date": "2016-12-05",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Purdue University",
  "inst_street_address": "2550 NORTHWESTERN AVE # 1100",
  "inst_street_address_2": "",
  "inst_city_name": "WEST LAFAYETTE",
  "inst_state_code": "IN",
  "inst_state_name": "Indiana",
  "inst_phone_num": "7654941055",
  "inst_zip_code": "479061332",
  "inst_country_name": "United States",
  "cong_dist_code": "04",
  "st_cong_dist_code": "IN04",
  "org_lgl_bus_name": "PURDUE UNIVERSITY",
  "org_prnt_uei_num": "YRXVL4JYCEF5",
  "org_uei_num": "YRXVL4JYCEF5"
 },
 "perf_inst": {
  "perf_inst_name": "Purdue University",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "IN",
  "perf_st_name": "Indiana",
  "perf_zip_code": "479072107",
  "perf_ctry_code": "US",
  "perf_cong_dist": "04",
  "perf_st_cong_dist": "IN04",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 485504.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span>This project is concerned with supporting elasticity and fault tolerance of applications executing in third-party cloud data centers.&nbsp;<span>The main tenets are to shield the programmer as much as possible from explictly programming applications in a way using specific mechanism to achieve elasticity as well as fault tolerance, but instead proposing malleable systems that use at most high-level policies and simple configuration to achieve best possible performance.</span></span></p>\n<p>Concretely, the main outcomes of the project are three-fold: 1. A programming language based on the popular actor model that leverages ownership and topological constraints observed by many common elastic applications to automatically achieve consistency among events executing concurrently across multiple actors in a serializable way. The language is shown to achieve much better performance compared to other approaches achieving comparable consistency guarantees across a large number of relevant benchmark applications. 2. A policy language for specifying high-level elasticitly/scalability constraints for programs written in our language (1.) which allows the runtime environment to autonomously place and migrate actors for best performance. The policy language is shown to allow for easily saving 25% of resources for running with same performance, or achieving 20% better performance with the same amount of resources, compared to prior simpler approaches of achieving elasticity. 3. A resource management system that achieves fault tolerance of resources via largely automated replication, using several heuristics for avoiding exorbitant overheads through naive replication of every resource component; the system can be configured both both batch and continuous processing applications. The replication is shown to incur a runtime overhead as low as 6%, while achieving up to 68% faster completion times in the presence of failures.</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 11/07/2021<br>\n\t\t\t\t\tModified by: Patrick&nbsp;T&nbsp;Eugster</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThis project is concerned with supporting elasticity and fault tolerance of applications executing in third-party cloud data centers. The main tenets are to shield the programmer as much as possible from explictly programming applications in a way using specific mechanism to achieve elasticity as well as fault tolerance, but instead proposing malleable systems that use at most high-level policies and simple configuration to achieve best possible performance.\n\nConcretely, the main outcomes of the project are three-fold: 1. A programming language based on the popular actor model that leverages ownership and topological constraints observed by many common elastic applications to automatically achieve consistency among events executing concurrently across multiple actors in a serializable way. The language is shown to achieve much better performance compared to other approaches achieving comparable consistency guarantees across a large number of relevant benchmark applications. 2. A policy language for specifying high-level elasticitly/scalability constraints for programs written in our language (1.) which allows the runtime environment to autonomously place and migrate actors for best performance. The policy language is shown to allow for easily saving 25% of resources for running with same performance, or achieving 20% better performance with the same amount of resources, compared to prior simpler approaches of achieving elasticity. 3. A resource management system that achieves fault tolerance of resources via largely automated replication, using several heuristics for avoiding exorbitant overheads through naive replication of every resource component; the system can be configured both both batch and continuous processing applications. The replication is shown to incur a runtime overhead as low as 6%, while achieving up to 68% faster completion times in the presence of failures.\n\n \n\n\t\t\t\t\tLast Modified: 11/07/2021\n\n\t\t\t\t\tSubmitted by: Patrick T Eugster"
 }
}