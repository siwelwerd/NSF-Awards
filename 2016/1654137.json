{
 "awd_id": "1654137",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "EAGER: Improving Protocol Vulnerability Discovery via Semantic Interpretation of Textual Specifications",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032922981",
 "po_email": "pregalia@nsf.gov",
 "po_sign_block_name": "Phillip Regalia",
 "awd_eff_date": "2016-09-01",
 "awd_exp_date": "2017-08-31",
 "tot_intn_awd_amt": 160000.0,
 "awd_amount": 160000.0,
 "awd_min_amd_letter_date": "2016-08-16",
 "awd_max_amd_letter_date": "2016-08-16",
 "awd_abstract_narration": "Two methods used for vulnerability discovery in network protocols are testing and a semi-automated technique called model checking.  Testing and model checking implementations of network protocols is a tedious and time-consuming task, where significant manual effort goes into designing test cases and protocol property specifications. Both approaches require detailed and structured information about the tested protocols, in the form of messages, state machine, invariants, etc. Most of the time this information is derived manually by people with different levels of expertise. The process can be made more effective and less expensive by leveraging documentation and specification about these protocols and available in text format. Automatically analyzing the information available in documentations in the form of textual specification will open new avenues not only for improving vulnerability finding for network protocols, but for software design in general. \r\n\r\nThis project combines expertise from natural language processing and network security to create and build a framework for vulnerability discovery in network protocols, by leveraging semantic interpretation of textual specification, automated attack generation and injection, and property model checking for software implementations.  The framework consists of two phases, a knowledge building phase and a vulnerability finding phase. In the knowledge building phase,  semantic interpretation natural language processing techniques is applied to structured text (protocol specifications and documentation) and unstructured text (blogs, forums, and bug reports) to learn structured information about protocols such as: message formats, protocol state machine, constraints, etc.  In the second phase, the information learned in the knowledge phase is applied to two mechanisms for vulnerability finding, the first uses the structured protocol information to create and inject attacks, and the second uses the same information to derive protocol requirements and use them to model check finite state machines extracted from protocol implementations.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Cristina",
   "pi_last_name": "Nita-Rotaru",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Cristina Nita-Rotaru",
   "pi_email_addr": "c.nitarotaru@neu.edu",
   "nsf_id": "000230149",
   "pi_start_date": "2016-08-16",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Dan",
   "pi_last_name": "Goldwasser",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Dan Goldwasser",
   "pi_email_addr": "dgoldwas@purdue.edu",
   "nsf_id": "000687160",
   "pi_start_date": "2016-08-16",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Northeastern University",
  "inst_street_address": "360 HUNTINGTON AVE",
  "inst_street_address_2": "",
  "inst_city_name": "BOSTON",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "6173735600",
  "inst_zip_code": "021155005",
  "inst_country_name": "United States",
  "cong_dist_code": "07",
  "st_cong_dist_code": "MA07",
  "org_lgl_bus_name": "NORTHEASTERN UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "HLTMVS2JZBS6"
 },
 "perf_inst": {
  "perf_inst_name": "Northeastern University",
  "perf_str_addr": "360 Huntington Ave",
  "perf_city_name": "Boston",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "021155005",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "MA07",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "7916",
   "pgm_ref_txt": "EAGER"
  },
  {
   "pgm_ref_code": "9102",
   "pgm_ref_txt": "WOMEN, MINORITY, DISABLED, NEC"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 160000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><div class=\"page\" title=\"Page 1\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<p><span>Ensuring that protocol implementations are free of bugs and vulnerabilities and implement correctly their functionality is still one of the main challenges today. In spite of advancements in several areas, numerous protocols are deployed without specification or formal proofs for their design resulting in attack discovery on implementations, some after many years.&nbsp;</span></p>\n</div>\n</div>\n</div>\n<div class=\"page\" title=\"Page 1\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<p><span>Grammar-based fuzzing is a technique used to find software vulnerabilities by injecting well-formed data inputs generated following rules that encode certain application properties. For network protocols, such inputs consist of packets, and such rules represent relationships between packet header fields describing protocol semantics. While detailed specifications exist in the form of RFCs, standards, </span><span>etc.</span><span>, current grammar-based fuzzers for network protocols rely on human experts to manually specify these entities and relationships. </span></p>\n<p><span>In this work we study whether the coverage and effectiveness of grammar-based fuzzers for network protocols can be improved through automated learning of meaningful rules from existing textual documentation. We present a methodology and a framework for automated learning of meaningful entities and relationships (between them) for protocol packets by using natural language techniques. We then demonstrate and evaluate the inputs created using these relationships by applying it to a well known protocol, TCP and to a fuzzer for TCP, SNAKE. Our results show that the automated information learned with NLP techniques generated a smaller number of test cases while providing higher coverage and finding the same attacks as the system using manually specified packet information.&nbsp;</span></p>\n</div>\n</div>\n</div>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 12/21/2017<br>\n\t\t\t\t\tModified by: Cristina&nbsp;Nita-Rotaru</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n\n\n\nEnsuring that protocol implementations are free of bugs and vulnerabilities and implement correctly their functionality is still one of the main challenges today. In spite of advancements in several areas, numerous protocols are deployed without specification or formal proofs for their design resulting in attack discovery on implementations, some after many years. \n\n\n\n\n\n\n\nGrammar-based fuzzing is a technique used to find software vulnerabilities by injecting well-formed data inputs generated following rules that encode certain application properties. For network protocols, such inputs consist of packets, and such rules represent relationships between packet header fields describing protocol semantics. While detailed specifications exist in the form of RFCs, standards, etc., current grammar-based fuzzers for network protocols rely on human experts to manually specify these entities and relationships. \n\nIn this work we study whether the coverage and effectiveness of grammar-based fuzzers for network protocols can be improved through automated learning of meaningful rules from existing textual documentation. We present a methodology and a framework for automated learning of meaningful entities and relationships (between them) for protocol packets by using natural language techniques. We then demonstrate and evaluate the inputs created using these relationships by applying it to a well known protocol, TCP and to a fuzzer for TCP, SNAKE. Our results show that the automated information learned with NLP techniques generated a smaller number of test cases while providing higher coverage and finding the same attacks as the system using manually specified packet information. \n\n\n\n\n \n\n\t\t\t\t\tLast Modified: 12/21/2017\n\n\t\t\t\t\tSubmitted by: Cristina Nita-Rotaru"
 }
}