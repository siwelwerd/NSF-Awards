{
 "awd_id": "1615102",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CSR: Small: Co-Designing Distributed Coordination Systems and the Datacenter Network",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032925197",
 "po_email": "mmcclure@nsf.gov",
 "po_sign_block_name": "Marilyn McClure",
 "awd_eff_date": "2016-10-01",
 "awd_exp_date": "2020-08-31",
 "tot_intn_awd_amt": 428214.0,
 "awd_amount": 428214.0,
 "awd_min_amd_letter_date": "2016-08-08",
 "awd_max_amd_letter_date": "2016-08-08",
 "awd_abstract_narration": "Datacenter applications must remain continuously available and keep data consistent despite the fact that individual servers may fail. This is one of the fundamental challenges of distributed systems design: coordinating accesses to distributed services. Today's systems solve these problems with sophisticated distributed algorithms like Paxos and two-phase commit, yet these are frequently considered too expensive for practical use. This is because these algorithms are designed independently from -- and must make worst-case assumptions about -- the underlying network.\r\n\r\nThis project will explore a new approach to designing distributed systems for the datacenter: co-designing distributed protocols with the network layer. This includes designing new network-level primitives to enable datacenter networks to provide stronger semantics, e.g., an approximately synchronous mode of execution. Then these primitives will be used to design high-performance distributed systems, including state machine replication protocols and transactional storage systems.\r\n\r\nThis work will improve the ability of distributed systems to provide fault tolerance with high performance, increasing the robustness of critical datacenter infrastructure. It will also reduce the cost of strongly-consistent transactional storage, making it easier for application developers to reason about concurrent accesses to shared data, and thereby encourage innovation.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Daniel",
   "pi_last_name": "Ports",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Daniel Ports",
   "pi_email_addr": "drkp@cs.washington.edu",
   "nsf_id": "000655870",
   "pi_start_date": "2016-08-08",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Washington",
  "inst_street_address": "4333 BROOKLYN AVE NE",
  "inst_street_address_2": "",
  "inst_city_name": "SEATTLE",
  "inst_state_code": "WA",
  "inst_state_name": "Washington",
  "inst_phone_num": "2065434043",
  "inst_zip_code": "981951016",
  "inst_country_name": "United States",
  "cong_dist_code": "07",
  "st_cong_dist_code": "WA07",
  "org_lgl_bus_name": "UNIVERSITY OF WASHINGTON",
  "org_prnt_uei_num": "",
  "org_uei_num": "HD1WMN6945W6"
 },
 "perf_inst": {
  "perf_inst_name": "University of Washington",
  "perf_str_addr": "185 Stevens Way",
  "perf_city_name": "Seattle",
  "perf_st_code": "WA",
  "perf_st_name": "Washington",
  "perf_zip_code": "981952350",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "WA07",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 428214.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Today's most important applications are built as distributed systems running in datacenters. These systems rely on distributed coordination protocols. Key infrastructure services use distributed replication protocols to ensure that they are highly available, even as servers fail. Advanced distributed databases and storage services use distributed transaction protocols to coordinate accesses to shared data. However, today's protocols come with a substantial performance cost. This project showed that it is possible to build faster coordination systems by taking advantage of the datacenter environment.<br /><br />Traditional distributed protocols are designed independently from the network, treating it simply as an unreliable communications channel. This forces them to make worst-case assumptions about network behavior, e.g., asynchrony -- an approach well-suited for the traditional Internet. However, many distributed applications today ar edeployed in datacenters, where the network is more reliable, predictable, and extensible. Recent advances in programmable network hardware allow custom logic to be placed in network devices themselves, and run at extremely high speed. This means that in datacenter environments, there is now an opportunity to co-design distributed systems with the network layer.<br /><br />This project had two goals: 1) to show that it is possible to achieve new levels of approximately synchronous network behavior in the datacenter, and 2) to show that faster distributed systems can be built by taking advantage of this behavior. The former was achieved by prototyping new network primitives using programmable network devices, and the latter by building new distributed algorithms and systems.<br /><br />A key concept developed as part of this project is the idea of network sequencing. This is a conceptually simple idea: a network device assigns an increasing sequence number to each packet that it processes. But it is powerful for distributed system designers, as transforming the network from an asynchronous model to an ordered but unreliable model enables new distributed algorithms with important applications.<br /><br />We initially demonstrated the power of network sequencing by building a protocol called Network-Ordered Paxos (NOPaxos). NOPaxos is a state machine replication protocol for making systems fault tolerant. Traditional approaches (Multi-Paxos or Viewstamped Replication) come with high throughput and latency cost. By relying on network sequencing, NOPaxos can use a faster protocol in the common case, yielding a 4.7x throughput improvement and offering replication with less than 2% overhead.<br /><br />Subsequently, we demonstrated that an extended version of network sequencing can be applied to transaction process in distributed database systems. This is a more complex coordination problem as these databases use not only use cross-shard distributed transaction coordination protocols (e.g., two-phase commit) to make the system scalable yet consistent, but also inter-shard replication using replication protocols like Paxos. Our new protocol, Eris, replaces both with a simpler protocol that leverages network sequencing. We used it to build a prototype database that can implement certain strongly consistent distributed transactions without coordination, offering a 35x performance improvement over existing systems.<br /><br />In-network coordination support enables new optimizations for replicated systems. Ideally, it would be possible to build a replicated system where any server can process a read request, allowing system throughput to scale with the number of servers. Unfortunately, existing systems cannot do this safely, and indeed their throughput usually drops as the number of replicas increases. We addressed this by designing the Harmonia storage architecture. Its main insight is that an in-network primitive can track which objects in a storage system are currently being modified, making it possible to use a single-replica read optimization only when safe. The resulting system integrates with existing replication protocols and databases, and allows them to scale near-linearly for read requests.<br /><br />Finally, we showed that a new in-network coordination system can help storage systems handle skewed workloads, where some objects are much more popular than others. Traditionally, systems must provision each server for the most popular objects, wasting resources. Our design moves the mapping between objects and the servers that store them into an in-network coherence directory, allowing it to easily move or replicate objects for better load balancing. The Pegasus system implements this in-network coherence directory and protocol, demonstrating that a storage system can use it to tolerate skewed workloads with as many as 90% fewer servers.<br /><br />In sum, this project demonstrated the feasibility and benefits of a co-design approach between distributed coordination systems and datacenter network primitives. This approach makes it possible to build systems that are more than the sum of their parts: they achieve performance results impossible with traditional designs, enabling faster systems with better fault tolerance.<br /><br />The research described in this report is described in detail in papers published in systems and data management venues (the OSDI, SOSP, and VLDB conferences). Research artifacts, including implementations of the Network-Ordered Paxos, Eris, and Pegasus systems, have been released as open-source software and made available on GitHub.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 02/24/2021<br>\n\t\t\t\t\tModified by: Daniel&nbsp;Ports</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nToday's most important applications are built as distributed systems running in datacenters. These systems rely on distributed coordination protocols. Key infrastructure services use distributed replication protocols to ensure that they are highly available, even as servers fail. Advanced distributed databases and storage services use distributed transaction protocols to coordinate accesses to shared data. However, today's protocols come with a substantial performance cost. This project showed that it is possible to build faster coordination systems by taking advantage of the datacenter environment.\n\nTraditional distributed protocols are designed independently from the network, treating it simply as an unreliable communications channel. This forces them to make worst-case assumptions about network behavior, e.g., asynchrony -- an approach well-suited for the traditional Internet. However, many distributed applications today ar edeployed in datacenters, where the network is more reliable, predictable, and extensible. Recent advances in programmable network hardware allow custom logic to be placed in network devices themselves, and run at extremely high speed. This means that in datacenter environments, there is now an opportunity to co-design distributed systems with the network layer.\n\nThis project had two goals: 1) to show that it is possible to achieve new levels of approximately synchronous network behavior in the datacenter, and 2) to show that faster distributed systems can be built by taking advantage of this behavior. The former was achieved by prototyping new network primitives using programmable network devices, and the latter by building new distributed algorithms and systems.\n\nA key concept developed as part of this project is the idea of network sequencing. This is a conceptually simple idea: a network device assigns an increasing sequence number to each packet that it processes. But it is powerful for distributed system designers, as transforming the network from an asynchronous model to an ordered but unreliable model enables new distributed algorithms with important applications.\n\nWe initially demonstrated the power of network sequencing by building a protocol called Network-Ordered Paxos (NOPaxos). NOPaxos is a state machine replication protocol for making systems fault tolerant. Traditional approaches (Multi-Paxos or Viewstamped Replication) come with high throughput and latency cost. By relying on network sequencing, NOPaxos can use a faster protocol in the common case, yielding a 4.7x throughput improvement and offering replication with less than 2% overhead.\n\nSubsequently, we demonstrated that an extended version of network sequencing can be applied to transaction process in distributed database systems. This is a more complex coordination problem as these databases use not only use cross-shard distributed transaction coordination protocols (e.g., two-phase commit) to make the system scalable yet consistent, but also inter-shard replication using replication protocols like Paxos. Our new protocol, Eris, replaces both with a simpler protocol that leverages network sequencing. We used it to build a prototype database that can implement certain strongly consistent distributed transactions without coordination, offering a 35x performance improvement over existing systems.\n\nIn-network coordination support enables new optimizations for replicated systems. Ideally, it would be possible to build a replicated system where any server can process a read request, allowing system throughput to scale with the number of servers. Unfortunately, existing systems cannot do this safely, and indeed their throughput usually drops as the number of replicas increases. We addressed this by designing the Harmonia storage architecture. Its main insight is that an in-network primitive can track which objects in a storage system are currently being modified, making it possible to use a single-replica read optimization only when safe. The resulting system integrates with existing replication protocols and databases, and allows them to scale near-linearly for read requests.\n\nFinally, we showed that a new in-network coordination system can help storage systems handle skewed workloads, where some objects are much more popular than others. Traditionally, systems must provision each server for the most popular objects, wasting resources. Our design moves the mapping between objects and the servers that store them into an in-network coherence directory, allowing it to easily move or replicate objects for better load balancing. The Pegasus system implements this in-network coherence directory and protocol, demonstrating that a storage system can use it to tolerate skewed workloads with as many as 90% fewer servers.\n\nIn sum, this project demonstrated the feasibility and benefits of a co-design approach between distributed coordination systems and datacenter network primitives. This approach makes it possible to build systems that are more than the sum of their parts: they achieve performance results impossible with traditional designs, enabling faster systems with better fault tolerance.\n\nThe research described in this report is described in detail in papers published in systems and data management venues (the OSDI, SOSP, and VLDB conferences). Research artifacts, including implementations of the Network-Ordered Paxos, Eris, and Pegasus systems, have been released as open-source software and made available on GitHub.\n\n\t\t\t\t\tLast Modified: 02/24/2021\n\n\t\t\t\t\tSubmitted by: Daniel Ports"
 }
}