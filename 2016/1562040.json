{
 "awd_id": "1562040",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CAREER: Constructing Modern and Inclusive Trajectories for Computer Science Learning",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032925301",
 "po_email": "jforbes@nsf.gov",
 "po_sign_block_name": "Jeffrey Forbes",
 "awd_eff_date": "2015-09-01",
 "awd_exp_date": "2022-03-31",
 "tot_intn_awd_amt": 515999.0,
 "awd_amount": 542749.0,
 "awd_min_amd_letter_date": "2015-11-12",
 "awd_max_amd_letter_date": "2021-09-23",
 "awd_abstract_narration": "Tufts University proposes a CAREER award that will investigate new ways of teaching computer science to middle- and high-school students. Many of the computing technologies that youth use every day are built using ideas and techniques from computer science that are well outside of the standard introductory curriculum. Everyday activities like sending text messages, performing search queries, checking the weather, and playing online games all use systems that employ networked communication, parallelism, concurrency, and distributed systems. Yet, these techniques are not taught in existing K-12 Computer Science curricula, and they are barely covered in typical undergraduate-level computer science education. This has two consequences: Many youth perceive computer science as not relevant to their daily lives, perceptions that are not well challenged by current approaches to broadening participation; and many programmers apply these techniques poorly, which can have devastating consequences (e.g., the Northeast U.S. Blackout of 2003). This research aims to both counter perceptions of computer science?s relevance to everyday life, and to design new approaches to teaching computer science that train programmers to apply these techniques. \r\n\r\nThis project will investigate how new ways of teaching computer science to middle- and high-school students can simultaneously broaden participation in computing and develop a generation of computer scientists who are able to correctly reason about and implement concurrent, distributed, networked systems. The hypothesis is that by creating their own concurrent, connected physical and virtual technologies, students will come to better appreciate the role of computing in their lives, and, at the same time, learn advanced computational problem solving and engineering skills. The qualitative and quantitative design-based research methods will enable a better understanding of (1) what project genres can excite youth to learn about networked communication and parallel, concurrent, or distributed computing, (2) in what ways engineering systems in those genres differentially enable learning of relevant computer science topics, (3) how student thinking about these computer science ideas develops over time, and (4) how students' participation and conceptual development can be supported by new programmable technologies for learning. \r\n\r\nThe project will be conducted in close collaboration with local partners, including community centers and schools. It will specifically recruit youth from populations and communities that are under-represented in computer science, that is, girls, African-Americans, and Latinos. Youth and participating adults (e.g., teachers) will be partners in all phases of the work, and will guide the efforts on crafting engineering projects, curriculum, and tools that respond to their interests and preferences. All of the software, curriculum, and other products of our work will be open sourced in order to maximize their dissemination.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "R Benjamin",
   "pi_last_name": "Shapiro",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "R Benjamin Shapiro",
   "pi_email_addr": "rbs@cs.washington.edu",
   "nsf_id": "000618607",
   "pi_start_date": "2015-11-12",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Colorado at Boulder",
  "inst_street_address": "3100 MARINE ST",
  "inst_street_address_2": "STE 481 572 UCB",
  "inst_city_name": "Boulder",
  "inst_state_code": "CO",
  "inst_state_name": "Colorado",
  "inst_phone_num": "3034926221",
  "inst_zip_code": "803090001",
  "inst_country_name": "United States",
  "cong_dist_code": "02",
  "st_cong_dist_code": "CO02",
  "org_lgl_bus_name": "THE REGENTS OF THE UNIVERSITY OF COLORADO",
  "org_prnt_uei_num": "",
  "org_uei_num": "SPVKK1RC2MZ3"
 },
 "perf_inst": {
  "perf_inst_name": "University of Colorado at Boulder",
  "perf_str_addr": "3100 Marine Street Room 479",
  "perf_city_name": "Boulder",
  "perf_st_code": "CO",
  "perf_st_name": "Colorado",
  "perf_zip_code": "803090572",
  "perf_ctry_code": "US",
  "perf_cong_dist": "02",
  "perf_st_cong_dist": "CO02",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "171400",
   "pgm_ele_name": "Special Projects - CNS"
  },
  {
   "pgm_ele_code": "738200",
   "pgm_ele_name": "Computing Ed for 21st Century"
  },
  {
   "pgm_ele_code": "802000",
   "pgm_ele_name": "Cyberlearn & Future Learn Tech"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "1045",
   "pgm_ref_txt": "CAREER-Faculty Erly Career Dev"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 498748.0
  },
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 16000.0
  },
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 12000.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 16000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The world around us is filled with networked computational systems. We use them when we&nbsp;check the weather, message our friends, pay our bills, and conduct many other daily activities. Most of applications are distributed systems &mdash; collections of programs that communicate with one another to manage shared information in order to aid human activity. For example, checking the weather using a mobile application depends upon networks of sensors, data storage, computational forecasting models, and user-facing applications to render the results of sensing and forecasting information.&nbsp;</p>\n<p>&nbsp;</p>\n<p>The aim of this project was to investigate how to help novice programmers &mdash; especially youth &mdash; learn to understand how these networked systems work, and learn to create their own such systems, and then to share technological and pedagogical resources that could support improvements in how introductory computing education incorporates networked/distributed programming.</p>\n<p>&nbsp;</p>\n<p><strong>Intellectual Merits</strong></p>\n<p>We investigated the design of tools and curriculum that can foster student thinking about networked systems, and student agency to create their own networked systems. We used Design Based Research (DBR) methods to prototype, pilot, refine, deploy, study, and refine resources that enabled students to learn to reason about and design distributed programs. Through these research activities, we found that:</p>\n<ul>\n<li><span>&nbsp;</span>Attempting to scaffolding distributed programming by presenting abstractions that hide the distribution of information flows and computational process across multiple nodes in a network of programs (creating the illusion of programming a single node) did not work. These abstractions led to widespread student confusion about how programs executed, the nature of bugs that arose in their programs, and about how to fix such bugs. These results contradict prior work (<a href=\"https://doi.org/10.1016/j.ijcci.2014.02.003\"><span>https://doi.org/10.1016/j.ijcci.2014.02.003</span></a>) that describes the productivity of such approaches.&nbsp;</li>\n<li><span>&nbsp;</span>Students quickly learned to use simple message passing abstractions (e.g. send __ to __), to design network protocols that supported their construction of systems that aligned with their creative design and engineering goals.</li>\n<li><span>&nbsp;</span>Students also quickly became able to read others&rsquo; message passing code in order to debug (or disrupt) the functioning of distributed programs.&nbsp;</li>\n<li><span>&nbsp;</span>The same message passing abstractions were usable by students (middle school and older) to create a wide variety of application types (including wearables with mobile app integration, computer music performance systems) across multiple hardware and software platforms (e.g. Android, micro:bit, and Raspberry Pi).</li>\n<li>Collaborative design with teachers is a useful method for creating Domain-Specific Languages (DSLs) that are&nbsp; consistent with non-programmatic representations already in use in subject-area classrooms. This can narrow the Gulf of Execution (Hutchins et al., 1985) that students needed to cross in order to engage with classroom subject matter (e.g. music theory) in the computational domain. eDSLs can support collaborative design by supporting on-the-fly modification of concrete syntax without needing to heavily modify underlying runtime implementation details.</li>\n</ul>\n<p>&nbsp;</p>\n<p>In addition to investigating how to support student learning about the engineering of networked systems, we began investigating how teens make sense of one particular kind of networked system that is increasingly abundant: networked surveillance technology. Our initial, as yet unpublished findings, based on interviews and hands-on workshops with small groups of teens, are that:</p>\n<ul>\n<li>Some teens are keenly aware that technologies deployed by companies, schools, and other government agencies log their online and physical activities.&nbsp;</li>\n<li>Teens interpret this surveillance differently, and use their own of social/political values to weigh the tradeoffs (e.g. privacy for security) involved in these systems.&nbsp;</li>\n<li>Teens were generally pessimistic about their ability to reduce how much they are surveilled.</li>\n<li>Teens felt that they should have greater voice in data governance &mdash; how data about themselves is managed and shared.</li>\n</ul>\n<p>&nbsp;</p>\n<p><strong>Broader Impacts</strong></p>\n<ul>\n<li>The project involved approx. 100 youth and 6 teachers in direct education and research activities.</li>\n<li>We published approx. 7 peer reviewed papers about this research.</li>\n<li>Additional papers, focused on the surveillance-related research, are in preparation or under revision.</li>\n<li>We open sourced all project-produced resources, including software tools. Those tools were downloaded by educators worldwide.&nbsp;</li>\n<li>Industry and government entities created tutorials that introduced the project&rsquo;s innovations to others. For example, the Ministry of Education of France created a TV special about how to build networked systems with the project technologies.</li>\n</ul>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 06/22/2022<br>\n\t\t\t\t\tModified by: R. Benjamin&nbsp;Shapiro</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThe world around us is filled with networked computational systems. We use them when we check the weather, message our friends, pay our bills, and conduct many other daily activities. Most of applications are distributed systems &mdash; collections of programs that communicate with one another to manage shared information in order to aid human activity. For example, checking the weather using a mobile application depends upon networks of sensors, data storage, computational forecasting models, and user-facing applications to render the results of sensing and forecasting information. \n\n \n\nThe aim of this project was to investigate how to help novice programmers &mdash; especially youth &mdash; learn to understand how these networked systems work, and learn to create their own such systems, and then to share technological and pedagogical resources that could support improvements in how introductory computing education incorporates networked/distributed programming.\n\n \n\nIntellectual Merits\n\nWe investigated the design of tools and curriculum that can foster student thinking about networked systems, and student agency to create their own networked systems. We used Design Based Research (DBR) methods to prototype, pilot, refine, deploy, study, and refine resources that enabled students to learn to reason about and design distributed programs. Through these research activities, we found that:\n\n Attempting to scaffolding distributed programming by presenting abstractions that hide the distribution of information flows and computational process across multiple nodes in a network of programs (creating the illusion of programming a single node) did not work. These abstractions led to widespread student confusion about how programs executed, the nature of bugs that arose in their programs, and about how to fix such bugs. These results contradict prior work (https://doi.org/10.1016/j.ijcci.2014.02.003) that describes the productivity of such approaches. \n Students quickly learned to use simple message passing abstractions (e.g. send __ to __), to design network protocols that supported their construction of systems that aligned with their creative design and engineering goals.\n Students also quickly became able to read others\u2019 message passing code in order to debug (or disrupt) the functioning of distributed programs. \n The same message passing abstractions were usable by students (middle school and older) to create a wide variety of application types (including wearables with mobile app integration, computer music performance systems) across multiple hardware and software platforms (e.g. Android, micro:bit, and Raspberry Pi).\nCollaborative design with teachers is a useful method for creating Domain-Specific Languages (DSLs) that are  consistent with non-programmatic representations already in use in subject-area classrooms. This can narrow the Gulf of Execution (Hutchins et al., 1985) that students needed to cross in order to engage with classroom subject matter (e.g. music theory) in the computational domain. eDSLs can support collaborative design by supporting on-the-fly modification of concrete syntax without needing to heavily modify underlying runtime implementation details.\n\n\n \n\nIn addition to investigating how to support student learning about the engineering of networked systems, we began investigating how teens make sense of one particular kind of networked system that is increasingly abundant: networked surveillance technology. Our initial, as yet unpublished findings, based on interviews and hands-on workshops with small groups of teens, are that:\n\nSome teens are keenly aware that technologies deployed by companies, schools, and other government agencies log their online and physical activities. \nTeens interpret this surveillance differently, and use their own of social/political values to weigh the tradeoffs (e.g. privacy for security) involved in these systems. \nTeens were generally pessimistic about their ability to reduce how much they are surveilled.\nTeens felt that they should have greater voice in data governance &mdash; how data about themselves is managed and shared.\n\n\n \n\nBroader Impacts\n\nThe project involved approx. 100 youth and 6 teachers in direct education and research activities.\nWe published approx. 7 peer reviewed papers about this research.\nAdditional papers, focused on the surveillance-related research, are in preparation or under revision.\nWe open sourced all project-produced resources, including software tools. Those tools were downloaded by educators worldwide. \nIndustry and government entities created tutorials that introduced the project\u2019s innovations to others. For example, the Ministry of Education of France created a TV special about how to build networked systems with the project technologies.\n\n\n \n\n\t\t\t\t\tLast Modified: 06/22/2022\n\n\t\t\t\t\tSubmitted by: R. Benjamin Shapiro"
 }
}