{
 "awd_id": "1550588",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "Collaborative Research: SI2-SSI: Swift/E: Integrating Parallel Scripted Workflow into the Scientific Software Ecosystem",
 "cfda_num": "47.070",
 "org_code": "05090000",
 "po_phone": "7032922656",
 "po_email": "vchandol@nsf.gov",
 "po_sign_block_name": "Varun Chandola",
 "awd_eff_date": "2016-10-01",
 "awd_exp_date": "2022-09-30",
 "tot_intn_awd_amt": 2749446.0,
 "awd_amount": 2770286.0,
 "awd_min_amd_letter_date": "2016-09-13",
 "awd_max_amd_letter_date": "2021-09-01",
 "awd_abstract_narration": "Science and engineering research increasingly relies on repeated execution of a complex series of steps (i.e., workflows) to form hypotheses; conduct experiments; analyze results; and refine theory.   Computation is often essential throughout the workflow and in this case, software can improve productivity by managing the computational and data workflow.  Swift is one such open-source workflow system that has been developed and widely used in diverse areas ranging from materials simulations and climate modeling to neuroscience and genomics. This project extends the capabilities of Swift by integrating it with other software systems that enable collaboration, usability, maintainability, and productivity. The new ecosystem, Swift/E, will enable scientists and engineers to more productively create and run computational workflow campaigns of larger scale, and debug, execute, adapt, and disseminate them faster and easier than has been possible to date. These workflows embody and communicate the computational methods specific to each domain of scientific inquiry. Swift/E achieves community engagement and extensive productivity benefits for a large user community through an integrated program of research, education, and software dissemination. The project engages and serves science and engineering communities by creating patterns of practice for building and sharing reusable workflow libraries, and by training students, educators, and researchers in their use.  To advance the education of the next generation of computationally trained scientists, Swift/E powers a network of NSF-supported \"e-Labs\" that teach the concepts of collaborative parallel computational science at high school and undergraduate levels, reaching over a thousand students annually.\r\n\r\nThe open-source Swift/E \"ecosystem\" integrates Swift with several scientific software elements that play a major role in the national and global cyberinfrastructure of today. These elements are: Swift for the parallel scripting of scientific workflow; Globus for data cataloging, management, and high-speed wide-area transport; the Web-based Galaxy workflow portal for workflow composition, execution, and collaborative sharing; Jupyter for the interactive development, testing, debugging, and assembly of high level programming and workflow languages; Python and R for productively expressing high-level computational logic; and \"git\" and related tools and Web portals for revision control, code dissemination and sharing, and for the collaborative engagement of developers.  Swift's implicitly parallel programming language is minimal and compact.  Swift provides a facility for embedding other scripting languages (currently Python, R, Julia and Tcl) into its runtime environment.  This project merges newer extreme-scale \"Swift/T\" capabilities with the flexible and portable original \"Swift/K\" version to make the core Swift/E software element more powerful and flexible while lowering it?s ongoing support cost. Swift/E enhances usability by extending Swift's troubleshooting and inter-language integration facilities.  And with enhanced and innovative workflow sharing archives, new training materials, and a sustained program for user support and self-sustaining and expanding community engagement, the Swift/E project engages, supports, and sustains a large global science and engineering user base.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "OAC",
 "org_div_long_name": "Office of Advanced Cyberinfrastructure (OAC)",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Former Principal Investigator",
   "pi_first_name": "Michael",
   "pi_last_name": "Wilde",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Michael Wilde",
   "pi_email_addr": "wilde@uchicago.edu",
   "nsf_id": "000314122",
   "pi_start_date": "2016-09-13",
   "pi_end_date": "2018-01-09"
  },
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Kyle",
   "pi_last_name": "Chard",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Kyle Chard",
   "pi_email_addr": "chard@uchicago.edu",
   "nsf_id": "000694050",
   "pi_start_date": "2018-01-09",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Michael",
   "pi_last_name": "Wilde",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Michael Wilde",
   "pi_email_addr": "wilde@uchicago.edu",
   "nsf_id": "000314122",
   "pi_start_date": "2019-04-19",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Daniel",
   "pi_last_name": "Katz",
   "pi_mid_init": "S",
   "pi_sufx_name": "",
   "pi_full_name": "Daniel S Katz",
   "pi_email_addr": "dskatz@illinois.edu",
   "nsf_id": "000312962",
   "pi_start_date": "2018-01-09",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Dmitry",
   "pi_last_name": "Karpeev",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Dmitry Karpeev",
   "pi_email_addr": "karpeev@mcs.anl.gov",
   "nsf_id": "000243967",
   "pi_start_date": "2016-09-13",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Ravi",
   "pi_last_name": "Madduri",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Ravi Madduri",
   "pi_email_addr": "madduri@mcs.anl.gov",
   "nsf_id": "000558135",
   "pi_start_date": "2016-09-13",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Justin",
   "pi_last_name": "Wozniak",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Justin Wozniak",
   "pi_email_addr": "wozniak@uchicago.edu",
   "nsf_id": "000643808",
   "pi_start_date": "2016-09-13",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Chicago",
  "inst_street_address": "5801 S ELLIS AVE",
  "inst_street_address_2": "",
  "inst_city_name": "CHICAGO",
  "inst_state_code": "IL",
  "inst_state_name": "Illinois",
  "inst_phone_num": "7737028669",
  "inst_zip_code": "606375418",
  "inst_country_name": "United States",
  "cong_dist_code": "01",
  "st_cong_dist_code": "IL01",
  "org_lgl_bus_name": "UNIVERSITY OF CHICAGO",
  "org_prnt_uei_num": "ZUE9HKT2CLC9",
  "org_uei_num": "ZUE9HKT2CLC9"
 },
 "perf_inst": {
  "perf_inst_name": "University of Chicago",
  "perf_str_addr": "5735 S. Ellis Av.",
  "perf_city_name": "Chicago",
  "perf_st_code": "IL",
  "perf_st_name": "Illinois",
  "perf_zip_code": "606371403",
  "perf_ctry_code": "US",
  "perf_cong_dist": "01",
  "perf_st_cong_dist": "IL01",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "164000",
   "pgm_ele_name": "Information Technology Researc"
  },
  {
   "pgm_ele_code": "800400",
   "pgm_ele_name": "Software Institutes"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7433",
   "pgm_ref_txt": "CyberInfra Frmwrk 21st (CIF21)"
  },
  {
   "pgm_ref_code": "8004",
   "pgm_ref_txt": "Software Institutes"
  },
  {
   "pgm_ref_code": "8009",
   "pgm_ref_txt": "Scientifc Software Integration"
  },
  {
   "pgm_ref_code": "9102",
   "pgm_ref_txt": "WOMEN, MINORITY, DISABLED, NEC"
  },
  {
   "pgm_ref_code": "CL10",
   "pgm_ref_txt": "CLB-Career Life Balance"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 2749446.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 20840.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-ef12ddac-7fff-de1a-69c3-e5bb7df3c2e5\"> </span></p>\n<p dir=\"ltr\"><span>This project has supported the development of Parsl&mdash;an open source parallel programming library that is designed to address the distributed and parallel computing challenges inherent in modern research, such as the need to assemble programs from various components, to execute workflows across heterogenous computers, and to scale workloads to utilize large high-performance computing clusters. Parsl allows for 1) straightforward composition of programs in Python and 2) scalable parallel and distributed execution on heterogeneous cyberinfrastructure. The Parsl model is simple: users apply Python decorators to standard Python functions that wrap Python code or external scripts, applications, and binaries. These decorators express opportunities for parallelism in standard Python programs. Parsl implements an extensible execution model, via which programs can be executed on local or remote resources via two abstractions: executors and providers. Executors manage the way tasks are executed on computers, for example via pilot jobs or MPI jobs. Parsl supports three internal executors and four external community-contributed executors. Providers abstract the process of provisioning resources, for example via batch schedulers or cloud APIs.</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>The open source Parsl project, started in 2016, now has 73 global contributors, far exceeding the size of the funded development team. Parsl, which released production version 1.0 in 2020 and is now releasing new versions weekly, has been downloaded more than 1.6 million times and has been used extensively across national cyberinfrastructure, campus research computing centers, clouds, and even at the edge. Parsl is used by individual researchers, large research consortia, and in industry. Users span domains such as astrophysics, biology, materials science, and many others. In addition to end users, Parsl is also built into platforms such as QC Archive in quantum chemistry, and is a user of tools contributed by others such as WorkQueue and RADICAL-Pilot. Parsl has had significant impact in broad science domains, for example being used to produce the most interconnected simulated sky survey in preparation for analysis of the Vera C. Rubin Observatory Legacy Survey of Space and Time (LSST), to conduct one of the largest single batch imputations ever performed on 474k subjects in the Million Veterans Program, and to search for potential COVID-19 therapeutics in a search space of billions of candidate molecules.&nbsp;</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>The Parsl project has reached a broad community of users and contributors via the annual ParslFest meeting, with dozens of presentations outlining novel use of Parsl in myriad research domains. The project has engaged more than two dozen high school, undergraduate, and graduate students, with many contributing to the open source code and using Parsl in various application domains. These students have been equipped with crucial parallel and distributed computing skills for their future careers.</span></p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 02/08/2023<br>\n\t\t\t\t\tModified by: Kyle&nbsp;Chard</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n \nThis project has supported the development of Parsl&mdash;an open source parallel programming library that is designed to address the distributed and parallel computing challenges inherent in modern research, such as the need to assemble programs from various components, to execute workflows across heterogenous computers, and to scale workloads to utilize large high-performance computing clusters. Parsl allows for 1) straightforward composition of programs in Python and 2) scalable parallel and distributed execution on heterogeneous cyberinfrastructure. The Parsl model is simple: users apply Python decorators to standard Python functions that wrap Python code or external scripts, applications, and binaries. These decorators express opportunities for parallelism in standard Python programs. Parsl implements an extensible execution model, via which programs can be executed on local or remote resources via two abstractions: executors and providers. Executors manage the way tasks are executed on computers, for example via pilot jobs or MPI jobs. Parsl supports three internal executors and four external community-contributed executors. Providers abstract the process of provisioning resources, for example via batch schedulers or cloud APIs.\n\n \nThe open source Parsl project, started in 2016, now has 73 global contributors, far exceeding the size of the funded development team. Parsl, which released production version 1.0 in 2020 and is now releasing new versions weekly, has been downloaded more than 1.6 million times and has been used extensively across national cyberinfrastructure, campus research computing centers, clouds, and even at the edge. Parsl is used by individual researchers, large research consortia, and in industry. Users span domains such as astrophysics, biology, materials science, and many others. In addition to end users, Parsl is also built into platforms such as QC Archive in quantum chemistry, and is a user of tools contributed by others such as WorkQueue and RADICAL-Pilot. Parsl has had significant impact in broad science domains, for example being used to produce the most interconnected simulated sky survey in preparation for analysis of the Vera C. Rubin Observatory Legacy Survey of Space and Time (LSST), to conduct one of the largest single batch imputations ever performed on 474k subjects in the Million Veterans Program, and to search for potential COVID-19 therapeutics in a search space of billions of candidate molecules. \n\n \nThe Parsl project has reached a broad community of users and contributors via the annual ParslFest meeting, with dozens of presentations outlining novel use of Parsl in myriad research domains. The project has engaged more than two dozen high school, undergraduate, and graduate students, with many contributing to the open source code and using Parsl in various application domains. These students have been equipped with crucial parallel and distributed computing skills for their future careers.\n\n \n\n\t\t\t\t\tLast Modified: 02/08/2023\n\n\t\t\t\t\tSubmitted by: Kyle Chard"
 }
}