{
 "awd_id": "1651817",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "EAGER: Semi-automated Type-directed Programming",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2016-09-01",
 "awd_exp_date": "2019-08-31",
 "tot_intn_awd_amt": 159991.0,
 "awd_amount": 159991.0,
 "awd_min_amd_letter_date": "2016-08-12",
 "awd_max_amd_letter_date": "2016-08-12",
 "awd_abstract_narration": "Type-directed programming is a powerful programming paradigm found in strongly-typed functional languages where the types of a program are used to guide its development. Users of such languages frequently comment that their programs \"write themselves\" once they declare the appropriate types. In reality, the actual development process is far from automatic; developers still must apply manual reasoning principles to derive their program even though many of their choices are forced by the language's type system. This project aims to mechanize the type-directed programming process by leveraging techniques from program synthesis and type theory. The intellectual merits of this project are twofold: (1) the expansion of the theoretical foundations of program synthesis with types and (2) the application of these foundations towards program assistance tools that aid in type-directed programming. Beyond merely providing a tool that enhances the productivity of current functional programmers, the project's broader significance and importance is the crystallization of the benefits of type-directed programming in a form that allow non-functional programmers to understand, appreciate, and directly benefit from this programming paradigm.\r\n\r\nThe project extends prior work in the foundations of program synthesis with types, addressing issues of expressiveness and scalability encountered when adopting these foundations into synthesis tools. Notably, the project unifies type-based and verification-based approaches to program synthesis, allowing rich support for both algebraic and primitive data types as well as providing a common framework for understanding both styles of synthesis.  In addition, the project investigates semi-automated, rather than fully-automated, program synthesis where the user interacts with the synthesis tool throughout the synthesis process. The basis of this approach lies in adopting the refinement tree, a data structure that captures the potential shapes of programs that a synthesizer can produce, into a useful data structure for visualizing and interacting with this tool. By pursuing semi-automated synthesis, these tools scale up to real-world programming environments by using the developer as an oracle whenever the tool would otherwise take too long or get stuck searching for a solution.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Peter-Michael",
   "pi_last_name": "Osera",
   "pi_mid_init": "S",
   "pi_sufx_name": "",
   "pi_full_name": "Peter-Michael S Osera",
   "pi_email_addr": "osera@cs.grinnell.edu",
   "nsf_id": "000702113",
   "pi_start_date": "2016-08-12",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Grinnell College",
  "inst_street_address": "733 BROAD ST",
  "inst_street_address_2": "",
  "inst_city_name": "GRINNELL",
  "inst_state_code": "IA",
  "inst_state_name": "Iowa",
  "inst_phone_num": "6412694983",
  "inst_zip_code": "501122227",
  "inst_country_name": "United States",
  "cong_dist_code": "02",
  "st_cong_dist_code": "IA02",
  "org_lgl_bus_name": "THE TRUSTEES OF GRINNELL COLLEGE",
  "org_prnt_uei_num": "",
  "org_uei_num": "NRFXPGZU88G2"
 },
 "perf_inst": {
  "perf_inst_name": "Grinnell College",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "IA",
  "perf_st_name": "Iowa",
  "perf_zip_code": "501121690",
  "perf_ctry_code": "US",
  "perf_cong_dist": "02",
  "perf_st_cong_dist": "IA02",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7916",
   "pgm_ref_txt": "EAGER"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  },
  {
   "pgm_ref_code": "8206",
   "pgm_ref_txt": "Formal Methods and Verification"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 159991.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Software developers often balance seemingly opposing desires when choosing tools: building systems quickly and efficiently and building correct systems. This balance is especially evident in the developer's choice of programming language. Modern programming languages fall decidedly into the latter camp with features that ensure correctness but sacrifice ease of use and approachability. One such feature is a language's type system, which checks some aspects of a program's behavior before it is executed. While advanced type systems check more behavior, they can become decidedly more difficult for the programmer to use.<br />However, users of these languages have noticed a counterintuitive phenomenon with rich type systems. They comment that once they have understood how to program within the system, their programs \"write themselves,\" a process known as type-directed programming. While true to some extent, this process is far from automatic. The developer must still write their program by hand even though the type system mostly forces their program design.<br />In this project, we studied how to automate this type-directed programming process. We identified a vital connection between the areas of program synthesis and type inference&mdash;the constraint&mdash;which allows us to use techniques from the former to implement the latter. We then built a theory of program synthesis with constraints that allowed us to extend prior techniques in the space towards synthesizing programs in languages with advanced type systems. This theory also generalized several synthesis and inference-related techniques in the field that were previously studied in isolation, allowing for further cross-pollination of ideas and methods within programming language theory. Finally, we made this theory practical by building a tool for the Haskell programming language that helps developers perform type-directed programming in a more automated fashion than what was previously possible. This tool will be made publicly available and will hopefully encourage the development of similar tools for other languages, helping spur forward the adoption of more modern programming languages in the ecosystem.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 12/29/2019<br>\n\t\t\t\t\tModified by: Peter-Michael&nbsp;Osera</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nSoftware developers often balance seemingly opposing desires when choosing tools: building systems quickly and efficiently and building correct systems. This balance is especially evident in the developer's choice of programming language. Modern programming languages fall decidedly into the latter camp with features that ensure correctness but sacrifice ease of use and approachability. One such feature is a language's type system, which checks some aspects of a program's behavior before it is executed. While advanced type systems check more behavior, they can become decidedly more difficult for the programmer to use.\nHowever, users of these languages have noticed a counterintuitive phenomenon with rich type systems. They comment that once they have understood how to program within the system, their programs \"write themselves,\" a process known as type-directed programming. While true to some extent, this process is far from automatic. The developer must still write their program by hand even though the type system mostly forces their program design.\nIn this project, we studied how to automate this type-directed programming process. We identified a vital connection between the areas of program synthesis and type inference&mdash;the constraint&mdash;which allows us to use techniques from the former to implement the latter. We then built a theory of program synthesis with constraints that allowed us to extend prior techniques in the space towards synthesizing programs in languages with advanced type systems. This theory also generalized several synthesis and inference-related techniques in the field that were previously studied in isolation, allowing for further cross-pollination of ideas and methods within programming language theory. Finally, we made this theory practical by building a tool for the Haskell programming language that helps developers perform type-directed programming in a more automated fashion than what was previously possible. This tool will be made publicly available and will hopefully encourage the development of similar tools for other languages, helping spur forward the adoption of more modern programming languages in the ecosystem.\n\n\t\t\t\t\tLast Modified: 12/29/2019\n\n\t\t\t\t\tSubmitted by: Peter-Michael Osera"
 }
}