{
 "awd_id": "1563826",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "NeTS: Medium: Collaborative Research: Language and Hardware Primitives for Programming the Data Plane in High-Speed Networks",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Darleen Fisher",
 "awd_eff_date": "2016-06-01",
 "awd_exp_date": "2022-05-31",
 "tot_intn_awd_amt": 898333.0,
 "awd_amount": 898333.0,
 "awd_min_amd_letter_date": "2016-05-31",
 "awd_max_amd_letter_date": "2021-06-02",
 "awd_abstract_narration": "The evolution of network routers and switches has been driven primarily by performance. Recently, thanks in part to the emergence of large datacenter networks, the need for better control over network operations, and the desire for new features, programmability of routers has become as important as performance. In response, researchers and practitioners have developed reconfigurable switching chips with a RISC-inspired pipeline architecture, which provide some programmability through hardware primitives that can be configured into a processing pipeline with software directives. Reconfigurable switches are gaining traction as they perform the same as fixed-function chipsets but with lower area overhead.\r\n\r\nThis project seeks to extend the state-of-the-art by developing higher-level programming abstractions and traffic management algorithms for reconfigurable switches. This project will investigate:\r\n1) a C-like language and an abstract machine representing modern switches,\r\n2) a compiler to convert the transactional specification to the pipelined abstract machine, and a\r\n3) Push-In, First-Out (PIFO) primitive for programmable packet scheduling.\r\n\r\nThis project will make programming high-speed switches easier and more expressive, which will be useful in datacenters, enterprises, and service provider networks. Research findings will be incorporated into the undergraduate and graduate curricula, offering students an opportunity to implement network protocols in C, a familiar language, but run them at hardware speeds. The course material will be made widely available through MIT OpenCourseWare and on the MITx MOOC.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Hari",
   "pi_last_name": "Balakrishnan",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Hari Balakrishnan",
   "pi_email_addr": "hari@csail.mit.edu",
   "nsf_id": "000489957",
   "pi_start_date": "2016-05-31",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Mohammad",
   "pi_last_name": "Alizadeh",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Mohammad Alizadeh",
   "pi_email_addr": "alizadeh@csail.mit.edu",
   "nsf_id": "000703497",
   "pi_start_date": "2016-05-31",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Massachusetts Institute of Technology",
  "inst_street_address": "77 MASSACHUSETTS AVE",
  "inst_street_address_2": "",
  "inst_city_name": "CAMBRIDGE",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "6172531000",
  "inst_zip_code": "021394301",
  "inst_country_name": "United States",
  "cong_dist_code": "07",
  "st_cong_dist_code": "MA07",
  "org_lgl_bus_name": "MASSACHUSETTS INSTITUTE OF TECHNOLOGY",
  "org_prnt_uei_num": "E2NYLCDML6V1",
  "org_uei_num": "E2NYLCDML6V1"
 },
 "perf_inst": {
  "perf_inst_name": "Massachusetts Institute of Technology",
  "perf_str_addr": "77 Massachusetts Ave.",
  "perf_city_name": "Cambridge",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "021394307",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "MA07",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "736300",
   "pgm_ele_name": "Networking Technology and Syst"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 297768.0
  },
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 600565.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><div><span id=\"docs-internal-guid-c87a74da-7fff-fe5e-43ae-9f33869ba43b\">\n<p dir=\"ltr\"><span>Performance has driven the evolution of network routers. Recently, thanks in part to the emergence of large datacenter networks, the need for better control over network operations, and the desire for new features, network programmability has become as important as performance. This project made contributions to the development of programmable high-speed networks.</span></p>\n<p dir=\"ltr\"><span>Intellectual merits:</span></p>\n<ol>\n<li dir=\"ltr\">\n<p dir=\"ltr\"><span>Domino</span><span>: A system to program switch data-plane algorithms in a high-level language and automatically compile them to a pipelined hardware implementation that runs at line-rate (with no loss of performance). The key challenge is that many data-plane algorithms create and modify algorithmic state. To achieve line-rate programmability for stateful algorithms, Domino introduces a set of hardware primitives --- an \"instruction set\" for switches --- that encompass a wide range of algorithms and can be implemented at line-rate. Domino also develops the notion of a </span><span>packet transaction</span><span>: a sequential packet processing code block that is atomic and isolated from other such code blocks.&nbsp;</span></p>\n</li>\n<li dir=\"ltr\">\n<p dir=\"ltr\"><span>PIFO</span><span>: Switches today provide a small menu of scheduling algorithms. While we can tweak parameters, we cannot modify algorithmic logic or add a new algorithm after the switch has been designed. Programming the packet scheduler has so far been considered off-limits --- in part because algorithms are so varied, and because the scheduler sits at the heart of the shared packet buffer where timing requirements are tightest. This project developed PIFO (push-in-first-out), a programmable packet scheduler that allows a wide range of scheduling algorithms --- potentially algorithms unknown today --- to be programmed into a switch without requiring hardware redesign.</span></p>\n</li>\n<li dir=\"ltr\">\n<p dir=\"ltr\"><span>Marple</span><span>: Network performance monitoring today is restricted by the lack of proper switch support for measurement, forcing operators to use endpoints. Switch vendors have added more monitoring features to switches, but the current trajectory of adding specific features is unsustainable given the ever-changing demands of network operators. Marple is a high-performance query language and execution engine. The language is modeled on functional constructs like map, filter, groupby, and zip. Marple implements a programmable key-value store on switches. The scalable key-value store performs flexible aggregations at line rate (e.g., a moving average of queueing latencies per flow).</span></p>\n</li>\n<li dir=\"ltr\">\n<p dir=\"ltr\"><span>CCP</span><span>: A new way to implement congestion control algorithms (CCAs). Instead of writing CCAs in kernels, CCP places CCA logic in a separate agent running </span><span>outside</span><span> the datapath. The datapath encapsulates the information available to it about congestion signals like round-trip times (RTT), receptions, losses, ECN, etc., and periodically provides this information to an off-datapath module that runs the CCAs. By exposing an analogous interface to control transmission parameters such as the window size, pacing rate, and transmission pattern, the datapath transmits data according to the policies specified by the CCA.</span></p>\n</li>\n<li dir=\"ltr\">\n<p dir=\"ltr\"><span>Bundler</span><span>: A new middlebox built atop CCP enabling organizations to enforce scheduling policies on traffic from the edge. Queues represent </span><span>scheduling power</span><span>: where queues build, operators can enforce scheduling policy by reordering or rate-limiting packets. In the Internet today, however, there is a mismatch between where queues build and where scheduling policy is best enforced; while queues build at bottleneck links in the middle of the network, domains at the edge have the most visibility to specify scheduling. Bundler sits at the edge of a sender's domain, brings together groups of flows that share a common destination domain, and performs rate control for each bundle such that the queuing induced by its traffic is moved from the bottleneck to Bundler itself. This allows the sender to unilaterally enforce its desired scheduling policy across the bundled traffic.&nbsp;</span></p>\n</li>\n<li dir=\"ltr\">\n<p dir=\"ltr\"><span>Nimbus</span><span>: Introduced a new metric, \"elasticity,\" which characterizes the nature of cross-traffic. Elasticity captures whether cross traffic reacts to changes in available bandwidth. Achieving high throughput and low delay has been a key goal of congestion control research for decades. To achieve them, researchers have proposed many delay-controlling algorithms. There is, however, a major obstacle to deploying such algorithms: dismal throughput when competing against buffer-filling flows. The reason is that buffer-filling senders steadily increase their rates, causing queuing delays to rise; in response, a competing delay-controlling flow will reduce its rate. The buffer-filling flow then grabs this freed-up bandwidth. The throughput of the delay-controlling flow plummets, but delays don?t reduce. Because a lot of traffic on the Internet is buffer-filling, it?s hard to justify deploying a delay-controlling scheme. We developed an elasticity detector (Nimbus) to solve these problems.</span></p>\n</li>\n</ol>\n<p dir=\"ltr\"><span>Broader impacts:</span></p>\n<ol>\n<li dir=\"ltr\">\n<p dir=\"ltr\"><span>Sivaraman received the SIGCOMM Doctoral Dissertation Award. Marple received the SIGCOMM?17 Best Paper Award. Bundler won the EuroSys?21 Best Artifact Award.</span></p>\n</li>\n<li dir=\"ltr\">\n<p dir=\"ltr\"><span>Six SIGCOMM and 1 EuroSys paper.&nbsp;</span></p>\n</li>\n<li dir=\"ltr\">\n<p dir=\"ltr\"><span>Two PhD students from the project are now in faculty positions and two are in the tech industry (one at a large company and another at a new startup).</span></p>\n</li>\n<li dir=\"ltr\">\n<p dir=\"ltr\"><span>Several concepts from Domino are part of the P4 standard.</span></p>\n</li>\n<li dir=\"ltr\">\n<p dir=\"ltr\"><span>Some graduate networking courses now teach packet transactions (from Domino) and PIFO. </span></p>\n</li>\n</ol></span></div><br>\n<p>\n\t\t\t\t      \tLast Modified: 10/29/2023<br>\n\t\t\t\t\tModified by: Hari&nbsp;Balakrishnan</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nPerformance has driven the evolution of network routers. Recently, thanks in part to the emergence of large datacenter networks, the need for better control over network operations, and the desire for new features, network programmability has become as important as performance. This project made contributions to the development of programmable high-speed networks.\nIntellectual merits:\n\n\nDomino: A system to program switch data-plane algorithms in a high-level language and automatically compile them to a pipelined hardware implementation that runs at line-rate (with no loss of performance). The key challenge is that many data-plane algorithms create and modify algorithmic state. To achieve line-rate programmability for stateful algorithms, Domino introduces a set of hardware primitives --- an \"instruction set\" for switches --- that encompass a wide range of algorithms and can be implemented at line-rate. Domino also develops the notion of a packet transaction: a sequential packet processing code block that is atomic and isolated from other such code blocks. \n\n\nPIFO: Switches today provide a small menu of scheduling algorithms. While we can tweak parameters, we cannot modify algorithmic logic or add a new algorithm after the switch has been designed. Programming the packet scheduler has so far been considered off-limits --- in part because algorithms are so varied, and because the scheduler sits at the heart of the shared packet buffer where timing requirements are tightest. This project developed PIFO (push-in-first-out), a programmable packet scheduler that allows a wide range of scheduling algorithms --- potentially algorithms unknown today --- to be programmed into a switch without requiring hardware redesign.\n\n\nMarple: Network performance monitoring today is restricted by the lack of proper switch support for measurement, forcing operators to use endpoints. Switch vendors have added more monitoring features to switches, but the current trajectory of adding specific features is unsustainable given the ever-changing demands of network operators. Marple is a high-performance query language and execution engine. The language is modeled on functional constructs like map, filter, groupby, and zip. Marple implements a programmable key-value store on switches. The scalable key-value store performs flexible aggregations at line rate (e.g., a moving average of queueing latencies per flow).\n\n\nCCP: A new way to implement congestion control algorithms (CCAs). Instead of writing CCAs in kernels, CCP places CCA logic in a separate agent running outside the datapath. The datapath encapsulates the information available to it about congestion signals like round-trip times (RTT), receptions, losses, ECN, etc., and periodically provides this information to an off-datapath module that runs the CCAs. By exposing an analogous interface to control transmission parameters such as the window size, pacing rate, and transmission pattern, the datapath transmits data according to the policies specified by the CCA.\n\n\nBundler: A new middlebox built atop CCP enabling organizations to enforce scheduling policies on traffic from the edge. Queues represent scheduling power: where queues build, operators can enforce scheduling policy by reordering or rate-limiting packets. In the Internet today, however, there is a mismatch between where queues build and where scheduling policy is best enforced; while queues build at bottleneck links in the middle of the network, domains at the edge have the most visibility to specify scheduling. Bundler sits at the edge of a sender's domain, brings together groups of flows that share a common destination domain, and performs rate control for each bundle such that the queuing induced by its traffic is moved from the bottleneck to Bundler itself. This allows the sender to unilaterally enforce its desired scheduling policy across the bundled traffic. \n\n\nNimbus: Introduced a new metric, \"elasticity,\" which characterizes the nature of cross-traffic. Elasticity captures whether cross traffic reacts to changes in available bandwidth. Achieving high throughput and low delay has been a key goal of congestion control research for decades. To achieve them, researchers have proposed many delay-controlling algorithms. There is, however, a major obstacle to deploying such algorithms: dismal throughput when competing against buffer-filling flows. The reason is that buffer-filling senders steadily increase their rates, causing queuing delays to rise; in response, a competing delay-controlling flow will reduce its rate. The buffer-filling flow then grabs this freed-up bandwidth. The throughput of the delay-controlling flow plummets, but delays don?t reduce. Because a lot of traffic on the Internet is buffer-filling, it?s hard to justify deploying a delay-controlling scheme. We developed an elasticity detector (Nimbus) to solve these problems.\n\n\nBroader impacts:\n\n\nSivaraman received the SIGCOMM Doctoral Dissertation Award. Marple received the SIGCOMM?17 Best Paper Award. Bundler won the EuroSys?21 Best Artifact Award.\n\n\nSix SIGCOMM and 1 EuroSys paper. \n\n\nTwo PhD students from the project are now in faculty positions and two are in the tech industry (one at a large company and another at a new startup).\n\n\nSeveral concepts from Domino are part of the P4 standard.\n\n\nSome graduate networking courses now teach packet transactions (from Domino) and PIFO. \n\n\n\n\t\t\t\t\tLast Modified: 10/29/2023\n\n\t\t\t\t\tSubmitted by: Hari Balakrishnan"
 }
}