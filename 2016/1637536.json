{
 "awd_id": "1637536",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "AitF: Efficient Memory Management via Randomized, Streaming, and Online Algorithms",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "A. Funda Ergun",
 "awd_eff_date": "2016-09-01",
 "awd_exp_date": "2022-08-31",
 "tot_intn_awd_amt": 500000.0,
 "awd_amount": 500000.0,
 "awd_min_amd_letter_date": "2016-08-24",
 "awd_max_amd_letter_date": "2016-08-24",
 "awd_abstract_narration": "Memory management is an essential component of computer systems ranging from small low-power and mobile devices up to large data centers. Memory is necessary for any non-trivial computing process that needs to be performed in order to store the input data and the state of the computation. The goal of efficient memory management is to allocate the available memory to the different processes that need to be performed in such a way that the speed of the subsequent computation is maximized; the energy used by the system is minimized; and the available memory hardware is fully exploited. This project is focused on improving existing memory management approaches and could lead to significant improvements in the computer infrastructure used in a broad range of applications. The project will also train students, both through curriculum development and direct involvement in the research, in the application of algorithm design to the field of computer systems.\r\n\r\nIn this project, we focus on designing and analyzing new randomized algorithms for various problems that arise in the context of memory management. These include both lightweight data stream or \"sketch-based\" algorithms that are fast and use limited memory, and online algorithms that need to commit to decisions about how to best to use a small amount of available memory without knowing what data or operations on this data will be relevant in the future. We will also develop a new randomized technique for compacting memory even for languages such as C and C++ that use explicit memory management and where objects cannot be relocated. Our approach should mitigate the risk of potentially catastrophic fragmentation and thereby improve memory utilization and performance.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Andrew",
   "pi_last_name": "McGregor",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Andrew McGregor",
   "pi_email_addr": "mcgregor@cs.umass.edu",
   "nsf_id": "000536261",
   "pi_start_date": "2016-08-24",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Emery",
   "pi_last_name": "Berger",
   "pi_mid_init": "D",
   "pi_sufx_name": "",
   "pi_full_name": "Emery D Berger",
   "pi_email_addr": "emery@cs.umass.edu",
   "nsf_id": "000483414",
   "pi_start_date": "2016-08-24",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Massachusetts Amherst",
  "inst_street_address": "101 COMMONWEALTH AVE",
  "inst_street_address_2": "",
  "inst_city_name": "AMHERST",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "4135450698",
  "inst_zip_code": "010039252",
  "inst_country_name": "United States",
  "cong_dist_code": "02",
  "st_cong_dist_code": "MA02",
  "org_lgl_bus_name": "UNIVERSITY OF MASSACHUSETTS",
  "org_prnt_uei_num": "VGJHK59NMPK9",
  "org_uei_num": "VGJHK59NMPK9"
 },
 "perf_inst": {
  "perf_inst_name": "University of Massachusetts Amherst",
  "perf_str_addr": "",
  "perf_city_name": "Amherst",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "010039264",
  "perf_ctry_code": "US",
  "perf_cong_dist": "02",
  "perf_st_cong_dist": "MA02",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "723900",
   "pgm_ele_name": "Algorithms in the Field"
  }
 ],
 "pgm_ref": null,
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 500000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-e1a63366-7fff-602f-ea1a-5a8773390890\"> </span></p>\n<p dir=\"ltr\"><span>We developed new algorithms and systems for efficient memory management and related problems at the intersection of theoretical computer science and computer systems. Highlights of intellectual merit included:&nbsp;</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>a)&nbsp; Mesh: Programs written in widely-used programming languages such as C and C++ can suffer from serious memory fragmentation, i.e., the program stores data in non-sequential blocks of memory and the gaps between these blocks are too small to be useful.&nbsp; This fragmentation leads to low utilization of memory, degraded performance, and can even cause application failure due to memory exhaustion. We developed the first memory allocator that eliminates fragmentation in unmodified C/C++ applications. Mesh combines novel randomized algorithms with widely-supported virtual memory operations to provably reduce fragmentation. Mesh generally matches the runtime performance of state-of-the-art memory allocators while reducing memory consumption.</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>b) Storage Capacity with Local Constraints: We proved new guarantees on the performance of distributed storage systems with local reconstruction constraints. Specifically, in many applications data is stored at multiple locations/machines and we can think of a graph where the nodes correspond to these locations and edges correspond to direct connections between these locations. The data should be encoded with some redundancy such that if the memory at any single node fails, the contents of this memory can be reconstructed given the contents of the memory stored at neighboring nodes. We designed better approximation algorithms for this problem and a related problem called index coding, along with exact algorithms for a certain natural class of graphs.</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>c) Predict-Route: Accurate prediction of network paths between arbitrary hosts on the Internet is of vital importance for network operators, cloud providers, and academic researchers. However, it is not feasible to collect and maintain the entire set of paths in the network because of conflicting commercial interests and because of the massive size of the relevant graph. We presented PredictRoute, a system that predicts network paths between hosts on the Internet using historical knowledge of the data and measurements between carefully chosen pairs of hosts. PredictRoute's strategy for exploring network paths discovers 4X more of the relevant steps than other well-known strategies used in practice today.&nbsp;</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>d) BLeak (Browser Leak debugger): This is the first system for automatically debugging memory leaks in web applications. BLeak&rsquo;s algorithms leverage the observation that in modern web applications, users often repeatedly return to the same (approximate) visual state (e.g., the inbox view in Gmail). Sustained growth between round trips is a strong indicator of a memory leak. We develop a number of new algorithms, including the computation of a new graph-based metric that accurately measures the expected impact of eliminating a particular memory leak. BLeak is practical and simple to use. We used it to identify and fix over 50 memory leaks in popular libraries and apps including Airbnb, AngularJS, Google Analytics, Google Maps SDK, and jQuery.</span></p>\n<p><br /><span>Broader Impacts of the project included the training of multiple graduate students including two that have already completed their Ph.D. Software for Mesh, Predict-Route, and BLeak were released to the public. </span><span>Key parts of BLeak have been incorporated directly into Google's Android Studio software development kit.</span></p>\n<p dir=\"ltr\">&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 01/10/2023<br>\n\t\t\t\t\tModified by: Andrew&nbsp;Mcgregor</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n \nWe developed new algorithms and systems for efficient memory management and related problems at the intersection of theoretical computer science and computer systems. Highlights of intellectual merit included: \n\n \na)  Mesh: Programs written in widely-used programming languages such as C and C++ can suffer from serious memory fragmentation, i.e., the program stores data in non-sequential blocks of memory and the gaps between these blocks are too small to be useful.  This fragmentation leads to low utilization of memory, degraded performance, and can even cause application failure due to memory exhaustion. We developed the first memory allocator that eliminates fragmentation in unmodified C/C++ applications. Mesh combines novel randomized algorithms with widely-supported virtual memory operations to provably reduce fragmentation. Mesh generally matches the runtime performance of state-of-the-art memory allocators while reducing memory consumption.\n\n \nb) Storage Capacity with Local Constraints: We proved new guarantees on the performance of distributed storage systems with local reconstruction constraints. Specifically, in many applications data is stored at multiple locations/machines and we can think of a graph where the nodes correspond to these locations and edges correspond to direct connections between these locations. The data should be encoded with some redundancy such that if the memory at any single node fails, the contents of this memory can be reconstructed given the contents of the memory stored at neighboring nodes. We designed better approximation algorithms for this problem and a related problem called index coding, along with exact algorithms for a certain natural class of graphs.\n\n \nc) Predict-Route: Accurate prediction of network paths between arbitrary hosts on the Internet is of vital importance for network operators, cloud providers, and academic researchers. However, it is not feasible to collect and maintain the entire set of paths in the network because of conflicting commercial interests and because of the massive size of the relevant graph. We presented PredictRoute, a system that predicts network paths between hosts on the Internet using historical knowledge of the data and measurements between carefully chosen pairs of hosts. PredictRoute's strategy for exploring network paths discovers 4X more of the relevant steps than other well-known strategies used in practice today. \n\n \nd) BLeak (Browser Leak debugger): This is the first system for automatically debugging memory leaks in web applications. BLeak\u2019s algorithms leverage the observation that in modern web applications, users often repeatedly return to the same (approximate) visual state (e.g., the inbox view in Gmail). Sustained growth between round trips is a strong indicator of a memory leak. We develop a number of new algorithms, including the computation of a new graph-based metric that accurately measures the expected impact of eliminating a particular memory leak. BLeak is practical and simple to use. We used it to identify and fix over 50 memory leaks in popular libraries and apps including Airbnb, AngularJS, Google Analytics, Google Maps SDK, and jQuery.\n\n\nBroader Impacts of the project included the training of multiple graduate students including two that have already completed their Ph.D. Software for Mesh, Predict-Route, and BLeak were released to the public. Key parts of BLeak have been incorporated directly into Google's Android Studio software development kit.\n \n\n\t\t\t\t\tLast Modified: 01/10/2023\n\n\t\t\t\t\tSubmitted by: Andrew Mcgregor"
 }
}