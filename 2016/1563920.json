{
 "awd_id": "1563920",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "SHF: Medium: Contract-Based Black-Box Assurance",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2016-06-15",
 "awd_exp_date": "2022-05-31",
 "tot_intn_awd_amt": 1004019.0,
 "awd_amount": 1004019.0,
 "awd_min_amd_letter_date": "2016-06-10",
 "awd_max_amd_letter_date": "2021-05-25",
 "awd_abstract_narration": "Systems in diverse domains such as transportation, medicine, aviation and space exploration, increasingly rely on third-party components with embedded software. Due to the lack of visibility into the components' implementation and design, traditional techniques for verifying that the components perform as advertised are not feasible; novel alternatives are needed. This research addresses the assurance of such \"black-box\" components by developing and evaluating (1) techniques to discover and capture contracts - the do's and the don'ts - that the component must satisfy to operate safely in its intended environment, and (2) rigorous metric-driven criteria that can be used to guide as well as to assess the thoroughness of the component testing.\r\n\r\nThe central hypotheses are that (1) novel test coverage adequacy criteria can be defined over the component's contracts as well as its object code; criteria that when satisfied will ensure the level of confidence needed for a critical system, and (2) object-code symbolic execution techniques can be developed for both automatic discovery of component behaviors as well as for verifying conformance to contracts. The expected advances from this research are: (a) new contract definition and discovery techniques suitable for contract-based testing, (b) coverage criteria for contracts and object-code of software, (c) enhanced object-code symbolic execution techniques, and (d) empirical evaluation of the approach on realistic systems. The anticipated broader impacts of this work are that: (a) observations from the empirical studies conducted provide guidance for regulatory agencies and standards organizations in their efforts; (b) commercial tool vendors adopt these techniques in their software development tools and thus help reduce the very high costs of testing critical systems; (c) extensive automation of the costly manual testing processes enabled by these new techniques provide a powerful incentive to formally specify and model requirements, thereby greatly improving quality in all aspects of software development projects; and (d) open-access to tools, case examples, experimental infrastructure, data, and curricular materials developed, advances the state of software engineering research, education and industrial practice.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Mats",
   "pi_last_name": "Heimdahl",
   "pi_mid_init": "P",
   "pi_sufx_name": "",
   "pi_full_name": "Mats P Heimdahl",
   "pi_email_addr": "heimdahl@cs.umn.edu",
   "nsf_id": "000445846",
   "pi_start_date": "2016-06-10",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Stephen",
   "pi_last_name": "McCamant",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Stephen McCamant",
   "pi_email_addr": "mccamant@cs.umn.edu",
   "nsf_id": "000630498",
   "pi_start_date": "2016-06-10",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Sanjai",
   "pi_last_name": "Rayadurgam",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Sanjai Rayadurgam",
   "pi_email_addr": "rsanjai@umn.edu",
   "nsf_id": "000636790",
   "pi_start_date": "2016-06-10",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Minnesota-Twin Cities",
  "inst_street_address": "2221 UNIVERSITY AVE SE STE 100",
  "inst_street_address_2": "",
  "inst_city_name": "MINNEAPOLIS",
  "inst_state_code": "MN",
  "inst_state_name": "Minnesota",
  "inst_phone_num": "6126245599",
  "inst_zip_code": "554143074",
  "inst_country_name": "United States",
  "cong_dist_code": "05",
  "st_cong_dist_code": "MN05",
  "org_lgl_bus_name": "REGENTS OF THE UNIVERSITY OF MINNESOTA",
  "org_prnt_uei_num": "",
  "org_uei_num": "KABJZBBJ4B54"
 },
 "perf_inst": {
  "perf_inst_name": "University of Minnesota-Twin Cities",
  "perf_str_addr": "200 Union Street S.E",
  "perf_city_name": "Minneapolis",
  "perf_st_code": "MN",
  "perf_st_name": "Minnesota",
  "perf_zip_code": "554550159",
  "perf_ctry_code": "US",
  "perf_cong_dist": "05",
  "perf_st_cong_dist": "MN05",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 321833.0
  },
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 682186.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>This project resulted in the development of new techniques based on well-founded engineering principles to increase the rigor of constructing and assessing complex systems built by integrating third-party components obtained in executable form.</p>\n<ol>\n<li>Techniques to automatically synthesize object-level code adaptors to find and reuse equivalent code from existing libraries, were defined, which has applications in various software engineering contexts. A tool to perform adaptor synthesis was developed. A large case study over a binary code-base to detect code clones for reverse engineering tasks was conducted which showed the tool's ability to detect object-code instances that can be explained as instances of source-level code.</li>\n<li>A rigorous object-code coverage criterion that is unambiguously interpretable for different hardware instruction architecture sets, was formulated and empiricially assesed to show robustness to compiler variations and efficacy in fault-detection. An approach and associated techniques to assess the observability of the effect of such coverage, which further strengthens the criterion, were developed. Prototypical tools for object-code mutation and effect propagation were developed to facilitate coverage measurement.</li>\n<li>The notion of \"contract discovery\" from existing implementations was defined in the context of architecting systems by intergrating such components that typically involves negotiating and reworking requiements. The task was was formalized as inductively attempting to repair a putative contract envisaged by the system engineer to match the reality of a provided implementation. A tool to demostrate these ideas on Java bytecode implementations was developed and the techniques were empirically assessed to show the feasibility and effictiveness of the proposed contract repair technique.</li>\n</ol>\n<p>These key contributions effectively address some key problems in the context of developing complex systems: The ability to find, reuse as well as understand existing component implementations, assessing the thoroughness of testing such components, and suitably changing component specifications to match existing implemention to aid architectural analysis of systems are all important and practical concerns.</p>\n<p>Further, several tools were developed to demonstrate the proposed techniques on concrete and realistic case-studies, are made made available to promote further research. The project inspired and partly supported the development of Java Ranger, a tool that makes symbolic execution of Java programs more efficient by summarizing code regions, which won the SV-COMP software verification competition in 2021 the Java Overall category. The work has led to several technical papers at highly regarded Software Engineering publication venues.</p>\n<p>The ideas developed in this project have helped to enrich educational content in the software engineering related courses in the undergraduate and graduate curriculum taught by the prinicpal and co-investigators. Two graduate students who worked on various research problems inspired by this project have gone on to work at major software development organizations after successefully completed their doctoral degree, and a third student who started her doctoral program during the project is now an advanced doctoral candidate.&nbsp; Finally, the findings from this project motivate new research directions, in binary code analysis, and specification synthesis and contract repair.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 11/26/2022<br>\n\t\t\t\t\tModified by: Mats&nbsp;P&nbsp;Heimdahl</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThis project resulted in the development of new techniques based on well-founded engineering principles to increase the rigor of constructing and assessing complex systems built by integrating third-party components obtained in executable form.\n\nTechniques to automatically synthesize object-level code adaptors to find and reuse equivalent code from existing libraries, were defined, which has applications in various software engineering contexts. A tool to perform adaptor synthesis was developed. A large case study over a binary code-base to detect code clones for reverse engineering tasks was conducted which showed the tool's ability to detect object-code instances that can be explained as instances of source-level code.\nA rigorous object-code coverage criterion that is unambiguously interpretable for different hardware instruction architecture sets, was formulated and empiricially assesed to show robustness to compiler variations and efficacy in fault-detection. An approach and associated techniques to assess the observability of the effect of such coverage, which further strengthens the criterion, were developed. Prototypical tools for object-code mutation and effect propagation were developed to facilitate coverage measurement.\nThe notion of \"contract discovery\" from existing implementations was defined in the context of architecting systems by intergrating such components that typically involves negotiating and reworking requiements. The task was was formalized as inductively attempting to repair a putative contract envisaged by the system engineer to match the reality of a provided implementation. A tool to demostrate these ideas on Java bytecode implementations was developed and the techniques were empirically assessed to show the feasibility and effictiveness of the proposed contract repair technique.\n\n\nThese key contributions effectively address some key problems in the context of developing complex systems: The ability to find, reuse as well as understand existing component implementations, assessing the thoroughness of testing such components, and suitably changing component specifications to match existing implemention to aid architectural analysis of systems are all important and practical concerns.\n\nFurther, several tools were developed to demonstrate the proposed techniques on concrete and realistic case-studies, are made made available to promote further research. The project inspired and partly supported the development of Java Ranger, a tool that makes symbolic execution of Java programs more efficient by summarizing code regions, which won the SV-COMP software verification competition in 2021 the Java Overall category. The work has led to several technical papers at highly regarded Software Engineering publication venues.\n\nThe ideas developed in this project have helped to enrich educational content in the software engineering related courses in the undergraduate and graduate curriculum taught by the prinicpal and co-investigators. Two graduate students who worked on various research problems inspired by this project have gone on to work at major software development organizations after successefully completed their doctoral degree, and a third student who started her doctoral program during the project is now an advanced doctoral candidate.  Finally, the findings from this project motivate new research directions, in binary code analysis, and specification synthesis and contract repair.\n\n\t\t\t\t\tLast Modified: 11/26/2022\n\n\t\t\t\t\tSubmitted by: Mats P Heimdahl"
 }
}