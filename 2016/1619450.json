{
 "awd_id": "1619450",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "TWC: Small: Cache-based Side Channel Attacks on Smartphone Graphics Buffers: New Vulnerabilities and Defenses",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Jeremy Epstein",
 "awd_eff_date": "2016-10-01",
 "awd_exp_date": "2021-09-30",
 "tot_intn_awd_amt": 516000.0,
 "awd_amount": 516000.0,
 "awd_min_amd_letter_date": "2016-07-20",
 "awd_max_amd_letter_date": "2016-07-20",
 "awd_abstract_narration": "Touch screens on smart mobile devices such as cell phones or tablets allow both user input (touch events) and display output. For a touch screen to function, the mobile device stores input and display data in a graphics buffer internal to the device. The researchers have discovered that a malicious application running on the mobile device could silently monitor characteristics of the graphics buffer to identify the alphanumeric characters that the user types into the touch keyboard or information displayed on the screen.  The malicious application could then send that information to a third party, violating the confidentiality of the user's input or output. This project is assessing the feasibility of attacks on the graphics buffer and studying characteristics of graphics buffer vulnerabilities.  The researchers are developing software- and hardware-based defenses to mitigate such vulnerabilities.\r\n\r\nThe researchers are studying attacks that use a CPU cache-based side channel, a technique for deriving the access pattern of a process from another process, to identify which locations on the screen are being modified, allowing the attacker to gain information about user I/O activity such as data being typed on a keyboard.\u00a0Prior work on cache-based side channel attacks and defenses has focused on cryptographic algorithms where the critical data has a small memory footprint, and is read-only. In contrast, graphics buffers are extremely large (on the order of MBytes), and are both read and written to, requiring new approaches for attacks and defenses. The project is studying how such attacks might be generalized, as well as the extent of feasible resolution and precision.  Finally, the researchers are designing countermeasures, considering security, performance overhead, complexity, and impact on the core process pipeline and caches.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Zhiyun",
   "pi_last_name": "Qian",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Zhiyun Qian",
   "pi_email_addr": "zhiyun.qian@ucr.edu",
   "nsf_id": "000677475",
   "pi_start_date": "2016-07-20",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Nael",
   "pi_last_name": "Abu-Ghazaleh",
   "pi_mid_init": "B",
   "pi_sufx_name": "",
   "pi_full_name": "Nael B Abu-Ghazaleh",
   "pi_email_addr": "nael@cs.ucr.edu",
   "nsf_id": "000677069",
   "pi_start_date": "2016-07-20",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of California-Riverside",
  "inst_street_address": "200 UNIVERSTY OFC BUILDING",
  "inst_street_address_2": "",
  "inst_city_name": "RIVERSIDE",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "9518275535",
  "inst_zip_code": "925210001",
  "inst_country_name": "United States",
  "cong_dist_code": "39",
  "st_cong_dist_code": "CA39",
  "org_lgl_bus_name": "REGENTS OF THE UNIVERSITY OF CALIFORNIA AT RIVERSIDE",
  "org_prnt_uei_num": "",
  "org_uei_num": "MR5QC5FCAVH5"
 },
 "perf_inst": {
  "perf_inst_name": "University of California-Riverside",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "925210001",
  "perf_ctry_code": "US",
  "perf_cong_dist": "39",
  "perf_st_cong_dist": "CA39",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "9178",
   "pgm_ref_txt": "UNDERGRADUATE EDUCATION"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 516000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>In computing systems, rendering pixels on the screen is a complex and sensitive operation as various confidential and personal data are involved. They are the critical components for end-to-end security. For example, passwords, credit card numbers, and social security numbers all go through the rendering process.&nbsp;Moreover, in the case of smartphones, touch screens not only render display outputs but also user inputs (touch events on soft keyboards).&nbsp;</p>\n<p>Unfortunately, this process has not been scrutinized with regards to its susceptibility to side channel attacks. This project aims to assess the potential vulnerability systematically in various scenarios and architecture of rendering. In particular, the PIs observed two general rendering schemes: (1) software-based: rendering instructions executed on CPUs, and (2) hardware-based: rendering instructions executed on GPUs. In the case of software-based rendering, it is heavily&nbsp;dependent on the underlying central data structure, called graphics buffers, commonly seen in modern graphics subsystems. The PIs&nbsp;observe that different characters rendered on the screen can cause a different cache footprint. This means&nbsp;an unprivileged malicious app can silently monitors the cache footprint of graphics buffers for important input and output events (e.g., soft keyboard touches), and infer the characteres being rendered on the screen. In the case of hardware-rendering, since the GPU is a shared resource that can be used by multiple processes simultaneously, a side channel attack is naturally possible. For example, common rendering frameworks such as&nbsp;OpenGL and WebGL send workloads to the GPU at the granularity of a frame, allowing an attacker to interleave the use of the GPU to measure the side-effects of the victim computation through various interfaces. Finally, the project also concluded with various practiacl mitigations against such side channel attacks.</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 02/20/2022<br>\n\t\t\t\t\tModified by: Zhiyun&nbsp;Qian</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nIn computing systems, rendering pixels on the screen is a complex and sensitive operation as various confidential and personal data are involved. They are the critical components for end-to-end security. For example, passwords, credit card numbers, and social security numbers all go through the rendering process. Moreover, in the case of smartphones, touch screens not only render display outputs but also user inputs (touch events on soft keyboards). \n\nUnfortunately, this process has not been scrutinized with regards to its susceptibility to side channel attacks. This project aims to assess the potential vulnerability systematically in various scenarios and architecture of rendering. In particular, the PIs observed two general rendering schemes: (1) software-based: rendering instructions executed on CPUs, and (2) hardware-based: rendering instructions executed on GPUs. In the case of software-based rendering, it is heavily dependent on the underlying central data structure, called graphics buffers, commonly seen in modern graphics subsystems. The PIs observe that different characters rendered on the screen can cause a different cache footprint. This means an unprivileged malicious app can silently monitors the cache footprint of graphics buffers for important input and output events (e.g., soft keyboard touches), and infer the characteres being rendered on the screen. In the case of hardware-rendering, since the GPU is a shared resource that can be used by multiple processes simultaneously, a side channel attack is naturally possible. For example, common rendering frameworks such as OpenGL and WebGL send workloads to the GPU at the granularity of a frame, allowing an attacker to interleave the use of the GPU to measure the side-effects of the victim computation through various interfaces. Finally, the project also concluded with various practiacl mitigations against such side channel attacks.\n\n \n\n\t\t\t\t\tLast Modified: 02/20/2022\n\n\t\t\t\t\tSubmitted by: Zhiyun Qian"
 }
}