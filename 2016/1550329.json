{
 "awd_id": "1550329",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SI2-SSI:   Collaborative Research: ParaTreet: Parallel Software for Spatial Trees in Simulation and Analysis",
 "cfda_num": "47.070",
 "org_code": "05090000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Rob Beverly",
 "awd_eff_date": "2016-09-01",
 "awd_exp_date": "2018-08-31",
 "tot_intn_awd_amt": 54311.0,
 "awd_amount": 54311.0,
 "awd_min_amd_letter_date": "2016-08-19",
 "awd_max_amd_letter_date": "2016-08-19",
 "awd_abstract_narration": "Many scientific and visualization methods involve organizing the data they are processing into a hierarchy (also known as a \"tree\").   These applications and methods include: astronomical simulations of particles moving under the influence of gravity, analysis of spatial data (that is, data that describes objects with respect to their relative position in space), photorealistic rendering of virtual environments,reconstruction of surfaces from laser scans, collision detection when simulating the movement of physical objects, and many others.   Tree data structures, and the algorithms used to work on these structures, are heavily used in these applications because they help to make these applications run much faster on supercomputers. However, implementing tree-based algorithms can require a significant effort, particularly on modern highly parallel computers.  This project will create ParaTreet, a software toolkit for parallel trees, that will enable rapid development of such applications.  Details of the parallel aspects will be hidden from the programmer, who will be able to quickly evaluate the relative merits of different trees and algorithms even when applied to large datasets and very computation-intensive applications. The combination of such an abstract and extensible framework with a portable adaptive runtime system will allow scientists to effectively use parallel hardware ranging from small clusters to petascale-class machines, for a wide variety of tree-based applications. This project will demonstrate the feasibility of such an approach as well as generate evidence of community adoption of this technology. If successful, this project will enable NSF-supported researchers to solve science problems faster as well as to tackle more complex problems, thus serving NSF's science mission.\r\n\r\n\r\nThis project builds upon an existing collaboration on Computational Astronomy and the resultant software base in the ChaNGa (Charm N-body GrAvity solver) code. ChaNGa is a software package that performs collisionless N-body simulations, and can perform cosmological simulations with periodic boundary conditions in co-moving coordinates or simulations of isolated stellar systems. This project will extend ChaNGa with a parallel tree toolkit called ParaTreet and associated applications, that will allow scientists to effectively utilize small clusters as well as very large supercomputers for parallel tree-based calculations.  The key data structure in ParaTreet is an asynchronous software-based tree data cache, which maintains a writeback local copy of remote tree data. We plan to support a variety of spatial decomposition methods and the associated trees, including Oct-trees, KD-trees, inside-outside trees, ball trees, R-trees, and their combinations. Different trees are useful in different application circumstances, and the software will allow their relative merits to be evaluated with relative ease. The framework will support a variety of parallel work decomposition methods, including those based on space filling curves, and support dynamic rearrangement of parallel work at runtime. The algorithms supported will range from Barnes-Hut with various multipole expansions, data clustering, collision detection, surface reconstruction, ray intersection, etc. The software includes a collection of dynamic load balancing strategies in the Charm++ framework that can be tuned for specific problem structures. It also includes support for clusters of accelerators, such as GPGPUs. This project will demonstrate the feasibility of such an approach as well as generate evidence of community adoption of this technology.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "OAC",
 "org_div_long_name": "Office of Advanced Cyberinfrastructure (OAC)",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Orion",
   "pi_last_name": "Lawlor",
   "pi_mid_init": "S",
   "pi_sufx_name": "",
   "pi_full_name": "Orion S Lawlor",
   "pi_email_addr": "lawlor@alaska.edu",
   "nsf_id": "000461888",
   "pi_start_date": "2016-08-19",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Alaska Fairbanks Campus",
  "inst_street_address": "2145 N TANANA LOOP",
  "inst_street_address_2": "",
  "inst_city_name": "FAIRBANKS",
  "inst_state_code": "AK",
  "inst_state_name": "Alaska",
  "inst_phone_num": "9074747301",
  "inst_zip_code": "997750001",
  "inst_country_name": "United States",
  "cong_dist_code": "00",
  "st_cong_dist_code": "AK00",
  "org_lgl_bus_name": "UNIVERSITY OF ALASKA FAIRBANKS",
  "org_prnt_uei_num": "",
  "org_uei_num": "FDLEQSJ8FF63"
 },
 "perf_inst": {
  "perf_inst_name": "University of Alaska Fairbanks Campus",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "AK",
  "perf_st_name": "Alaska",
  "perf_zip_code": "997756670",
  "perf_ctry_code": "US",
  "perf_cong_dist": "00",
  "perf_st_cong_dist": "AK00",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "800400",
   "pgm_ele_name": "Software Institutes"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7433",
   "pgm_ref_txt": "CyberInfra Frmwrk 21st (CIF21)"
  },
  {
   "pgm_ref_code": "8004",
   "pgm_ref_txt": "Software Institutes"
  },
  {
   "pgm_ref_code": "8009",
   "pgm_ref_txt": "Scientifc Software Integration"
  },
  {
   "pgm_ref_code": "9150",
   "pgm_ref_txt": "EXP PROG TO STIM COMP RES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 54311.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Tree structures are used in a variety of modern computer programs: ray tracing renderers use a tree structure to store the scene geometry; computational astronomy simulators use a tree structure to efficiently compute gravitational forces; and big data software often places the data in a multidimensional tree. According to Donald Knuth, trees are \"the most important nonlinear structures in computer algorithms.\"&nbsp;&nbsp;</p>\n<p>This work helped to develop ParaTreet, a parallel tree toolkit designed to allow the rapid development of tree-based applications on parallel computers, including multicore machines, graphics processors, clusters, and supercomputers.&nbsp; Because parallel machines are inherently asynchronous, it can be difficult to write reliable parallel software that has high performance on these machines, especially because each of these levels of parallelism uses a different programming interface.</p>\n<p>Our central contribution was developing the set of tree abstractions that will allow computational scientists using ParaTreet to write their scientific codes once, as a C++ template, and have that template instantiated to run on threaded single-node, CUDA, and networked machines.&nbsp; Because the templates are instantiated at compile time, we can pay the abstraction penalty at compile time instead of run time, resulting in performance competitive with a hand-written program while remaining easy to write, modify, and maintain.</p>\n<p>We have been working to round out this set of abstractions to support multiple tree types, to build demonstration applications doing real computational science work, and to prepare this library for broad use.<br /><br /></p><br>\n<p>\n\t\t\t\t      \tLast Modified: 12/30/2018<br>\n\t\t\t\t\tModified by: Orion&nbsp;S&nbsp;Lawlor</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nTree structures are used in a variety of modern computer programs: ray tracing renderers use a tree structure to store the scene geometry; computational astronomy simulators use a tree structure to efficiently compute gravitational forces; and big data software often places the data in a multidimensional tree. According to Donald Knuth, trees are \"the most important nonlinear structures in computer algorithms.\"  \n\nThis work helped to develop ParaTreet, a parallel tree toolkit designed to allow the rapid development of tree-based applications on parallel computers, including multicore machines, graphics processors, clusters, and supercomputers.  Because parallel machines are inherently asynchronous, it can be difficult to write reliable parallel software that has high performance on these machines, especially because each of these levels of parallelism uses a different programming interface.\n\nOur central contribution was developing the set of tree abstractions that will allow computational scientists using ParaTreet to write their scientific codes once, as a C++ template, and have that template instantiated to run on threaded single-node, CUDA, and networked machines.  Because the templates are instantiated at compile time, we can pay the abstraction penalty at compile time instead of run time, resulting in performance competitive with a hand-written program while remaining easy to write, modify, and maintain.\n\nWe have been working to round out this set of abstractions to support multiple tree types, to build demonstration applications doing real computational science work, and to prepare this library for broad use.\n\n\n\n\t\t\t\t\tLast Modified: 12/30/2018\n\n\t\t\t\t\tSubmitted by: Orion S Lawlor"
 }
}