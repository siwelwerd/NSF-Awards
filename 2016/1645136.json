{
 "awd_id": "1645136",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "SHF: Medium: Collaborative Research: Semi and Fully Automated Program Repair and Synthesis via Semantic Code Search",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2016-07-01",
 "awd_exp_date": "2021-06-30",
 "tot_intn_awd_amt": 387661.0,
 "awd_amount": 387661.0,
 "awd_min_amd_letter_date": "2016-07-13",
 "awd_max_amd_letter_date": "2019-06-19",
 "awd_abstract_narration": "Many aspects of our economy rely heavily on software working correctly. However, software errors are common, routinely cause security breaches, and cost our economy billions of dollars annually. Despite the well-known high costs of software errors, the software industry struggles to overcome this challenge, as new errors are reported faster than they can be fixed. Recent research has demonstrated the potential of automated program repair techniques to address this challenge.   In this research, we develop new techniques to fix software errors and implement new features automatically. The challenge is to fix code while not breaking other functionality, and to work toward repairing code of increasing complexity.\r\n\r\nThe approach takes advantage of the high availability of open-source code that already implements many functions required for a new software project. The approach is to search for relevant code in open-source projects, adapt that code to its new context using automated software repair and generation techniques, and then validate the changed software. A key component of the approach is semantic code search, which queries large databases of code to find code snippets that satisfy a behavioral specification. The project develops novel techniques that (1) encode large, searchable bodies of code as behavioral profiles, (2) localize bugs and features to code blocks, modules, and components, (3) extract the desired behavioral profiles of those blocks, modules, and components, (4) use the extracted profiles to search the database for potential patches, (5) adapt the potential patches to fit into the code context, and (6) validate the potential patches. The project focuses on producing high-quality code, verifying that the injected code does not break existing functionality.  The broader impacts come mainly from goal of radically improving software productivity through reuse and adaptation of existing code.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Kathryn",
   "pi_last_name": "Stolee",
   "pi_mid_init": "T",
   "pi_sufx_name": "",
   "pi_full_name": "Kathryn T Stolee",
   "pi_email_addr": "ktstolee@ncsu.edu",
   "nsf_id": "000654754",
   "pi_start_date": "2016-07-13",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "North Carolina State University",
  "inst_street_address": "2601 WOLF VILLAGE WAY",
  "inst_street_address_2": "",
  "inst_city_name": "RALEIGH",
  "inst_state_code": "NC",
  "inst_state_name": "North Carolina",
  "inst_phone_num": "9195152444",
  "inst_zip_code": "276950001",
  "inst_country_name": "United States",
  "cong_dist_code": "02",
  "st_cong_dist_code": "NC02",
  "org_lgl_bus_name": "NORTH CAROLINA STATE UNIVERSITY",
  "org_prnt_uei_num": "U3NVH931QJJ3",
  "org_uei_num": "U3NVH931QJJ3"
 },
 "perf_inst": {
  "perf_inst_name": "North Carolina State University",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "NC",
  "perf_st_name": "North Carolina",
  "perf_zip_code": "276958206",
  "perf_ctry_code": "US",
  "perf_cong_dist": "02",
  "perf_st_cong_dist": "NC02",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  },
  {
   "pgm_ref_code": "9150",
   "pgm_ref_txt": "EXP PROG TO STIM COMP RES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 97778.0
  },
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 94153.0
  },
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 96601.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 99129.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-c7c3c226-7fff-df05-2e4f-6b27d9a9b12a\">\n<p dir=\"ltr\"><span>Software bugs are common, routinely causing security breaches and system crashes. Given the speed with which new bugs are reported, there is an urgent need for automated techniques to reliably fix real-world software bugs. Furthermore, as software often includes source code written in many programming languages, repair techniques that can handle polyglot code bases are in particular demand. The outcomes from this project handle these challenges and improve our ability to reliably and automatically fix software bugs.</span></p>\n<p dir=\"ltr\"><span>Intellectual Merit</span><span>: This project developed new techniques to reliably and automatically repair real-world defects in multiple programming languages. Improvements to the automated program repair process include better techniques for narrowing down and localizing bugs in a large code base, better ways to find good code segments to use to replace buggy segments, the ability to patch more complex bugs, and the ability to repair code in multiple programming languages. Furthermore, this project advanced knowledge in cross-language code search and transformation, demonstrated the feasibility of metaheuristic search application to formal verification, and quantified repair quality and overfitting in Java program repair in real-world settings.&nbsp;</span></p>\n<span>Broader Impacts</span><span>: Techniques that automatically repair bugs lead to fewer bugs in production software, and this improves the lives of all software users in society. Furthermore, this project led to educational innovations that leverage program repair to enhance student learning, and hence these techniques will better prepare students for careers in software engineering. Finally, this project supported the training of a number of junior scientists, including undergraduate students who have gone on to pursue research full time post-graduation.</span></span></p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 10/26/2021<br>\n\t\t\t\t\tModified by: Kathryn&nbsp;T&nbsp;Stolee</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n\nSoftware bugs are common, routinely causing security breaches and system crashes. Given the speed with which new bugs are reported, there is an urgent need for automated techniques to reliably fix real-world software bugs. Furthermore, as software often includes source code written in many programming languages, repair techniques that can handle polyglot code bases are in particular demand. The outcomes from this project handle these challenges and improve our ability to reliably and automatically fix software bugs.\nIntellectual Merit: This project developed new techniques to reliably and automatically repair real-world defects in multiple programming languages. Improvements to the automated program repair process include better techniques for narrowing down and localizing bugs in a large code base, better ways to find good code segments to use to replace buggy segments, the ability to patch more complex bugs, and the ability to repair code in multiple programming languages. Furthermore, this project advanced knowledge in cross-language code search and transformation, demonstrated the feasibility of metaheuristic search application to formal verification, and quantified repair quality and overfitting in Java program repair in real-world settings. \nBroader Impacts: Techniques that automatically repair bugs lead to fewer bugs in production software, and this improves the lives of all software users in society. Furthermore, this project led to educational innovations that leverage program repair to enhance student learning, and hence these techniques will better prepare students for careers in software engineering. Finally, this project supported the training of a number of junior scientists, including undergraduate students who have gone on to pursue research full time post-graduation.\n\n \n\n\t\t\t\t\tLast Modified: 10/26/2021\n\n\t\t\t\t\tSubmitted by: Kathryn T Stolee"
 }
}