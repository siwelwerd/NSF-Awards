{
 "awd_id": "1566363",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CRII: SHF: Regression Testing for Projects with Distributed Software Histories",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2016-05-15",
 "awd_exp_date": "2019-04-30",
 "tot_intn_awd_amt": 175000.0,
 "awd_amount": 183000.0,
 "awd_min_amd_letter_date": "2016-05-18",
 "awd_max_amd_letter_date": "2017-05-15",
 "awd_abstract_narration": "Developers practice regression testing -- running tests against each\r\nproject commit -- to check that project changes do not break any\r\nfunctionality. While important, regression testing is expensive due to\r\nthe number of tests and the number of commits. Regression test\r\nselection (RTS) techniques speed up regression testing by skipping to\r\nrun tests that are not affected by recent changes, and regression test\r\nprioritization (RTP) techniques reorder tests to run failing tests\r\nfaster. Existing regression techniques analyze only two adjacent\r\ncommits, effectively assuming a linear software history. However, the\r\nrevolution in version-control systems changed the shape of software\r\nhistories. Distributed software histories are complex graphs of\r\nbranches and merges, which do not match the simplistic view of the\r\nexisting techniques. Although existing regression techniques can be\r\nrun if a distributed software history is linearized, these techniques\r\nunderutilize the data available in the distributed software history.\r\n\r\nTo speed up regression testing, the PI proposes to design techniques\r\nthat utilize the data available in the entire distributed software\r\nhistory. This project proposes four tasks to improve RTS and RTP: (1)\r\nnon-adjacent commit reuse - discover likely optimal commit to be used\r\nin each analysis rather than always analyzing adjacent commits; (2)\r\nmulti-commit analyses - design methods that analyze more than two\r\ncommits rather than always analyzing only two commits; (3)\r\ncommand-aware methods - specialize the methods for various commands\r\nthat create each commit rather than be command-unaware; and (4)\r\nunified implementation and evaluation - share the implementation and\r\nresults among techniques, and evaluate the techniques on open-source\r\nand industrial projects. The broader impacts of improving RTS and RTP\r\nare to increase developers' productivity and reduce the resource usage\r\nduring testing phases.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Milos",
   "pi_last_name": "Gligoric",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Milos Gligoric",
   "pi_email_addr": "gligoric@utexas.edu",
   "nsf_id": "000702992",
   "pi_start_date": "2016-05-18",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Texas at Austin",
  "inst_street_address": "110 INNER CAMPUS DR",
  "inst_street_address_2": "",
  "inst_city_name": "AUSTIN",
  "inst_state_code": "TX",
  "inst_state_name": "Texas",
  "inst_phone_num": "5124716424",
  "inst_zip_code": "787121139",
  "inst_country_name": "United States",
  "cong_dist_code": "25",
  "st_cong_dist_code": "TX25",
  "org_lgl_bus_name": "UNIVERSITY OF TEXAS AT AUSTIN",
  "org_prnt_uei_num": "",
  "org_uei_num": "V6AFQPN18437"
 },
 "perf_inst": {
  "perf_inst_name": "University of Texas at Austin",
  "perf_str_addr": "1 University Station",
  "perf_city_name": "Austin",
  "perf_st_code": "TX",
  "perf_st_name": "Texas",
  "perf_zip_code": "787121532",
  "perf_ctry_code": "US",
  "perf_cong_dist": "25",
  "perf_st_cong_dist": "TX25",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "026Y00",
   "pgm_ele_name": "CRII CISE Research Initiation"
  },
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7798",
   "pgm_ref_txt": "SOFTWARE & HARDWARE FOUNDATION"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  },
  {
   "pgm_ref_code": "8228",
   "pgm_ref_txt": "CISE Resrch Initiatn Initiatve"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 175000.0
  },
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 8000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Regression testing -- running available tests at each project revision<br />-- is widely practiced in industry to check that project changes do<br />not break any working functionality. Although regression testing is<br />important, several studies estimate that regression testing accounts<br />for more than 50% of software maintenance cost, and the cost is<br />reportedly increasing. Regression test selection (RTS) techniques<br />speed up regression testing by skipping to run tests that are not<br />affected by recent project changes. Although existing RTS techniques<br />can speed up regression testing, these techniques became imprecise --<br />they may select many tests to run -- due to the evolution of software<br />development processes (e.g., commits are more frequent and developers<br />use distributed version-control systems).<br /><br />This project investigated several ways to improve precision of RTS<br />techniques and speed up regression testing and debugging. (1) We<br />studied the impact of behavior-preserving project changes, i.e.,<br />changes that have no impact on semantics of the project, on regression<br />testing and developed an RTS technique that improves precision in the<br />presence of such changes. (2) We developed a novel approach, inspired<br />by RTS, to speed up bisection debugging process that incrementally<br />analyzes software version histories. (3) We made the first step<br />towards an RTS technique that supports multiple programming languages.<br />(4) We designed a framework for checking correctness of RTS tools.<br /><br />The grant partially supported 17 papers, public release of six testing<br />tools and datasets (available from http://cozy.ece.utexas.edu), and<br />training of at least five graduate students (including one PhD thesis<br />and one MS thesis) and six undergraduate students; the undergraduate<br />students were supported by an REU Supplement, and three of these<br />students published two papers at top Software Engineering conferences.<br />The broader impacts also include the adoption of our tools by large<br />software organizations, as well as detection of dozes of bugs in<br />existing RTS tools. This research is a step towards more efficient<br />regression testing, thus helping millions of developers that practice<br />regression testing and everybody who depends on their software.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 07/20/2019<br>\n\t\t\t\t\tModified by: Milos&nbsp;Gligoric</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nRegression testing -- running available tests at each project revision\n-- is widely practiced in industry to check that project changes do\nnot break any working functionality. Although regression testing is\nimportant, several studies estimate that regression testing accounts\nfor more than 50% of software maintenance cost, and the cost is\nreportedly increasing. Regression test selection (RTS) techniques\nspeed up regression testing by skipping to run tests that are not\naffected by recent project changes. Although existing RTS techniques\ncan speed up regression testing, these techniques became imprecise --\nthey may select many tests to run -- due to the evolution of software\ndevelopment processes (e.g., commits are more frequent and developers\nuse distributed version-control systems).\n\nThis project investigated several ways to improve precision of RTS\ntechniques and speed up regression testing and debugging. (1) We\nstudied the impact of behavior-preserving project changes, i.e.,\nchanges that have no impact on semantics of the project, on regression\ntesting and developed an RTS technique that improves precision in the\npresence of such changes. (2) We developed a novel approach, inspired\nby RTS, to speed up bisection debugging process that incrementally\nanalyzes software version histories. (3) We made the first step\ntowards an RTS technique that supports multiple programming languages.\n(4) We designed a framework for checking correctness of RTS tools.\n\nThe grant partially supported 17 papers, public release of six testing\ntools and datasets (available from http://cozy.ece.utexas.edu), and\ntraining of at least five graduate students (including one PhD thesis\nand one MS thesis) and six undergraduate students; the undergraduate\nstudents were supported by an REU Supplement, and three of these\nstudents published two papers at top Software Engineering conferences.\nThe broader impacts also include the adoption of our tools by large\nsoftware organizations, as well as detection of dozes of bugs in\nexisting RTS tools. This research is a step towards more efficient\nregression testing, thus helping millions of developers that practice\nregression testing and everybody who depends on their software.\n\n\t\t\t\t\tLast Modified: 07/20/2019\n\n\t\t\t\t\tSubmitted by: Milos Gligoric"
 }
}