{
 "awd_id": "1552935",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CAREER: Scalable and Maximal Concurrency Debugging",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2016-02-01",
 "awd_exp_date": "2022-01-31",
 "tot_intn_awd_amt": 550000.0,
 "awd_amount": 566000.0,
 "awd_min_amd_letter_date": "2016-01-15",
 "awd_max_amd_letter_date": "2020-02-11",
 "awd_abstract_narration": "Title: CAREER: Scalable and Maximal Concurrency Debugging\r\n\r\nConcurrency related software defects are among the most expensive and dangerous in practice, and have become a major threat to the reliability and security of safety-critical systems and the nation's critical infrastructure.  The intellectual merits of this project are to develop new theoretical and algorithmic advances, and to build practical automated tools for debugging concurrent software, which will enable more concurrency bugs easier to detect and understand, and safer and faster to fix.  The project's broader significance and importance are to help produce more reliable, secure, and economical software systems and infrastructure, remove concurrency related vulnerabilities, and strengthen STEM education on software debugging, which is a critical, but lacking aspect of today's software engineering education.\r\n\r\nThis project will investigate solutions to four major research questions on concurrency debugging.  (1) Reproduction: How to reproduce failures in long running concurrent programs with minimal runtime perturbation and overhead? How to reproduce failures in concurrent programs running on commodity hardware exhibiting relaxed-memory behaviors?  (2) Detection: How to detect concurrency bugs at the maximum ability and with no false alarm, even under limited observation, e.g., when missing log events?  (3) Understanding: How to accurately identify the failure's root cause? How to effectively simplify concurrency bugs and speed up their reproduction?  (4) Fixing & Validation: How to fix concurrency bugs without introducing deadlocks or unnecessary performance degradation? How to effectively validate the correctness of fixes?",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Jeff",
   "pi_last_name": "Huang",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Jeff Huang",
   "pi_email_addr": "jeff@cse.tamu.edu",
   "nsf_id": "000677528",
   "pi_start_date": "2016-01-15",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Texas A&M Engineering Experiment Station",
  "inst_street_address": "3124 TAMU",
  "inst_street_address_2": "",
  "inst_city_name": "COLLEGE STATION",
  "inst_state_code": "TX",
  "inst_state_name": "Texas",
  "inst_phone_num": "9798626777",
  "inst_zip_code": "778433124",
  "inst_country_name": "United States",
  "cong_dist_code": "10",
  "st_cong_dist_code": "TX10",
  "org_lgl_bus_name": "TEXAS A&M ENGINEERING EXPERIMENT STATION",
  "org_prnt_uei_num": "QD1MX6N5YTN4",
  "org_uei_num": "QD1MX6N5YTN4"
 },
 "perf_inst": {
  "perf_inst_name": "Texas A&M University",
  "perf_str_addr": "301 Harvey R. Bright Building",
  "perf_city_name": "College Station",
  "perf_st_code": "TX",
  "perf_st_name": "Texas",
  "perf_zip_code": "778433112",
  "perf_ctry_code": "US",
  "perf_cong_dist": "10",
  "perf_st_cong_dist": "TX10",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "1045",
   "pgm_ref_txt": "CAREER-Faculty Erly Career Dev"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 250377.0
  },
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 92495.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 102177.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 120951.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p class=\"p1\">The project has investigated and created new theories, algorithms and systems&nbsp;for debugging&nbsp;concurrent programs&nbsp;along four dimensions: (1) Reproduction: How to reproduce failures in concurrent programs efficiently? (2) Detection: How to detect concurrency bugs effectively? (3) Understanding: How to accurately identify a failure's root cause? (4) Fixing &amp; Validation: How to fix concurrency concurrency bugs and validate the correctness of fixes?&nbsp;</p>\n<p class=\"p1\">The PI and his team have designed, implemented and evaluated a number of&nbsp;debugging techniques and tools including advanced static and dynamic program analysis algorithms. Our algorithms based on the maximal causality theories and the novel concept of \"origins\" have either significantly advanced prior state-of-the-art approaches or have become the state-of-the-art. Our tools on static and dynamic race detection have been applied to a large collection of real-world parallel applications written in different programming languages such as C/C++/Java/OpenMP/Go/Rust.<span>&nbsp;</span></p>\n<p class=\"p3\">Our research has resulted in more than fifteen significant publications in top-tier journals and conferences (TOPLAS/PLDI/OOPSLA/ICSE/FSE). Moreover, our efforts have directly led to discovering a large number of previously unknown concurrency issues in popular open source projects such as Linux kernel,&nbsp; Chromium, FireFox, Redis, and so on.</p>\n<p class=\"p3\">More importantly, this project has provided research opportunities for a large number of students including underrepresented undergraduate and graduate female<strong>&nbsp;</strong>students.&nbsp;The PI has mentored more than ten graduate students and more than 20 undergraduate students&nbsp;in this project in developing static analysis, testing and debugging techniques and tools for real-world software systems. The students have gained valuable experience and learned several research skills such as scientific reading/writing, scientific data analysis, design and experiments, and software performance evaluation for real-world complex software.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 03/07/2022<br>\n\t\t\t\t\tModified by: Jeff&nbsp;Huang</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "The project has investigated and created new theories, algorithms and systems for debugging concurrent programs along four dimensions: (1) Reproduction: How to reproduce failures in concurrent programs efficiently? (2) Detection: How to detect concurrency bugs effectively? (3) Understanding: How to accurately identify a failure's root cause? (4) Fixing &amp; Validation: How to fix concurrency concurrency bugs and validate the correctness of fixes? \nThe PI and his team have designed, implemented and evaluated a number of debugging techniques and tools including advanced static and dynamic program analysis algorithms. Our algorithms based on the maximal causality theories and the novel concept of \"origins\" have either significantly advanced prior state-of-the-art approaches or have become the state-of-the-art. Our tools on static and dynamic race detection have been applied to a large collection of real-world parallel applications written in different programming languages such as C/C++/Java/OpenMP/Go/Rust. \nOur research has resulted in more than fifteen significant publications in top-tier journals and conferences (TOPLAS/PLDI/OOPSLA/ICSE/FSE). Moreover, our efforts have directly led to discovering a large number of previously unknown concurrency issues in popular open source projects such as Linux kernel,  Chromium, FireFox, Redis, and so on.\nMore importantly, this project has provided research opportunities for a large number of students including underrepresented undergraduate and graduate female students. The PI has mentored more than ten graduate students and more than 20 undergraduate students in this project in developing static analysis, testing and debugging techniques and tools for real-world software systems. The students have gained valuable experience and learned several research skills such as scientific reading/writing, scientific data analysis, design and experiments, and software performance evaluation for real-world complex software.\n\n\t\t\t\t\tLast Modified: 03/07/2022\n\n\t\t\t\t\tSubmitted by: Jeff Huang"
 }
}