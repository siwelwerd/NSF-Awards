{
 "awd_id": "1642411",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SI2-SSE: STAMLA: Scalable Tree Algorithms for Machine Learning Applications",
 "cfda_num": "47.070",
 "org_code": "05090000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Stefan Robila",
 "awd_eff_date": "2017-01-01",
 "awd_exp_date": "2019-12-31",
 "tot_intn_awd_amt": 499992.0,
 "awd_amount": 499992.0,
 "awd_min_amd_letter_date": "2016-09-08",
 "awd_max_amd_letter_date": "2016-09-08",
 "awd_abstract_narration": "The voluminous growth in data together with the burgeoning field of data science have greatly increased the demand for machine learning, a field of computer science that focuses on the development of programs that can learn and change in response to new data. With increasing access to large volumes of data, practitioners often resort to machine learning to construct more precise models of nature, or to learn fundamentally new concepts. For example, machine learning can help improve the accuracy of weather and climate predictions, model the efficacy of drugs and their interactions, and identify specific features, such as a face, from a large set of images or videos. But with the growth of data volumes, the speed with which machine can learn from data is decreasing. As a result, new techniques are required to accelerate learning algorithms so that they can be applied to larger and more complex data sets. This work will develop new approaches to improve the performance of a wide class of machine learning algorithms. Specifically, this work will leverage the C++ programming language and recent research into fundamental bit operations to make fast tree-like data structures that underlie many of the most commonly used implementations of machine learning algorithms. In particular, algorithms in the scikit-learn library, the most widely used machine learning library written in the Python programming language, will be accelerated by using our these new tree data structures. Given the widespread adoption of the scikit learn library, this work will impact diverse fields from Astronomy to Biology to Geoscience to Physics. The scikit learn library is also one of the more popular libraries for teaching (and understanding) machine learning. With an explosion of books, blogs, and tutorials that use scikit learn algorithms and pipelines to demonstrate specific types of machine learning such as classification, regression, clustering, and feature extraction, this project will immediately impact a wide range of people from seasoned practitioners, engineers gaining additional training, and students at universities and colleges across the nation. In addition, these tree data structures will be submitted for inclusion in the C++ standard, which would impact millions of developers world-wide. Finally, the algorithms will be implemented under an open source license in a public forum.\r\n\r\n\r\nThe STAMLA project aims at developing efficient and scalable tree algorithms inspired from high performance simulation codes for machine learning. Over the last few years, machine learning has become a popular technique in data mining to extract information from data sets, build models and make predictions across a wide range of application areas. However, current tools have been built in high-level languages with more focus on functionalities than on pure performance. But as scientific experiments are accumulating more and more data, and as complex models are requiring larger and larger training sets, scalability issues are emerging. At the same time, in high performance computing, petascale simulations have shown that fundamental data structure optimizations can have a significant impact on overall code performance. In particular, by replacing straightforward tree implementations with implicit trees based on hash tables, simulation codes are able to make the most of modern architecture, leveraging cache and vectorization. This research project will apply this knowledge to machine learning algorithms in order to overcome the limitations of existing libraries and make analyses of extremely large data sets possible. The proposed research includes the development of three library layers, built on top of each other. The first layer is a library of fast bit manipulation tools for tree indexing. It extends existing research that has already demonstrated two to three orders of magnitude improvements compared to standard solutions provided by compilers. The second layer is a tree building blocks library developed using generative programming techniques. This layer will provide developers with generic tools to build efficient implicit trees for specific domains and optimized at compile time to make the most of the targeted architecture. Finally, the third layer consists in a contribution package to the scikit-learn library to leverage the data structures introduced in the second layer. Together, these three layers form a consistent set that propagates low level optimizations based on high performance computing practices to one of the most widely used high level machine learning library. As machine learning is domain independent, the results of this project have the potential to impact all data intensive applications relying on machine learning algorithms based on tree data structures. Moreover, in addition to being developed in an open source framework via a public repository, the three library layers will be released through different channels: 1) the bit manipulation tools will aim at standardization in the C++ language through a collaboration with the ISO C++ Standards Committee 2) the tree building blocks will be proposed for inclusion in the Boost C++ libraries and 3) the machine learning algorithms will be published as a contribution package of the scikit-learn library. These channels will ensure a large adoption of the tools developed throughout this project, and their long-term support by well established communities.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "OAC",
 "org_div_long_name": "Office of Advanced Cyberinfrastructure (OAC)",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Vincent",
   "pi_last_name": "Reverdy",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Vincent Reverdy",
   "pi_email_addr": "vreverdy@illinois.edu",
   "nsf_id": "000696018",
   "pi_start_date": "2016-09-08",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Robert",
   "pi_last_name": "Brunner",
   "pi_mid_init": "J",
   "pi_sufx_name": "",
   "pi_full_name": "Robert J Brunner",
   "pi_email_addr": "bigdog@illinois.edu",
   "nsf_id": "000290047",
   "pi_start_date": "2016-09-08",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Illinois at Urbana-Champaign",
  "inst_street_address": "506 S WRIGHT ST",
  "inst_street_address_2": "",
  "inst_city_name": "URBANA",
  "inst_state_code": "IL",
  "inst_state_name": "Illinois",
  "inst_phone_num": "2173332187",
  "inst_zip_code": "618013620",
  "inst_country_name": "United States",
  "cong_dist_code": "13",
  "st_cong_dist_code": "IL13",
  "org_lgl_bus_name": "UNIVERSITY OF ILLINOIS",
  "org_prnt_uei_num": "V2PHZ2CSCH63",
  "org_uei_num": "Y8CWNJRCNN91"
 },
 "perf_inst": {
  "perf_inst_name": "University of Illinois at Urbana-Champaign",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "IL",
  "perf_st_name": "Illinois",
  "perf_zip_code": "618013074",
  "perf_ctry_code": "US",
  "perf_cong_dist": "13",
  "perf_st_cong_dist": "IL13",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "800400",
   "pgm_ele_name": "Software Institutes"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7433",
   "pgm_ref_txt": "CyberInfra Frmwrk 21st (CIF21)"
  },
  {
   "pgm_ref_code": "8004",
   "pgm_ref_txt": "Software Institutes"
  },
  {
   "pgm_ref_code": "8005",
   "pgm_ref_txt": "Scientific Software Elements"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 499992.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>In a context where most programming languages are still lacking standardized tree data structures and algorithms, the goal of the STAMLA project was to fill that void, with a particular focus on what is the most needed by machine learning applications.<br /><br />Throughout the project, the most outstanding challenge, far beyond algorithmic development, was the design of tree abstractions. Hundreds of types of tree data structures exist and are in use, leading to thousands of implementations. Standardizing trees requires a different approach focused on composable building blocks rather than specific instances. It appeared that what was much needed was a library of concepts rather than a library of algorithms. Also, the STAMLA project was developed alongside of C++ concepts, a programming language technology that will be officially released as part of C++2020. In the end, a significant effort was invested into leveraging this technology.<br /><br />At a theoretical level, which ended up constituting most of the effort, the project led to three main developments. The first one has been to use a type theoretic approach to software architecture in conjunction with the C++ conceptualization. The methodology is still in its infancy and need to be formalized but its application to several ongoing C++ standardization projects has been very promising. This led to the second main development: a solution to the proxy problem. In order to make the most of high performance architectures, tree data structures require specific low-level developments. However, from a software architecture standpoint, providing low-level customization points at high level of abstractions while ensuring genericity and composability has always been very complicated. While working on bit manipulation for implicit trees, it appeared that a generalized version of generic proxy types could provide an elegant solution to this problem. In that context, the use of category and type theory was especially useful. A complete framework to handle proxy types will be proposed for standardization to the C++ committee, with direct applications in bit manipulation and vectorization. International collaborations, including with Paris-Sud's Computer Science Laboratory, in France, largely contributed to these reflections. And third, after years of attempts to solve the problem of tree building blocks abstractions, a solution is finally in sight. The STAMLA project led to early developments in the conceptification of hyperiterators, as a multi-dimensional generalization to iterators. This promising research direction may provide a unique abstraction for linear algebra building blocks, graphs, and trees. Many years of work will still be necessary, but if successful, this approach would be significant achievement and would finally unify many problems seen as unrelated in software architecture.<br /><br />In parallel with the theoretical investigations, the STAMLA project also focused on more concrete developments, including ones on bit manipulation, Monte-Carlo Tree Search (MCTS), and Abstract Syntax Trees (ASTs). As mentioned before, bit manipulation is probably one of the most critical component in high performance implicit trees. But applications of bit manipulation goes far beyond trees and includes, for example, multiprecision arithmetic. STAMLA contributed to the development of The Bit Library, today available through a public repository, but also currently in the process of standardization and likely to be released as part of C++23. The first component of it, basic low-level bit twiddling functions will be released through the &lt;bit&gt; header as part of C++20. It is already available today, worldwide, in most compilers as an experimental feature. Part of the bit library have also been included in GCC's internals. STAMLA also led to new developments in MCTS, which then led to developments in genetic algorithms and in general game-playing, especially through a collaboration with Paris-Diderot University. These constituted perfect use cases in the process of designing tree abstractions. Finally, STAMLA also contributed to research on compile-time ASTs through another collaboration with Paris-Sud's Computer Science Laboratory. This project evolved into the development of a Domain Specific Language to process symbolic mathematical formulas at compile-time. Results have been presented at CppCon 2019, and the approach is being considered to implement auto-differentiation in C++.<br /><br />Finally, at an organizational level, the project contributed to the creation of the ISO WG21 Study Group 19 on Machine Learning, an international initiative to standardize low-level machine learning C++ building blocks. The idea behind this group is to gather world-leading experts from academia and industry to build a common basis for machine learning frameworks. Current projects include linear algebra, basic statistics, automatic differentiation, and graphs and trees. The study group constituted a perfect platform to gather feedback from teams who developed the most advanced graphs and trees libraries worldwide, such as the Boost Graph Library. The standardization group is alive and well, and will outlive the STAMLA project.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 05/01/2020<br>\n\t\t\t\t\tModified by: Vincent&nbsp;Reverdy</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nIn a context where most programming languages are still lacking standardized tree data structures and algorithms, the goal of the STAMLA project was to fill that void, with a particular focus on what is the most needed by machine learning applications.\n\nThroughout the project, the most outstanding challenge, far beyond algorithmic development, was the design of tree abstractions. Hundreds of types of tree data structures exist and are in use, leading to thousands of implementations. Standardizing trees requires a different approach focused on composable building blocks rather than specific instances. It appeared that what was much needed was a library of concepts rather than a library of algorithms. Also, the STAMLA project was developed alongside of C++ concepts, a programming language technology that will be officially released as part of C++2020. In the end, a significant effort was invested into leveraging this technology.\n\nAt a theoretical level, which ended up constituting most of the effort, the project led to three main developments. The first one has been to use a type theoretic approach to software architecture in conjunction with the C++ conceptualization. The methodology is still in its infancy and need to be formalized but its application to several ongoing C++ standardization projects has been very promising. This led to the second main development: a solution to the proxy problem. In order to make the most of high performance architectures, tree data structures require specific low-level developments. However, from a software architecture standpoint, providing low-level customization points at high level of abstractions while ensuring genericity and composability has always been very complicated. While working on bit manipulation for implicit trees, it appeared that a generalized version of generic proxy types could provide an elegant solution to this problem. In that context, the use of category and type theory was especially useful. A complete framework to handle proxy types will be proposed for standardization to the C++ committee, with direct applications in bit manipulation and vectorization. International collaborations, including with Paris-Sud's Computer Science Laboratory, in France, largely contributed to these reflections. And third, after years of attempts to solve the problem of tree building blocks abstractions, a solution is finally in sight. The STAMLA project led to early developments in the conceptification of hyperiterators, as a multi-dimensional generalization to iterators. This promising research direction may provide a unique abstraction for linear algebra building blocks, graphs, and trees. Many years of work will still be necessary, but if successful, this approach would be significant achievement and would finally unify many problems seen as unrelated in software architecture.\n\nIn parallel with the theoretical investigations, the STAMLA project also focused on more concrete developments, including ones on bit manipulation, Monte-Carlo Tree Search (MCTS), and Abstract Syntax Trees (ASTs). As mentioned before, bit manipulation is probably one of the most critical component in high performance implicit trees. But applications of bit manipulation goes far beyond trees and includes, for example, multiprecision arithmetic. STAMLA contributed to the development of The Bit Library, today available through a public repository, but also currently in the process of standardization and likely to be released as part of C++23. The first component of it, basic low-level bit twiddling functions will be released through the &lt;bit&gt; header as part of C++20. It is already available today, worldwide, in most compilers as an experimental feature. Part of the bit library have also been included in GCC's internals. STAMLA also led to new developments in MCTS, which then led to developments in genetic algorithms and in general game-playing, especially through a collaboration with Paris-Diderot University. These constituted perfect use cases in the process of designing tree abstractions. Finally, STAMLA also contributed to research on compile-time ASTs through another collaboration with Paris-Sud's Computer Science Laboratory. This project evolved into the development of a Domain Specific Language to process symbolic mathematical formulas at compile-time. Results have been presented at CppCon 2019, and the approach is being considered to implement auto-differentiation in C++.\n\nFinally, at an organizational level, the project contributed to the creation of the ISO WG21 Study Group 19 on Machine Learning, an international initiative to standardize low-level machine learning C++ building blocks. The idea behind this group is to gather world-leading experts from academia and industry to build a common basis for machine learning frameworks. Current projects include linear algebra, basic statistics, automatic differentiation, and graphs and trees. The study group constituted a perfect platform to gather feedback from teams who developed the most advanced graphs and trees libraries worldwide, such as the Boost Graph Library. The standardization group is alive and well, and will outlive the STAMLA project.\n\n\t\t\t\t\tLast Modified: 05/01/2020\n\n\t\t\t\t\tSubmitted by: Vincent Reverdy"
 }
}