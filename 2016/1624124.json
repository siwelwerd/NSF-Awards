{
 "awd_id": "1624124",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CAREER: User-Space Protection Domains for Compositional Information Security",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2016-01-01",
 "awd_exp_date": "2017-12-31",
 "tot_intn_awd_amt": 276607.0,
 "awd_amount": 276607.0,
 "awd_min_amd_letter_date": "2016-02-17",
 "awd_max_amd_letter_date": "2016-09-23",
 "awd_abstract_narration": "Attacks on software applications such as email readers and web browsers are common. These attacks can cause damages ranging from application malfunction, loss of private data, to a complete takeover of users' computers.  One effective strategy for limiting the damage is to adopt the principle of least privilege in application design: the application is split into several protection domains and each domain is given only the necessary privileges to perform its task. In this design, the compromise of one domain does not directly lead to the compromise of other security-sensitive domains.  The PI proposes to design and implement a framework that makes it easy for software developers to apply the principle of least privilege to their applications. The proposed framework will significantly improve the security of critical software applications. It will benefit the software industry by designing new technologies for building secure software systems.\r\n\r\nThe proposed research combines several novel ideas: (1) user-space protection domains through binary-level enforcement of isolation and information-flow security; (2) a declarative language that allows for flexible configuration of an application's security architecture; (3) a binary-level partitioning tool that automatically splits an application into components of least privilege; (4) a compositional reasoning mechanism that allows developers to perform formal reasoning about an application's end-to-end information security.  By staying in the user space, the proposed framework is OS independent, and by working on binary code, it is source-language agnostic, making it more broadly applicable.  Developers can use it to partition an application, flexibly configure its security architecture, and reason about its information security.  On the education side, the PI will organize a series of activities to increase high school students' awareness of security, privacy, and secure programming.  The central activity is a summer workshop that gathers local high-school technology teachers and helps them design lesson plans that can be integrated into their schools' technology curriculum.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Gang",
   "pi_last_name": "Tan",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Gang Tan",
   "pi_email_addr": "gtan@psu.edu",
   "nsf_id": "000193259",
   "pi_start_date": "2016-02-17",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Pennsylvania State Univ University Park",
  "inst_street_address": "201 OLD MAIN",
  "inst_street_address_2": "",
  "inst_city_name": "UNIVERSITY PARK",
  "inst_state_code": "PA",
  "inst_state_name": "Pennsylvania",
  "inst_phone_num": "8148651372",
  "inst_zip_code": "168021503",
  "inst_country_name": "United States",
  "cong_dist_code": "15",
  "st_cong_dist_code": "PA15",
  "org_lgl_bus_name": "THE PENNSYLVANIA STATE UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "NPM2J7MSCF61"
 },
 "perf_inst": {
  "perf_inst_name": "Pennsylvania State Univ University Park",
  "perf_str_addr": "112 Hammond Building",
  "perf_city_name": "University Park",
  "perf_st_code": "PA",
  "perf_st_name": "Pennsylvania",
  "perf_zip_code": "168027000",
  "perf_ctry_code": "US",
  "perf_cong_dist": null,
  "perf_st_cong_dist": "PA",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "1045",
   "pgm_ref_txt": "CAREER-Faculty Erly Career Dev"
  },
  {
   "pgm_ref_code": "7795",
   "pgm_ref_txt": "TRUSTWORTHY COMPUTING"
  }
 ],
 "app_fund": [
  {
   "app_code": "0114",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001415DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0115",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001516DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2014,
   "fund_oblg_amt": 79683.0
  },
  {
   "fund_oblg_fiscal_yr": 2015,
   "fund_oblg_amt": 96013.0
  },
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 100911.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The main objective of this project is to design a privilege separation framework that makes it easier for developers to adopt in their application development. In privilege separation, modules of a software application are put into separate protection domains so that the compromise of one domain does not directly lead to the compromise of other domains; each domain is given only those privileges necessary to complete its task. One unique design adopted by this project isthat it aims for a binary-level approach. Specifically, it aims to isolate protection domains, enforce security policies, and perform partitioning directly on binary code. This approach is challenging, but offers the key advantage of being source-language agnostic.</p>\n<p>Through the completion of the project, we have made significant progress in addressing the core problems in the project: (1) we developed two systems called uPro and duPro, which enforce efficient and fine-grained privilege separation using software-based fault isolation and decentralized information-flow control when given anapplication that has been manually privilege separated; (2) We have developed a system called NativeGuard, which isolates native libraries from other components in Android applications; (3) We have built a new generation of software-based fault isolation and control-flow integrity frameworks (in a series of systems called Strato, MCFI, and PICFI) that are able to provide light-weight protection domains used in a privilege-separation framework. Many of these projects have been open sourced and have benefited the software-security community.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 02/04/2018<br>\n\t\t\t\t\tModified by: Gang&nbsp;Tan</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThe main objective of this project is to design a privilege separation framework that makes it easier for developers to adopt in their application development. In privilege separation, modules of a software application are put into separate protection domains so that the compromise of one domain does not directly lead to the compromise of other domains; each domain is given only those privileges necessary to complete its task. One unique design adopted by this project isthat it aims for a binary-level approach. Specifically, it aims to isolate protection domains, enforce security policies, and perform partitioning directly on binary code. This approach is challenging, but offers the key advantage of being source-language agnostic.\n\nThrough the completion of the project, we have made significant progress in addressing the core problems in the project: (1) we developed two systems called uPro and duPro, which enforce efficient and fine-grained privilege separation using software-based fault isolation and decentralized information-flow control when given anapplication that has been manually privilege separated; (2) We have developed a system called NativeGuard, which isolates native libraries from other components in Android applications; (3) We have built a new generation of software-based fault isolation and control-flow integrity frameworks (in a series of systems called Strato, MCFI, and PICFI) that are able to provide light-weight protection domains used in a privilege-separation framework. Many of these projects have been open sourced and have benefited the software-security community.\n\n\t\t\t\t\tLast Modified: 02/04/2018\n\n\t\t\t\t\tSubmitted by: Gang Tan"
 }
}