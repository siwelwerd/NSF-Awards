{
 "awd_id": "1617573",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CSR: Small: Collaborative Research: Taming Mobile Hardware & OS Diversity for Comprehensive Software Analysis",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032925197",
 "po_email": "mmcclure@nsf.gov",
 "po_sign_block_name": "Marilyn McClure",
 "awd_eff_date": "2016-10-01",
 "awd_exp_date": "2020-09-30",
 "tot_intn_awd_amt": 250000.0,
 "awd_amount": 250000.0,
 "awd_min_amd_letter_date": "2016-09-01",
 "awd_max_amd_letter_date": "2016-09-01",
 "awd_abstract_narration": "Today, the Android operating system running on mobile systems such as smartphones, tablets, and wearables, is increasingly diverse. This is mainly because Android is heavily customized at multiple layers by many different vendors and mobile carriers, for various reasons including the difference in hardware and brand-specific value-added applications and services. This diversity of Android creates important challenges for testing, debugging, and analysis of software running on these mobile systems, including testing for consistent functionality and performance across different systems, finding crash bugs, analyzing malware, and identifying security vulnerabilities. The goal of this project is to make testing and analysis of the entire software stack of mobile systems running Android faster and more affordable, while at the same time requiring small engineering effort, all despite the diversity of mobile software and hardware. The proposed project will help improve the quality and security of software on mobile systems - a significant benefit to society and the economy.  \r\n\r\nThe plan to achieve the aforementioned goals through a cloud-based mobile farm service, which provides virtual mobile instances, or virtual instances for short. Each virtual instance is a virtual machine that runs on powerful servers and that fully resembles the hardware and software configurations of a particular mobile system. By leveraging virtual machines running in servers, the proposed solution will provide a low cost, thus lower prices for the users. The important challenges will be addressed in two research thrusts. The first thrust investigates techniques to consolidate the real mobile systems in the cloud to reduce the overall infrastructure cost. The second research thrust targets at enhancing the performance of virtual instances by leveraging software and hardware techniques such as speculation, record and replay, dynamic boundary, and Remote Direct Memory Access (RDMA).",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Zhiyun",
   "pi_last_name": "Qian",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Zhiyun Qian",
   "pi_email_addr": "zhiyun.qian@ucr.edu",
   "nsf_id": "000677475",
   "pi_start_date": "2016-09-01",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of California-Riverside",
  "inst_street_address": "200 UNIVERSTY OFC BUILDING",
  "inst_street_address_2": "",
  "inst_city_name": "RIVERSIDE",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "9518275535",
  "inst_zip_code": "925210001",
  "inst_country_name": "United States",
  "cong_dist_code": "39",
  "st_cong_dist_code": "CA39",
  "org_lgl_bus_name": "REGENTS OF THE UNIVERSITY OF CALIFORNIA AT RIVERSIDE",
  "org_prnt_uei_num": "",
  "org_uei_num": "MR5QC5FCAVH5"
 },
 "perf_inst": {
  "perf_inst_name": "University of California-Riverside",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "925210001",
  "perf_ctry_code": "US",
  "perf_cong_dist": "39",
  "perf_st_cong_dist": "CA39",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 250000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span>The general goal of the project is to make testing and analysis of Android kernels affordable and fast while requiring low engineering effort, all despite the diversity of mobile software and hardware. A cloud&shy;-based mobile farm service, called Charm, is first proposed to achieve the aforementioned goal through virtualized mobile instances, or virtual instances for short. Each virtual instance is a virtual machine that runs on powerful servers and that fully resembles the hardware and software configurations of a particular mobile system. By leveraging virtual machines running in servers, Charm will enjoy a low cost and hence low prices for the users who need to use these virtual instances for testing and analysis. To be able to boot and run kernel code, especially device drivers in virtual machines, we developed a solution that can forward all low-level MMIO read/write operations to a real device (and forward back all the interrupts), allowing the drivers to think that they are interacting with real hardware devices. Throughout the project, we have successfully run the following device drivers in a virtual machine, including the&nbsp;<span>camera, audio, GPU, and IMU sensor drivers, in different mobile systems such as LG Nexus 5X, Huawei Nexus 6P, and Samsung Galaxy S7. Running these drivers inside virtual machines enables more powerful dynamic analysis, including debugging, dynamic symbolic execution, dynamic taint analysis, advanced fuzzing, and even record and replay. We have showcased a number of such applications in the project.</span></span></p>\n<p><span><span>Following the Charm project, we further attempted to improve Android kernel fuzzing to overcome two bottlenecks. In particular, we first notice that OS kernel fuzzing wastes significant amount of time in rebooting (recovering from a triggered bug). This problem is&nbsp;exacerbated by the fact there almost always exist shallow bugs in any kernel module. Secondly, we notice that OS kernel fuzzing often achieves extremely low coverage. This leads us to discover a spatial bottleneck --- unsatisfied dependencies among different code paths. We have conducted extensive measurement analysis to understand the severity of these two problems.&nbsp;<span>For the spatial bottleneck, our preliminary results show that only 6% of the basic blocks in the Nexus 5X's camera driver is covered after 24 hours of fuzzing (only against this single device driver). For the temporal bottelneck of repetitive reboots, 46.5% of the fuzzing time is wasted on rebooting when fuzzing the same camera driver.&nbsp;</span></span></span></p>\n<p><span><span><span>Finally, during the kernel fuzzing process, we find that the discovered bugs are often duplicate and even fixed already in upstream. This prompted us to understand how upstream patches propagate to downstream kernels. Specifically, we have built a static binary analysis tool that is capable of detecting the presence of a patch in a binary-only Android kernel image. With this tool and an analysis on the patch propagation in upstreams (e.g., Linux, Android common, Qualcomm), we are able to show that the end-to-end patch propagation delay of Linux bug can take 200+ days (median) to reach the the phones used by end-users. Furthermore. 20% of the patches take more than 400 days. The lessons are valuable in managing the various kernel branches that depende on each other.</span></span></span></p><br>\n<p>\n\t\t\t\t      \tLast Modified: 10/02/2020<br>\n\t\t\t\t\tModified by: Zhiyun&nbsp;Qian</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThe general goal of the project is to make testing and analysis of Android kernels affordable and fast while requiring low engineering effort, all despite the diversity of mobile software and hardware. A cloud&shy;-based mobile farm service, called Charm, is first proposed to achieve the aforementioned goal through virtualized mobile instances, or virtual instances for short. Each virtual instance is a virtual machine that runs on powerful servers and that fully resembles the hardware and software configurations of a particular mobile system. By leveraging virtual machines running in servers, Charm will enjoy a low cost and hence low prices for the users who need to use these virtual instances for testing and analysis. To be able to boot and run kernel code, especially device drivers in virtual machines, we developed a solution that can forward all low-level MMIO read/write operations to a real device (and forward back all the interrupts), allowing the drivers to think that they are interacting with real hardware devices. Throughout the project, we have successfully run the following device drivers in a virtual machine, including the camera, audio, GPU, and IMU sensor drivers, in different mobile systems such as LG Nexus 5X, Huawei Nexus 6P, and Samsung Galaxy S7. Running these drivers inside virtual machines enables more powerful dynamic analysis, including debugging, dynamic symbolic execution, dynamic taint analysis, advanced fuzzing, and even record and replay. We have showcased a number of such applications in the project.\n\nFollowing the Charm project, we further attempted to improve Android kernel fuzzing to overcome two bottlenecks. In particular, we first notice that OS kernel fuzzing wastes significant amount of time in rebooting (recovering from a triggered bug). This problem is exacerbated by the fact there almost always exist shallow bugs in any kernel module. Secondly, we notice that OS kernel fuzzing often achieves extremely low coverage. This leads us to discover a spatial bottleneck --- unsatisfied dependencies among different code paths. We have conducted extensive measurement analysis to understand the severity of these two problems. For the spatial bottleneck, our preliminary results show that only 6% of the basic blocks in the Nexus 5X's camera driver is covered after 24 hours of fuzzing (only against this single device driver). For the temporal bottelneck of repetitive reboots, 46.5% of the fuzzing time is wasted on rebooting when fuzzing the same camera driver. \n\nFinally, during the kernel fuzzing process, we find that the discovered bugs are often duplicate and even fixed already in upstream. This prompted us to understand how upstream patches propagate to downstream kernels. Specifically, we have built a static binary analysis tool that is capable of detecting the presence of a patch in a binary-only Android kernel image. With this tool and an analysis on the patch propagation in upstreams (e.g., Linux, Android common, Qualcomm), we are able to show that the end-to-end patch propagation delay of Linux bug can take 200+ days (median) to reach the the phones used by end-users. Furthermore. 20% of the patches take more than 400 days. The lessons are valuable in managing the various kernel branches that depende on each other.\n\n\t\t\t\t\tLast Modified: 10/02/2020\n\n\t\t\t\t\tSubmitted by: Zhiyun Qian"
 }
}