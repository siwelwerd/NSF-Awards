{
 "awd_id": "1563991",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Medium: Spectral Profiling: Understanding Software Performance without Code Instrumentation",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2016-07-15",
 "awd_exp_date": "2022-06-30",
 "tot_intn_awd_amt": 850000.0,
 "awd_amount": 850000.0,
 "awd_min_amd_letter_date": "2016-07-07",
 "awd_max_amd_letter_date": "2021-05-25",
 "awd_abstract_narration": "Dynamic analyses such as profiling program execution are widely used because they can measure various aspects of the runtime behavior of a software system and have a wide range of applications in software engineering. These analyses are typically carried out by adding probes to the software, which imposes space/time overhead, is intrusive, and can negatively affect software behavior. To address these issues, we propose a novel approach that allows for analyzing software behavior accurately and non-intrusively by leveraging the electromagnetic emissions produced by a computer as it executes code. Our approach can collect runtime information about a software system by simply placing a device next to the system. It can thus not only enable profiling for a variety of software systems for which this was previously impossible (e.g., embedded systems), but also benefit dynamic analyses in more traditional contexts.\r\n\r\nThis project will combine various machine learning and static analysis techniques to build likely electromagnetic signatures for different code patterns, investigate which code granularity provides the most accurate matching of electromagnetic emissions to code, and explore adaptive and hierarchical techniques for performing this matching at runtime. This research is inherently interdisciplinary and promises to break new ground and have broader impact in several combined areas, including software engineering, programming languages, computer architecture, and electromagnetics. Unlike previous work on electromagnetic emissions analysis, our approach will collect runtime information that is fine-grained enough to measure the execution of short sequences of statements, if not individual instructions. This will let us apply our approach to several software engineering tasks. In fact, if successful, this research will both provide a solid conceptual foundation, which other researchers will be able to leverage, and investigate a set of specific techniques and tools that build on this foundation to support tasks such as zero-overhead performance measurement, debugging, and anomaly detection.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Alessandro",
   "pi_last_name": "Orso",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Alessandro Orso",
   "pi_email_addr": "orso@cc.gatech.edu",
   "nsf_id": "000489660",
   "pi_start_date": "2016-07-07",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Milos",
   "pi_last_name": "Prvulovic",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Milos Prvulovic",
   "pi_email_addr": "milos@cc.gatech.edu",
   "nsf_id": "000312728",
   "pi_start_date": "2016-07-07",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Alenka",
   "pi_last_name": "Zajic",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Alenka Zajic",
   "pi_email_addr": "alenka.zajic@ece.gatech.edu",
   "nsf_id": "000545697",
   "pi_start_date": "2016-07-07",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Georgia Tech Research Corporation",
  "inst_street_address": "926 DALNEY ST NW",
  "inst_street_address_2": "",
  "inst_city_name": "ATLANTA",
  "inst_state_code": "GA",
  "inst_state_name": "Georgia",
  "inst_phone_num": "4048944819",
  "inst_zip_code": "303186395",
  "inst_country_name": "United States",
  "cong_dist_code": "05",
  "st_cong_dist_code": "GA05",
  "org_lgl_bus_name": "GEORGIA TECH RESEARCH CORP",
  "org_prnt_uei_num": "EMW9FC8J3HN4",
  "org_uei_num": "EMW9FC8J3HN4"
 },
 "perf_inst": {
  "perf_inst_name": "Georgia Institute of Technology",
  "perf_str_addr": "225 North Ave NW",
  "perf_city_name": "Atlanta",
  "perf_st_code": "GA",
  "perf_st_name": "Georgia",
  "perf_zip_code": "303320002",
  "perf_ctry_code": "US",
  "perf_cong_dist": "05",
  "perf_st_cong_dist": "GA05",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 850000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-e48199de-7fff-a003-bbce-a2ffb69d65ab\"> </span></p>\n<p dir=\"ltr\"><span>Program profiling is a type of dynamic analysis that measures some aspects of the behavior of a software system, and whose results can support a number of software engineering tasks, such as code optimization, software debugging, performance testing, and security analysis. Profiling is typically performed by adding to a program software probes, also called instrumentation, that either log events of interest or update statistics about such events at runtime. Although this approach works well in many cases, it is problematic in many others. For example, instrumentation can rarely be used in embedded systems with limited memory, on deployed software, where instrumentation can introduce unacceptable performance overhead, and in applications with strong real-time requirements. In general, program instrumentation is an intrusive technique that, even when minimal and designed so as not to affect the semantics of the instrumented code, can still change some aspects of the dynamic behavior of such code.</span></p>\n<p dir=\"ltr\"><span>To address and overcome these issues, the PIs have developed a completely novel approach to program profiling that does not require any kind of instrumentation. More precisely, by combining their expertise in static and dynamic program analysis, computer architecture, signal processing, and electromagnetics (EM), the PIs have developed a family of techniques and tools that leverage the EM emissions produced by a computer as it executes code to compute profiling information in an accurate and completely non-intrusive way. By doing so, these techniques can not only improve the way profiling is performed on traditional software but also enable the profiling of a variety of software systems for which profiling was previously not possible.</span></p>\n<p>During the lifetime of the project, the PIs applied the EM-based profiling approach developed in this research in many different contexts. Particularly noteworthy, given the increasing importance of cybersecurity in our society, are the applications of the approach to network and computer security. For example, the PIs targeted vulnerabilities in encryption algorithms that are used every day by millions of users to browse the web; using their EM-based approach, they were able to break the encryption mechanisms meant to protect the privacy of the information exchanged during network communications, such as when accessing a web page, and to detect ways to mitigate this threat. For another example, the PIs developed a technique that, by simply measuring EM emissions, is able to detect when an attacker has tampered with a software system, such as an IoT device, and has introduced malware into it.</p>\n<p>In addition to disseminating the results of this research through publications, public presentations, integration into the curriculum, and collaborations with industry, the PIs have made freely available to researchers and practitioners tools, data, and experiment infrastructure developed within the project, which will help further dissemination and promote future research. More generally, by advancing the state of the art in areas such as software profiling, program testing, and cybersecurity, this research can help developers build more reliable software systems, ultimately increasing the overall quality of our software infrastructure and providing benefits to all segments of society that depend on software.</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 01/17/2023<br>\n\t\t\t\t\tModified by: Alessandro&nbsp;Orso</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n \nProgram profiling is a type of dynamic analysis that measures some aspects of the behavior of a software system, and whose results can support a number of software engineering tasks, such as code optimization, software debugging, performance testing, and security analysis. Profiling is typically performed by adding to a program software probes, also called instrumentation, that either log events of interest or update statistics about such events at runtime. Although this approach works well in many cases, it is problematic in many others. For example, instrumentation can rarely be used in embedded systems with limited memory, on deployed software, where instrumentation can introduce unacceptable performance overhead, and in applications with strong real-time requirements. In general, program instrumentation is an intrusive technique that, even when minimal and designed so as not to affect the semantics of the instrumented code, can still change some aspects of the dynamic behavior of such code.\nTo address and overcome these issues, the PIs have developed a completely novel approach to program profiling that does not require any kind of instrumentation. More precisely, by combining their expertise in static and dynamic program analysis, computer architecture, signal processing, and electromagnetics (EM), the PIs have developed a family of techniques and tools that leverage the EM emissions produced by a computer as it executes code to compute profiling information in an accurate and completely non-intrusive way. By doing so, these techniques can not only improve the way profiling is performed on traditional software but also enable the profiling of a variety of software systems for which profiling was previously not possible.\n\nDuring the lifetime of the project, the PIs applied the EM-based profiling approach developed in this research in many different contexts. Particularly noteworthy, given the increasing importance of cybersecurity in our society, are the applications of the approach to network and computer security. For example, the PIs targeted vulnerabilities in encryption algorithms that are used every day by millions of users to browse the web; using their EM-based approach, they were able to break the encryption mechanisms meant to protect the privacy of the information exchanged during network communications, such as when accessing a web page, and to detect ways to mitigate this threat. For another example, the PIs developed a technique that, by simply measuring EM emissions, is able to detect when an attacker has tampered with a software system, such as an IoT device, and has introduced malware into it.\n\nIn addition to disseminating the results of this research through publications, public presentations, integration into the curriculum, and collaborations with industry, the PIs have made freely available to researchers and practitioners tools, data, and experiment infrastructure developed within the project, which will help further dissemination and promote future research. More generally, by advancing the state of the art in areas such as software profiling, program testing, and cybersecurity, this research can help developers build more reliable software systems, ultimately increasing the overall quality of our software infrastructure and providing benefits to all segments of society that depend on software.\n\n \n\n\t\t\t\t\tLast Modified: 01/17/2023\n\n\t\t\t\t\tSubmitted by: Alessandro Orso"
 }
}