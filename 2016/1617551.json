{
 "awd_id": "1617551",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CSR: EDS: Small: Energy-Aware Redundancy Management",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Erik Brunvand",
 "awd_eff_date": "2016-10-01",
 "awd_exp_date": "2021-09-30",
 "tot_intn_awd_amt": 494075.0,
 "awd_amount": 510075.0,
 "awd_min_amd_letter_date": "2016-08-08",
 "awd_max_amd_letter_date": "2018-05-09",
 "awd_abstract_narration": "Redundancy is a fundamental system characteristic that improves productivity and resilience. Each such system has multiple, redundant configuration options with their specific resource requirements and cost/quality tradeoffs. This project targets applications with three types of redundancies, namely approximation, replication, and implementation. Applications are expressed as collections of interdependent services that operate under varying resource availabilities, particularly energy. Each service may offer outcomes/answers of different quality at different costs, potentially using different hardware/software resources. The key insight is that (1) quality and cost requirements have to be balanced across all application services, and that (2) users need to be able to specify and explore application cost/quality tradeoffs. The project implements a new programming architecture that effectively manages the three types of redundancies to produce the best application outcomes under limited energy/cost budgets and possible service failure conditions. The project targets battery-operated smart phones and autonomous robotic systems, but extends to cloud, enterprise and high-performance computing domains.\r\n\r\n Applications are modeled as dual-weighted, directed graphs where nodes represent different services and their quality levels, and edges represent resource or input/output dependencies between these services and their levels. Dual weights model the energy/cost of a service and the importance of the service and its levels for the user. The optimal solution of the service selection problem picks services and their levels such that the importance metric is maximized under a given energy/cost budget. This NP-complete problem is solved using a 0-1 integer programming formulation and state-of-the-art integer programming tools.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Ulrich",
   "pi_last_name": "Kremer",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Ulrich Kremer",
   "pi_email_addr": "uli@cs.rutgers.edu",
   "nsf_id": "000373414",
   "pi_start_date": "2016-08-08",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Rutgers University New Brunswick",
  "inst_street_address": "3 RUTGERS PLZ",
  "inst_street_address_2": "",
  "inst_city_name": "NEW BRUNSWICK",
  "inst_state_code": "NJ",
  "inst_state_name": "New Jersey",
  "inst_phone_num": "8489320150",
  "inst_zip_code": "089018559",
  "inst_country_name": "United States",
  "cong_dist_code": "12",
  "st_cong_dist_code": "NJ12",
  "org_lgl_bus_name": "RUTGERS, THE STATE UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "M1LVPE5GLSD9"
 },
 "perf_inst": {
  "perf_inst_name": "Rutgers University New Brunswick",
  "perf_str_addr": "110 Frelinghuysen Rd.",
  "perf_city_name": "Piscataway",
  "perf_st_code": "NJ",
  "perf_st_name": "New Jersey",
  "perf_zip_code": "088548072",
  "perf_ctry_code": "US",
  "perf_cong_dist": "06",
  "perf_st_cong_dist": "NJ06",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "171400",
   "pgm_ele_name": "Special Projects - CNS"
  },
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 494075.0
  },
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 16000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><strong>Summary&nbsp;</strong></p>\n<p>Many resource-constrained devices such as battery-operated embedded systems or smartphones require applications to produce outcomes under different, potentially changing, resource constraints which include energy and time. Relaxing application semantics through approximations enables trading off resource usage for outcome quality.</p>\n<p>Although quality is a highly subjective notion, previous work assumes given, fixed low-level quality metrics that often lack a strong correlation to a user's higher-level quality experience. Users may also change their minds with respect to their quality expectations depending on the resource budgets they are willing to dedicate to an execution. This motivates the need for an adaptive application framework where application developers provide quality tuning knobs for different high-level quality aspects of the application. Just before application execution, users can customize their quality expectation through different quality knob settings and a user provided resource budget. The execution framework then monitors the resource usage of the running application and adapts an application?s behavior in order to produce the highest customized quality outcome while respecting the provided resource budget. The adaptation may be necessary due to uncertainties in the predicted resource usage, addressing the situation where the predicted and actual observed resource usage differ.</p>\n<p>Such uncertainties can occur when multiple applications share common resources, for example when running on the same smartphone. Individual applications may perceive the resource usage of other applications as resource uncertainty, prompting adaptive behavior changes across all active application, leading to suboptimal, overall quality outcomes. The adaptive framework has been extended to summarize the resource impacts of different active applications under different individual adaptation strategies. This allows adaptations to be coordinated across all active applications, resulting in improved overall quality outcomes of the individual applications.</p>\n<p><strong>Customized quality notions and execution resource budgets</strong></p>\n<p>A key outcome of this project is the design and implementation of a novel framework (RAPIDS) where application developers, application users, and automatic techniques work together to achieve approximate application executions where subjective quality is optimized while the provided budget is respected and utilized as much as possible. The KDG (knob dependence graph) is a new representation to express the configuration space, construct performance and quality models, and determine reconfigurations at application execution time (Figure 1).</p>\n<p>Approximation can be an effective technique to allow tradeoffs between quality of outcomes and resource usage. Since quality is subjective, i.e., depends on user perceptions, it must be considered a first-order concept together with a resource budget. Application users have to be able to make informed decisions about quality vs. resource tradeoffs, which means that both entities have to be described at abstraction levels that make sense to users. For example, it is not clear how low-level quality metrics (e.g.: bit errors) relate to high-level quality notions, for instance for a video player where brightness of image, smoothness of image transitions (frame rate), and image size are tangible user experiences.&nbsp;</p>\n<p>To make quality a first-order user-level concept, the application developer has to be involved. Application developers have not only to define levels of approximations of the program, i.e., program configurations, but also outcome quality metrics that they want to expose to the user. Users are then able to specify a customized quality metric by defining their overall quality experience as a weighted, linear combination of the developer provided basic quality metrics. For example, the developer may expose image metrics as discussed above to the users. Before a program execution, one user may prefer a brighter but smaller image at a medium frame rate, while another wants a high color fidelity image, at the cost of a lower frame rate and less image brightness.</p>\n<p><strong>Dynamic reconfiguration to address uncertainties</strong></p>\n<p>Dynamic remapping of configurations, i.e., changes to the approximation level can be used to deal with uncertainties of resource availabilities or environmental conditions. We have shown that reconfiguration can be an effective technique to adapt to these uncertainties, allowing program executions to successfully terminate where static configuration choices would have led to execution failures, i.e., depletion of all resources before reaching the end of the execution.</p>\n<p><strong>Cross-application configuration management</strong></p>\n<p>Since approximations are driven by resource usage and resource availability, finding the best approximations across a set of concurrently executing programs on a shared computing platform is another challenging problem.&nbsp; Treating the set of applications as a \"single\" application, i.e., optimizing the cartesian product of all individual configuration spaces is not feasible due to the size of the resulting combined configuration space. The RAPIDM framework shows that individual configuration spaces can be effectively clustered into \"buckets\", i.e., equivalence classes, that have the same resource footprint and behavior under reduced resource availabilities (Figure 2). This summarization technique makes the exact solution of global configuration selection feasible since only the cartesian product of the different buckets need to be considered. This approach enables more successful program executions with overall higher quality outcomes.</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 02/19/2022<br>\n\t\t\t\t\tModified by: Ulrich&nbsp;Kremer</p>\n</div>\n<div class=\"porSideCol\">\n<div class=\"each-gallery\">\n<div class=\"galContent\" id=\"gallery0\">\n<div class=\"photoCount\" id=\"photoCount0\">\n\t\t\t\t\t\t\t\t\tImages (<span id=\"selectedPhoto0\">1</span> of <span class=\"totalNumber\"></span>)\t\t\n\t\t\t\t\t\t\t\t</div>\n<div class=\"galControls\" id=\"controls0\"></div>\n<div class=\"galSlideshow\" id=\"slideshow0\"></div>\n<div class=\"galEmbox\" id=\"embox\">\n<div class=\"image-title\"></div>\n</div>\n</div>\n<div class=\"galNavigation\" id=\"navigation0\">\n<ul class=\"thumbs\" id=\"thumbs0\">\n<li>\n<a href=\"/por/images/Reports/POR/2022/1617551/1617551_10448025_1643329731526_RAPIDSworkflow--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2022/1617551/1617551_10448025_1643329731526_RAPIDSworkflow--rgov-800width.jpg\" title=\"Figure 1\"><img src=\"/por/images/Reports/POR/2022/1617551/1617551_10448025_1643329731526_RAPIDSworkflow--rgov-66x44.jpg\" alt=\"Figure 1\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">High-level workflow of the novel RAPIDS framework with phases 1 through 4 interacting with the Knob Dependence Graph (KDG) representation.</div>\n<div class=\"imageCredit\">TODAES Special Issue on Approximate Systems, November 2021</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Ulrich&nbsp;Kremer</div>\n<div class=\"imageTitle\">Figure 1</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2022/1617551/1617551_10448025_1643330947209_ConfigurationSummaryDendogram--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2022/1617551/1617551_10448025_1643330947209_ConfigurationSummaryDendogram--rgov-800width.jpg\" title=\"Figure 2\"><img src=\"/por/images/Reports/POR/2022/1617551/1617551_10448025_1643330947209_ConfigurationSummaryDendogram--rgov-66x44.jpg\" alt=\"Figure 2\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Dendrogram of clustering the 700 configurations of a sample application, Ferret, into only 5 \"buckets\". Shorter vertical bars imply higher inner-cluster similarity. Numbers next to nodes are cluster configuration (sub-tree) sizes.</div>\n<div class=\"imageCredit\">ESEC/FSE '20: 28th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Ulrich&nbsp;Kremer</div>\n<div class=\"imageTitle\">Figure 2</div>\n</div>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>",
  "por_txt_cntn": "\nSummary \n\nMany resource-constrained devices such as battery-operated embedded systems or smartphones require applications to produce outcomes under different, potentially changing, resource constraints which include energy and time. Relaxing application semantics through approximations enables trading off resource usage for outcome quality.\n\nAlthough quality is a highly subjective notion, previous work assumes given, fixed low-level quality metrics that often lack a strong correlation to a user's higher-level quality experience. Users may also change their minds with respect to their quality expectations depending on the resource budgets they are willing to dedicate to an execution. This motivates the need for an adaptive application framework where application developers provide quality tuning knobs for different high-level quality aspects of the application. Just before application execution, users can customize their quality expectation through different quality knob settings and a user provided resource budget. The execution framework then monitors the resource usage of the running application and adapts an application?s behavior in order to produce the highest customized quality outcome while respecting the provided resource budget. The adaptation may be necessary due to uncertainties in the predicted resource usage, addressing the situation where the predicted and actual observed resource usage differ.\n\nSuch uncertainties can occur when multiple applications share common resources, for example when running on the same smartphone. Individual applications may perceive the resource usage of other applications as resource uncertainty, prompting adaptive behavior changes across all active application, leading to suboptimal, overall quality outcomes. The adaptive framework has been extended to summarize the resource impacts of different active applications under different individual adaptation strategies. This allows adaptations to be coordinated across all active applications, resulting in improved overall quality outcomes of the individual applications.\n\nCustomized quality notions and execution resource budgets\n\nA key outcome of this project is the design and implementation of a novel framework (RAPIDS) where application developers, application users, and automatic techniques work together to achieve approximate application executions where subjective quality is optimized while the provided budget is respected and utilized as much as possible. The KDG (knob dependence graph) is a new representation to express the configuration space, construct performance and quality models, and determine reconfigurations at application execution time (Figure 1).\n\nApproximation can be an effective technique to allow tradeoffs between quality of outcomes and resource usage. Since quality is subjective, i.e., depends on user perceptions, it must be considered a first-order concept together with a resource budget. Application users have to be able to make informed decisions about quality vs. resource tradeoffs, which means that both entities have to be described at abstraction levels that make sense to users. For example, it is not clear how low-level quality metrics (e.g.: bit errors) relate to high-level quality notions, for instance for a video player where brightness of image, smoothness of image transitions (frame rate), and image size are tangible user experiences. \n\nTo make quality a first-order user-level concept, the application developer has to be involved. Application developers have not only to define levels of approximations of the program, i.e., program configurations, but also outcome quality metrics that they want to expose to the user. Users are then able to specify a customized quality metric by defining their overall quality experience as a weighted, linear combination of the developer provided basic quality metrics. For example, the developer may expose image metrics as discussed above to the users. Before a program execution, one user may prefer a brighter but smaller image at a medium frame rate, while another wants a high color fidelity image, at the cost of a lower frame rate and less image brightness.\n\nDynamic reconfiguration to address uncertainties\n\nDynamic remapping of configurations, i.e., changes to the approximation level can be used to deal with uncertainties of resource availabilities or environmental conditions. We have shown that reconfiguration can be an effective technique to adapt to these uncertainties, allowing program executions to successfully terminate where static configuration choices would have led to execution failures, i.e., depletion of all resources before reaching the end of the execution.\n\nCross-application configuration management\n\nSince approximations are driven by resource usage and resource availability, finding the best approximations across a set of concurrently executing programs on a shared computing platform is another challenging problem.  Treating the set of applications as a \"single\" application, i.e., optimizing the cartesian product of all individual configuration spaces is not feasible due to the size of the resulting combined configuration space. The RAPIDM framework shows that individual configuration spaces can be effectively clustered into \"buckets\", i.e., equivalence classes, that have the same resource footprint and behavior under reduced resource availabilities (Figure 2). This summarization technique makes the exact solution of global configuration selection feasible since only the cartesian product of the different buckets need to be considered. This approach enables more successful program executions with overall higher quality outcomes.\n\n \n\n \n\n \n\n\t\t\t\t\tLast Modified: 02/19/2022\n\n\t\t\t\t\tSubmitted by: Ulrich Kremer"
 }
}