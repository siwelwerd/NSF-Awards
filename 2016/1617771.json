{
 "awd_id": "1617771",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: A Higher-Order Framework for Meta-Theoretic Reasoning",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032922585",
 "po_email": "pprabhak@nsf.gov",
 "po_sign_block_name": "Pavithra Prabhakar",
 "awd_eff_date": "2016-07-01",
 "awd_exp_date": "2022-09-30",
 "tot_intn_awd_amt": 514756.0,
 "awd_amount": 557756.0,
 "awd_min_amd_letter_date": "2016-05-31",
 "awd_max_amd_letter_date": "2021-12-22",
 "awd_abstract_narration": "This project develops a logical framework that is well-adapted\r\nto the tasks of formulating and proving meta-theoretic properties of\r\nprogramming languages and the correctness of translators and\r\ncompilers; these tasks arise naturally in the context of ensuring the\r\nsafety and security of software. The framework being investigated is \r\nspecialized to reasoning about relational specifications concerning \r\nformal objects that embody a binding structure. Such specifications \r\nsimplify the encoding of formal systems that often treat syntactically \r\ncomplex constructs and that also manifest non-deterministic and \r\nnon-terminating behavior. \r\n\r\nUnderlying the framework is an expressive first-order logic that allows\r\npredicates to be interpreted through fixed-point definitions and that\r\nalso includes inductive and co-inductive principles for reasoning\r\nabout such definitions. One project goal is to enrich the form of\r\ndefinitions permitted in this logic and to add the ability to quantify\r\nover properties or predicates to it. Another goal is to develop a methodology \r\nfor using the enhanced logic in actual verification tasks such as proving \r\nthe correctness of compilers for functional languages. The project will \r\nmake available to the research community an enhanced software system that \r\nsupports formalization and verification tasks of the kind outlined.  At a\r\nfoundational level, the research leads to a better understanding\r\nof the interaction between inductive definitions and higher-order\r\nquantification, an issue that is important to many modern\r\ntheorem-proving systems.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Gopalan",
   "pi_last_name": "Nadathur",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Gopalan Nadathur",
   "pi_email_addr": "ngopalan@umn.edu",
   "nsf_id": "000220975",
   "pi_start_date": "2016-05-31",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Minnesota-Twin Cities",
  "inst_street_address": "2221 UNIVERSITY AVE SE STE 100",
  "inst_street_address_2": "",
  "inst_city_name": "MINNEAPOLIS",
  "inst_state_code": "MN",
  "inst_state_name": "Minnesota",
  "inst_phone_num": "6126245599",
  "inst_zip_code": "554143074",
  "inst_country_name": "United States",
  "cong_dist_code": "05",
  "st_cong_dist_code": "MN05",
  "org_lgl_bus_name": "REGENTS OF THE UNIVERSITY OF MINNESOTA",
  "org_prnt_uei_num": "",
  "org_uei_num": "KABJZBBJ4B54"
 },
 "perf_inst": {
  "perf_inst_name": "University of Minnesota-Twin Cities",
  "perf_str_addr": "200 Union Street SE",
  "perf_city_name": "Minneapolis",
  "perf_st_code": "MN",
  "perf_st_name": "Minnesota",
  "perf_zip_code": "554550167",
  "perf_ctry_code": "US",
  "perf_cong_dist": "05",
  "perf_st_cong_dist": "MN05",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7798",
   "pgm_ref_txt": "SOFTWARE & HARDWARE FOUNDATION"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "8206",
   "pgm_ref_txt": "Formal Methods and Verification"
  },
  {
   "pgm_ref_code": "9102",
   "pgm_ref_txt": "WOMEN, MINORITY, DISABLED, NEC"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 514756.0
  },
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 35000.0
  },
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 8000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Ensuring the safety and security of software has become a major concern for the modern day infrastructure that relies significantly on computational tools. This project was motivated by the desire to develop capabilities for mechanized reasoning that are useful in this context. An effective way to show that a large class of programs are well-behaved from this perspective is to show that these programs possess relevant properties just by virtue of being written in a particular programming language. When the programming language does not by itself guarantee particular aspects of program behavior, it becomes necessary to reason directly about the program, something that is most easily done using the computational model underlying the language. Programs are typically executed only after being translated into low level code by a compiler. To close the gap in the reasoning process, it must be shown that the translation process preserves the meanings of programs, a task that amounts to verifying the compiler. These different forms of reasoning---proving properties about programming languages, exhibiting behavioral characteristics of programs and verifying compilers---are examples of what is referred to as <em>meta-theoretic reasoning</em>. The specific goal of the project was to develop a flexible framework for such reasoning and to demonstrate its effectiveness in applications such as compiler verification. <br /><br />An important component of the kind of framework described above is a vehicle for constructing formal descriptions of programming languages and other related object systems; such formal descriptions then become the basis for stating and proving properties of the relevant systems. Continuing a promising direction identified by previous research, this project explored the idea of using a stand-alone specification language for this purpose, which is then embedded and analyzed in a second-level reasoning logic. Moreover, the project focused on specification and reasoning mechanisms that facilitate a relational style for describing systems that need to be analyzed and that permit a logical, higher-order treatment of notions related to bound variables that may appear in the objects that are the focus of these systems. The emphasis on the relational style of specification was motivated by the fact that it simplifies the treatment of the non-deterministic and non-terminating behaviors that are natural phenomena of many computational systems. The rationale for giving the treatment of binding aspects importance is that they turn out to be intrinsic to the structure of objects like programs, types, formulas and proofs that are routinely manipulated in the kinds of reasoning tasks that provided the motivation for the project.<br /><br />The project has developed this theme using two different kinds of specification languages. In the first version, the specification formalism is itself a logic with an executable semantics, with the result that it can be used directly as the basis for programming. In the attendant work, enhancements were developed to the specification and reasoning logic to support polymorphism, a feature that leads to modularity in verification tasks. Further, the reasoning logic was strengthened to allow for the statement of richer properties concerning specifications. In yet another development, the accommodation of a specification logic that provides a logical treatment of resource use was investigated and promising results were obtained. The results of these studies have been incorporated into a specification and reasoning system called Abella that is available for use by other researchers. In the second version, the framework was elaborated with a popular specification language based on a formalism known as a <em>dependently typed lambda calculus</em>. A logic was developed for formally stating properties of such specifications and accompanying mechanisms were developed for proving such properties. A practical manifestation of this work is a proof assistant called Adelfa that has, once again, been made available for other researchers to use. Complementing the work on developing frameworks for meta-theoretic reasoning, the project has also investigated their use in targeted applications. Specifically, the efficacy of such frameworks in the verified compilation of functional programming languages, an increasingly important programming paradigm, has been demonstrated.<br /><br />The grant has provided opportunities for the training of personnel in research related to the science of building robust and reliable software. It has partially supported the work of five doctoral students, two of whom have graduated and taken up positions in academia and industrial research establishments. Additionally, benefiting from supplemental funds provided through the NSF Research Experience for Undergraduates program, it has supported the participation of four undergraduates in research. Three of these students have gone on to graduate studies at leading universities in the United States.<br /><br />The grant has fostered collaborations with research personnel and groups in Australia, China, France, and Singapore. The most extensive of these collaborations has been with a group at INRIA, the French national institute for computer science research.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 03/25/2023<br>\n\t\t\t\t\tModified by: Gopalan&nbsp;Nadathur</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nEnsuring the safety and security of software has become a major concern for the modern day infrastructure that relies significantly on computational tools. This project was motivated by the desire to develop capabilities for mechanized reasoning that are useful in this context. An effective way to show that a large class of programs are well-behaved from this perspective is to show that these programs possess relevant properties just by virtue of being written in a particular programming language. When the programming language does not by itself guarantee particular aspects of program behavior, it becomes necessary to reason directly about the program, something that is most easily done using the computational model underlying the language. Programs are typically executed only after being translated into low level code by a compiler. To close the gap in the reasoning process, it must be shown that the translation process preserves the meanings of programs, a task that amounts to verifying the compiler. These different forms of reasoning---proving properties about programming languages, exhibiting behavioral characteristics of programs and verifying compilers---are examples of what is referred to as meta-theoretic reasoning. The specific goal of the project was to develop a flexible framework for such reasoning and to demonstrate its effectiveness in applications such as compiler verification. \n\nAn important component of the kind of framework described above is a vehicle for constructing formal descriptions of programming languages and other related object systems; such formal descriptions then become the basis for stating and proving properties of the relevant systems. Continuing a promising direction identified by previous research, this project explored the idea of using a stand-alone specification language for this purpose, which is then embedded and analyzed in a second-level reasoning logic. Moreover, the project focused on specification and reasoning mechanisms that facilitate a relational style for describing systems that need to be analyzed and that permit a logical, higher-order treatment of notions related to bound variables that may appear in the objects that are the focus of these systems. The emphasis on the relational style of specification was motivated by the fact that it simplifies the treatment of the non-deterministic and non-terminating behaviors that are natural phenomena of many computational systems. The rationale for giving the treatment of binding aspects importance is that they turn out to be intrinsic to the structure of objects like programs, types, formulas and proofs that are routinely manipulated in the kinds of reasoning tasks that provided the motivation for the project.\n\nThe project has developed this theme using two different kinds of specification languages. In the first version, the specification formalism is itself a logic with an executable semantics, with the result that it can be used directly as the basis for programming. In the attendant work, enhancements were developed to the specification and reasoning logic to support polymorphism, a feature that leads to modularity in verification tasks. Further, the reasoning logic was strengthened to allow for the statement of richer properties concerning specifications. In yet another development, the accommodation of a specification logic that provides a logical treatment of resource use was investigated and promising results were obtained. The results of these studies have been incorporated into a specification and reasoning system called Abella that is available for use by other researchers. In the second version, the framework was elaborated with a popular specification language based on a formalism known as a dependently typed lambda calculus. A logic was developed for formally stating properties of such specifications and accompanying mechanisms were developed for proving such properties. A practical manifestation of this work is a proof assistant called Adelfa that has, once again, been made available for other researchers to use. Complementing the work on developing frameworks for meta-theoretic reasoning, the project has also investigated their use in targeted applications. Specifically, the efficacy of such frameworks in the verified compilation of functional programming languages, an increasingly important programming paradigm, has been demonstrated.\n\nThe grant has provided opportunities for the training of personnel in research related to the science of building robust and reliable software. It has partially supported the work of five doctoral students, two of whom have graduated and taken up positions in academia and industrial research establishments. Additionally, benefiting from supplemental funds provided through the NSF Research Experience for Undergraduates program, it has supported the participation of four undergraduates in research. Three of these students have gone on to graduate studies at leading universities in the United States.\n\nThe grant has fostered collaborations with research personnel and groups in Australia, China, France, and Singapore. The most extensive of these collaborations has been with a group at INRIA, the French national institute for computer science research.\n\n\t\t\t\t\tLast Modified: 03/25/2023\n\n\t\t\t\t\tSubmitted by: Gopalan Nadathur"
 }
}