{
 "awd_id": "1563956",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CSR: Medium:Combating Distributed Concurrency Bugs in Cloud Systems",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Matt Mutka",
 "awd_eff_date": "2016-08-01",
 "awd_exp_date": "2021-07-31",
 "tot_intn_awd_amt": 799977.0,
 "awd_amount": 799977.0,
 "awd_min_amd_letter_date": "2016-08-01",
 "awd_max_amd_letter_date": "2019-06-13",
 "awd_abstract_narration": "DCBA: Distributed Concurrency Bugs Annihilation \r\n\r\nSoftware systems are getting more complex, creating reliability issues that cause millions of dollars in economic loss.  Beyond local software, distributed cloud software infrastructures (i.e., cloud systems) have emerged as a dominant backbone for many modern applications.  Users expect high reliability from these systems, but guaranteeing their reliability proves to be challenging.  Cloud systems run on hundreds/thousands of machines, execute complicated distributed protocols, and face a variety of hardware faults.  This combination makes cloud systems prone to distributed concurrency bugs, which can cause catastrophic failures such as data loss, downtimes, and data loss/inconsistencies.  This Distributed Concurrency Bugs Annihilation (DCBA) project will address this important issue and bring many direct benefits to the society; users from many areas (science, healthcare, business, education, military, and government) increasingly use cloud computing services and demand high availability and predictability.  Combating distributed concurrency bugs is an important ingredient to such success. \r\n\r\nDistributed concurrency bugs are caused by non-deterministic order of distributed events such as message arrivals, faults, and reboots. This project, Distributed Concurrency Bugs Annihilation (DCBA), will find, remove, and prevent buggy interleavings of concurrent distributed events with the development of four approaches: (1) full, automated, and deep distributed system model checkers, (2) fast inference, detection, testing and fixing of order violations, (3) runtime statistical debugging, prevention, and recovery, and (4) design advancements that reduce the possibilities of distributed concurrency bugs to appear.  This DCBA project will advance the state of cloud dependability research.  Existing literature on distributed systems reliability focuses on monitoring, post-mortem debugging, deterministic record and replay, and verifiable programming language frameworks.  The DCBA project will introduce advancements to approaches related to model checking, bug detection, bug fixing, runtime debugging, prevention and recovery. \r\n\r\nAs more organizations build more distributed systems on farms of machines and services in cloud era, it is time for the dependability community to address distributed concurrency bugs in systematic and comprehensive manners.  The DCBA initiative will have a profound impact to future distributed cloud systems.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Haryadi",
   "pi_last_name": "Gunawi",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Haryadi Gunawi",
   "pi_email_addr": "haryadi@cs.uchicago.edu",
   "nsf_id": "000626546",
   "pi_start_date": "2016-08-01",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Shan",
   "pi_last_name": "Lu",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Shan Lu",
   "pi_email_addr": "shanlu@cs.uchicago.edu",
   "nsf_id": "000552962",
   "pi_start_date": "2016-08-01",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Chicago",
  "inst_street_address": "5801 S ELLIS AVE",
  "inst_street_address_2": "",
  "inst_city_name": "CHICAGO",
  "inst_state_code": "IL",
  "inst_state_name": "Illinois",
  "inst_phone_num": "7737028669",
  "inst_zip_code": "606375418",
  "inst_country_name": "United States",
  "cong_dist_code": "01",
  "st_cong_dist_code": "IL01",
  "org_lgl_bus_name": "UNIVERSITY OF CHICAGO",
  "org_prnt_uei_num": "ZUE9HKT2CLC9",
  "org_uei_num": "ZUE9HKT2CLC9"
 },
 "perf_inst": {
  "perf_inst_name": "University of Chicago",
  "perf_str_addr": "1100 East 58th Street",
  "perf_city_name": "Chicago",
  "perf_st_code": "IL",
  "perf_st_name": "Illinois",
  "perf_zip_code": "606375418",
  "perf_ctry_code": "US",
  "perf_cong_dist": "01",
  "perf_st_cong_dist": "IL01",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 368447.0
  },
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 207491.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 224039.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><br />In this project, our goal is to combat distributed concurrency (DC) bugs/faults in cloud-scale distributed systems. In production systems, DC bugs/faults cause major issues such as service outages, failed operations, and data inconsistency. To combat DC bugs/faults, we use advanced systems and programming language/software engineering techniques including software/stateless/implementation-level model checkers and static/dynamic-analysis based bug-detection tools. This project produces several outcomes given the execution of the sub-projects below.<br /><br />With TaxDC [ASPLOS '16], we study 104 distributed concurrency (DC) bugs from four widely-deployed cloud-scale datacenter distributed systems and study their characteristics along several axes of analysis such as the triggering timing condition and input preconditions, error and failure symptoms, and fix strategies.<br /><br />With DCatch [ASPLOS '17], we predict DC bugs by analyzing correct execution of distributed systems by designing a set of happens-before rules that model a wide variety of communication and concurrency mechanisms in real-world distributed cloud systems, building run-time tracing and trace analysis tools to effectively identify concurrent conflicting memory accesses in these systems, and finally designing tools to help prune false positives and trigger DC bugs.<br /><br />With FCatch [ASPLOS '18], we carefully model time-of-fault (TOF) bugs as a new type of concurrency bugs, monitor correct fault-free or faulty runs, trace resource operations and fault-tolerance related operations, analyze traces to identify pairs of conflicting operations that write and read the same resource, analyze the distributed system to identify conflicting operations that are not protected by existing fault-tolerance mechanisms such as timeouts, sanity checks, and data resets, and finally trigger every TOF bug reported above.<br /><br />With FlyMC [EuroSys '19], we overcome the path/state-space explosion problem in testing workloads with complex interleavings of messages and faults by introducing three powerful algorithms, state symmetry, event independence, and parallel flips, which collectively makes our approach on average 16x (up to 78x) faster than other state-of-the-art solutions.<br /><br />With DFix [PLDI '19], a tool that automatically processes distributed timing bug reports, statically analyzes the buggy system, and produces patches, which all help developers to reason about and patch DC bugs to reduce production-run failures before the final patches are developed.<br /><br />With TSVD [SOSP '19], we built a thread-safety violation detector with a new design point in the domain of active testing by using light-weight monitoring of the calling behaviors of thread-unsafe methods, not any synchronization operations, to dynamically identify bug suspects, injecting corresponding delays to drive the program towards thread-unsafe behaviors, actively learning from its ability or inability to do so, and persisting its learning from one test run to the next.<br /><br />With SODP [DSN '20], we introduce a single-overlap declustered parity, a novel declustered parity design that tolerates more disk failures than traditional declustered parity to better protect against correlated failures and introduce a tool for exploring operational reliability in the presence of many types of correlated failures, achieving a 30x improvement in the probability of data loss during failure bursts.<br /><br />With FODP [PDSW '20], we propose a flexible and practical data protection scheme, fractional-overlap declustered parity, to explore the trade-offs between fault tolerance and rebuild performance, showing that FODP is able to bring forth up to 99% less probability of data loss in the presence of various failure regimes.<br /><br />With GPAS Analysis [ATC '21], we share our technical experiences in improving the performance of long-running, concurrent jobs on the Genomic Data Commons (GDC), a large-scale cancer genomics cloud platform, showing how common, concurrent bioinformatics workloads can cause VMs to age after several days, causing a large number of Extended Page Table (EPT) violations that significantly impact performance. &nbsp;<br /><br />With Sherlock [ASPLOS '21], we design a tool that uses unsupervised inference to identify synchronization, leverages the fact that most synchronizations appear around the conflicting operations and form it into a linear system with a set of synchronization properties and hypotheses, and runs the unit tests a small number of times with feedback-based delay injection.<br /><br />With POMC [In submission to ICST '22], we design data-driven prioritization algorithms for fast path explorations in software model checking and develop a system/runtime-level optimization that in overall improve our prior model checking tools by another order of magnitude in finding DC bugs.<br /><br />Broader Impact: We place significant value on technology transfer.&nbsp; We disseminated our work to companies such as Cloudera, Dell-EMC, and NetApp, and to the developers of open-source systems such as Cassandra, Hadoop/HDFS, and ZooKeeper.&nbsp; Some of our projects were done in close collaboration with researchers at Microsoft and Los Alamos National Laboratories.&nbsp; In terms of the broader impact to the community, users from many areas (science, healthcare, business, education, military, and government) increasingly demand for large-scale compute and storage.&nbsp; To serve their demands, systems must run extremely reliably and highly available.&nbsp; We believe our project helps in improving the reliability and availability of today's cloud systems.<br /><br /><br /></p><br>\n<p>\n\t\t\t\t      \tLast Modified: 09/08/2021<br>\n\t\t\t\t\tModified by: Haryadi&nbsp;Gunawi</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n\nIn this project, our goal is to combat distributed concurrency (DC) bugs/faults in cloud-scale distributed systems. In production systems, DC bugs/faults cause major issues such as service outages, failed operations, and data inconsistency. To combat DC bugs/faults, we use advanced systems and programming language/software engineering techniques including software/stateless/implementation-level model checkers and static/dynamic-analysis based bug-detection tools. This project produces several outcomes given the execution of the sub-projects below.\n\nWith TaxDC [ASPLOS '16], we study 104 distributed concurrency (DC) bugs from four widely-deployed cloud-scale datacenter distributed systems and study their characteristics along several axes of analysis such as the triggering timing condition and input preconditions, error and failure symptoms, and fix strategies.\n\nWith DCatch [ASPLOS '17], we predict DC bugs by analyzing correct execution of distributed systems by designing a set of happens-before rules that model a wide variety of communication and concurrency mechanisms in real-world distributed cloud systems, building run-time tracing and trace analysis tools to effectively identify concurrent conflicting memory accesses in these systems, and finally designing tools to help prune false positives and trigger DC bugs.\n\nWith FCatch [ASPLOS '18], we carefully model time-of-fault (TOF) bugs as a new type of concurrency bugs, monitor correct fault-free or faulty runs, trace resource operations and fault-tolerance related operations, analyze traces to identify pairs of conflicting operations that write and read the same resource, analyze the distributed system to identify conflicting operations that are not protected by existing fault-tolerance mechanisms such as timeouts, sanity checks, and data resets, and finally trigger every TOF bug reported above.\n\nWith FlyMC [EuroSys '19], we overcome the path/state-space explosion problem in testing workloads with complex interleavings of messages and faults by introducing three powerful algorithms, state symmetry, event independence, and parallel flips, which collectively makes our approach on average 16x (up to 78x) faster than other state-of-the-art solutions.\n\nWith DFix [PLDI '19], a tool that automatically processes distributed timing bug reports, statically analyzes the buggy system, and produces patches, which all help developers to reason about and patch DC bugs to reduce production-run failures before the final patches are developed.\n\nWith TSVD [SOSP '19], we built a thread-safety violation detector with a new design point in the domain of active testing by using light-weight monitoring of the calling behaviors of thread-unsafe methods, not any synchronization operations, to dynamically identify bug suspects, injecting corresponding delays to drive the program towards thread-unsafe behaviors, actively learning from its ability or inability to do so, and persisting its learning from one test run to the next.\n\nWith SODP [DSN '20], we introduce a single-overlap declustered parity, a novel declustered parity design that tolerates more disk failures than traditional declustered parity to better protect against correlated failures and introduce a tool for exploring operational reliability in the presence of many types of correlated failures, achieving a 30x improvement in the probability of data loss during failure bursts.\n\nWith FODP [PDSW '20], we propose a flexible and practical data protection scheme, fractional-overlap declustered parity, to explore the trade-offs between fault tolerance and rebuild performance, showing that FODP is able to bring forth up to 99% less probability of data loss in the presence of various failure regimes.\n\nWith GPAS Analysis [ATC '21], we share our technical experiences in improving the performance of long-running, concurrent jobs on the Genomic Data Commons (GDC), a large-scale cancer genomics cloud platform, showing how common, concurrent bioinformatics workloads can cause VMs to age after several days, causing a large number of Extended Page Table (EPT) violations that significantly impact performance.  \n\nWith Sherlock [ASPLOS '21], we design a tool that uses unsupervised inference to identify synchronization, leverages the fact that most synchronizations appear around the conflicting operations and form it into a linear system with a set of synchronization properties and hypotheses, and runs the unit tests a small number of times with feedback-based delay injection.\n\nWith POMC [In submission to ICST '22], we design data-driven prioritization algorithms for fast path explorations in software model checking and develop a system/runtime-level optimization that in overall improve our prior model checking tools by another order of magnitude in finding DC bugs.\n\nBroader Impact: We place significant value on technology transfer.  We disseminated our work to companies such as Cloudera, Dell-EMC, and NetApp, and to the developers of open-source systems such as Cassandra, Hadoop/HDFS, and ZooKeeper.  Some of our projects were done in close collaboration with researchers at Microsoft and Los Alamos National Laboratories.  In terms of the broader impact to the community, users from many areas (science, healthcare, business, education, military, and government) increasingly demand for large-scale compute and storage.  To serve their demands, systems must run extremely reliably and highly available.  We believe our project helps in improving the reliability and availability of today's cloud systems.\n\n\n\n\n\t\t\t\t\tLast Modified: 09/08/2021\n\n\t\t\t\t\tSubmitted by: Haryadi Gunawi"
 }
}