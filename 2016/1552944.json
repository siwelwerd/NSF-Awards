{
 "awd_id": "1552944",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CAREER:VARIATIONAL EXECUTION",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2016-04-01",
 "awd_exp_date": "2021-03-31",
 "tot_intn_awd_amt": 479644.0,
 "awd_amount": 653754.0,
 "awd_min_amd_letter_date": "2016-03-24",
 "awd_max_amd_letter_date": "2020-03-18",
 "awd_abstract_narration": "Many software systems can be configured by enabling or disabling\r\nconfiguration options. As options can be combined flexibly, the\r\nconfiguration space grows exponentially. Therefore highly-configurable systems are notoriously hard to test. While many combinations of options work well, specific configurations may expose faulty or surprising behavior emerging from interactions among options. Due to the huge search space, interactions are difficult to find. In fact, since no complete and sound techniques exist to study interactions in large scale systems, little is known about interactions in practice. This research\r\nexplores a novel program execution technique, variational execution, to efficiently execute a large number of configurations or similar programs and inspect the differences among those executions. \r\n\r\nVariational execution will aid understanding and detection of interactions among configuration options in highly-configurable software systems and contribute to better quality assurance and development methods. It will transform the way to test configurable systems, including most of today?s end-user software, software ecosystems, and critical\r\ninfrastructure software, such as SSL libraries and databases. The insights gained into interactions in real-world systems fill an important gap in our understanding of interactions, relevant for teaching software design and quality assurance.  Additionally, it will enable advances in exploring interactions and large search spaces for broader software engineering purposes, including higher-order mutation testing, program repair, and sensitivity analysis.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Christian",
   "pi_last_name": "Kastner",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Christian Kastner",
   "pi_email_addr": "kaestner@cmu.edu",
   "nsf_id": "000634835",
   "pi_start_date": "2016-03-24",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Carnegie-Mellon University",
  "inst_street_address": "5000 FORBES AVE",
  "inst_street_address_2": "",
  "inst_city_name": "PITTSBURGH",
  "inst_state_code": "PA",
  "inst_state_name": "Pennsylvania",
  "inst_phone_num": "4122688746",
  "inst_zip_code": "152133815",
  "inst_country_name": "United States",
  "cong_dist_code": "12",
  "st_cong_dist_code": "PA12",
  "org_lgl_bus_name": "CARNEGIE MELLON UNIVERSITY",
  "org_prnt_uei_num": "U3NKNFLNQ613",
  "org_uei_num": "U3NKNFLNQ613"
 },
 "perf_inst": {
  "perf_inst_name": "Carnegie Mellon University",
  "perf_str_addr": "5000 Forbes Ave",
  "perf_city_name": "Pittsburgh",
  "perf_st_code": "PA",
  "perf_st_name": "Pennsylvania",
  "perf_zip_code": "152133890",
  "perf_ctry_code": "US",
  "perf_cong_dist": "12",
  "perf_st_cong_dist": "PA12",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "1045",
   "pgm_ref_txt": "CAREER-Faculty Erly Career Dev"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 223098.0
  },
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 139406.0
  },
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 18704.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 123183.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 149363.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-1d1ffdd5-7fff-e797-42af-2b5aad8f036e\"> </span></p>\n<p dir=\"ltr\"><span>The project explored variational execution, a dynamic analysis technique that can observe the influence of decisions in a program?s execution on the programs state and output. Importantly, it does not only track effects of a single decision, but also the interaction among multiple decisions. To efficiently explore different execution under different decision paths, variational execution aggressively joins state and control flow, exploiting maximum sharing among the different executions, while exploring interactions if and only if they occur.</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>Originally, variational execution has been developed to test configurable systems, especially to evaluate whether a test case would fail under specific combinations of configuration decisions to reveal interaction bugs. Evaluations have shown that variational execution is indeed efficient testing software systems with large configuration spaces for interaction bugs.</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>In this project, a new variational execution engine, VarexC, was developed that used bytecode transformations to achieve efficient execution and sharing without having to develop a completely new execution engine. It was shown that VarexC outperformed prior approaches and it allowed this research to explore many optimizations, such as bounding the search space or prioritizing exception-free execution paths.</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>Beyond testing configurable systems, three main application scenarios were explored in which variational execution improved prior approaches:</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>First, variational execution provides exact insights into the differences between execution traces that differ in specific execution decisions without having to align traces and states. Together with a novel user interface, this provides better debugging capabilities, highlighting exact differences between executions and their causes, helping developers to identify bugs in implementations faster.</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>Second, variational execution helps to effectively find higher-order mutants, which are promising artificial representations of program bugs often used in software engineering research, for example to evaluate fault localization techniques or program repair. Where traditional mutants modify the program in a single location and are often discussed as only weak proxies for developer bugs, higher-order mutants combine multiple changes that interact in subtle ways and are harder to detect. However, since interesting higher-order mutants depend on the interaction of multiple mutants they were previously challenging to find. With variational execution, it becomes possible to observe the interactions among many different mutants and select those that fulfill specific criteria using an encoding as a boolean satisfiability problem. This way, it is possible to outperform prior search-based strategies for finding higher-order mutants by orders of magnitude.</span></p>\n<p>&nbsp;</p>\n<p dir=\"ltr\"><span>Finally, variational execution promises to improve the search for patch candidates in automated program repair, especially the search for multi-line patches. Variational execution can be used to execute a program?s test suite over a program considering a large number of patch candidates and their combinations. The sharing ability of variational execution makes the search efficient, while still retaining the flexibility of using rich patch ingredients that are evaluated through testing, such finding a sweet spot that balances search effectiveness and patch expressiveness. This strategy has been demonstrated to fix many bugs that require multiple edits in multiple locations, which were previously beyond the reach of existing repair approaches.</span></p>\n<p><br /><br /></p>\n<p dir=\"ltr\"><span>Beyond the technical contributions and intellectual merits, the research was widely disseminated (ESEC/FSE, OOPSLA, ASE, ICSE) and has been made entirely available under an open source license. The project has contributed to the training of PhD students and has fostered multiple productive collaborations. Multiple REU students, many from underrepresented communities in computing, contributed to this project. Several REU students published their contributions and multiple went on to join PhD programs to start their own research career in software engineering.</span></p>\n<div><span><br /></span></div>\n<p>&nbsp;</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 05/04/2021<br>\n\t\t\t\t\tModified by: Christian&nbsp;Kastner</p>\n</div>\n<div class=\"porSideCol\">\n<div class=\"each-gallery\">\n<div class=\"galContent\" id=\"gallery0\">\n<div class=\"photoCount\" id=\"photoCount0\">\n\t\t\t\t\t\t\t\t\tImages (<span id=\"selectedPhoto0\">1</span> of <span class=\"totalNumber\"></span>)\t\t\n\t\t\t\t\t\t\t\t</div>\n<div class=\"galControls\" id=\"controls0\"></div>\n<div class=\"galSlideshow\" id=\"slideshow0\"></div>\n<div class=\"galEmbox\" id=\"embox\">\n<div class=\"image-title\"></div>\n</div>\n</div>\n<div class=\"galNavigation\" id=\"navigation0\">\n<ul class=\"thumbs\" id=\"thumbs0\">\n<li>\n<a href=\"/por/images/Reports/POR/2021/1552944/1552944_10416278_1620154735876_Screenshotfrom2021-05-0414-55-49--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2021/1552944/1552944_10416278_1620154735876_Screenshotfrom2021-05-0414-55-49--rgov-800width.jpg\" title=\"Variational Execution used for Trace Alignment and Debugging\"><img src=\"/por/images/Reports/POR/2021/1552944/1552944_10416278_1620154735876_Screenshotfrom2021-05-0414-55-49--rgov-66x44.jpg\" alt=\"Variational Execution used for Trace Alignment and Debugging\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Variational Execution used for Trace Alignment and Debugging</div>\n<div class=\"imageCredit\">Meinicke et al.</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Christian&nbsp;Kastner</div>\n<div class=\"imageTitle\">Variational Execution used for Trace Alignment and Debugging</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2021/1552944/1552944_10416278_1620154787161_Screenshotfrom2021-05-0414-56-22--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2021/1552944/1552944_10416278_1620154787161_Screenshotfrom2021-05-0414-56-22--rgov-800width.jpg\" title=\"Illustration of Higher-Order Mutants\"><img src=\"/por/images/Reports/POR/2021/1552944/1552944_10416278_1620154787161_Screenshotfrom2021-05-0414-56-22--rgov-66x44.jpg\" alt=\"Illustration of Higher-Order Mutants\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Illustration of Higher-Order Mutants</div>\n<div class=\"imageCredit\">Wong et al. ESEC/FSE 2020</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Christian&nbsp;Kastner</div>\n<div class=\"imageTitle\">Illustration of Higher-Order Mutants</div>\n</div>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>",
  "por_txt_cntn": "\n \nThe project explored variational execution, a dynamic analysis technique that can observe the influence of decisions in a program?s execution on the programs state and output. Importantly, it does not only track effects of a single decision, but also the interaction among multiple decisions. To efficiently explore different execution under different decision paths, variational execution aggressively joins state and control flow, exploiting maximum sharing among the different executions, while exploring interactions if and only if they occur.\n\n \nOriginally, variational execution has been developed to test configurable systems, especially to evaluate whether a test case would fail under specific combinations of configuration decisions to reveal interaction bugs. Evaluations have shown that variational execution is indeed efficient testing software systems with large configuration spaces for interaction bugs.\n\n \nIn this project, a new variational execution engine, VarexC, was developed that used bytecode transformations to achieve efficient execution and sharing without having to develop a completely new execution engine. It was shown that VarexC outperformed prior approaches and it allowed this research to explore many optimizations, such as bounding the search space or prioritizing exception-free execution paths.\n\n \nBeyond testing configurable systems, three main application scenarios were explored in which variational execution improved prior approaches:\n\n \nFirst, variational execution provides exact insights into the differences between execution traces that differ in specific execution decisions without having to align traces and states. Together with a novel user interface, this provides better debugging capabilities, highlighting exact differences between executions and their causes, helping developers to identify bugs in implementations faster.\n\n \nSecond, variational execution helps to effectively find higher-order mutants, which are promising artificial representations of program bugs often used in software engineering research, for example to evaluate fault localization techniques or program repair. Where traditional mutants modify the program in a single location and are often discussed as only weak proxies for developer bugs, higher-order mutants combine multiple changes that interact in subtle ways and are harder to detect. However, since interesting higher-order mutants depend on the interaction of multiple mutants they were previously challenging to find. With variational execution, it becomes possible to observe the interactions among many different mutants and select those that fulfill specific criteria using an encoding as a boolean satisfiability problem. This way, it is possible to outperform prior search-based strategies for finding higher-order mutants by orders of magnitude.\n\n \nFinally, variational execution promises to improve the search for patch candidates in automated program repair, especially the search for multi-line patches. Variational execution can be used to execute a program?s test suite over a program considering a large number of patch candidates and their combinations. The sharing ability of variational execution makes the search efficient, while still retaining the flexibility of using rich patch ingredients that are evaluated through testing, such finding a sweet spot that balances search effectiveness and patch expressiveness. This strategy has been demonstrated to fix many bugs that require multiple edits in multiple locations, which were previously beyond the reach of existing repair approaches.\n\n\n\n\nBeyond the technical contributions and intellectual merits, the research was widely disseminated (ESEC/FSE, OOPSLA, ASE, ICSE) and has been made entirely available under an open source license. The project has contributed to the training of PhD students and has fostered multiple productive collaborations. Multiple REU students, many from underrepresented communities in computing, contributed to this project. Several REU students published their contributions and multiple went on to join PhD programs to start their own research career in software engineering.\n\n\n\n \n\n \n\n\t\t\t\t\tLast Modified: 05/04/2021\n\n\t\t\t\t\tSubmitted by: Christian Kastner"
 }
}