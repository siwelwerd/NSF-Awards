{
 "awd_id": "1618563",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CSR: Small: Performance and Fairness with Multiple Page Sizes",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Matt Mutka",
 "awd_eff_date": "2016-10-01",
 "awd_exp_date": "2020-09-30",
 "tot_intn_awd_amt": 500000.0,
 "awd_amount": 516000.0,
 "awd_min_amd_letter_date": "2016-08-08",
 "awd_max_amd_letter_date": "2019-06-18",
 "awd_abstract_narration": "Modern computing workloads such as machine learning, big data analytics, and scientific computing require enormous memory capacities. The system software that manages memory was designed for much smaller systems, and consequently, it imposes hefty performance and power penalties on modern systems. The time has come to pay this technical debt. This work comprehensively redesigns operating system and virtual machine memory management to accommodate large memories, enabling applications to obtain the performance and efficiency promised by current hardware.\r\n\r\nThe goal of this research is a set of principles and a framework for the operating system and hypervisor to transparently support small and large memory pages. Large memory pages (e.g., 2MB pages for the popular x86 architecture instead of the standard 4KB) can provide significant performance benefit by dramatically reducing address translation over- heads. However, their support and adoption has been hindered by fundamental management problems arising from fragmentation and poor visibility into memory accesses. Current large page management suffers a variety of pathologies such as memory bloat and unfairness across processes and/or virtual machines, and system administrators generally disable large pages in production systems. A framework that relies on managing contiguity as a first-class resource and on tracking utilization and access frequency of memory pages will enable an OS to coordinate its currently disparate mechanisms, avoid performance pathologies, and enable applications to enjoy the performance benefits of large pages.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Christopher",
   "pi_last_name": "Rossbach",
   "pi_mid_init": "J",
   "pi_sufx_name": "",
   "pi_full_name": "Christopher J Rossbach",
   "pi_email_addr": "rossbach@cs.utexas.edu",
   "nsf_id": "000555484",
   "pi_start_date": "2016-08-08",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Emmett",
   "pi_last_name": "Witchel",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Emmett Witchel",
   "pi_email_addr": "witchel@cs.utexas.edu",
   "nsf_id": "000164959",
   "pi_start_date": "2016-08-08",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Texas at Austin",
  "inst_street_address": "110 INNER CAMPUS DR",
  "inst_street_address_2": "",
  "inst_city_name": "AUSTIN",
  "inst_state_code": "TX",
  "inst_state_name": "Texas",
  "inst_phone_num": "5124716424",
  "inst_zip_code": "787121139",
  "inst_country_name": "United States",
  "cong_dist_code": "25",
  "st_cong_dist_code": "TX25",
  "org_lgl_bus_name": "UNIVERSITY OF TEXAS AT AUSTIN",
  "org_prnt_uei_num": "",
  "org_uei_num": "V6AFQPN18437"
 },
 "perf_inst": {
  "perf_inst_name": "University of Texas at Austin",
  "perf_str_addr": "01 E. 27th Street, Suite 5.300",
  "perf_city_name": "Austin",
  "perf_st_code": "TX",
  "perf_st_name": "Texas",
  "perf_zip_code": "787121532",
  "perf_ctry_code": "US",
  "perf_cong_dist": "25",
  "perf_st_cong_dist": "TX25",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "171400",
   "pgm_ele_name": "Special Projects - CNS"
  },
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7354",
   "pgm_ref_txt": "COMPUTER SYSTEMS"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 500000.0
  },
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 8000.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 8000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The goals of this research were to improve the efficiency of general-purpose compute infrastructure used in modern big data settings by developing principles and frameworks for&nbsp;operating systems, hypervisors, and system-level infrastructure to better manage memory resources. Modern computing infrastructure relies heavily on techniques that virtualize memory to ensure that shared infrastructure is used safely and efficiently, but those techniques have overheads that translate to lost performance and inefficiency as the world has come to store, use, and compute over larger and larger data.&nbsp;</p>\n<p>These costs can be dramatically reduced by managing memory in larger chucks, or <em>pages</em>, and current CPUs support mulitple page sizes to enable system software to do just that. However, the software challenge of transparently supporting multiple page sizes was very much unsolved when this project began. Larger pages can provide a significant performance benefit by dramatically reducing memory virtualization costs arising from translation between virtual and physical address spaces. However, the availability of multiple page sizes introduces fundamental management challenges such as fragmentation and poor visibility into memory access patterns. To date, system software has dealt poorly with these challenges, leaving user software faced with a variety of pathologies such as memory bloat and unfairness across processes and/or virtual machines.</p>\n<p>This research developed a framework that relies on principles such as managing contiguity as a first-class resource, fine-grain tracking of utilization and access frequency of memory pages can enable system software to coordinate mechanisms, avoid pathologies, and improve performance. This framework was first published in a top computer science venue (OSDI) in 2016, and went on to be adopted into practice by commodity hypervisors and operating systems, to impact the memory systems in emerging GPU architectures, and drive the advancement of the field through a series of publications and adoption into CS curriculum at UT Austin.</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 10/16/2020<br>\n\t\t\t\t\tModified by: Christopher&nbsp;J&nbsp;Rossbach</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThe goals of this research were to improve the efficiency of general-purpose compute infrastructure used in modern big data settings by developing principles and frameworks for operating systems, hypervisors, and system-level infrastructure to better manage memory resources. Modern computing infrastructure relies heavily on techniques that virtualize memory to ensure that shared infrastructure is used safely and efficiently, but those techniques have overheads that translate to lost performance and inefficiency as the world has come to store, use, and compute over larger and larger data. \n\nThese costs can be dramatically reduced by managing memory in larger chucks, or pages, and current CPUs support mulitple page sizes to enable system software to do just that. However, the software challenge of transparently supporting multiple page sizes was very much unsolved when this project began. Larger pages can provide a significant performance benefit by dramatically reducing memory virtualization costs arising from translation between virtual and physical address spaces. However, the availability of multiple page sizes introduces fundamental management challenges such as fragmentation and poor visibility into memory access patterns. To date, system software has dealt poorly with these challenges, leaving user software faced with a variety of pathologies such as memory bloat and unfairness across processes and/or virtual machines.\n\nThis research developed a framework that relies on principles such as managing contiguity as a first-class resource, fine-grain tracking of utilization and access frequency of memory pages can enable system software to coordinate mechanisms, avoid pathologies, and improve performance. This framework was first published in a top computer science venue (OSDI) in 2016, and went on to be adopted into practice by commodity hypervisors and operating systems, to impact the memory systems in emerging GPU architectures, and drive the advancement of the field through a series of publications and adoption into CS curriculum at UT Austin.\n\n \n\n\t\t\t\t\tLast Modified: 10/16/2020\n\n\t\t\t\t\tSubmitted by: Christopher J Rossbach"
 }
}