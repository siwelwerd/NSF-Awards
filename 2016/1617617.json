{
 "awd_id": "1617617",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "AF: Small: Incremental and Asynchronous Projective Splitting Methods for Mathematical Programming",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "A. Funda Ergun",
 "awd_eff_date": "2016-09-01",
 "awd_exp_date": "2020-08-31",
 "tot_intn_awd_amt": 457072.0,
 "awd_amount": 457072.0,
 "awd_min_amd_letter_date": "2016-08-01",
 "awd_max_amd_letter_date": "2016-08-01",
 "awd_abstract_narration": "A key to solving large computational and mathematical problems, such as analyzing large datasets or planning for the operation of an electrical power grid or any other complicated systems with an uncertain future demands and supplies, is decomposing into smaller solvable subproblems or subsystems, then coordinating and integrating their results, and decomposing again into adjusted subproblems.  Properly designed decomposition methods repeat a decomposition - coordination cycle that converge to the solution of the entire original, non-decomposed problem.  The PI is working with Sandia National Laboratories and has particular interest in problems that arise in operating electrical power grids with high penetration of renewable generation sources, like solar and wind, where weather has unplanned affects the supply.   \r\n\r\nThis project studies a new way to perform decomposition, called \"incremental projective operator splitting\" (IPOS) or \"block-iterative splitting.\"  It is related to a popular decomposition method called the alternating direction method of multipliers (ADMM) but is far more flexible.  While essentially all prior decomposition methods follow a rigid cycle of decomposition and coordination steps, with every decomposition step encompassing all the subsystems, the new method has much greater flexibility:  only a subset of subsystems need to be considered between coordination steps, and decomposition and coordination calculations can overlap asynchronously.  This flexibility should allow more efficient use of parallel computers by eliminating rigid synchronization points.  This property is important because most future growth in computer performance is anticipated to result from larger numbers of parallel processing units, and only parallel computers will be able to manipulate the large datasets and decision problems we hope to analyze. \r\n\r\nBecause the new IPOS methods are so flexible, there are numerous ways in which they could be used on the same class of problems.  The main goal of this project is to develop and experimentally evaluate strategies for applying IPOS on parallel computers.  It will focus on two common problem classes, large-scale data analysis and planning under uncertainty, using real-world input data to the maximum practical extent.  Other research topics include sharpening the mathematical theory of IPOS, and extending this theory to cover a broader range of problems, and development and release of software based on this new theory.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Jonathan",
   "pi_last_name": "Eckstein",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Jonathan Eckstein",
   "pi_email_addr": "jeckstei@business.rutgers.edu",
   "nsf_id": "000195522",
   "pi_start_date": "2016-08-01",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Rutgers University Newark",
  "inst_street_address": "123 WASHINGTON ST",
  "inst_street_address_2": "",
  "inst_city_name": "NEWARK",
  "inst_state_code": "NJ",
  "inst_state_name": "New Jersey",
  "inst_phone_num": "9739720283",
  "inst_zip_code": "071023026",
  "inst_country_name": "United States",
  "cong_dist_code": "10",
  "st_cong_dist_code": "NJ10",
  "org_lgl_bus_name": "RUTGERS, THE STATE UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "T3NGNR66YK89"
 },
 "perf_inst": {
  "perf_inst_name": "Rutgers Business School, New Brunswick Building",
  "perf_str_addr": "100 Rockafeller Road",
  "perf_city_name": "Piscataway",
  "perf_st_code": "NJ",
  "perf_st_name": "New Jersey",
  "perf_zip_code": "088548081",
  "perf_ctry_code": "US",
  "perf_cong_dist": "06",
  "perf_st_cong_dist": "NJ06",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "689200",
   "pgm_ele_name": "CI REUSE"
  },
  {
   "pgm_ele_code": "779600",
   "pgm_ele_name": "Algorithmic Foundations"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7433",
   "pgm_ref_txt": "CyberInfra Frmwrk 21st (CIF21)"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7933",
   "pgm_ref_txt": "NUM, SYMBOL, & ALGEBRA COMPUT"
  },
  {
   "pgm_ref_code": "7934",
   "pgm_ref_txt": "PARAL/DISTRIBUTED ALGORITHMS"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 457072.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>This project developed multiple new versions of the project splitting method for large-scale convex optimization and related problems.&nbsp; Such methods have application in machine learning and data analysis, among other areas.&nbsp; &ldquo;Splitting&rdquo; algorithms for large-scale optimization are constructed out of building blocks that process relatively small subsystems of the entire problem to be solved; the two fundamental ways of processing a subsystem are &ldquo;forward&rdquo; (gradient) and &ldquo;backward&rdquo; (implicit or proximal) steps.&nbsp; At the time of the project proposal, projective splitting methods were only known to work with backward steps, although these step could be computed approximately.&nbsp; Backward steps are generally more time consuming to compute than forward ones.&nbsp; Our first main result was that projective splitting methods, in essentially their full generality, can be made to work with forward steps.&nbsp; Various different configurations of the forward steps are possible, so we published a several papers covering different variations.&nbsp; We also proved that the theoretical convergence rate of our approach is comparable to other splitting methods.&nbsp; Most of our papers contain computational tests on difficult large-scale data fitting problems using real datasets, showing that our methods can be superior to or competitive in practice with other splitting methods.&nbsp; We also released open-source Python software that makes it possible to apply our methods to new kinds of problems without having to re-implement their basic logic.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 09/30/2020<br>\n\t\t\t\t\tModified by: Jonathan&nbsp;Eckstein</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThis project developed multiple new versions of the project splitting method for large-scale convex optimization and related problems.  Such methods have application in machine learning and data analysis, among other areas.  \"Splitting\" algorithms for large-scale optimization are constructed out of building blocks that process relatively small subsystems of the entire problem to be solved; the two fundamental ways of processing a subsystem are \"forward\" (gradient) and \"backward\" (implicit or proximal) steps.  At the time of the project proposal, projective splitting methods were only known to work with backward steps, although these step could be computed approximately.  Backward steps are generally more time consuming to compute than forward ones.  Our first main result was that projective splitting methods, in essentially their full generality, can be made to work with forward steps.  Various different configurations of the forward steps are possible, so we published a several papers covering different variations.  We also proved that the theoretical convergence rate of our approach is comparable to other splitting methods.  Most of our papers contain computational tests on difficult large-scale data fitting problems using real datasets, showing that our methods can be superior to or competitive in practice with other splitting methods.  We also released open-source Python software that makes it possible to apply our methods to new kinds of problems without having to re-implement their basic logic.\n\n\t\t\t\t\tLast Modified: 09/30/2020\n\n\t\t\t\t\tSubmitted by: Jonathan Eckstein"
 }
}