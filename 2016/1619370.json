{
 "awd_id": "1619370",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: New Directions in Groebner Basis based Verification using Logic Synthesis Techniques",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032922585",
 "po_email": "pprabhak@nsf.gov",
 "po_sign_block_name": "Pavithra Prabhakar",
 "awd_eff_date": "2016-08-01",
 "awd_exp_date": "2020-07-31",
 "tot_intn_awd_amt": 390999.0,
 "awd_amount": 390999.0,
 "awd_min_amd_letter_date": "2016-05-16",
 "awd_max_amd_letter_date": "2016-05-16",
 "awd_abstract_narration": "With the spread of Internet and mobile devices, transferring information robustly, safely and securely has become more important\r\nthan ever. Computer hardware associated with such operations performs sophisticated arithmetic computations, which requires careful, custom design of such circuits. Custom design raises the potential for bugs in the circuits, compromising their security. Verification of the correctness of such circuits is an imperative. However, their arithmetic nature makes them notoriously hard to verify, and contemporary algorithms lack the wherewithal to address this problem.  \r\n\r\nThis project investigates the application of computational algebra, Groebner basis techniques, to formally verify circuits for such applications. In particular, the project analyzes the use of the circuit itself as the underlying data-structure to perform Groebner basis computations and verification. By using logic synthesis as a bridge to connect computational algebra algorithms with circuit design, the project addresses the challenge and scalability of hardware verification. The project impacts computer-aided verification technology, secure system design, and it advances knowledge and application in mathematics as well as computer engineering. Validation of hardware for cyber-security also protects the privacy and security of data, which has a direct impact on our society.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Priyank",
   "pi_last_name": "Kalla",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Priyank Kalla",
   "pi_email_addr": "kalla@ece.utah.edu",
   "nsf_id": "000256377",
   "pi_start_date": "2016-05-16",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Utah",
  "inst_street_address": "201 PRESIDENTS CIR",
  "inst_street_address_2": "",
  "inst_city_name": "SALT LAKE CITY",
  "inst_state_code": "UT",
  "inst_state_name": "Utah",
  "inst_phone_num": "8015816903",
  "inst_zip_code": "841129049",
  "inst_country_name": "United States",
  "cong_dist_code": "01",
  "st_cong_dist_code": "UT01",
  "org_lgl_bus_name": "UNIVERSITY OF UTAH",
  "org_prnt_uei_num": "",
  "org_uei_num": "LL8GLEVH6MG3"
 },
 "perf_inst": {
  "perf_inst_name": "University of Utah",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "UT",
  "perf_st_name": "Utah",
  "perf_zip_code": "841128930",
  "perf_ctry_code": "US",
  "perf_cong_dist": "01",
  "perf_st_cong_dist": "UT01",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "8206",
   "pgm_ref_txt": "Formal Methods and Verification"
  },
  {
   "pgm_ref_code": "9150",
   "pgm_ref_txt": "EXP PROG TO STIM COMP RES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 390999.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>With the spread of Internet and mobile devices, transferring&nbsp;information robustly, safely and securely has become more important than ever. Computer hardware associated with such operations performs sophisticated modulo-arithmetic computations. This requires careful, custom design of such circuits. Custom design raises the potential for bugs in the circuits, compromising their security. It is imperative to verify the correctness of such circuits. However, the nature of these designs -- modulo arithmetic computations implemented in hardware -- makes them notoriously hard to verify.&nbsp;</p>\n<p>This project investigated the problem of formal verification of modular arithmetic circuits, particularly those with applications in elliptic curve cryptography. Research highlights include the development of new theoretical concepts, algorithms and computer-aided design tools that aid in the formal verification of modular arithmetic circuits. The research focused on concepts in commutative algebra, and demonstrated how these techniques can be applied within the context of synthesis and optimization of digital logic circuits. The project discovered that cross-pollination of techniques from algebra and logic circuit design is essential to enable &nbsp;verification (correctness proofs or bug catching) of such arithmetic circuits. A significant outcome of the project is that it has enabled formal verification of practical modular arithmetic circuits that conform to the design standards imposed by the National Institute for Standards and Technology (NIST) for elliptic curve cryptography. &nbsp;</p>\n<p>The project also resulted in the development of synthetic benchmark circuit designs that are employed in elliptic curve cryptography, and these are made available in public domain for others to use. Knowledge gained during the course of this project has laid the foundation for subsequent research work on the rectification of buggy crypto-circuits. When verification detects the presence of bugs in the design, the techniques developed as part of this project can be further used to eliminate the bugs and rectify the circuit. The project has also impacted education and the training of both graduate and undergraduate students in the area of formal verification techniques and the design of cryptography circuits. &nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 02/03/2022<br>\n\t\t\t\t\tModified by: Priyank&nbsp;Kalla</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nWith the spread of Internet and mobile devices, transferring information robustly, safely and securely has become more important than ever. Computer hardware associated with such operations performs sophisticated modulo-arithmetic computations. This requires careful, custom design of such circuits. Custom design raises the potential for bugs in the circuits, compromising their security. It is imperative to verify the correctness of such circuits. However, the nature of these designs -- modulo arithmetic computations implemented in hardware -- makes them notoriously hard to verify. \n\nThis project investigated the problem of formal verification of modular arithmetic circuits, particularly those with applications in elliptic curve cryptography. Research highlights include the development of new theoretical concepts, algorithms and computer-aided design tools that aid in the formal verification of modular arithmetic circuits. The research focused on concepts in commutative algebra, and demonstrated how these techniques can be applied within the context of synthesis and optimization of digital logic circuits. The project discovered that cross-pollination of techniques from algebra and logic circuit design is essential to enable  verification (correctness proofs or bug catching) of such arithmetic circuits. A significant outcome of the project is that it has enabled formal verification of practical modular arithmetic circuits that conform to the design standards imposed by the National Institute for Standards and Technology (NIST) for elliptic curve cryptography.  \n\nThe project also resulted in the development of synthetic benchmark circuit designs that are employed in elliptic curve cryptography, and these are made available in public domain for others to use. Knowledge gained during the course of this project has laid the foundation for subsequent research work on the rectification of buggy crypto-circuits. When verification detects the presence of bugs in the design, the techniques developed as part of this project can be further used to eliminate the bugs and rectify the circuit. The project has also impacted education and the training of both graduate and undergraduate students in the area of formal verification techniques and the design of cryptography circuits.  \n\n\t\t\t\t\tLast Modified: 02/03/2022\n\n\t\t\t\t\tSubmitted by: Priyank Kalla"
 }
}