{
 "awd_id": "1651276",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "EAGER:  Identifying Security Critical Properties of a Processor",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Sandip Kundu",
 "awd_eff_date": "2016-09-15",
 "awd_exp_date": "2018-08-31",
 "tot_intn_awd_amt": 150000.0,
 "awd_amount": 150000.0,
 "awd_min_amd_letter_date": "2016-09-13",
 "awd_max_amd_letter_date": "2016-09-13",
 "awd_abstract_narration": "This project focuses on shoring up the security vulnerabilities that exist in computer processors. Just like in software, bugs in hardware present vulnerabilities that can be exploited by determined attackers. Prior work has developed a method whereby the processor monitors itself and sends an alert to software whenever dangerous, anomalous behavior is observed. The question of what constitutes dangerous behavior is an open one, and tackling it is the goal of this research. In doing so the project has the potential to make self-monitoring processors practical and efficacious, significantly advancing the state of the art in protecting hardware from malicious attack.\r\n\r\nThe self-monitoring processor works by encoding in hardware the properties that a processor should always maintain and then throwing an exception to software if one of the properties is ever violated. In this project, the researchers develop a semi-automated methodology and tool-chain to identify and build the security-critical properties encoded in a hardware design language. The project uses a set of already-patched bugs of a processor design to automatically create an initial set of security-critical properties, and machine learning techniques to infer an additional set of properties that are not tied to any particular known vulnerability, yet are critical to security.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Cynthia",
   "pi_last_name": "Sturton",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Cynthia Sturton",
   "pi_email_addr": "csturton@cs.unc.edu",
   "nsf_id": "000657162",
   "pi_start_date": "2016-09-13",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of North Carolina at Chapel Hill",
  "inst_street_address": "104 AIRPORT DR STE 2200",
  "inst_street_address_2": "",
  "inst_city_name": "CHAPEL HILL",
  "inst_state_code": "NC",
  "inst_state_name": "North Carolina",
  "inst_phone_num": "9199663411",
  "inst_zip_code": "275995023",
  "inst_country_name": "United States",
  "cong_dist_code": "04",
  "st_cong_dist_code": "NC04",
  "org_lgl_bus_name": "UNIVERSITY OF NORTH CAROLINA AT CHAPEL HILL",
  "org_prnt_uei_num": "D3LHU66KBLD5",
  "org_uei_num": "D3LHU66KBLD5"
 },
 "perf_inst": {
  "perf_inst_name": "University of North Carolina at Chapel Hill",
  "perf_str_addr": "20 S Columbia St",
  "perf_city_name": "Chapel Hill",
  "perf_st_code": "NC",
  "perf_st_name": "North Carolina",
  "perf_zip_code": "275993175",
  "perf_ctry_code": "US",
  "perf_cong_dist": "04",
  "perf_st_cong_dist": "NC04",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "7916",
   "pgm_ref_txt": "EAGER"
  },
  {
   "pgm_ref_code": "9102",
   "pgm_ref_txt": "WOMEN, MINORITY, DISABLED, NEC"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 150000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-da318406-7fff-5e5b-eb4b-464f29c9010b\">\n<p dir=\"ltr\"><span>This research is motivated by the question, How can we identify vulnerabilities and their exploits in hardware designs? We focused on processor designs in particular, and we reframe the problem by observing that every exploitable vulnerability can be expressed as the violation of some desired security property, although the property may not be stated anywhere. The first problem we tackled, then, is identifying the security critical properties of a processor design -- those properties that if violated could expose an exploitable vulnerability.</span></p>\n<br />\n<p dir=\"ltr\"><span>The first major outcome of this research is a methodology and tool, SCIFinder, that takes, as input, a hardware design and produces a set of security-critical properties of the design. The properties are expressed mathematically, using logical constructs written over entities of the hardware design, and they can be used by formal verification tools that systematically and algorithmically explore the design to find instances of property violations.</span></p>\n<br />\n<p dir=\"ltr\"><span>The second major outcome of this research is a tool, Coppelia, that reads in a hardware design and a set of security critical properties and produces instances of property violations in the design, plus, for each violation found, a small piece of code that when executed on the hardware would expose and exploit the vulnerability.</span></p>\n<br />\n<p dir=\"ltr\"><span>We used Coppelia, plus the properties we developed with SCIFinder, to uncover previously unknown, exploitable bugs in two open-source processor designs. </span></p>\n<br />\n<p dir=\"ltr\"><span>This research has been successful in developing tools for the security validation of a hardware design, and in building a database of the security properties we should care about in our designs; these have now become part of the hardware security community&rsquo;s shared knowledge. </span></p>\n<br />\n<p dir=\"ltr\"><span>The lesson we will be taking forward as we continue this work is that security validation of a hardware design need not be an ad-hoc endeavor. Properties developed for one design can inform the security validation of a second design.</span></p>\n</span></p><br>\n<p>\n\t\t\t\t      \tLast Modified: 02/13/2019<br>\n\t\t\t\t\tModified by: Cynthia&nbsp;Sturton</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n\nThis research is motivated by the question, How can we identify vulnerabilities and their exploits in hardware designs? We focused on processor designs in particular, and we reframe the problem by observing that every exploitable vulnerability can be expressed as the violation of some desired security property, although the property may not be stated anywhere. The first problem we tackled, then, is identifying the security critical properties of a processor design -- those properties that if violated could expose an exploitable vulnerability.\n\n\nThe first major outcome of this research is a methodology and tool, SCIFinder, that takes, as input, a hardware design and produces a set of security-critical properties of the design. The properties are expressed mathematically, using logical constructs written over entities of the hardware design, and they can be used by formal verification tools that systematically and algorithmically explore the design to find instances of property violations.\n\n\nThe second major outcome of this research is a tool, Coppelia, that reads in a hardware design and a set of security critical properties and produces instances of property violations in the design, plus, for each violation found, a small piece of code that when executed on the hardware would expose and exploit the vulnerability.\n\n\nWe used Coppelia, plus the properties we developed with SCIFinder, to uncover previously unknown, exploitable bugs in two open-source processor designs. \n\n\nThis research has been successful in developing tools for the security validation of a hardware design, and in building a database of the security properties we should care about in our designs; these have now become part of the hardware security community?s shared knowledge. \n\n\nThe lesson we will be taking forward as we continue this work is that security validation of a hardware design need not be an ad-hoc endeavor. Properties developed for one design can inform the security validation of a second design.\n\n\n\t\t\t\t\tLast Modified: 02/13/2019\n\n\t\t\t\t\tSubmitted by: Cynthia Sturton"
 }
}