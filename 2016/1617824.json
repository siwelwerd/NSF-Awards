{
 "awd_id": "1617824",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CSR: Small: Architectural and Operating System Support for Non-volatile Memory",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Matt Mutka",
 "awd_eff_date": "2016-09-01",
 "awd_exp_date": "2020-08-31",
 "tot_intn_awd_amt": 499059.0,
 "awd_amount": 499059.0,
 "awd_min_amd_letter_date": "2016-08-02",
 "awd_max_amd_letter_date": "2016-08-02",
 "awd_abstract_narration": "Since the dawn of modern computing, the technologies used to build computer systems have stably partitioned into compute (manipulate data), memory (holds data while power is on), and storage (for retaining long-term data). Today a new class of technologies are emerging, namely non-volatile memory (NVM), that promises to disruptively merge the concepts of memory and storage. This work exploits the potential of this disruption by synergistically exploring software and hardware changes with a team led by a systems expert and architects with several foci.  The work develops new benchmarks and- through analysis - new designs that enable future computer systems do more work at the same cost or the same work at less cost due to more effective access to NVM. Moreover, the project disseminates its NVM benchmarks and software tools to further the work of others and make NSF dollars more impactful. \r\n\r\nIn more detail, the work develops and analyzes NVM benchmarks with dissimilar roots in file systems, persistent memory, and data stores. It then uses this analysis to develop computer NVM designs to hide latency while ensuring persistence, reduce the cost of coordinating with multiple memory controllers, transmutes ideas from general-purpose graphics processing units (GPUs) for NVM use, explores virtual memory address translation for vast NVMs, and facilitates fast atomic publication of data.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Michael",
   "pi_last_name": "Swift",
   "pi_mid_init": "M",
   "pi_sufx_name": "",
   "pi_full_name": "Michael M Swift",
   "pi_email_addr": "swift@cs.wisc.edu",
   "nsf_id": "000103907",
   "pi_start_date": "2016-08-02",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Mark",
   "pi_last_name": "Hill",
   "pi_mid_init": "D",
   "pi_sufx_name": "",
   "pi_full_name": "Mark D Hill",
   "pi_email_addr": "markhill@cs.wisc.edu",
   "nsf_id": "000328470",
   "pi_start_date": "2016-08-02",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "David",
   "pi_last_name": "Wood",
   "pi_mid_init": "A",
   "pi_sufx_name": "",
   "pi_full_name": "David A Wood",
   "pi_email_addr": "david@cs.wisc.edu",
   "nsf_id": "000442514",
   "pi_start_date": "2016-08-02",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Wisconsin-Madison",
  "inst_street_address": "21 N PARK ST STE 6301",
  "inst_street_address_2": "",
  "inst_city_name": "MADISON",
  "inst_state_code": "WI",
  "inst_state_name": "Wisconsin",
  "inst_phone_num": "6082623822",
  "inst_zip_code": "537151218",
  "inst_country_name": "United States",
  "cong_dist_code": "02",
  "st_cong_dist_code": "WI02",
  "org_lgl_bus_name": "UNIVERSITY OF WISCONSIN SYSTEM",
  "org_prnt_uei_num": "",
  "org_uei_num": "LCLSJAGTNZQ7"
 },
 "perf_inst": {
  "perf_inst_name": "Computer Science Department",
  "perf_str_addr": "1210 W. Dayton Street",
  "perf_city_name": "Madison",
  "perf_st_code": "WI",
  "perf_st_name": "Wisconsin",
  "perf_zip_code": "537061685",
  "perf_ctry_code": "US",
  "perf_cong_dist": "02",
  "perf_st_cong_dist": "WI02",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 499059.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-b63d424e-7fff-0e96-422c-ff3cd277d0f2\">\n<p dir=\"ltr\"><span>Since the dawn of modern computing, the technologies used to build computer systems have stably partitioned into compute, (volatile) memory, and (non-volatile) storage. Today a new class of technologies are emerging, namely byte-addressable non-volatile memory (NVM) technologies.&nbsp; Candidates include phase-change memory (PCM) and commercially available Intel Optane memory. Compared to existing flash storage, NVM promises 10-100x better performance, and like standard computer memory (DRAM) can be accessed via memory instructions rather than I/O operations. To better use this new technology, This project investigated design approaches for NVM that consider changes to software and hardware synergistically.&nbsp;</span></p>\n<br />\n<p dir=\"ltr\"><span>The project produced the first benchmark suite for non-volatile memory, WHISPER, in collaboration with HP labs. This benchmark comprised multiple uses of NVM including file systems, databases, persistent data structures, and transactional programs. This benchmark has been widely used by other researchers to compare approaches to using non-volatility. As part of this work, the project produced an architectural-level analysis of how programs use non-volatile memory, and found access to non-volatile memory was a small fraction of total memory references, and that frequent ordering operations between small data updates were a major hindrance to performance.</span></p>\n<br />\n<p dir=\"ltr\"><span>Based on this outcome, the project investigated both hardware and software support to better handle frequent ordering operations. In hardware, the Hands-Off Persistence (HOPS) design proposed new hardware to implement ordering without expensive processor stalls in most cases. In software, this project produced the Minimally-Ordered Durable (MOD) Data structures approach, which removes most of the expensive ordering operations when updating data structures in NVM and performs substantially better than other general-purpose programming approaches for NVM.</span></p>\n<br />\n<p dir=\"ltr\"><span>Separately, this project investigated how to speed address translation for heterogeneous systems comprising both CPUs and accelerators, as well as heterogeneous memory comprising DRAM and NVM. The Devirtualized Memory (DVM) design lets accelerators access most memory safely using native physical addresses with an efficient permission check instead of an expensive translation step commonly used by CPUs. While this approach removes some flexibility, it greatly shortens the path to accessing memory and improves performance for workloads with irregular memory access patterns.</span></p>\n<div><span><br /></span></div>\n</span></p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 11/30/2020<br>\n\t\t\t\t\tModified by: Michael&nbsp;M&nbsp;Swift</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n\nSince the dawn of modern computing, the technologies used to build computer systems have stably partitioned into compute, (volatile) memory, and (non-volatile) storage. Today a new class of technologies are emerging, namely byte-addressable non-volatile memory (NVM) technologies.  Candidates include phase-change memory (PCM) and commercially available Intel Optane memory. Compared to existing flash storage, NVM promises 10-100x better performance, and like standard computer memory (DRAM) can be accessed via memory instructions rather than I/O operations. To better use this new technology, This project investigated design approaches for NVM that consider changes to software and hardware synergistically. \n\n\nThe project produced the first benchmark suite for non-volatile memory, WHISPER, in collaboration with HP labs. This benchmark comprised multiple uses of NVM including file systems, databases, persistent data structures, and transactional programs. This benchmark has been widely used by other researchers to compare approaches to using non-volatility. As part of this work, the project produced an architectural-level analysis of how programs use non-volatile memory, and found access to non-volatile memory was a small fraction of total memory references, and that frequent ordering operations between small data updates were a major hindrance to performance.\n\n\nBased on this outcome, the project investigated both hardware and software support to better handle frequent ordering operations. In hardware, the Hands-Off Persistence (HOPS) design proposed new hardware to implement ordering without expensive processor stalls in most cases. In software, this project produced the Minimally-Ordered Durable (MOD) Data structures approach, which removes most of the expensive ordering operations when updating data structures in NVM and performs substantially better than other general-purpose programming approaches for NVM.\n\n\nSeparately, this project investigated how to speed address translation for heterogeneous systems comprising both CPUs and accelerators, as well as heterogeneous memory comprising DRAM and NVM. The Devirtualized Memory (DVM) design lets accelerators access most memory safely using native physical addresses with an efficient permission check instead of an expensive translation step commonly used by CPUs. While this approach removes some flexibility, it greatly shortens the path to accessing memory and improves performance for workloads with irregular memory access patterns.\n\n\n\n\n \n\n\t\t\t\t\tLast Modified: 11/30/2020\n\n\t\t\t\t\tSubmitted by: Michael M Swift"
 }
}