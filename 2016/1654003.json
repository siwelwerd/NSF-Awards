{
 "awd_id": "1654003",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "EAGER: Preliminary Study to Demonstrate Feasibility and Advantages of Massively Parallel Server Processors",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Matt Mutka",
 "awd_eff_date": "2016-10-01",
 "awd_exp_date": "2018-09-30",
 "tot_intn_awd_amt": 145895.0,
 "awd_amount": 145895.0,
 "awd_min_amd_letter_date": "2016-09-13",
 "awd_max_amd_letter_date": "2016-09-13",
 "awd_abstract_narration": "Today's data centers are under constant pressure to achieve higher performance and improved energy efficiency. However, server processors, which consume the lion's share of energy in a modern data center, have only made incremental improvements in performance and efficiency in more than a decade.  This proposal gets at the heart of the problem through investigating a novel processor architecture&#8213;designed from scratch with characteristics of modern server workloads in mind&#8213;that can provide unprecedented levels of performance and energy-efficiency to the data centers of the future.\r\n\r\nThis work leverages the observation that servers frequently service similar requests concurrently, and execute the same instruction sequences across requests. This implies that the abundant request-level parallelism of servers can be harnessed with a Single-Instruction-Multiple-Threads (SIMT) processor design to achieve drastic improvement in server processor efficiency.  Unfortunately, existing SIMT architectures&#8213;most notably, Graphical Processing Units (GPUs)&#8213;are fundamentally ill-equipped to exploit this request-level parallelism due to stringent quality of service requirements of server workloads. Therefore, significantly different designs are required for SIMT-based server processors. This project investigates the feasibility and challenges of applying the SIMT paradigm to server processors at different layers of the computing stack, from micro-architecture to memory hierarchy to system software. The project explores the performance effect of different hardware and software design techniques on SIMT server processors to identify the features that benefit such processors the most. The results will lay out a path toward significantly improving the energy efficiency of server processors, and open new research directions for the computer architecture and systems community.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Nima",
   "pi_last_name": "Honarmand",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Nima Honarmand",
   "pi_email_addr": "nhonarmand@cs.stonybrook.edu",
   "nsf_id": "000679230",
   "pi_start_date": "2016-09-13",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Michael",
   "pi_last_name": "Ferdman",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Michael Ferdman",
   "pi_email_addr": "mferdman@cs.stonybrook.edu",
   "nsf_id": "000634656",
   "pi_start_date": "2016-09-13",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "SUNY at Stony Brook",
  "inst_street_address": "W5510 FRANKS MELVILLE MEMORIAL LIBRARY",
  "inst_street_address_2": "",
  "inst_city_name": "STONY BROOK",
  "inst_state_code": "NY",
  "inst_state_name": "New York",
  "inst_phone_num": "6316329949",
  "inst_zip_code": "117940001",
  "inst_country_name": "United States",
  "cong_dist_code": "01",
  "st_cong_dist_code": "NY01",
  "org_lgl_bus_name": "THE RESEARCH FOUNDATION FOR THE STATE UNIVERSITY OF NEW YORK",
  "org_prnt_uei_num": "M746VC6XMNH9",
  "org_uei_num": "M746VC6XMNH9"
 },
 "perf_inst": {
  "perf_inst_name": "SUNY at Stony Brook",
  "perf_str_addr": "WEST 5510 FRK MEL LIB",
  "perf_city_name": "Stony Brook",
  "perf_st_code": "NY",
  "perf_st_name": "New York",
  "perf_zip_code": "117940001",
  "perf_ctry_code": "US",
  "perf_cong_dist": "01",
  "perf_st_cong_dist": "NY01",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7354",
   "pgm_ref_txt": "COMPUTER SYSTEMS"
  },
  {
   "pgm_ref_code": "7916",
   "pgm_ref_txt": "EAGER"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 145895.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-d4e07994-7fff-dc2e-4d11-b97424dfe553\">\n<p dir=\"ltr\"><span>The growth of data centers to meet the needs of online services puts them under constant pressure to achieve higher performance and improved energy ef&#64257;ciency. Despite these demands, server processors&mdash;which are at the heart of computing in data centers&mdash;have only made incremental improvements in performance and ef&#64257;ciency in more than a decade. To remedy this situation, revisiting server processors architecture is inevitable.&nbsp; We find that handling server requests on modern high-performance servers frequently results in repeating similar tasks, such as serving the same web pages or processing the same database queries with identical or similar parameters. Therefore, server operation is wasteful because server workloads repeatedly execute nearly identical instruction sequences. Moreover, a large amount of the energy spent by modern CPUs is not in the functional units, but in the peripherals responsible for fetching, decoding, and scheduling these unnecessary instructions and memory accesses.</span></p>\n<p dir=\"ltr\"><span>One promising architecture style that leverages cross-thread similarity and mitigates the instruction overheads is </span><span>Single Instruction Multiple Threads (SIMT).</span><span> &nbsp;The goal of this project was to 1) demonstrate the feasibility and benefits of running server workloads on a </span><span>massively-parallel SIMT</span><span> processor designed for server workloads and 2) study the challenges of running current server workloads, with a minimum amount of modification, on a SIMT architecture and gaining quantitative insights regarding the design considerations of such an architecture. &nbsp;</span><span>Our experimental results show that the primary challenges of running server applications on a SIMT architecture (control flow divergence and memory access divergence) are manageable. We demonstrated that, despite the presence of some control flow divergence, the number of control flow paths executed when handling different server requests are limited and more than 99% of the instructions in a server application (SPECWeb Support Suite) can run in lockstep on a SIMT system. We also demonstrated that simultaneous memory accesses have identical offsets from the base address of their allocations, which indicates that memory access divergence is manageable in a SIMT architecture by using stack interleaving and memory allocation coordination.</span></p>\n<br />\n<p dir=\"ltr\"><span>The major impact of this project is in demonstrating the feasibility of the SIMT approach for server architectures. &nbsp;Our results, demonstrating how control flow and memory access divergence of server applications can be managed, are likely to inspire further research in the computer architecture community, with the potential for industrial impact further down the road. &nbsp;At a minimum, our results have already confirmed that server workload threads can be effectively executed in lockstep on SIMT hardware, indicating that implementation of a SIMT processor for server workloads warrants further in-depth research and exploration by the PIs.</span></p>\n</span></p><br>\n<p>\n\t\t\t\t      \tLast Modified: 11/11/2018<br>\n\t\t\t\t\tModified by: Michael&nbsp;Ferdman</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n\nThe growth of data centers to meet the needs of online services puts them under constant pressure to achieve higher performance and improved energy ef&#64257;ciency. Despite these demands, server processors&mdash;which are at the heart of computing in data centers&mdash;have only made incremental improvements in performance and ef&#64257;ciency in more than a decade. To remedy this situation, revisiting server processors architecture is inevitable.  We find that handling server requests on modern high-performance servers frequently results in repeating similar tasks, such as serving the same web pages or processing the same database queries with identical or similar parameters. Therefore, server operation is wasteful because server workloads repeatedly execute nearly identical instruction sequences. Moreover, a large amount of the energy spent by modern CPUs is not in the functional units, but in the peripherals responsible for fetching, decoding, and scheduling these unnecessary instructions and memory accesses.\nOne promising architecture style that leverages cross-thread similarity and mitigates the instruction overheads is Single Instruction Multiple Threads (SIMT).  The goal of this project was to 1) demonstrate the feasibility and benefits of running server workloads on a massively-parallel SIMT processor designed for server workloads and 2) study the challenges of running current server workloads, with a minimum amount of modification, on a SIMT architecture and gaining quantitative insights regarding the design considerations of such an architecture.  Our experimental results show that the primary challenges of running server applications on a SIMT architecture (control flow divergence and memory access divergence) are manageable. We demonstrated that, despite the presence of some control flow divergence, the number of control flow paths executed when handling different server requests are limited and more than 99% of the instructions in a server application (SPECWeb Support Suite) can run in lockstep on a SIMT system. We also demonstrated that simultaneous memory accesses have identical offsets from the base address of their allocations, which indicates that memory access divergence is manageable in a SIMT architecture by using stack interleaving and memory allocation coordination.\n\n\nThe major impact of this project is in demonstrating the feasibility of the SIMT approach for server architectures.  Our results, demonstrating how control flow and memory access divergence of server applications can be managed, are likely to inspire further research in the computer architecture community, with the potential for industrial impact further down the road.  At a minimum, our results have already confirmed that server workload threads can be effectively executed in lockstep on SIMT hardware, indicating that implementation of a SIMT processor for server workloads warrants further in-depth research and exploration by the PIs.\n\n\n\t\t\t\t\tLast Modified: 11/11/2018\n\n\t\t\t\t\tSubmitted by: Michael Ferdman"
 }
}