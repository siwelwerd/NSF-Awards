{
 "awd_id": "1553510",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CAREER: A Unified Framework for Designing Efficient  Resource-Oblivious Parallel Algorithms",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032925197",
 "po_email": "mmcclure@nsf.gov",
 "po_sign_block_name": "Marilyn McClure",
 "awd_eff_date": "2016-02-15",
 "awd_exp_date": "2022-01-31",
 "tot_intn_awd_amt": 476286.0,
 "awd_amount": 535739.0,
 "awd_min_amd_letter_date": "2016-02-19",
 "awd_max_amd_letter_date": "2020-02-14",
 "awd_abstract_narration": "This project will develop fundamental theory and efficient tools to facilitate the design of parallel algorithms that make no mention of any hardware parameters in the code, but still run efficiently across a wide spectrum of parallel computing platforms ranging from small laptop computers to gigantic supercomputers. These algorithms will be called resource-oblivious algorithms. These algorithms will enable efficient parallel code regardless of the ever-changing underlying hardware platforms allowing more focus on the correctness of implementations without the need of optimizing for a particular hardware. Porting code from one machine to another will be reduced or eliminated. In short, algorithms will be implemented once and continue to run efficiently.\r\n\r\nOne way of designing efficient resource-oblivious parallel algorithms for the multilevel cache-hierarchy of a multicore machine is to reverse the direction of information flow between the program and the hardware &#8213; instead of making choices based on hardware parameters, such as cache sizes and number of cores, the program now simply assists scheduling by telling the scheduler about the properties of the algorithm being run. This project will extend the notion of resource-obliviousness to networks of hybrid compute nodes containing both multicore processors and manycore coprocessors. A unified framework will be built bottom-up starting with programs that run solely on processors (stage 1) or mainly on coprocessors (stage 2) of a single node, followed by hybrid programs utilizing both processors and coprocessors of the same node (stage 3), and ending with programs for networks of hybrid nodes (stage 4). Each stage will have four outcomes.\r\n     - Algorithmic models of resources separately for evaluation and for execution of algorithms.\r\n     - Efficient resource-oblivious algorithms for a suite of representative problems with theoretical bounds on the evaluation model.\r\n     - Schedulers that guarantee practical program performance predicted by the evaluation model.\r\n     - Implementation and experimental evaluation of the schedulers and the algorithms on real machines.\r\n\r\nThis research will make a wide variety of computational science applications easier to develop and maintain.The research results will be disseminated through new and existing courses on analysis of algorithms, parallel programming and supercomputing using resources made available through the NSF-funded XSEDE program, as well as workshops targeting both computer science and computational science audiences.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Rezaul",
   "pi_last_name": "Chowdhury",
   "pi_mid_init": "A",
   "pi_sufx_name": "",
   "pi_full_name": "Rezaul A Chowdhury",
   "pi_email_addr": "rezaul@cs.stonybrook.edu",
   "nsf_id": "000599542",
   "pi_start_date": "2016-02-19",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "SUNY at Stony Brook",
  "inst_street_address": "W5510 FRANKS MELVILLE MEMORIAL LIBRARY",
  "inst_street_address_2": "",
  "inst_city_name": "STONY BROOK",
  "inst_state_code": "NY",
  "inst_state_name": "New York",
  "inst_phone_num": "6316329949",
  "inst_zip_code": "117940001",
  "inst_country_name": "United States",
  "cong_dist_code": "01",
  "st_cong_dist_code": "NY01",
  "org_lgl_bus_name": "THE RESEARCH FOUNDATION FOR THE STATE UNIVERSITY OF NEW YORK",
  "org_prnt_uei_num": "M746VC6XMNH9",
  "org_uei_num": "M746VC6XMNH9"
 },
 "perf_inst": {
  "perf_inst_name": "SUNY at Stony Brook",
  "perf_str_addr": "WEST 5510 FRK MEL LIB",
  "perf_city_name": "Stony Brook",
  "perf_st_code": "NY",
  "perf_st_name": "New York",
  "perf_zip_code": "117943362",
  "perf_ctry_code": "US",
  "perf_cong_dist": "01",
  "perf_st_cong_dist": "NY01",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "287800",
   "pgm_ele_name": "Special Projects - CCF"
  },
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  },
  {
   "pgm_ele_code": "779600",
   "pgm_ele_name": "Algorithmic Foundations"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "1045",
   "pgm_ref_txt": "CAREER-Faculty Erly Career Dev"
  },
  {
   "pgm_ref_code": "7354",
   "pgm_ref_txt": "COMPUTER SYSTEMS"
  },
  {
   "pgm_ref_code": "7934",
   "pgm_ref_txt": "PARAL/DISTRIBUTED ALGORITHMS"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 231213.0
  },
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 59453.0
  },
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 39635.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 143066.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 62372.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><pre>The objective of this project was to prove important new results on parallel resource-oblivious algorithms for <span class=\"syntax3\">multicores</span>, and extend the notion of resource-obliviousness to networks of hybrid compute nodes with both <span class=\"syntax3\">multicore</span> processors and <span class=\"syntax3\">manycore</span> coprocessors (e.g., <span class=\"syntax3\">GPUs</span>). These algorithms do not use the knowledge of resource parameters but still can perform with reasonable efficiency across machines. The main focus of this project was to facilitate the design of resource-oblivious algorithms based on recursive divide and conquer ? a very powerful and widely used algorithm design technique.\n\nThe researchers used a deductive approach to improve the time and space complexities of their <span class=\"syntax3\">AutoGen</span> tool that for any dynamic programming (DP) recurrence from a wide class of DP problems automatically generates a provably correct and highly efficient cache-oblivious parallel recursive divide-and-conquer algorithm for evaluating it. The PI was also involved in the development of the <span class=\"syntax3\">Bellmania</span> system that uses deductive reasoning supported by an <span class=\"syntax3\">SMT</span>-based verifier back-end for automatic generation of provably correct implementations of such algorithms. \n\nThe investigators designed efficient architecture-independent algorithms for DP problems. These are recursive divide-and-conquer algorithms with high data locality resulting in low <span class=\"syntax3\">intra</span>-node I/O and inter-node communication complexities. These algorithms can run with provably optimal or near-optimal performance bounds on fat cores (cache complexity), thin cores (data movements), and purely distributed-memory machines (communication complexity) without any change in the algorithm?s basic structure.\n\nThe investigators designed <span class=\"syntax3\">Multiway</span> <span class=\"syntax3\">Autogen</span> for generating highly efficient parametric <span class=\"syntax3\">multiway</span> recursive divide-and-conquer algorithms for a wide class of DP and DP-like problems. Assuming R(k) to be the number of recursive calls at recursion level k, for efficiency reasons these R(k) values may need to vary with k based on how the memories/caches of the machine are hierarchically organized and how they are connected to the processing cores. Given an iterative DP code as input <span class=\"syntax3\">Multiway</span> <span class=\"syntax3\">Autogen</span> leverages polyhedral compilation techniques to generate parametric <span class=\"syntax3\">multiway</span> recursive algorithms where R(k) values can be changed <span class=\"syntax3\">online</span> during <span class=\"syntax3\">runtime</span>. These algorithms are easily mapped to <span class=\"syntax3\">multicore</span> <span class=\"syntax3\">CPUs</span>, <span class=\"syntax3\">GPUs</span> or clusters of homogeneous compute nodes.\n\nThe researchers designed improved resource-oblivious wavefront algorithms for <span class=\"syntax3\">multicores</span>. Standard recursive cache-oblivious algorithms often have suboptimal parallelism due to artificial dependencies among subproblems. By removing these artificial dependencies, one can simultaneously achieve cache-efficiency, better parallelism, and cache-obliviousness. Such algorithms are called recursive wavefront algorithms. The researchers developed recursive wavefront algorithms that have a structure similar to the standard recursive divide-and-conquer algorithms, but each recursive function call is annotated with start-time and end-time hints that are passed to the scheduler. Theoretical <span class=\"syntax3\">analyses</span> and experimental performance results show the superiority of these new algorithms over existing ones.\n\nThe researchers worked on the space-time <span class=\"syntax3\">tradeoff</span> problem in mitigating determinacy races that occur if two or more logically parallel instructions access the same memory location and at least one of them writes to it. Though locks and atomic instructions can eliminate races, they destroy parallelism. However, for associative and commutative updates to a memory cell one can instead use a reducer for parallel race-free updates using some extra space. The researchers investigated solutions to the following problem: given a fixed space budget, which memory locations should be assigned reducers and how should the space be distributed among them to minimize running time? This problem and several of its variants were analyzed for hardness and approximation algorithms were designed for them. \n\nThe investigators developed <span class=\"syntax3\">multithreaded</span> recursive algorithms for comparison-based sorting, <span class=\"syntax3\">Strassen?s</span> matrix multiplication (<span class=\"syntax3\">MM</span>), and the Fast Fourier Transform (<span class=\"syntax3\">FFT</span>) that can achieve optimal or near-optimal span with negligible or no asymptotic blowup in work under the binary fork-join/forking models. Each new algorithm either asymptotically improves the existing span bound (<span class=\"syntax3\">MM</span> and <span class=\"syntax3\">FFT</span>) or matches the optimal span under weaker assumptions (sorting). \n\nThe researchers designed an <span class=\"syntax3\">FFT</span>-based <span class=\"syntax3\">multithreaded</span> recursive algorithm for fast linear stencil computations. Stencil computations are widely used in many application areas. The new algorithm performs asymptotically less work than any existing algorithm for general linear stencils and easily outperforms existing fastest stencil implementations on real machines.\n\nThe researchers also built <span class=\"syntax3\">Fourst</span> -- a compiler that given a simple specification of a linear stencil computation generates an <span class=\"syntax3\">FFT</span>-based fast <span class=\"syntax3\">multithreaded</span> program for performing it. \n\nThe PI was involved in showing that the parallel <span class=\"syntax3\">multiway</span> recursive divide-and-conquer algorithms for Gaussian elimination without pivoting and graph transitive closures can be extended to run efficiently on tensor cores. Efficient tensor-core algorithms were also proposed for all-pairs shortest distances and periodic stencil computations. \n\nOther activities supported by this grant included the development of a cache-oblivious <span class=\"syntax3\">multithreaded</span> <span class=\"syntax3\">Viterbi</span> algorithm, closing the gap between cache-oblivious and cache-adaptive analysis, and designing efficient DP algorithms for Apache Spark. \n\nThis research project produced 15+ publications, two of which won Outstanding Paper awards at a highly competitive conference. It provided support for five PhD students, one MS thesis student, and two undergraduate students.</pre><br>\n<p>\n\t\t\t\t      \tLast Modified: 06/01/2022<br>\n\t\t\t\t\tModified by: Rezaul&nbsp;A&nbsp;Chowdhury</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "The objective of this project was to prove important new results on parallel resource-oblivious algorithms for multicores, and extend the notion of resource-obliviousness to networks of hybrid compute nodes with both multicore processors and manycore coprocessors (e.g., GPUs). These algorithms do not use the knowledge of resource parameters but still can perform with reasonable efficiency across machines. The main focus of this project was to facilitate the design of resource-oblivious algorithms based on recursive divide and conquer ? a very powerful and widely used algorithm design technique.\n\nThe researchers used a deductive approach to improve the time and space complexities of their AutoGen tool that for any dynamic programming (DP) recurrence from a wide class of DP problems automatically generates a provably correct and highly efficient cache-oblivious parallel recursive divide-and-conquer algorithm for evaluating it. The PI was also involved in the development of the Bellmania system that uses deductive reasoning supported by an SMT-based verifier back-end for automatic generation of provably correct implementations of such algorithms. \n\nThe investigators designed efficient architecture-independent algorithms for DP problems. These are recursive divide-and-conquer algorithms with high data locality resulting in low intra-node I/O and inter-node communication complexities. These algorithms can run with provably optimal or near-optimal performance bounds on fat cores (cache complexity), thin cores (data movements), and purely distributed-memory machines (communication complexity) without any change in the algorithm?s basic structure.\n\nThe investigators designed Multiway Autogen for generating highly efficient parametric multiway recursive divide-and-conquer algorithms for a wide class of DP and DP-like problems. Assuming R(k) to be the number of recursive calls at recursion level k, for efficiency reasons these R(k) values may need to vary with k based on how the memories/caches of the machine are hierarchically organized and how they are connected to the processing cores. Given an iterative DP code as input Multiway Autogen leverages polyhedral compilation techniques to generate parametric multiway recursive algorithms where R(k) values can be changed online during runtime. These algorithms are easily mapped to multicore CPUs, GPUs or clusters of homogeneous compute nodes.\n\nThe researchers designed improved resource-oblivious wavefront algorithms for multicores. Standard recursive cache-oblivious algorithms often have suboptimal parallelism due to artificial dependencies among subproblems. By removing these artificial dependencies, one can simultaneously achieve cache-efficiency, better parallelism, and cache-obliviousness. Such algorithms are called recursive wavefront algorithms. The researchers developed recursive wavefront algorithms that have a structure similar to the standard recursive divide-and-conquer algorithms, but each recursive function call is annotated with start-time and end-time hints that are passed to the scheduler. Theoretical analyses and experimental performance results show the superiority of these new algorithms over existing ones.\n\nThe researchers worked on the space-time tradeoff problem in mitigating determinacy races that occur if two or more logically parallel instructions access the same memory location and at least one of them writes to it. Though locks and atomic instructions can eliminate races, they destroy parallelism. However, for associative and commutative updates to a memory cell one can instead use a reducer for parallel race-free updates using some extra space. The researchers investigated solutions to the following problem: given a fixed space budget, which memory locations should be assigned reducers and how should the space be distributed among them to minimize running time? This problem and several of its variants were analyzed for hardness and approximation algorithms were designed for them. \n\nThe investigators developed multithreaded recursive algorithms for comparison-based sorting, Strassen?s matrix multiplication (MM), and the Fast Fourier Transform (FFT) that can achieve optimal or near-optimal span with negligible or no asymptotic blowup in work under the binary fork-join/forking models. Each new algorithm either asymptotically improves the existing span bound (MM and FFT) or matches the optimal span under weaker assumptions (sorting). \n\nThe researchers designed an FFT-based multithreaded recursive algorithm for fast linear stencil computations. Stencil computations are widely used in many application areas. The new algorithm performs asymptotically less work than any existing algorithm for general linear stencils and easily outperforms existing fastest stencil implementations on real machines.\n\nThe researchers also built Fourst -- a compiler that given a simple specification of a linear stencil computation generates an FFT-based fast multithreaded program for performing it. \n\nThe PI was involved in showing that the parallel multiway recursive divide-and-conquer algorithms for Gaussian elimination without pivoting and graph transitive closures can be extended to run efficiently on tensor cores. Efficient tensor-core algorithms were also proposed for all-pairs shortest distances and periodic stencil computations. \n\nOther activities supported by this grant included the development of a cache-oblivious multithreaded Viterbi algorithm, closing the gap between cache-oblivious and cache-adaptive analysis, and designing efficient DP algorithms for Apache Spark. \n\nThis research project produced 15+ publications, two of which won Outstanding Paper awards at a highly competitive conference. It provided support for five PhD students, one MS thesis student, and two undergraduate students.\n\n\t\t\t\t\tLast Modified: 06/01/2022\n\n\t\t\t\t\tSubmitted by: Rezaul A Chowdhury"
 }
}