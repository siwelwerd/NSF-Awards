{
 "awd_id": "1561807",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Medium: Collaborative Research: Run-Time Support for Scalable Concurrent Programming",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2016-09-01",
 "awd_exp_date": "2019-08-31",
 "tot_intn_awd_amt": 540000.0,
 "awd_amount": 540000.0,
 "awd_min_amd_letter_date": "2016-04-27",
 "awd_max_amd_letter_date": "2016-04-27",
 "awd_abstract_narration": "Highly-concurrent data structures lie at the heart of modern multicore software. This project will provide systematic run-time system support for several techniques that that have proved essential for constructing highly-concurrent data structures. The intellectual merits are to provide a new basis for thinking about how to scale future generations of both hardware and software, and in particular to develop novel uses of operating system kernel functionality, as well as transactional hardware and software techniques. The project's broader significance and importance is the benefit to society provided by higher performing, less expensive, and more reliable software.\r\n\r\nThe specific techniques addressed are unsynchronized traversals, in which a thread navigates through a linked data structure without writing to memory, and atomic sequences of memory operations, where race conditions are eliminated by making a sequence of individual memory operations appear to take place instantaneously. Although these techniques have been successfully deployed in many ad-hoc instances, they have never been packaged as general-purpose mechanisms because they can have complex and dangerous interactions with standard memory management schemes. This project will exploit recent developments in hardware architectures and operating system structures to develop automated, systematic run-time support, making these techniques accessible to non-specialists.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Maurice",
   "pi_last_name": "Herlihy",
   "pi_mid_init": "P",
   "pi_sufx_name": "",
   "pi_full_name": "Maurice P Herlihy",
   "pi_email_addr": "herlihy@cs.brown.edu",
   "nsf_id": "000333742",
   "pi_start_date": "2016-04-27",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Brown University",
  "inst_street_address": "1 PROSPECT ST",
  "inst_street_address_2": "",
  "inst_city_name": "PROVIDENCE",
  "inst_state_code": "RI",
  "inst_state_name": "Rhode Island",
  "inst_phone_num": "4018632777",
  "inst_zip_code": "029129100",
  "inst_country_name": "United States",
  "cong_dist_code": "01",
  "st_cong_dist_code": "RI01",
  "org_lgl_bus_name": "BROWN UNIVERSITY",
  "org_prnt_uei_num": "E3FDXZ6TBHW3",
  "org_uei_num": "E3FDXZ6TBHW3"
 },
 "perf_inst": {
  "perf_inst_name": "Brown University",
  "perf_str_addr": "115 Waterman St",
  "perf_city_name": "Providence",
  "perf_st_code": "RI",
  "perf_st_name": "Rhode Island",
  "perf_zip_code": "029129016",
  "perf_ctry_code": "US",
  "perf_cong_dist": "01",
  "perf_st_cong_dist": "RI01",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  },
  {
   "pgm_ref_code": "9150",
   "pgm_ref_txt": "EXP PROG TO STIM COMP RES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 540000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>This project investigated techniques for increasing concurrency in programming language runtime systems.</p>\n<p><br />One major thrust of this project is the DEF language, primarily developed by the MIT team.&nbsp; DEF is a language close to the machine for the sake of performance engineering, ut which also has features that provide support for concurrency.&nbsp; These features are designed with costs that do not impede code that do not use them, and preserve the flexibility enjoyed by C programmers in organizing memory layout and operations. DEF occupies the excluded middle between the two categories of languages and is suitable for high performance, scalable applications.</p>\n<p><br />The other major thrust of this project is to apply experience with concurrency to \"smart contracts\", scripts that control asset transfers on blockchains. The project was able to show how speculative techniques from software transactional memory can be adapted to run Ethereum smart contacts in parallel, alleviating one the major bottlenecks of smart contract execution. This project developed new techniques for speculative synchronization, and evaluated them by replaying smart contract calls recorded Ethereum blockchain to establish whether conflict rates were low enough for this approach to be effective. The results were promising, and we expect future blockchain smart contract designs will take these results into account.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 12/28/2019<br>\n\t\t\t\t\tModified by: Maurice&nbsp;P&nbsp;Herlihy</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThis project investigated techniques for increasing concurrency in programming language runtime systems.\n\n\nOne major thrust of this project is the DEF language, primarily developed by the MIT team.  DEF is a language close to the machine for the sake of performance engineering, ut which also has features that provide support for concurrency.  These features are designed with costs that do not impede code that do not use them, and preserve the flexibility enjoyed by C programmers in organizing memory layout and operations. DEF occupies the excluded middle between the two categories of languages and is suitable for high performance, scalable applications.\n\n\nThe other major thrust of this project is to apply experience with concurrency to \"smart contracts\", scripts that control asset transfers on blockchains. The project was able to show how speculative techniques from software transactional memory can be adapted to run Ethereum smart contacts in parallel, alleviating one the major bottlenecks of smart contract execution. This project developed new techniques for speculative synchronization, and evaluated them by replaying smart contract calls recorded Ethereum blockchain to establish whether conflict rates were low enough for this approach to be effective. The results were promising, and we expect future blockchain smart contract designs will take these results into account.\n\n\t\t\t\t\tLast Modified: 12/28/2019\n\n\t\t\t\t\tSubmitted by: Maurice P Herlihy"
 }
}