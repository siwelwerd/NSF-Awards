{
 "awd_id": "1629976",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CI-New: BugSwarm: A Large-Scale Repository of Replicable Defects, Tests, and Patches to Support the Software Engineering Research Community",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2016-09-01",
 "awd_exp_date": "2020-09-30",
 "tot_intn_awd_amt": 1033655.0,
 "awd_amount": 1058155.0,
 "awd_min_amd_letter_date": "2016-07-25",
 "awd_max_amd_letter_date": "2019-03-07",
 "awd_abstract_narration": "Improving software quality is a central priority of our time.\r\nApproaches to understand, diagnose, localize, and fix software defects\r\nare usually empirically grounded in datasets of past defects/repairs.\r\nA few such datasets are available; however, these datasets are\r\ndifficult to create, and are typically not of the size, scale, and\r\ndiversity that is representative of the software in use. The goal of\r\nthis project is to create BugSwarm, a large-scale repository of\r\nreplicable defects, tests, and patches. We propose to draw from the\r\nrecorded history of defects in open-source projects, to create this\r\ndataset of unprecedented size and diversity, while retaining\r\nsufficient fidelity of detail to allow careful study and replication\r\nof these historical defects. BugSwarm will amplify the size of\r\navailable defect datasets by several orders of magnitude.\r\n\r\nContinuous integration (CI) development practices, where build and\r\ntest processes are carried out in the cloud, with archived results,\r\noffer a novel opportunity to construct defect datasets. We propose to\r\nexploit CI coding practices to create BugSwarm. Continuous, online\r\nintegration practices inherently create archived records of build and\r\ntest attempts, including those that result in build and/or test\r\nfailures, and subsequent repairs. These practices emerged from the\r\nimperatives to: a) rigorously and automatically build, integrate, and\r\nfully test numerous code submissions from volunteer developers; and b)\r\nthe need to test these submissions at large volumes, in virtualized,\r\nconfigurable, cloud-based settings. The virtualized, cloud-based\r\ntesting makes these defects much more available and replicable. We\r\nwill exploit these archived records to create DRPs (Defect Replication\r\nPackages) and DFRPs (Defect & Fix Replication Packages), comprising\r\nbuggy versions of the code, failing regression tests, and bug fixes.\r\nDRPs and DFRPs will include complete virtual machines to reproduce\r\nreal test failures. BugSwarm will facilitate experimentation, and\r\navoid the duplication of a tremendous amount of work among researchers\r\nin programming languages, and software engineering.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Bogdan",
   "pi_last_name": "Vasilescu",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Bogdan Vasilescu",
   "pi_email_addr": "vasilescu@cmu.edu",
   "nsf_id": "000692194",
   "pi_start_date": "2016-07-25",
   "pi_end_date": null
  },
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Cindy",
   "pi_last_name": "Rubio Gonzalez",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Cindy Rubio Gonzalez",
   "pi_email_addr": "crubio@ucdavis.edu",
   "nsf_id": "000678663",
   "pi_start_date": "2016-07-25",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Premkumar",
   "pi_last_name": "Devanbu",
   "pi_mid_init": "T",
   "pi_sufx_name": "",
   "pi_full_name": "Premkumar T Devanbu",
   "pi_email_addr": "devanbu@cs.ucdavis.edu",
   "nsf_id": "000195677",
   "pi_start_date": "2016-07-25",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of California-Davis",
  "inst_street_address": "1850 RESEARCH PARK DR STE 300",
  "inst_street_address_2": "",
  "inst_city_name": "DAVIS",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "5307547700",
  "inst_zip_code": "956186153",
  "inst_country_name": "United States",
  "cong_dist_code": "04",
  "st_cong_dist_code": "CA04",
  "org_lgl_bus_name": "UNIVERSITY OF CALIFORNIA, DAVIS",
  "org_prnt_uei_num": "",
  "org_uei_num": "TX2DAGQPENZ5"
 },
 "perf_inst": {
  "perf_inst_name": "University of California, Davis",
  "perf_str_addr": "One Shields Ave",
  "perf_city_name": "Davis",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "956168562",
  "perf_ctry_code": "US",
  "perf_cong_dist": "04",
  "perf_st_cong_dist": "CA04",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "171400",
   "pgm_ele_name": "Special Projects - CNS"
  },
  {
   "pgm_ele_code": "735900",
   "pgm_ele_name": "CCRI-CISE Cmnty Rsrch Infrstrc"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  },
  {
   "pgm_ref_code": "7359",
   "pgm_ref_txt": "COMPUTING RES INFRASTRUCTURE"
  },
  {
   "pgm_ref_code": "9102",
   "pgm_ref_txt": "WOMEN, MINORITY, DISABLED, NEC"
  }
 ],
 "app_fund": [
  {
   "app_code": "0116",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001617DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2016,
   "fund_oblg_amt": 1033655.0
  },
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 15000.0
  },
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 9500.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Improving software quality is a central priority of our time. Research on approaches to understand, diagnose, localize, and fix software defects are empirically grounded in datasets of defects. In this project, we developed BugSwarm, a new infrastructure to automatically create a continuously growing dataset of reproducible software failures and fixes. The key insight behind BugSwarm was to leverage modern \"continuous integration\" (CI) development practices, where build and test processes are carried out in the cloud and whose results are archived. Specifically, the novelty of BugSwarm lies in the automated generation of scripts to compile and test the code, and the use of Docker images to provide the required environment to reproduce each failure and its corresponding fix. The BugSwarm infrastructure has led to the creation of the BugSwarm dataset, which has an unprecedented size, scope and diversity.</p>\n<p>The contributions of this project include: (1) a fully-automated infrastructure to mine and reproduce failures and fixes from open-source GitHub projects that use the CI service Travis-CI, (2) a dataset with over 3,000 Java and Python artifacts consisting of Docker images that package the source code for the failure and corresponding fix, and scripts to automatically build the code and run regression tests, (3) a website, API and client to facilitate selection, retrieval and use of BugSwarm artifacts, and (4) a testing framework to periodically test artifacts. In particular, we demonstrated that BugSwarm can be automatically grown to capture a larger diversity of artifacts and the use of new technologies as code evolves. We also showed how BugSwarm artifacts can be used to study and evaluate popular Java bug finding tools such as ErrorProne, SpotBugs, and Infer. The resulting techniques and results have been published in top venues in Software Engineering, and the BugSwarm infrastructure and dataset are publicly available.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 11/15/2020<br>\n\t\t\t\t\tModified by: Cindy&nbsp;Rubio Gonzalez</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nImproving software quality is a central priority of our time. Research on approaches to understand, diagnose, localize, and fix software defects are empirically grounded in datasets of defects. In this project, we developed BugSwarm, a new infrastructure to automatically create a continuously growing dataset of reproducible software failures and fixes. The key insight behind BugSwarm was to leverage modern \"continuous integration\" (CI) development practices, where build and test processes are carried out in the cloud and whose results are archived. Specifically, the novelty of BugSwarm lies in the automated generation of scripts to compile and test the code, and the use of Docker images to provide the required environment to reproduce each failure and its corresponding fix. The BugSwarm infrastructure has led to the creation of the BugSwarm dataset, which has an unprecedented size, scope and diversity.\n\nThe contributions of this project include: (1) a fully-automated infrastructure to mine and reproduce failures and fixes from open-source GitHub projects that use the CI service Travis-CI, (2) a dataset with over 3,000 Java and Python artifacts consisting of Docker images that package the source code for the failure and corresponding fix, and scripts to automatically build the code and run regression tests, (3) a website, API and client to facilitate selection, retrieval and use of BugSwarm artifacts, and (4) a testing framework to periodically test artifacts. In particular, we demonstrated that BugSwarm can be automatically grown to capture a larger diversity of artifacts and the use of new technologies as code evolves. We also showed how BugSwarm artifacts can be used to study and evaluate popular Java bug finding tools such as ErrorProne, SpotBugs, and Infer. The resulting techniques and results have been published in top venues in Software Engineering, and the BugSwarm infrastructure and dataset are publicly available.\n\n\t\t\t\t\tLast Modified: 11/15/2020\n\n\t\t\t\t\tSubmitted by: Cindy Rubio Gonzalez"
 }
}