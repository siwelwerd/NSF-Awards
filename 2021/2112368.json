{
 "awd_id": "2112368",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SBIR Phase I:  Securing open source software supply chain",
 "cfda_num": "47.084",
 "org_code": "15030000",
 "po_phone": "7032928772",
 "po_email": "patherto@nsf.gov",
 "po_sign_block_name": "Peter Atherton",
 "awd_eff_date": "2021-08-01",
 "awd_exp_date": "2023-02-28",
 "tot_intn_awd_amt": 255805.0,
 "awd_amount": 255805.0,
 "awd_min_amd_letter_date": "2021-07-23",
 "awd_max_amd_letter_date": "2021-07-23",
 "awd_abstract_narration": "The broader impact of this Small Business Innovation Research (SBIR) Phase I project will be to improve cybersecurity.  Thousands of open-source software (OSS) packages containing purposefully harmful software (malware) have been reported across popular language ecosystems (e.g., Python), which have been downloaded millions of times.  Such attacks are highly damaging as the malware may find its way into apps, potentially compromising the privacy of millions of users; moreover, OSS is the de facto standard way to build modern applications and services.This project will develop a novel large-scale automated vetting infrastructure to analyze millions of OSS packages and mitigate OSS supply chain attacks.  This will enhance productivity for the OSS developer community across the cybersecurity spectrum, including malware analysis, exposing undesired behavior in untrusted third-party OSS code, maintaining developer trust and reputation, detecting hidden software vulnerabilities, and enforcing security of OSS ecosystems. \r\n\r\nThis Small Business Innovation Research (SBIR) Phase I project will advance state-of-the-art research techniques as well as explore novel practical approaches for detection and mitigation of Open-Source Software (OSS) supply chain attacks \u2014 a direct cybersecurity threat posed to developers and organizations when adopting untrusted third-party OSS code. This project will: 1) create novel automated techniques for exhaustive code as well as metadata analysis of OSS projects, and 2) develop an extensive set of robust characteristic profiles for effective detection of malicious code.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "TIP",
 "org_dir_long_name": "Directorate for Technology, Innovation, and Partnerships",
 "div_abbr": "TI",
 "org_div_long_name": "Translational Impacts",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Ashish",
   "pi_last_name": "Bijlani",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Ashish Bijlani",
   "pi_email_addr": "ashish.bijlani@gmail.com",
   "nsf_id": "000821273",
   "pi_start_date": "2021-07-23",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "OSSILLATE INC.",
  "inst_street_address": "172 BLASTED ROCK RD",
  "inst_street_address_2": "",
  "inst_city_name": "AUBURN",
  "inst_state_code": "AL",
  "inst_state_name": "Alabama",
  "inst_phone_num": "3343212252",
  "inst_zip_code": "368304374",
  "inst_country_name": "United States",
  "cong_dist_code": "03",
  "st_cong_dist_code": "AL03",
  "org_lgl_bus_name": "OSSILLATE INC",
  "org_prnt_uei_num": "N6M3C8Y6VNH1",
  "org_uei_num": "N6M3C8Y6VNH1"
 },
 "perf_inst": {
  "perf_inst_name": "OSSILLATE INC.",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "AL",
  "perf_st_name": "Alabama",
  "perf_zip_code": "368304374",
  "perf_ctry_code": "US",
  "perf_cong_dist": "03",
  "perf_st_cong_dist": "AL03",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "537100",
   "pgm_ele_name": "SBIR Phase I"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "8027",
   "pgm_ref_txt": "Cyber Secur - Cyberinfrastruc"
  },
  {
   "pgm_ref_code": "9150",
   "pgm_ref_txt": "EXP PROG TO STIM COMP RES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0121",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2021,
   "fund_oblg_amt": 255805.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-b346789e-7fff-eb4f-907f-2eb413867bce\"> </span></p>\n<p dir=\"ltr\"><span>Open Source Software (OSS) has become the de-facto standard way of developing digital products and services. Developers distribute their OSS as ready-to-use packages hosted on public Package Registries such as NPM and PyPI for ease of use. Modern software apps and services reuse hundreds or even thousands of third-party OSS packages (called dependencies), creating deep and increasingly complex software supply chains.&nbsp;</span></p>\n<p dir=\"ltr\"><span>The widespread use of third-party OSS with implicit trust has made OSS code a prime target for bad actors to not only exploit security vulnerabilities in code, but also evidently leverage techniques such as dependency confusion, typo-squatting, and account hijacking to distribute purposefully harmful code (malware) in packages and carry out Solarwinds-like software supply chain attacks. Therefore, businesses must spend time thoroughly analyzing and vetting OSS packages for security issues prior to adopting them. Careless use of OSS can not only jeopardize the security and privacy of customers, but also cause high financial losses to businesses and damage their brand.</span></p>\n<p dir=\"ltr\"><span>However, there is no robust way to accurately measure OSS supply-chain cyber risks. We conducted over 30 interactions with potential customers across various industries (retail, finance, health care, etc.) as a part of this Small Business Innovation Research (SBIR) Phase I project to understand challenges around the adoption of OSS. Commonly followed best practices that emerged across interactions were 1) analyzing and managing OSS packages for security and operational risks as well as scanning them for known vulnerabilities, 2) testing for functionality and stability, 3) leveraging download count and GitHub stars as proxy metrics for popularity, and 4) manually reviewing code and documentation to evaluate project quality (e.g., determining whether best security and privacy practices are being followed) prior to importing them. Nevertheless, reviewing hundreds of OSS packages, their versions and transitive dependencies can be tedious, time consuming, and even error-prone, particularly if the package is imported with little to no knowledge of its provenance.&nbsp;</span></p>\n<p dir=\"ltr\"><span>Moreover, the state-of-the-art vulnerability OSS package scanners assume that the third-party open-source code is benign and do not analyze code (programmatic) behavior. Therefore, all such tools ONLY address threats from accidental programming bugs in benign code (a.k.a. CVEs such as Log4J). They fail to protect against Solarwinds-like modern software supply-chain attacks from deliberately bad (a.k.a. malicious) code.&nbsp;</span></p>\n<p dir=\"ltr\"><span>This SBIR Phase I project advances the state-of-the-art research techniques as well as explores novel practical approaches for detection and mitigation of aforementioned Cybersecurity threats posed by untrusted and potentially malicious packages in popular OSS ecosystems that developers and businesses face today. Specifically, we built and evaluated novel static/dynamic code (program) and sandboxing techniques as well as metadata checks to improve the accuracy and efficiency of our security analysis platform. We evaluated our technology with a real-world dataset of PyPI, RubyGems, and NPM packages. We reported over 70 new malware to the admins, which have been taken down.</span></p>\n<p dir=\"ltr\"><span>The core part of our technology is available as an open-source do-it-yourself command line tool</span><a href=\"https://github.com/ossillate-inc/packj\"><span> </span><span>https://github.com/ossillate-inc/packj</span></a><span> to help the developer community quickly audit OSS packages and easily detect malicious, typo-squatting, abandoned, vulnerable, and other insecure dependencies (weak links) in OSS supply chain. Specifically, Packj not only audits for CVEs, but also performs deep static+dynamic code analysis as well as metadata checks to detect any \"risky\" behavior and attributes, such as spawning of shell, use of SSH keys, mismatch of GitHub code vs packaged code (provenance), lack of 2FA, and several more. Such insecure attributes do not qualify as CVEs, which is why none of the existing tools can flag them. Our Packj tool has been showcased at premier industry conferences such as PyCon, NullCon, OpenSourceSummit, and BlackHat.</span></p>\n<p dir=\"ltr\"><span>The techniques and tools built as a part of this SBIR Phase I project are backed into the first-ever large-scale automated vetting infrastructure</span><a href=\"https://packj.dev/\"><span> </span><span>https://packj.dev</span></a><span> to analyze millions of published OSS packages and provide actionable insights into their composition, functionality, and security posture. Based on our customer interactions, such insights will empower organizations to do their due diligence and make informed assessments about potential modern supply chain cybersecurity threats early on in the software development lifecycle.</span></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 06/30/2023<br>\n\t\t\t\t\tModified by: Ashish&nbsp;Bijlani</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n \nOpen Source Software (OSS) has become the de-facto standard way of developing digital products and services. Developers distribute their OSS as ready-to-use packages hosted on public Package Registries such as NPM and PyPI for ease of use. Modern software apps and services reuse hundreds or even thousands of third-party OSS packages (called dependencies), creating deep and increasingly complex software supply chains. \nThe widespread use of third-party OSS with implicit trust has made OSS code a prime target for bad actors to not only exploit security vulnerabilities in code, but also evidently leverage techniques such as dependency confusion, typo-squatting, and account hijacking to distribute purposefully harmful code (malware) in packages and carry out Solarwinds-like software supply chain attacks. Therefore, businesses must spend time thoroughly analyzing and vetting OSS packages for security issues prior to adopting them. Careless use of OSS can not only jeopardize the security and privacy of customers, but also cause high financial losses to businesses and damage their brand.\nHowever, there is no robust way to accurately measure OSS supply-chain cyber risks. We conducted over 30 interactions with potential customers across various industries (retail, finance, health care, etc.) as a part of this Small Business Innovation Research (SBIR) Phase I project to understand challenges around the adoption of OSS. Commonly followed best practices that emerged across interactions were 1) analyzing and managing OSS packages for security and operational risks as well as scanning them for known vulnerabilities, 2) testing for functionality and stability, 3) leveraging download count and GitHub stars as proxy metrics for popularity, and 4) manually reviewing code and documentation to evaluate project quality (e.g., determining whether best security and privacy practices are being followed) prior to importing them. Nevertheless, reviewing hundreds of OSS packages, their versions and transitive dependencies can be tedious, time consuming, and even error-prone, particularly if the package is imported with little to no knowledge of its provenance. \nMoreover, the state-of-the-art vulnerability OSS package scanners assume that the third-party open-source code is benign and do not analyze code (programmatic) behavior. Therefore, all such tools ONLY address threats from accidental programming bugs in benign code (a.k.a. CVEs such as Log4J). They fail to protect against Solarwinds-like modern software supply-chain attacks from deliberately bad (a.k.a. malicious) code. \nThis SBIR Phase I project advances the state-of-the-art research techniques as well as explores novel practical approaches for detection and mitigation of aforementioned Cybersecurity threats posed by untrusted and potentially malicious packages in popular OSS ecosystems that developers and businesses face today. Specifically, we built and evaluated novel static/dynamic code (program) and sandboxing techniques as well as metadata checks to improve the accuracy and efficiency of our security analysis platform. We evaluated our technology with a real-world dataset of PyPI, RubyGems, and NPM packages. We reported over 70 new malware to the admins, which have been taken down.\nThe core part of our technology is available as an open-source do-it-yourself command line tool https://github.com/ossillate-inc/packj to help the developer community quickly audit OSS packages and easily detect malicious, typo-squatting, abandoned, vulnerable, and other insecure dependencies (weak links) in OSS supply chain. Specifically, Packj not only audits for CVEs, but also performs deep static+dynamic code analysis as well as metadata checks to detect any \"risky\" behavior and attributes, such as spawning of shell, use of SSH keys, mismatch of GitHub code vs packaged code (provenance), lack of 2FA, and several more. Such insecure attributes do not qualify as CVEs, which is why none of the existing tools can flag them. Our Packj tool has been showcased at premier industry conferences such as PyCon, NullCon, OpenSourceSummit, and BlackHat.\nThe techniques and tools built as a part of this SBIR Phase I project are backed into the first-ever large-scale automated vetting infrastructure https://packj.dev to analyze millions of published OSS packages and provide actionable insights into their composition, functionality, and security posture. Based on our customer interactions, such insights will empower organizations to do their due diligence and make informed assessments about potential modern supply chain cybersecurity threats early on in the software development lifecycle.\n\n \n\n \n\n\t\t\t\t\tLast Modified: 06/30/2023\n\n\t\t\t\t\tSubmitted by: Ashish Bijlani"
 }
}