{
 "awd_id": "2118179",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "Collaborative Research: SHF: Small: Runtime Verification at the Edge",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2021-07-15",
 "awd_exp_date": "2024-06-30",
 "tot_intn_awd_amt": 250000.0,
 "awd_amount": 250000.0,
 "awd_min_amd_letter_date": "2021-07-09",
 "awd_max_amd_letter_date": "2021-07-09",
 "awd_abstract_narration": "Today's autonomous technologies are now instrumented as limited-resource nodes collecting large amounts of data in real-time to better track and explain their system\u2019s and environment\u2019s behavior. A 2019 Cisco study found that there are 28.5 billion networked devices and connections in the world. Within this massive ecosystem, one class of future critical applications stands out: software applications that use networked nodes to provide detection of safety risks in the system or its physical environment. Example applications that require such monitoring include fleets of autonomous vehicles, health-monitoring wearable devices, search-and-rescue, and climate monitoring. These applications are already transforming lives, but suffer from a lack of timely, reliable and energy-efficient tools to monitor their correct operation. The focus of this project is to provide precisely such a monitoring infrastructure. This requires overcoming several difficulties.  First, the monitoring code must be automatically generated, rather than hand-written, as this reduces the likelihood of errors. The monitor must be able to deal with analog/physical signals produced by the observed phenomena, such as wave heights or temperatures. It must also deal with drifting clocks on the different nodes, which do not read the same moment in time. It must also be resilient to node crashes and malicious attacks. Finally, it must be distributed over the nodes, rather than centralized, since this is less prone to catastrophic failures. \r\n\r\nThe project radically extends the reach of runtime monitoring to new and economically important edge applications. This is achieved by implementing three research thrusts. (1) Develop theory and algorithms for distributed monitoring of continuous-time, asynchronous signals. The algorithms perform distributed optimization on the edge nodes themselves, thus eliminating the need for a central monitor. The algorithms incorporate partial knowledge of signal dynamics, where available, to accelerate convergence. (2) Develop theory and algorithms for incremental monitoring, where intermediate calculation results are still usable by the application should some nodes crash. The monitors will also accommodate nodes that intentionally falsify their data. (3) Conduct a rigorous validation of the algorithms on realistic autonomous vehicles, to establish their performance within a full software stack and in the presence of real-world noise and failure conditions.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Houssam",
   "pi_last_name": "Abbas",
   "pi_mid_init": "Y",
   "pi_sufx_name": "",
   "pi_full_name": "Houssam Y Abbas",
   "pi_email_addr": "houssam.abbas@oregonstate.edu",
   "nsf_id": "000795336",
   "pi_start_date": "2021-07-09",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Oregon State University",
  "inst_street_address": "1500 SW JEFFERSON AVE",
  "inst_street_address_2": "",
  "inst_city_name": "CORVALLIS",
  "inst_state_code": "OR",
  "inst_state_name": "Oregon",
  "inst_phone_num": "5417374933",
  "inst_zip_code": "973318655",
  "inst_country_name": "United States",
  "cong_dist_code": "04",
  "st_cong_dist_code": "OR04",
  "org_lgl_bus_name": "OREGON STATE UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "MZ4DYXE1SL98"
 },
 "perf_inst": {
  "perf_inst_name": "Oregon State University",
  "perf_str_addr": "",
  "perf_city_name": "Corvallis",
  "perf_st_code": "OR",
  "perf_st_name": "Oregon",
  "perf_zip_code": "973312140",
  "perf_ctry_code": "US",
  "perf_cong_dist": "04",
  "perf_st_cong_dist": "OR04",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "8206",
   "pgm_ref_txt": "Formal Methods and Verification"
  }
 ],
 "app_fund": [
  {
   "app_code": "0121",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2021,
   "fund_oblg_amt": 250000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p class=\"p1\">This project aimed at developing algorithms for runtime monitoring of edge applications. Example edge applications include Internet of Things (IoT) deployments, sensor nodes for building health monitoring, and robotic networks. These applications require monitoring while running, to detect safety violations, but pose unique challenges: events happen continuously, the various nodes of the edge application have drifting clocks, and as a result they can fail in many ways, based on how their clocks align.</p>\r\n<p class=\"p1\">We developed algorithms for monitoring such edge applications which take these challenges into account. Our algorithms are either centralized (they all run on one node) or decentralized (all nodes collaborate to perform the monitoring); they can find one safety violation or all; and they can process logged executions (after the fact) or at runtime (while the system is executing). All algorithms come with correctness guarantees. We implemented some of our algorithms on small-size unpiloted aerial vehicles.</p>\r\n<p class=\"p1\">These results advance the state-of-the-art in runtime monitoring of distributed systems in continuous time. More broadly, these algorithms enhance the safety of a wider range of edge applications by enabling them to monitor their own executions. This is especially true for applications that are not pure software, but rather include a physical component, like car traffic or a network of warehouse robots.</p>\r\n<p>&nbsp;</p><br>\n<p>\n Last Modified: 02/11/2025<br>\nModified by: Houssam&nbsp;Youssef&nbsp;Abbas</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nThis project aimed at developing algorithms for runtime monitoring of edge applications. Example edge applications include Internet of Things (IoT) deployments, sensor nodes for building health monitoring, and robotic networks. These applications require monitoring while running, to detect safety violations, but pose unique challenges: events happen continuously, the various nodes of the edge application have drifting clocks, and as a result they can fail in many ways, based on how their clocks align.\r\n\n\nWe developed algorithms for monitoring such edge applications which take these challenges into account. Our algorithms are either centralized (they all run on one node) or decentralized (all nodes collaborate to perform the monitoring); they can find one safety violation or all; and they can process logged executions (after the fact) or at runtime (while the system is executing). All algorithms come with correctness guarantees. We implemented some of our algorithms on small-size unpiloted aerial vehicles.\r\n\n\nThese results advance the state-of-the-art in runtime monitoring of distributed systems in continuous time. More broadly, these algorithms enhance the safety of a wider range of edge applications by enabling them to monitor their own executions. This is especially true for applications that are not pure software, but rather include a physical component, like car traffic or a network of warehouse robots.\r\n\n\n\t\t\t\t\tLast Modified: 02/11/2025\n\n\t\t\t\t\tSubmitted by: HoussamYoussefAbbas\n"
 }
}