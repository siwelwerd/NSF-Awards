{
 "awd_id": "2124225",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "FMitF: Track II: Usability, Scalability, and Deployment Improvement of VerioT",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2021-07-01",
 "awd_exp_date": "2023-12-31",
 "tot_intn_awd_amt": 99983.0,
 "awd_amount": 99983.0,
 "awd_min_amd_letter_date": "2021-06-08",
 "awd_max_amd_letter_date": "2021-06-08",
 "awd_abstract_narration": "The Internet-of-Things (IoT) access-delegation paradigm is emerging and supported by mainstream IoT vendors. In this paradigm, companies provide support to delegate device access to a delegatee cloud/vendor (such as Google Home, SmartThings, and Apple Home), thus permitting a user to manage multiple devices from different vendors through a single app of the delegatee. Flawed design and implementation of IoT delegation protocols incur serious security and safety consequences, such as unauthorized control of smart door locks and health devices. This project improves and extends VerioT (built on the Spin model-checker), the first formal-verification tool for real-world IoT delegation protocols. The project\u2019s novelties are in new methods to facilitate (1) IoT security analysis leveraging usability-enhanced verification reporting, (2) automatic, scalability-enhanced model construction, and (3) integrating verification techniques to modern IoT software development lifecycle.  The project\u2019s impacts will be to enable IoT stakeholders and developers to find security flaws earlier --- ideally as soon as the flaws are introduced --- and to increase assurance in the security of IoT systems.\r\n\r\nThe project includes three main tasks. First, to increase the usability of VerioT, the investigators are improving bug reporting by automatically annotating the reported counter-examples with IoT contexts and operations in natural language texts, producing industry-standard security-bug reports. Second, to increase scalability, the investigators are automating model construction by adopting novel Natural Language Processing (NLP) based document analysis techniques, called Dilution, which can precisely construct protocol state machines from unstructured documentation. Third, the investigators are developing support for enterprise-level deployment by integrating VerioT into modern Continuous Integration/Continuous Deployment (CI/CD) pipelines in the software-engineering and IoT industries. The project is intended to yield an industry-strength IoT protocol verifier that keeps up with the development of verification technology and IoT software practices, and helps developers proactively identify new bugs in IoT protocols and software before they are deployed in production.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Luyi",
   "pi_last_name": "Xing",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Luyi Xing",
   "pi_email_addr": "lxing2@illinois.edu",
   "nsf_id": "000784995",
   "pi_start_date": "2021-06-08",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "XiaoFeng",
   "pi_last_name": "Wang",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "XiaoFeng Wang",
   "pi_email_addr": "xw7@indiana.edu",
   "nsf_id": "000219306",
   "pi_start_date": "2021-06-08",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Xiaojing",
   "pi_last_name": "Liao",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Xiaojing Liao",
   "pi_email_addr": "xjliao@illinois.edu",
   "nsf_id": "000759232",
   "pi_start_date": "2021-06-08",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Indiana University",
  "inst_street_address": "107 S INDIANA AVE",
  "inst_street_address_2": "",
  "inst_city_name": "BLOOMINGTON",
  "inst_state_code": "IN",
  "inst_state_name": "Indiana",
  "inst_phone_num": "3172783473",
  "inst_zip_code": "474057000",
  "inst_country_name": "United States",
  "cong_dist_code": "09",
  "st_cong_dist_code": "IN09",
  "org_lgl_bus_name": "TRUSTEES OF INDIANA UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "YH86RTW2YVJ4"
 },
 "perf_inst": {
  "perf_inst_name": "Indiana University",
  "perf_str_addr": "700 N Woodlawn Ave",
  "perf_city_name": "Bloomington",
  "perf_st_code": "IN",
  "perf_st_name": "Indiana",
  "perf_zip_code": "474083901",
  "perf_ctry_code": "US",
  "perf_cong_dist": "09",
  "perf_st_cong_dist": "IN09",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "094Y00",
   "pgm_ele_name": "FMitF: Formal Methods in the F"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "071Z",
   "pgm_ref_txt": "FMitF-Formal Methods in the Field"
  },
  {
   "pgm_ref_code": "8206",
   "pgm_ref_txt": "Formal Methods and Verification"
  }
 ],
 "app_fund": [
  {
   "app_code": "0121",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2021,
   "fund_oblg_amt": 99983.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-da267c2a-7fff-9746-6b55-a3097e0a474a\">\n<p dir=\"ltr\"><span>1. Security Verification for Internet-of-Things (IoT) Devices&nbsp;</span></p>\n<p dir=\"ltr\"><span>We performed the first systematic study for the Multiple Device-Management Channels (M-DMC) paradigm and protocols in IoT interoperability. We summarized 4 third-party DMCs which are widely integrated in today's IoT devices along with the device manufacturer's own DMC: HomeKit, Zigbee/Z-Wave compatible DMC, and smart-speaker Seamless DMC. Based on our novel modeling based analysis approach, our new research shows that today's multiple DMC (M-DMC) design and integration are fundamentally flawed, leaving different channels on the same device completely disjointed or inadequately coordinated in their security controls. The key challenge is, with different DMCs, their security policies and controls are difficult to be interoperable due to (1) different authorization protocols and functionalities; (2) diverse architectures with enforcement components scattered across devices, local hubs, and cloud ends. Hence, access decisions on different DMCs are often difficult to be coordinated, with one channel operating in a way completely oblivious to other channels. As a result, any security policies configured and enforced through one channel could be circumvented through another channel, opening a new avenue for cyberattacks. We call this threat chaotic device management or Codema.</span></p>\n<br />\n<p dir=\"ltr\"><span>We purchased and analyzed 14 top-rated IoT devices and their integration and management of multiple DMCs. We found that Codema is both general and fundamental: these DMCs are generally not designed to coordinate with each other for security policies and control. The Codema problems enable the adversary to practically gain unauthorized access to sensitive devices (e.g., locks, garage doors, etc.). We reported our findings to affected parties (e.g., Apple, August, Philips Hue, ismartgate, Abode), which all acknowledged their importance. To mitigate this new threat, we designed and implemented CGuard, a new access control framework that device manufacturers can easily integrate into their IoT devices to protect end users. Our evaluation shows that CGuard is highly usable and acceptable to users, easy to adopt by manufacturers, and efficient and effective in security control.</span></p>\n<br />\n<p dir=\"ltr\"><span>Open-source tool: </span><a href=\"https://sites.google.com/view/cguard/home/cguard?authuser=0\"><span>https://sites.google.com/view/cguard/home/cguard?authuser=0</span></a><span>.&nbsp;</span></p>\n<br />\n<p dir=\"ltr\"><span>Demo: </span><a href=\"https://sites.google.com/view/cguard/home/attack-demos?authuser=0\"><span>https://sites.google.com/view/cguard/home/attack-demos?authuser=0</span></a></p>\n<br />\n<p dir=\"ltr\"><span>2. Security Verification for IoT Security policies</span></p>\n<br />\n<p dir=\"ltr\"><span>Modern IoT device manufacturers are taking advantage of the managed Platform-as-a-Service (PaaS) and Infrastructure-as-a-Service (IaaS) IoT clouds (e.g., AWS IoT, Azure IoT) for secure and convenient IoT development/deployment. The IoT access control is achieved by manufacturer-specified, cloud-enforced IoT access policies (cloud-standard JSON documents, called IoT Policies) stating which users can access which IoT devices/resources under what constraints. In this paper, we performed a systematic study on the security of cloud-based IoT access policies on modern PaaS/IaaS IoT clouds. Our research shows that the complexity in the IoT semantics and enforcement logic of the policies leaves tremendous space for device manufacturers to program a flawed IoT access policy, introducing convoluted logic flaws which are non-trivial to reason about. In addition to challenges/mistakes in the design space, it is astonishing to find that mainstream device manufacturers also generally make critical mistakes in deploying IoT Policies thanks to the flexibility offered by PaaS/IaaS clouds and the lack of standard practices for doing so. Our assessment of 36 device manufacturers and 310 opensource IoT projects highlights the pervasiveness and seriousness of the problems, which once exploited, can have serious impacts on IoT users&rsquo; security, safety, and privacy. To help manufacturers identify and easily fix IoT Policy flaws, we introduce P-Verifier, a formal verification tool that can automatically verify cloud-based IoT Policies. With evaluated high effectiveness and low performance overhead, P-Verifier will contribute to elevating security assurance in modern IoT deployments and access control. We responsibly reported all findings to affected vendors and fixes were deployed or on the way.</span></p>\n<br />\n<p dir=\"ltr\"><span>Open-source tool: The formal verification tool called P-Verifier is adopted by AWS (in IoT Device Defender to help IoT manufacturers verify access control policies</span><span>.&nbsp;</span></p>\n<br />\n<p dir=\"ltr\"><span>Source code: </span><a href=\"https://github.com/P-Verifier/P-Verifier\"><span>https://github.com/P-Verifier/P-Verifier</span></a></p>\n<p dir=\"ltr\"><span>Tool and findings website: </span><a href=\"https://sites.google.com/view/p-verify/home?authuser=0\"><span>https://sites.google.com/view/p-verify/home?authuser=0</span></a></p>\n</span></p>\n<p>&nbsp;</p><br>\n<p>\n Last Modified: 02/01/2024<br>\nModified by: Luyi&nbsp;Xing</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\n\n\n\n1. Security Verification for Internet-of-Things (IoT) Devices\n\n\nWe performed the first systematic study for the Multiple Device-Management Channels (M-DMC) paradigm and protocols in IoT interoperability. We summarized 4 third-party DMCs which are widely integrated in today's IoT devices along with the device manufacturer's own DMC: HomeKit, Zigbee/Z-Wave compatible DMC, and smart-speaker Seamless DMC. Based on our novel modeling based analysis approach, our new research shows that today's multiple DMC (M-DMC) design and integration are fundamentally flawed, leaving different channels on the same device completely disjointed or inadequately coordinated in their security controls. The key challenge is, with different DMCs, their security policies and controls are difficult to be interoperable due to (1) different authorization protocols and functionalities; (2) diverse architectures with enforcement components scattered across devices, local hubs, and cloud ends. Hence, access decisions on different DMCs are often difficult to be coordinated, with one channel operating in a way completely oblivious to other channels. As a result, any security policies configured and enforced through one channel could be circumvented through another channel, opening a new avenue for cyberattacks. We call this threat chaotic device management or Codema.\n\n\n\n\nWe purchased and analyzed 14 top-rated IoT devices and their integration and management of multiple DMCs. We found that Codema is both general and fundamental: these DMCs are generally not designed to coordinate with each other for security policies and control. The Codema problems enable the adversary to practically gain unauthorized access to sensitive devices (e.g., locks, garage doors, etc.). We reported our findings to affected parties (e.g., Apple, August, Philips Hue, ismartgate, Abode), which all acknowledged their importance. To mitigate this new threat, we designed and implemented CGuard, a new access control framework that device manufacturers can easily integrate into their IoT devices to protect end users. Our evaluation shows that CGuard is highly usable and acceptable to users, easy to adopt by manufacturers, and efficient and effective in security control.\n\n\n\n\nOpen-source tool: https://sites.google.com/view/cguard/home/cguard?authuser=0.\n\n\n\n\nDemo: https://sites.google.com/view/cguard/home/attack-demos?authuser=0\n\n\n\n\n2. Security Verification for IoT Security policies\n\n\n\n\nModern IoT device manufacturers are taking advantage of the managed Platform-as-a-Service (PaaS) and Infrastructure-as-a-Service (IaaS) IoT clouds (e.g., AWS IoT, Azure IoT) for secure and convenient IoT development/deployment. The IoT access control is achieved by manufacturer-specified, cloud-enforced IoT access policies (cloud-standard JSON documents, called IoT Policies) stating which users can access which IoT devices/resources under what constraints. In this paper, we performed a systematic study on the security of cloud-based IoT access policies on modern PaaS/IaaS IoT clouds. Our research shows that the complexity in the IoT semantics and enforcement logic of the policies leaves tremendous space for device manufacturers to program a flawed IoT access policy, introducing convoluted logic flaws which are non-trivial to reason about. In addition to challenges/mistakes in the design space, it is astonishing to find that mainstream device manufacturers also generally make critical mistakes in deploying IoT Policies thanks to the flexibility offered by PaaS/IaaS clouds and the lack of standard practices for doing so. Our assessment of 36 device manufacturers and 310 opensource IoT projects highlights the pervasiveness and seriousness of the problems, which once exploited, can have serious impacts on IoT users security, safety, and privacy. To help manufacturers identify and easily fix IoT Policy flaws, we introduce P-Verifier, a formal verification tool that can automatically verify cloud-based IoT Policies. With evaluated high effectiveness and low performance overhead, P-Verifier will contribute to elevating security assurance in modern IoT deployments and access control. We responsibly reported all findings to affected vendors and fixes were deployed or on the way.\n\n\n\n\nOpen-source tool: The formal verification tool called P-Verifier is adopted by AWS (in IoT Device Defender to help IoT manufacturers verify access control policies.\n\n\n\n\nSource code: https://github.com/P-Verifier/P-Verifier\n\n\nTool and findings website: https://sites.google.com/view/p-verify/home?authuser=0\n\n\n\n\t\t\t\t\tLast Modified: 02/01/2024\n\n\t\t\t\t\tSubmitted by: LuyiXing\n"
 }
}