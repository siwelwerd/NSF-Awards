{
 "awd_id": "2102106",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "FMitF:Collaborative Research:Track I:Formal Techniques for Monitoring Low-level Cross-chain Functions",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2020-10-01",
 "awd_exp_date": "2023-12-31",
 "tot_intn_awd_amt": 375000.0,
 "awd_amount": 375000.0,
 "awd_min_amd_letter_date": "2021-01-22",
 "awd_max_amd_letter_date": "2021-01-22",
 "awd_abstract_narration": "A blockchain is a data structure distributed over a network of computers, often used to manage assets such as cryptocurrencies. A blockchain protocols is a distributed application that allows participating parties who do not trust one another to benefit by trading assets in a secure way. The project will investigate the design, analysis, and implementation of protocols capable of making coordinated changes to multiple blockchains. The project will develop techniques where a monitor observes a running system of blockchains to detect and react to changing conditions that might threaten the protocol's integrity and safety.\r\n\r\nThe project focuses on three important cross-chain protocols: atomic swaps, off-chain recurring swaps, and atomic transactions. These protocols require the underlying network to display certain critical properties, and runtime verification is expected to play a prime role in monitoring  their health. The project will investigate (1) how algorithms  and techniques adapted from distributed runtime verification can make  cross-chain protocols robust and effective, and (2) how runtime verification  algorithms can be augmented with classic results from distributed computing to develop low-bandwidth distributed monitoring systems appropriate for blockchain applications and beyond.\r\n\r\nSociety will benefit through more secure and trustworthy software and electronic commerce. As modern society becomes increasingly reliant on software systems for commerce and governance, it becomes increasingly vulnerable to disruption from security breaches. More trustworthy software will provide economic benefits through faster, cheaper, and simpler electronic commerce, cheaper and more effective regulatory compliance, and more transparent and accessible public records. Trustworthy software will enhance individual privacy, making sensitive data accessible only to authorized parties. Truly trustworthy software requires making formal methods a core aspect of distributed system design, not an afterthought.\r\n\r\nData generated as part of this project, including software artifacts, papers and reports, logs generated by experimentation, programming projects, lecture materials, and the project website, will be managed using existing IT and data-protection infrastructures provided by the participating institutions Brown University and Iowa State University. The project will maintain active repositories in BitBucket (www.bitbucket.org) and GitHub (www.github.com).\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Borzoo",
   "pi_last_name": "Bonakdarpour",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Borzoo Bonakdarpour",
   "pi_email_addr": "borzoo@msu.edu",
   "nsf_id": "000756129",
   "pi_start_date": "2021-01-22",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Michigan State University",
  "inst_street_address": "426 AUDITORIUM RD RM 2",
  "inst_street_address_2": "",
  "inst_city_name": "EAST LANSING",
  "inst_state_code": "MI",
  "inst_state_name": "Michigan",
  "inst_phone_num": "5173555040",
  "inst_zip_code": "488242600",
  "inst_country_name": "United States",
  "cong_dist_code": "07",
  "st_cong_dist_code": "MI07",
  "org_lgl_bus_name": "MICHIGAN STATE UNIVERSITY",
  "org_prnt_uei_num": "VJKZC4D1JN36",
  "org_uei_num": "R28EKN92ZTZ9"
 },
 "perf_inst": {
  "perf_inst_name": "Michigan State University",
  "perf_str_addr": "426 Administration Bldg",
  "perf_city_name": "East Lansing",
  "perf_st_code": "MI",
  "perf_st_name": "Michigan",
  "perf_zip_code": "488242600",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "MI07",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "094Y00",
   "pgm_ele_name": "FMitF: Formal Methods in the F"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "062Z",
   "pgm_ref_txt": "Harnessing the Data Revolution"
  },
  {
   "pgm_ref_code": "8206",
   "pgm_ref_txt": "Formal Methods and Verification"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 375000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><ul style=\"box-sizing: inherit; margin: 0px; padding: 0px; list-style: none; color: #1b1b1b; font-family: Verdana; font-size: 11.312px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; white-space: normal; background-color: #ffffff; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;\">\n<li style=\"box-sizing: inherit; margin: 0px; padding: 0px;\">The goal of this project was to facilitate reasoning about the correctness of requirements in distributed systems and, in particular, blockchains that are commonly used in smart contracts and cryptocurrencies. The requirements we concentrated on typically specify policies to ensure the health and well-being of functional requirements of blockchain and crosschain protocols. Our technique was based on runtime monitoring, which is a complementary method to standard testing and exhaustive software verification which are not complete. The project designed a general-purpose technique were the user expresses these requirements in a well-defined language. We developed push-button tools that take these inputs along with data logs from blockchain systems and declare whether or not the data satisfies the given policy. If not, our tools generate a witness (also known as a counterexample) that why it does not satisfy the policy. We also focused on scenarios were monitors are not perfect (subject to faults) and designed techniques were the system can mitigate imperfect monitors. The project developed fundamental algorithms and techniques to facilitate the monitoring process in the presence of faults. In some cases, we showed that problem is impossible and showed how to design languages that make monitoring possible. This was a collaborative project with Brown University.</li>\n</ul><br>\n<p>\n Last Modified: 04/23/2024<br>\nModified by: Borzoo&nbsp;Bonakdarpour</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\nThe goal of this project was to facilitate reasoning about the correctness of requirements in distributed systems and, in particular, blockchains that are commonly used in smart contracts and cryptocurrencies. The requirements we concentrated on typically specify policies to ensure the health and well-being of functional requirements of blockchain and crosschain protocols. Our technique was based on runtime monitoring, which is a complementary method to standard testing and exhaustive software verification which are not complete. The project designed a general-purpose technique were the user expresses these requirements in a well-defined language. We developed push-button tools that take these inputs along with data logs from blockchain systems and declare whether or not the data satisfies the given policy. If not, our tools generate a witness (also known as a counterexample) that why it does not satisfy the policy. We also focused on scenarios were monitors are not perfect (subject to faults) and designed techniques were the system can mitigate imperfect monitors. The project developed fundamental algorithms and techniques to facilitate the monitoring process in the presence of faults. In some cases, we showed that problem is impossible and showed how to design languages that make monitoring possible. This was a collaborative project with Brown University.\n\t\t\t\t\tLast Modified: 04/23/2024\n\n\t\t\t\t\tSubmitted by: BorzooBonakdarpour\n"
 }
}