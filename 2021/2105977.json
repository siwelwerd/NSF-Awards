{
 "awd_id": "2105977",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SBIR Phase I:  Non-Blocking Updates to Graph Databases",
 "cfda_num": "47.084",
 "org_code": "15030000",
 "po_phone": "7032928772",
 "po_email": "patherto@nsf.gov",
 "po_sign_block_name": "Peter Atherton",
 "awd_eff_date": "2021-08-01",
 "awd_exp_date": "2022-01-31",
 "tot_intn_awd_amt": 255916.0,
 "awd_amount": 255916.0,
 "awd_min_amd_letter_date": "2021-07-28",
 "awd_max_amd_letter_date": "2021-07-28",
 "awd_abstract_narration": "The broader impact of this Small Business Innovation Research (SBIR) Phase I project is to provide a novel hardware and software architecture for finance, resource planning, insurance, and cybersecurity applications.  The proposed technology will reduce costs and improve decision-making quality. This project will provide on-demand resources via the cloud, on premises for privacy, and in-situ for immediate reaction. Providing capability for on-demand access via cloud providers will expand access to more communities, as well as to educational institutions.\r\n\r\nThis Small Business Innovation Research (SBIR) Phase I project expands the frontier of streaming graph analysis.  Current analysis methods assume a static environment with full visibility. This project proposes a system for streaming graph analysis without strict instantaneous assumptions unless required and with the capability to evolve queries as data are updated.  The proposed system will respond sufficiently fast to address the needs of fast-paced applications, such as financial and news updates.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "TIP",
 "org_dir_long_name": "Directorate for Technology, Innovation, and Partnerships",
 "div_abbr": "TI",
 "org_div_long_name": "Translational Impacts",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Martin",
   "pi_last_name": "Deneroff",
   "pi_mid_init": "M",
   "pi_sufx_name": "",
   "pi_full_name": "Martin M Deneroff",
   "pi_email_addr": "mdeneroff@tactcomplabs.com",
   "nsf_id": "000838694",
   "pi_start_date": "2021-07-28",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "LUCATA CORPORATION",
  "inst_street_address": "270 W 39TH ST RM 1302",
  "inst_street_address_2": "",
  "inst_city_name": "NEW YORK",
  "inst_state_code": "NY",
  "inst_state_name": "New York",
  "inst_phone_num": "6466615479",
  "inst_zip_code": "100180337",
  "inst_country_name": "United States",
  "cong_dist_code": "12",
  "st_cong_dist_code": "NY12",
  "org_lgl_bus_name": "LUCATA CORPORATION",
  "org_prnt_uei_num": "",
  "org_uei_num": "E93DWMZ4HQX8"
 },
 "perf_inst": {
  "perf_inst_name": "LUCATA CORPORATION",
  "perf_str_addr": "270 West 39th st unit 1302",
  "perf_city_name": "New York",
  "perf_st_code": "NY",
  "perf_st_name": "New York",
  "perf_zip_code": "100180337",
  "perf_ctry_code": "US",
  "perf_cong_dist": "12",
  "perf_st_cong_dist": "NY12",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "537100",
   "pgm_ele_name": "SBIR Phase I"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7942",
   "pgm_ref_txt": "HIGH-PERFORMANCE COMPUTING"
  }
 ],
 "app_fund": [
  {
   "app_code": "0121",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2021,
   "fund_oblg_amt": 255916.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Current state of the art Graph Databases generally do not permit the database to be queried while updates are underway. This restriction is to avoid delivery of incorrect results in the event that the query accesses some portions of the graph from before the Update and other parts from after the update. The restriction is implemented by setting a lock bit on the entire database before beginning Updates. Use of this approach typically results in a requirement that updates to the database be scheduled at a specific time of day, and that the database is unavailable for queries during that time.</p>\r\n<p>For this discussion, a <em>Query</em> is an access to the database that does not change its state, and an <em>Update</em>&nbsp;is an access that adds, removes, or modifies the contents of the database.</p>\r\n<p>The SBIR Research is aimed at studying a method whereby Updates and Queries can progress simultaneously, with individual queries that collide with the specific records being updated being held off until the update completes, while all other queries proceed unimpeded.&nbsp; Use of this approach allows both Queries and Updates to go on continuously throughout the day without the two interfering with each other.</p>\r\n<p>This method requires that individual <em>lock bits</em> are added to each <em>node</em>&nbsp;of the graph (The records in graph databases are generally referred to as <em>nodes</em>.). Since nodes in a graph database typically contain hundreds or thousands of bytes of data, and lock bits only add a single byte, the size of the database grows by less than 1% from the addition of these lock bits. It should be noted that use of these \"fine-grain locks\" requires that the computer executing the data base be capable of efficiently performing <em>atomic read-modify-write operations</em>&nbsp;on arbitrary memory locations. The <strong>Lucata Pathinder </strong>is an example of a computer that has this capability.</p>\r\n<p>Updates are performed as follows:</p>\r\n<ol>\r\n<li>A&nbsp;<em>simulated update </em>is performed that does not make any changes. The simulated update simply a list of nodes that require modification.&nbsp;</li>\r\n<li>The nodes in the list are locked in order of their node numbers. If any node is already locked (by another update in progress) the updating thread busy-waits until that node is unlocked before proceeding.</li>\r\n<li>The Update is performed.</li>\r\n<li>The nodes are unlocked in the same order that they were locked.</li>\r\n</ol>\r\n<p>Queries proceed unimpeded provided they do no encounter any locked nodes. Since the database includes millions (or more) nodes, and most Queries and Updates each only access a handful of nodes, the probability of a query encountering a locked node is tiny. If a Query does encounter a locked node, it is placed in the back of the queue of Queries to be performed so that other queries can proceed. In this way, the vast majority of queries complete in the same time as they would without the presence of Updates, and overall performance of the system is minimally impacted by the Updates.&nbsp;</p>\r\n<p>As this was a Phase 1 SBIR, the goal of this phase was merely to demonstrate the ability to perform the required operations, not to implement a fully functional database. A library of functions was created that perform the following functions:</p>\r\n<ul>\r\n<li>locking and unclocking&nbsp;of collections of nodes</li>\r\n<li>detect locked nodes during queries&nbsp;</li>\r\n<li>perform simulated updates / create update list</li>\r\n</ul>\r\n<p>These functions were shown to work as planned, thus establishing feasibility of the approach.</p><br>\n<p>\n Last Modified: 12/02/2024<br>\nModified by: Martin&nbsp;M&nbsp;Deneroff</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nCurrent state of the art Graph Databases generally do not permit the database to be queried while updates are underway. This restriction is to avoid delivery of incorrect results in the event that the query accesses some portions of the graph from before the Update and other parts from after the update. The restriction is implemented by setting a lock bit on the entire database before beginning Updates. Use of this approach typically results in a requirement that updates to the database be scheduled at a specific time of day, and that the database is unavailable for queries during that time.\r\n\n\nFor this discussion, a Query is an access to the database that does not change its state, and an Updateis an access that adds, removes, or modifies the contents of the database.\r\n\n\nThe SBIR Research is aimed at studying a method whereby Updates and Queries can progress simultaneously, with individual queries that collide with the specific records being updated being held off until the update completes, while all other queries proceed unimpeded. Use of this approach allows both Queries and Updates to go on continuously throughout the day without the two interfering with each other.\r\n\n\nThis method requires that individual lock bits are added to each nodeof the graph (The records in graph databases are generally referred to as nodes.). Since nodes in a graph database typically contain hundreds or thousands of bytes of data, and lock bits only add a single byte, the size of the database grows by less than 1% from the addition of these lock bits. It should be noted that use of these \"fine-grain locks\" requires that the computer executing the data base be capable of efficiently performing atomic read-modify-write operationson arbitrary memory locations. The Lucata Pathinder is an example of a computer that has this capability.\r\n\n\nUpdates are performed as follows:\r\n\r\nAsimulated update is performed that does not make any changes. The simulated update simply a list of nodes that require modification.\r\nThe nodes in the list are locked in order of their node numbers. If any node is already locked (by another update in progress) the updating thread busy-waits until that node is unlocked before proceeding.\r\nThe Update is performed.\r\nThe nodes are unlocked in the same order that they were locked.\r\n\r\n\n\nQueries proceed unimpeded provided they do no encounter any locked nodes. Since the database includes millions (or more) nodes, and most Queries and Updates each only access a handful of nodes, the probability of a query encountering a locked node is tiny. If a Query does encounter a locked node, it is placed in the back of the queue of Queries to be performed so that other queries can proceed. In this way, the vast majority of queries complete in the same time as they would without the presence of Updates, and overall performance of the system is minimally impacted by the Updates.\r\n\n\nAs this was a Phase 1 SBIR, the goal of this phase was merely to demonstrate the ability to perform the required operations, not to implement a fully functional database. A library of functions was created that perform the following functions:\r\n\r\nlocking and unclockingof collections of nodes\r\ndetect locked nodes during queries\r\nperform simulated updates / create update list\r\n\r\n\n\nThese functions were shown to work as planned, thus establishing feasibility of the approach.\t\t\t\t\tLast Modified: 12/02/2024\n\n\t\t\t\t\tSubmitted by: MartinMDeneroff\n"
 }
}