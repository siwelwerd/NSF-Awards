{
 "awd_id": "2051257",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SBIR Phase I:  Rendering Malware Benign",
 "cfda_num": "47.084",
 "org_code": "15030000",
 "po_phone": "7032928772",
 "po_email": "patherto@nsf.gov",
 "po_sign_block_name": "Peter Atherton",
 "awd_eff_date": "2021-06-15",
 "awd_exp_date": "2022-02-28",
 "tot_intn_awd_amt": 254421.0,
 "awd_amount": 254421.0,
 "awd_min_amd_letter_date": "2021-06-11",
 "awd_max_amd_letter_date": "2021-06-11",
 "awd_abstract_narration": "The broader impact of this Small Business Innovation Research (SBIR) Phase 1 project will result from providing organizations and software developers the best available protection against harmful malware and application flaws in completely standalone and air-gapped environments. In cybersecurity, applications are now the new perimeter and have become the last frontier in malware protection, which is where all current endpoint security products are routinely turned off or otherwise bypassed by attackers. The Phase 1 project focuses on stopping and/or detecting hidden malware regardless of how it gets into an application or how it changes its behavior inside an application. The Phase 1 project result overcomes the fundamental technical flaw in current solutions \u2013 attempting to enforce least privilege mechanisms from outside applications \u2013 by delivering a solution that operates within the application where it can see and act upon malicious code. The solution will protect individual data and corporate assets in all types of organizations, including organizations running operational technology vulnerable to cyberattacks. Wide adoption will boost application and endpoint security, significantly reducing the worldwide problem posed by the continuing rise in successful malware attacks.\r\n\r\nThis Small Business Innovation Research (SBIR) Phase I project seeks to address the core technical challenge associated with the development of an enforcement engine for implementing all current least privilege mechanisms on various operating systems inside  applications. The challenge is to construct both the algorithms and the engine to recognize and protect against modern malware misusing the dynamic code privileges of applications. As proof that this protection is needed is the near 100% incidence of all recent, successful malware attacks that were all designed to take advantage of this specific vulnerability of current antivirus software. The first and most immediate application of this new technology, which is the subject of the phase I project, is to define the use of dynamic code in each application as a privilege, learn if and where within its code an application uses this privilege, and enforce it once the behavior has been learned. The outcomes from Phase 1 will result in a software solution that can produce in real time a map of how any healthy program uses dynamic code and stop any attempt by malware to subvert that process.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "TIP",
 "org_dir_long_name": "Directorate for Technology, Innovation, and Partnerships",
 "div_abbr": "TI",
 "org_div_long_name": "Translational Impacts",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Homayoon",
   "pi_last_name": "Tajalli",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Homayoon Tajalli",
   "pi_email_addr": "tj@onsystemlogic.com",
   "nsf_id": "000828930",
   "pi_start_date": "2021-06-11",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "ONSYSTEM LOGIC, LLC",
  "inst_street_address": "8238 ACADEMY RD",
  "inst_street_address_2": "",
  "inst_city_name": "ELLICOTT CITY",
  "inst_state_code": "MD",
  "inst_state_name": "Maryland",
  "inst_phone_num": "4104949398",
  "inst_zip_code": "210435519",
  "inst_country_name": "United States",
  "cong_dist_code": "03",
  "st_cong_dist_code": "MD03",
  "org_lgl_bus_name": "ONSYSTEM LOGIC, LLC",
  "org_prnt_uei_num": "",
  "org_uei_num": "JZDWWLLEMBB4"
 },
 "perf_inst": {
  "perf_inst_name": "ONSYSTEM LOGIC, LLC",
  "perf_str_addr": "7587 Weather Worn Way Unit A",
  "perf_city_name": "Columbia",
  "perf_st_code": "MD",
  "perf_st_name": "Maryland",
  "perf_zip_code": "210462517",
  "perf_ctry_code": "US",
  "perf_cong_dist": "03",
  "perf_st_cong_dist": "MD03",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "537100",
   "pgm_ele_name": "SBIR Phase I"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "8027",
   "pgm_ref_txt": "Cyber Secur - Cyberinfrastruc"
  }
 ],
 "app_fund": [
  {
   "app_code": "0121",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2021,
   "fund_oblg_amt": 254421.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>&nbsp;</p>\n<p>Project Outcome Report</p>\n<p>Award Title:&nbsp; SBIR Phase I: Rendering Malware Benign</p>\n<p>Federal Award ID: 2051257</p>\n<p>Report Submission Period: 06/15/2021 to 02/28/2011</p>\n<p>&nbsp;</p>\n<p>The targeted broad impact of this Small Business Innovation Research (SBIR) Phase I project was to provide organizations and software developers the best available protection against harmful malware and applications. In cybersecurity, applications are now the new perimeter and have become the last frontier in malware protection, which is where all current endpoint security products are routinely turned off or otherwise bypassed by attackers. The Phase I project focused on stopping and/or detecting hidden malware regardless of how it entered into an application (0-day, unpatched, supply chain attack, etc.) or how it changed its behavior inside an application. The Phase I project result overcomes the fundamental technical flaw in current solutions ? attempting to enforce least privilege mechanisms from outside applications ? by delivering a solution that operates within the application where it can see and act upon unwanted behavior. The solution protects individual data and corporate assets in all types of organizations, including organizations running operational technology vulnerable to cyberattacks. Wide adoption can boost application and endpoint security, significantly reducing the worldwide problem posed by the continuing rise in successful malware attacks.</p>\n<p>The goal of the project was to build on previous research and development efforts that learned about internal code paths of applications for certain important operations under normal conditions and then enforced them during runtime. This was done without changes to the application, and without requiring a special version of the operating system or special hardware. We prevent the application from doing arbitrary operations on a system, stopping any damage before it can occur. The efficacy of this approach was proven in actual deployments and in a malware testing lab.&nbsp;</p>\n<p>To implement the above required controlling application code paths. This could only be done from inside of an application. The engine to do this needed to protect itself from the rest of the application and have negligible impact on the performance of the application. The rules learned about application code paths and enforced during the runtime needed to have extremely low false positive and false negative rates. This phase I research successfully studied and generally addressed these issues.&nbsp;</p>\n<p>We were able to understand, design for and address the technical challenges for the kernel driver development task early-on in the project and address them. We found automated backend processing of code path sequences more complex; but we were able to achieve our goals for this phase, though this is an area that needs additional research and development to improve the capabilities of the technology.</p>\n<p>The technology/product has proved the capability to choose an increasing number of resources inside applications and make sure they cannot be misused by attackers who seek to find a way to take control of an approved or benign looking application. We demonstrated both the soundness of the technical approach and its ability to be implemented in a product; and we operated it in several thousand customer systems without any adverse effects.&nbsp;</p>\n<p>Our current implementation supports Windows systems. Customers have requirements for Linux, mobile, container, and web application support (nonnative code). Given that our protection code runs inside of each application, supporting each of the above environments brings its own unique challenges for the driver, DLL, and backend processing. These are not trivial engineering tasks and our continuing research is focused on solving the challenges associated with them.</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 04/04/2022<br>\n\t\t\t\t\tModified by: Homayoon&nbsp;Tajalli</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n \n\nProject Outcome Report\n\nAward Title:  SBIR Phase I: Rendering Malware Benign\n\nFederal Award ID: 2051257\n\nReport Submission Period: 06/15/2021 to 02/28/2011\n\n \n\nThe targeted broad impact of this Small Business Innovation Research (SBIR) Phase I project was to provide organizations and software developers the best available protection against harmful malware and applications. In cybersecurity, applications are now the new perimeter and have become the last frontier in malware protection, which is where all current endpoint security products are routinely turned off or otherwise bypassed by attackers. The Phase I project focused on stopping and/or detecting hidden malware regardless of how it entered into an application (0-day, unpatched, supply chain attack, etc.) or how it changed its behavior inside an application. The Phase I project result overcomes the fundamental technical flaw in current solutions ? attempting to enforce least privilege mechanisms from outside applications ? by delivering a solution that operates within the application where it can see and act upon unwanted behavior. The solution protects individual data and corporate assets in all types of organizations, including organizations running operational technology vulnerable to cyberattacks. Wide adoption can boost application and endpoint security, significantly reducing the worldwide problem posed by the continuing rise in successful malware attacks.\n\nThe goal of the project was to build on previous research and development efforts that learned about internal code paths of applications for certain important operations under normal conditions and then enforced them during runtime. This was done without changes to the application, and without requiring a special version of the operating system or special hardware. We prevent the application from doing arbitrary operations on a system, stopping any damage before it can occur. The efficacy of this approach was proven in actual deployments and in a malware testing lab. \n\nTo implement the above required controlling application code paths. This could only be done from inside of an application. The engine to do this needed to protect itself from the rest of the application and have negligible impact on the performance of the application. The rules learned about application code paths and enforced during the runtime needed to have extremely low false positive and false negative rates. This phase I research successfully studied and generally addressed these issues. \n\nWe were able to understand, design for and address the technical challenges for the kernel driver development task early-on in the project and address them. We found automated backend processing of code path sequences more complex; but we were able to achieve our goals for this phase, though this is an area that needs additional research and development to improve the capabilities of the technology.\n\nThe technology/product has proved the capability to choose an increasing number of resources inside applications and make sure they cannot be misused by attackers who seek to find a way to take control of an approved or benign looking application. We demonstrated both the soundness of the technical approach and its ability to be implemented in a product; and we operated it in several thousand customer systems without any adverse effects. \n\nOur current implementation supports Windows systems. Customers have requirements for Linux, mobile, container, and web application support (nonnative code). Given that our protection code runs inside of each application, supporting each of the above environments brings its own unique challenges for the driver, DLL, and backend processing. These are not trivial engineering tasks and our continuing research is focused on solving the challenges associated with them.\n\n \n\n \n\n\t\t\t\t\tLast Modified: 04/04/2022\n\n\t\t\t\t\tSubmitted by: Homayoon Tajalli"
 }
}