{
 "awd_id": "2139612",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Predictable Performance for Just-in-Time Compilation",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2022-10-01",
 "awd_exp_date": "2025-09-30",
 "tot_intn_awd_amt": 499587.0,
 "awd_amount": 499587.0,
 "awd_min_amd_letter_date": "2022-05-25",
 "awd_max_amd_letter_date": "2022-05-25",
 "awd_abstract_narration": "Performance is serious business for a scientific programming language. Success in that niche hinges on fostering a rich ecosystem of highly-optimized mathematical libraries. The Julia language is predicated on the bet that its users can write efficient numerical code without having to resort to C or Fortran. Julia programmers strive to write code that will be compiled with predictable performance. In particular, they believe that, for performance-critical sections, the high-level abstractions provided by the language will melt into code equivalent (or close enough) to what one would have written in a performance language like C. There is an inherent tension between the need for predictable speed and the desire of developers to write generic and reusable high-level code. High-level code uses abstractions such as dynamic binding, generic types, and automatic memory management. Equipped with sufficient information about the expected behavior of a particular program, a compiler can indeed compile these abstractions down to efficient code.  Unfortunately, the kind of information needed for this is non-local, and it can be accrued either by whole-program static analysis or by feedback-directed speculative compilation. Either one is sensitive to small changes in the program. Programmers may thus not be able to predict how efficient their code will be without testing it extensively after each code change. To avoid this, the designers of Julia have included two novel features in their language design: world age and type stability. These features allow programmers to have greater confidence in their code, and are part of a dialogue between the compiler and programmers.  \r\n\r\nThis project's novelties are to formalize existing concepts in Julia  for predictable performance and to argue about their correctness. The project\u2019s impacts are a better understanding of the language that can be leveraged by programmers and tool-builders.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Jan",
   "pi_last_name": "Vitek",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Jan Vitek",
   "pi_email_addr": "j.vitek@neu.edu",
   "nsf_id": "000290862",
   "pi_start_date": "2022-05-25",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Northeastern University",
  "inst_street_address": "360 HUNTINGTON AVE",
  "inst_street_address_2": "",
  "inst_city_name": "BOSTON",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "6173735600",
  "inst_zip_code": "021155005",
  "inst_country_name": "United States",
  "cong_dist_code": "07",
  "st_cong_dist_code": "MA07",
  "org_lgl_bus_name": "NORTHEASTERN UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "HLTMVS2JZBS6"
 },
 "perf_inst": {
  "perf_inst_name": "Northeastern University",
  "perf_str_addr": "360 Huntington Ave",
  "perf_city_name": "Boston",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "021155005",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "MA07",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  }
 ],
 "app_fund": [
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01002223DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2022,
   "fund_oblg_amt": 499587.0
  }
 ],
 "por": null
}