{
 "awd_id": "2145394",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CAREER: Rethinking Toolchain Design for Rust",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2022-02-01",
 "awd_exp_date": "2027-01-31",
 "tot_intn_awd_amt": 550193.0,
 "awd_amount": 323154.0,
 "awd_min_amd_letter_date": "2022-01-27",
 "awd_max_amd_letter_date": "2025-02-24",
 "awd_abstract_narration": "As a young programing language, Rust features its safety and performance. The key innovation of Rust is to rule out memory bugs and concurrency bugs through strict safety checks during compilation, while keeping the runtime performance of its compiled programs as good as C programs. Rust's popularity is increasing significantly these years and has already been adopted to build many safety-critical software systems. Unfortunately, Rust is known to have a steep learning curve and its safety checks cannot capture all bugs. This project will address these limitations by improving Rust's programmability and strengthening its post-compilation testing. The completion of the project will advance the state of the art in Rust learning and programming and further secure the ecosystem of Rust. The project team will also use the work to design new courses on software security and programming languages and to explore novel approaches to teach new programming languages. \r\n \r\nThis project aims to enhance Rust's toolchain by answering two research questions. First, Rust's safety mechanism is unique, and the related grammar and semantics are different from traditional programming languages. Thus, programmers can easily write code violating Rust's safety checks and be rejected by the Rust compiler. How can one identify and resolve the programming difficulties incurred by the safety checks? Second, Rust leverages LLVM as its backend, and thus many existing dynamic techniques invented for C/C++ can be applied to Rust programs to capture bugs missed by the safety checks. How can one improve the efficiency and effectiveness of the existing techniques when reusing them to Rust programs?  Specifically, the project team will (1) identify programming challenges caused by the safety checks and resolve the challenges using novel visualization techniques, (2) improve the effectiveness of existing testing input generation techniques, (3) accelerate existing dynamic bug-detection and failure-diagnosis techniques,  and (4) build automated bug-fixing techniques for bugs detected by the safety checks and dynamic bug-detection techniques.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Former Principal Investigator",
   "pi_first_name": "Linhai",
   "pi_last_name": "Song",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Linhai Song",
   "pi_email_addr": "lus401@ist.psu.edu",
   "nsf_id": "000755117",
   "pi_start_date": "2022-01-27",
   "pi_end_date": "2025-02-24"
  },
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Hong",
   "pi_last_name": "Hu",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Hong Hu",
   "pi_email_addr": "hqh5357@psu.edu",
   "nsf_id": "000798080",
   "pi_start_date": "2025-02-24",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Pennsylvania State Univ University Park",
  "inst_street_address": "201 OLD MAIN",
  "inst_street_address_2": "",
  "inst_city_name": "UNIVERSITY PARK",
  "inst_state_code": "PA",
  "inst_state_name": "Pennsylvania",
  "inst_phone_num": "8148651372",
  "inst_zip_code": "168021503",
  "inst_country_name": "United States",
  "cong_dist_code": "15",
  "st_cong_dist_code": "PA15",
  "org_lgl_bus_name": "THE PENNSYLVANIA STATE UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "NPM2J7MSCF61"
 },
 "perf_inst": {
  "perf_inst_name": "Penn State University, College of IST",
  "perf_str_addr": "305H Steam Services Bldg",
  "perf_city_name": "University Park",
  "perf_st_code": "PA",
  "perf_st_name": "Pennsylvania",
  "perf_zip_code": "168021503",
  "perf_ctry_code": "US",
  "perf_cong_dist": "15",
  "perf_st_cong_dist": "PA15",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "1045",
   "pgm_ref_txt": "CAREER-Faculty Erly Career Dev"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  }
 ],
 "app_fund": [
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01002526DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01002425DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01002223DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01002627DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01002324DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2022,
   "fund_oblg_amt": 105467.0
  },
  {
   "fund_oblg_fiscal_yr": 2023,
   "fund_oblg_amt": 107697.0
  },
  {
   "fund_oblg_fiscal_yr": 2024,
   "fund_oblg_amt": 109990.0
  }
 ],
 "por": null
}