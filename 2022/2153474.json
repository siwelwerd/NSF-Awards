{
 "awd_id": "2153474",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CRII: SaTC: Towards Detecting and Mitigating Vulnerabilities",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2022-07-01",
 "awd_exp_date": "2024-08-31",
 "tot_intn_awd_amt": 174900.0,
 "awd_amount": 174900.0,
 "awd_min_amd_letter_date": "2022-01-18",
 "awd_max_amd_letter_date": "2022-01-18",
 "awd_abstract_narration": "This award is funded in whole or in part under the American Rescue Plan Act of 2021 (Public Law 117-2).\r\n\r\nNumerous real-world attacks exploit software vulnerabilities to compromise computer systems such as servers, desktops, smart phones, and Internet of Things (IoT) devices. Recent studies show that it is challenging to detect vulnerabilities accurately and patch vulnerabilities rapidly. State-of-the-art techniques can mitigate unpatched vulnerabilities effectively, but they usually sacrifice the availability of systems. The goal of this project is to improve vulnerability detection and mitigation. The project\u2019s novelties are two-fold. First, the project team is developing an approach to significantly increasing the accuracy of vulnerability detection. Second, the project team is developing an approach to substantially reducing the availability loss of vulnerability mitigation. The project's broader significance and importance are that 1) the approaches developed by the project can be used by other projects addressing vulnerabilities, 2) the outcome of the project can help the software industry in designing mechanisms to detect vulnerabilities and defend against vulnerability exploits; and 3) the project is tightly integrated with undergraduate-level and graduate-level curriculum development and student advising. A diverse group of undergraduate and graduate students are participating in the project and developing their interests and expertise in software security.\r\n\r\nThe project aims to develop an accurate vulnerability-detection technique and an unobtrusive vulnerability-mitigation technique. To improve the accuracy, the vulnerability-detection technique uses vulnerability conditions, each of which captures the intrinsic characteristics of a type of vulnerabilities, to detect vulnerabilities. To reduce the availability loss, the vulnerability-mitigation technique uses basic blocks and program paths as the granularity of vulnerability mitigation. The project consists of three key tasks: 1) designing a scheme for encoding vulnerability conditions, 2) developing a technique based on fuzzing to detect vulnerabilities using vulnerability conditions, and 3) developing a technique based on code-disabling to mitigates vulnerabilities at the granularity of basic blocks and program paths. The major contributions of the project include the design of the techniques, prototype implementations of the techniques, and an evaluation of the implementations with real-world vulnerabilities.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Zhen",
   "pi_last_name": "Huang",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Zhen Huang",
   "pi_email_addr": "zhen.huang@depaul.edu",
   "nsf_id": "000828075",
   "pi_start_date": "2022-01-18",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "DePaul University",
  "inst_street_address": "1 E JACKSON BLVD",
  "inst_street_address_2": "",
  "inst_city_name": "CHICAGO",
  "inst_state_code": "IL",
  "inst_state_name": "Illinois",
  "inst_phone_num": "3123627388",
  "inst_zip_code": "606042287",
  "inst_country_name": "United States",
  "cong_dist_code": "07",
  "st_cong_dist_code": "IL07",
  "org_lgl_bus_name": "DEPAUL UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "MNZ8KMRWTDB6"
 },
 "perf_inst": {
  "perf_inst_name": "DePaul University",
  "perf_str_addr": "Room 735, 243 S Wabash Ave",
  "perf_city_name": "Chicago",
  "perf_st_code": "IL",
  "perf_st_name": "Illinois",
  "perf_zip_code": "606042287",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "IL07",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "102Z",
   "pgm_ref_txt": "COVID-Disproportionate Impcts Inst-Indiv"
  },
  {
   "pgm_ref_code": "8228",
   "pgm_ref_txt": "CISE Resrch Initiatn Initiatve"
  },
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  }
 ],
 "app_fund": [
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "010V2122DB",
   "fund_name": "R&RA ARP Act DEFC V",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2022,
   "fund_oblg_amt": 174900.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Detecting and mitigating software vulnerabilities is crucial for cybersecurity as vulnerabilities allow attackers to compromise the security of computer systems, which are demonstrated by many real-world attacks including the 2023 MOVEIt data breach. Our research focused on automatically detecting vulnerabilities using efficient program analysis and machine learning, and mitigating vulnerabilities using fine-grained code debloating.</p>\r\n<p><br />First, we developed a dynamic program analysis technique for identifying vulnerabilities and a deep learning model for classifying vulnerability types. The dynamic program analysis technique is based on symbolic execution, a technique that executes a program with symbolic inputs. It aims to efficiently identify use-after-free (UAF) vulnerabilities, a type of complex memory bugs. To improve the efficiency, we identify and prune the program paths that are unlikely to trigger UAFs using typestate analysis and the program paths that are infeasible to trigger UAFs using control flow analysis. The typestate analysis models the operations leading to a UAF into a state transition graph so that we can identify the states that are unlikely to cause a UAF. The control flow analysis finds program paths that cannot reach UAF-relevant operations. By pruning these program paths, our dynamic program analysis can detect UAF vulnerabilities rapidly.</p>\r\n<p><br />To automatically classify vulnerability types, we extract tokens in program code that are relevant to vulnerabilities and trained deep neural network models with numerical vectors converted from these tokens. Our token extraction finds relevant tokens by following control dependency and data dependency in program code. Trained on a large dataset of both real-world programs and synthetic programs, our neural network models can accurately classify vulnerable code into 50 different common software weakness types (CWEs). This automated classification can help software testers to triage vulnerabilities and software developers to troubleshoot vulnerabilities.</p>\r\n<p>&nbsp;</p>\r\n<p>Second, we designed a recovery mechanism to enable programs to safely recover from exploitation of vulnerabilities and a code debloating technique to reduce the attack surface on vulnerabilities. Focusing on integer overflow vulnerabilities, our recovery mechanism uses data rectification and error containment to prevent the effect of integer overflows from causing other program faults. The recovery mechanism detects the occurrence of integer overflows and changes the overflowed values, based on the result of a Satisfiability Modulo Theory (SMT), to avoid further faults, while the error containment prevents the changed values from being propagated to persistent program data. Working together, they allow programs to continue normal execution after exploits trigger integer overflows.</p>\r\n<p><br />Our code debloating technique removes redundant program code in programs that support configurable features, which can be activated or deactivated by configuration options. It uses program analysis to identify code blocks that are dependent on the values of configuration options, and removes from programs the code blocks that will never be executed given the current values of configuration options. As prior studies have shown that the vast majority of users do not use most features supported by programs, removing the code blocks implementing these features will considerably reduce the risks of allowing attackers to exploit such code blocks.&nbsp;</p>\r\n<p><br />The techniques that we developed and the tools that we built to implement these techniques can detect and mitigate vulnerabilities, and thus improve software security in the real world. We imagine that they can also benefit other research projects and the software industry on addressing vulnerabilities. Besides providing direct societal benefits, this project supported the education and training of graduate and undergraduate students, and extended the cybersecurity curriculum at DePaul University.</p><br>\n<p>\n Last Modified: 03/23/2025<br>\nModified by: Zhen&nbsp;Huang</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nDetecting and mitigating software vulnerabilities is crucial for cybersecurity as vulnerabilities allow attackers to compromise the security of computer systems, which are demonstrated by many real-world attacks including the 2023 MOVEIt data breach. Our research focused on automatically detecting vulnerabilities using efficient program analysis and machine learning, and mitigating vulnerabilities using fine-grained code debloating.\r\n\n\n\nFirst, we developed a dynamic program analysis technique for identifying vulnerabilities and a deep learning model for classifying vulnerability types. The dynamic program analysis technique is based on symbolic execution, a technique that executes a program with symbolic inputs. It aims to efficiently identify use-after-free (UAF) vulnerabilities, a type of complex memory bugs. To improve the efficiency, we identify and prune the program paths that are unlikely to trigger UAFs using typestate analysis and the program paths that are infeasible to trigger UAFs using control flow analysis. The typestate analysis models the operations leading to a UAF into a state transition graph so that we can identify the states that are unlikely to cause a UAF. The control flow analysis finds program paths that cannot reach UAF-relevant operations. By pruning these program paths, our dynamic program analysis can detect UAF vulnerabilities rapidly.\r\n\n\n\nTo automatically classify vulnerability types, we extract tokens in program code that are relevant to vulnerabilities and trained deep neural network models with numerical vectors converted from these tokens. Our token extraction finds relevant tokens by following control dependency and data dependency in program code. Trained on a large dataset of both real-world programs and synthetic programs, our neural network models can accurately classify vulnerable code into 50 different common software weakness types (CWEs). This automated classification can help software testers to triage vulnerabilities and software developers to troubleshoot vulnerabilities.\r\n\n\n\r\n\n\nSecond, we designed a recovery mechanism to enable programs to safely recover from exploitation of vulnerabilities and a code debloating technique to reduce the attack surface on vulnerabilities. Focusing on integer overflow vulnerabilities, our recovery mechanism uses data rectification and error containment to prevent the effect of integer overflows from causing other program faults. The recovery mechanism detects the occurrence of integer overflows and changes the overflowed values, based on the result of a Satisfiability Modulo Theory (SMT), to avoid further faults, while the error containment prevents the changed values from being propagated to persistent program data. Working together, they allow programs to continue normal execution after exploits trigger integer overflows.\r\n\n\n\nOur code debloating technique removes redundant program code in programs that support configurable features, which can be activated or deactivated by configuration options. It uses program analysis to identify code blocks that are dependent on the values of configuration options, and removes from programs the code blocks that will never be executed given the current values of configuration options. As prior studies have shown that the vast majority of users do not use most features supported by programs, removing the code blocks implementing these features will considerably reduce the risks of allowing attackers to exploit such code blocks.\r\n\n\n\nThe techniques that we developed and the tools that we built to implement these techniques can detect and mitigate vulnerabilities, and thus improve software security in the real world. We imagine that they can also benefit other research projects and the software industry on addressing vulnerabilities. Besides providing direct societal benefits, this project supported the education and training of graduate and undergraduate students, and extended the cybersecurity curriculum at DePaul University.\t\t\t\t\tLast Modified: 03/23/2025\n\n\t\t\t\t\tSubmitted by: ZhenHuang\n"
 }
}