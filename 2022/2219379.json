{
 "awd_id": "2219379",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SaTC: CORE: Small: Towards Locating Memory Corruption Vulnerability with Core Dump",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2021-11-15",
 "awd_exp_date": "2022-07-31",
 "tot_intn_awd_amt": 499302.0,
 "awd_amount": 97869.0,
 "awd_min_amd_letter_date": "2022-04-14",
 "awd_max_amd_letter_date": "2022-04-14",
 "awd_abstract_narration": "Modern operating systems integrate various security mechanisms to prevent software faults from being exploited. To bypass defenses and hijack program execution, an attacker therefore needs to constantly mutate an exploit and make many attempts. While in their attempts, the exploit may terminate a running process abnormally, and leaves behind a snapshot of its crashing state in the form of a core dump. While a core dump carries a large amount of information, which has long been used for software debugging, it barely serves as informative debugging aids in locating software faults, particularly memory corruption vulnerabilities. \r\n\r\nThis research project aims to explore, design and develop lightweight, systematic and automated approaches that turn a core dump to an informative aid in tracking down memory corruption vulnerabilities. The proposed research has three key components. First, the project will develop a technical approach to improve the quality of information extracted from core dumps. Second, the project will explore a set of technical approaches to enhance this readily-available information. Last but not least, the project will develop a technical approach to automatically analyze enhanced core dumps and pinpoint the root cause of software crashes. This project will make an important step towards improving information available to developers and analysts debugging vulnerable software.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Xinyu",
   "pi_last_name": "Xing",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Xinyu Xing",
   "pi_email_addr": "xinyu.xing@northwestern.edu",
   "nsf_id": "000703517",
   "pi_start_date": "2022-04-14",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Northwestern University",
  "inst_street_address": "633 CLARK ST",
  "inst_street_address_2": "",
  "inst_city_name": "EVANSTON",
  "inst_state_code": "IL",
  "inst_state_name": "Illinois",
  "inst_phone_num": "3125037955",
  "inst_zip_code": "602080001",
  "inst_country_name": "United States",
  "cong_dist_code": "09",
  "st_cong_dist_code": "IL09",
  "org_lgl_bus_name": "NORTHWESTERN UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "EXZVPWZBLUE8"
 },
 "perf_inst": {
  "perf_inst_name": "Northwestern University at Chicago",
  "perf_str_addr": "750 N. Lake Shore Drive",
  "perf_city_name": "Chicago",
  "perf_st_code": "IL",
  "perf_st_name": "Illinois",
  "perf_zip_code": "606114579",
  "perf_ctry_code": "US",
  "perf_cong_dist": "05",
  "perf_st_cong_dist": "IL05",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "065Z",
   "pgm_ref_txt": "Human factors for security research"
  },
  {
   "pgm_ref_code": "7434",
   "pgm_ref_txt": "CNCI"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 97869.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Despite the best efforts of developers, software inevitably contains flaws that may be leveraged as security vulnerabilities. Modern operating systems integrate various security mechanisms to prevent software faults from being exploited. To bypass these defenses and hijack program execution, an attacker must mutate an exploit and make many attempts constantly. While in their endeavors, the exploit triggers a security vulnerability and terminates the running process abnormally.&nbsp;</p>\n<p>After a program has crashed and terminated abnormally, it typically leaves behind a snapshot of its crashing state in the form of a core dump. While a core dump carries a large amount of information, which has long been used for software debugging, it barely serves as informative debugging aids in locating software faults, particularly memory corruption vulnerabilities. As such, previous research mainly seeks full reproducible execution tracing to identify software vulnerabilities in crashes. However, such techniques are usually impractical for complex programs. Even for simple programs, the overhead of full tracing may only be accepted at the time of in-house testing.</p>\n<p>This research project explored, designed, and developed lightweight, systematic, and automated approaches that turn a core dump into an informative aid in tracking down memory corruption vulnerabilities. First, the PI developed a technical approach to improve the quality of information extracted from core dumps. Second, the PI designed and developed a set of technical approaches to automatically analyze enhanced core dumps and pinpoint the root cause of software crashes. The key techniques behind the automated core dump analysis include value-set analysis, reverse execution, and deep learning. The detailed technical solutions were published at four top-tier conferences and one top-tier journal. Part of the research outcome has been transferred to commercial products. The tools developed through this project are open-sourced on GitHub.</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 11/29/2022<br>\n\t\t\t\t\tModified by: Xinyu&nbsp;Xing</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nDespite the best efforts of developers, software inevitably contains flaws that may be leveraged as security vulnerabilities. Modern operating systems integrate various security mechanisms to prevent software faults from being exploited. To bypass these defenses and hijack program execution, an attacker must mutate an exploit and make many attempts constantly. While in their endeavors, the exploit triggers a security vulnerability and terminates the running process abnormally. \n\nAfter a program has crashed and terminated abnormally, it typically leaves behind a snapshot of its crashing state in the form of a core dump. While a core dump carries a large amount of information, which has long been used for software debugging, it barely serves as informative debugging aids in locating software faults, particularly memory corruption vulnerabilities. As such, previous research mainly seeks full reproducible execution tracing to identify software vulnerabilities in crashes. However, such techniques are usually impractical for complex programs. Even for simple programs, the overhead of full tracing may only be accepted at the time of in-house testing.\n\nThis research project explored, designed, and developed lightweight, systematic, and automated approaches that turn a core dump into an informative aid in tracking down memory corruption vulnerabilities. First, the PI developed a technical approach to improve the quality of information extracted from core dumps. Second, the PI designed and developed a set of technical approaches to automatically analyze enhanced core dumps and pinpoint the root cause of software crashes. The key techniques behind the automated core dump analysis include value-set analysis, reverse execution, and deep learning. The detailed technical solutions were published at four top-tier conferences and one top-tier journal. Part of the research outcome has been transferred to commercial products. The tools developed through this project are open-sourced on GitHub.\n\n \n\n\t\t\t\t\tLast Modified: 11/29/2022\n\n\t\t\t\t\tSubmitted by: Xinyu Xing"
 }
}