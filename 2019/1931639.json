{
 "awd_id": "1931639",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SaTC: CORE: Small: Finding and Mitigating Side-channel Leakage in Embedded Architectures",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032922594",
 "po_email": "kkaravan@nsf.gov",
 "po_sign_block_name": "Karen Karavanic",
 "awd_eff_date": "2019-10-01",
 "awd_exp_date": "2023-09-30",
 "tot_intn_awd_amt": 500000.0,
 "awd_amount": 500000.0,
 "awd_min_amd_letter_date": "2019-09-05",
 "awd_max_amd_letter_date": "2021-01-28",
 "awd_abstract_narration": "Electronic devices found in a smart home, automobile, airplane, medical, and industrial applications are becoming more capable of on-the-spot processing information with their own embedded processors. While embedded processors make life easier, they also open the door to theft or corruption of our sensitive data. Malign actors can monitor power or radiation signatures in and around a device, and discover its secrets using side-channel attacks. This research project will improve the embedded programmers' capability to write code with side-channel protection and provides tools to verify their code's side-channel resistance early in the design process.\r\n\r\nThe project will exploit the potential of bit-sliced code to achieve highly deterministic software execution on embedded platforms while facilitating automated insertion of countermeasures against side-channel attacks. This work will develop a process to reorder general-purpose code into bit-sliced form, where each bit of an instruction word is effectively processed independently. Next, Boolean countermeasures against power side-channel attacks will be inserted automatically into the code. Effectiveness of embedded countermeasures will be verified through a novel combination of side-channel leakage detection methodologies during simulation and target prototyping stages. Finally, a leakage mitigation algorithm will iteratively upgrade the bit-sliced code.\r\n\r\nThis research may lead to novel processor architectures and instruction sets for secure embedded applications, in an era where innate security is as important as performance and efficiency. The techniques will support existing processor architectures, and they are compatible with existing embedded design methodologies. Additionally, the methods will lead to the integration of side-channel aware design in the electronic design automation workflow, supporting the development of new and improved architectures. The results of this project will enhance graduate-level courses on cryptographic engineering and on hardware security. The project will also leverage industry collaborations to transfer results, and design tools. \r\n\r\nThe results of this project, including publications, code, and examples, will be hosted online at https://sites.google.com/view/bitslice-mitigation. After the completion of the project, the website will remain online as a reference repository.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Paul",
   "pi_last_name": "Ampadu",
   "pi_mid_init": "K",
   "pi_sufx_name": "",
   "pi_full_name": "Paul K Ampadu",
   "pi_email_addr": "ampadu@vt.edu",
   "nsf_id": "000492574",
   "pi_start_date": "2020-06-23",
   "pi_end_date": null
  },
  {
   "pi_role": "Former Principal Investigator",
   "pi_first_name": "Patrick",
   "pi_last_name": "Schaumont",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Patrick Schaumont",
   "pi_email_addr": "pschaumont@wpi.edu",
   "nsf_id": "000488021",
   "pi_start_date": "2019-09-05",
   "pi_end_date": "2020-06-23"
  },
  {
   "pi_role": "Former Co-Principal Investigator",
   "pi_first_name": "William",
   "pi_last_name": "Diehl",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "William Diehl",
   "pi_email_addr": "wdiehl@vt.edu",
   "nsf_id": "000799812",
   "pi_start_date": "2019-09-05",
   "pi_end_date": "2021-01-28"
  }
 ],
 "inst": {
  "inst_name": "Virginia Polytechnic Institute and State University",
  "inst_street_address": "300 TURNER ST NW",
  "inst_street_address_2": "STE 4200",
  "inst_city_name": "BLACKSBURG",
  "inst_state_code": "VA",
  "inst_state_name": "Virginia",
  "inst_phone_num": "5402315281",
  "inst_zip_code": "240603359",
  "inst_country_name": "United States",
  "cong_dist_code": "09",
  "st_cong_dist_code": "VA09",
  "org_lgl_bus_name": "VIRGINIA POLYTECHNIC INSTITUTE & STATE UNIVERSITY",
  "org_prnt_uei_num": "X6KEFGLHSJX7",
  "org_uei_num": "QDE5UHE5XD16"
 },
 "perf_inst": {
  "perf_inst_name": "Virginia Polytechnic Institute and State University",
  "perf_str_addr": "Durham Hall",
  "perf_city_name": "Blacksburg",
  "perf_st_code": "VA",
  "perf_st_name": "Virginia",
  "perf_zip_code": "240610001",
  "perf_ctry_code": "US",
  "perf_cong_dist": "09",
  "perf_st_cong_dist": "VA09",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 500000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>This project offers a methodology to help embedded software and hardware designers find and mitigate side-channel leakage early in the design process, through the automatic insertion of countermeasures. Side-channel leakage refers to information leakage (e.g., timing knowledge, power consumption, electromagnetic emissions) from a computer or communication device that can be exploited by an attacker to gain knowledge about the device's state.&nbsp;</p>\r\n<p>One challenge in understanding the root-cause of side-channel leakage is that this root-cause may exist at a design abstraction level that is different from that commonly handled by the designer. We created a technique to analyze the results from root-cause analysis of side-channel leakage in embedded architectures. In a concrete experiment, we studied how gate-level side-channel leakage in an embedded processor can be understood in terms of the programs running on that processor.&nbsp;</p>\r\n<p>To make embedded architectures resilient to side-channel attacks, there is a need for the early detection, prediction, and mitigation of side channel leakage through the insertion of countermeasures. This can be done manually by security experts (who may be limited in number), and the process can take a significant amount of time. Ideally, the automatic insertion of countermeasures is preferred. Nevertheless, automatic countermeasure insertion is hindered by the large variety of embedded software development languages and styles. Additionally, the many layers of abstraction between the physical source of leakage in hardware and the logical cause of leakage in software makes it difficult to identify the effectiveness of applied countermeasures.&nbsp;</p>\r\n<p>Our solution addresses these challenges as follows:<br />1. Generation of Bitslice Code: High level code (e.g., C-code) is synthesized into gate level logic for easier identification of bit-level executions, and then converted into bitslice C-code. Bitslice software representation allows for easy insertion of leakage mitigation because of the execution symmetry it enables. By matching cycle-time and power dissipation of parallel bitslices, we reduce vulnerability to side channel monitoring. The bit-level operations are converted into side-channel protected bitslice programs, by expanding individual bitslices into bitslice aggregate C-code.<br />2. Countermeasure Insertion: Leakage countermeasures, such as parallel Boolean masking and bounded moment leakage model, are inserted into the software using a random refresh bit.<br />3. Leakage Detection: To determine if the countermeasure was effective, a leakage score is determined for both software implementation and prototyped hardware implementation (representative of the physical device using reconfigurable hardware). If this score indicates very minimal or no leakage, the post silicon design process is started to create the physical device; otherwise, leakage mitigation is performed.&nbsp;<br />4. Leakage Mitigation: The bitslice C-code after bitslice expansion can be resliced, releveled, or remasked.&nbsp;Releveling involves relocating bitslice operations, if leakage is found to occur evenly across all slices. If leakage is confined to one or more slices and spread out over several clock cycles, data is redistributed to different slices through the reslicing process; this redistribution of sensitive data is done automatically. Remasking involves inserting random bits at different points in the code, in case the mitigation algorithm fails to classify the cause of leakage in the slices. We mitigate side-channel vulnerabilities by performing algorithmic resolution of leakage into time and spatial bit-sliced software components, with respect to an underlying computer architecture, and perform subsequent updates to the code using advanced techniques.</p>\r\n<p>Our automated design flow to discover and correct side-channel leakage early in the design process iteratively has been shown to significantly improve side-channel resistance of our countermeasure-protected bit-sliced code. Protected software modules for general-purpose cipher designs have been created, and the project has demonstrated the automatic insertion of countermeasures to manage side-channel attacks. Further, we have assessed the effectiveness of our approach through a novel composition of leakage detection methodologies, an open-source side-channel analysis test bench, and user-defined security goals.&nbsp;</p>\r\n<p>With the growth of multicore processing, we further proposed and evaluated distributed on-chip power supplies in mitigating power side-channel attacks. Compared to invasive attacks, power side-channel attacks are common because they&rsquo;re easy to carry out without detection. Our approach, based on single-input multiple-output distributed power supplies, utilizes runtime operation information from different workloads to decorrelate device operations from measurable power consumption profiles. We found that distributed power supplies improved device resilience against power side-channel attacks by at least 30%, compared with single power sources.</p>\r\n<p>The project has enabled partnerships with academic and industrial institutions (e.g., ADI, Riscure, WPI, etc.), and it has helped train a half-dozen doctoral and masters students in their dissertation and thesis research. Results have been disseminated through reputable conference presentations and journal publications (e.g., TVLSI, CHES, AsiaCCS, etc.). We have also incorporated our findings in our courses and lectures.</p><br>\n<p>\n Last Modified: 01/21/2025<br>\nModified by: Paul&nbsp;K&nbsp;Ampadu</p></div>\n<div class=\"porSideCol\"\n><div class=\"each-gallery\">\n<div class=\"galContent\" id=\"gallery0\">\n<div class=\"photoCount\" id=\"photoCount0\">\n\t\t\t\t\t\t\t\t\tImage\n\t\t\t\t\t\t\t\t</div>\n<div class=\"galControls onePhoto\" id=\"controls0\"></div>\n<div class=\"galSlideshow\" id=\"slideshow0\"></div>\n<div class=\"galEmbox\" id=\"embox\">\n<div class=\"image-title\"></div>\n</div>\n</div>\n<div class=\"galNavigation onePhoto\" id=\"navigation0\">\n<ul class=\"thumbs\" id=\"thumbs0\">\n<li>\n<a href=\"/por/images/Reports/POR/2025/1931639/1931639_10640252_1737476921792_Solution_Image_Bitslice--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2025/1931639/1931639_10640252_1737476921792_Solution_Image_Bitslice--rgov-800width.jpg\" title=\"Solution Image_Bitslice\"><img src=\"/por/images/Reports/POR/2025/1931639/1931639_10640252_1737476921792_Solution_Image_Bitslice--rgov-66x44.jpg\" alt=\"Solution Image_Bitslice\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Our solutions approach to mitigating side-channel leakage attacks</div>\n<div class=\"imageCredit\">Ampadu Lab</div>\n<div class=\"imagePermisssions\">Public Domain</div>\n<div class=\"imageSubmitted\">Paul&nbsp;K&nbsp;Ampadu\n<div class=\"imageTitle\">Solution Image_Bitslice</div>\n</div>\n</li></ul>\n</div>\n</div></div>\n</div>\n",
  "por_txt_cntn": "\n\nThis project offers a methodology to help embedded software and hardware designers find and mitigate side-channel leakage early in the design process, through the automatic insertion of countermeasures. Side-channel leakage refers to information leakage (e.g., timing knowledge, power consumption, electromagnetic emissions) from a computer or communication device that can be exploited by an attacker to gain knowledge about the device's state.\r\n\n\nOne challenge in understanding the root-cause of side-channel leakage is that this root-cause may exist at a design abstraction level that is different from that commonly handled by the designer. We created a technique to analyze the results from root-cause analysis of side-channel leakage in embedded architectures. In a concrete experiment, we studied how gate-level side-channel leakage in an embedded processor can be understood in terms of the programs running on that processor.\r\n\n\nTo make embedded architectures resilient to side-channel attacks, there is a need for the early detection, prediction, and mitigation of side channel leakage through the insertion of countermeasures. This can be done manually by security experts (who may be limited in number), and the process can take a significant amount of time. Ideally, the automatic insertion of countermeasures is preferred. Nevertheless, automatic countermeasure insertion is hindered by the large variety of embedded software development languages and styles. Additionally, the many layers of abstraction between the physical source of leakage in hardware and the logical cause of leakage in software makes it difficult to identify the effectiveness of applied countermeasures.\r\n\n\nOur solution addresses these challenges as follows:\n1. Generation of Bitslice Code: High level code (e.g., C-code) is synthesized into gate level logic for easier identification of bit-level executions, and then converted into bitslice C-code. Bitslice software representation allows for easy insertion of leakage mitigation because of the execution symmetry it enables. By matching cycle-time and power dissipation of parallel bitslices, we reduce vulnerability to side channel monitoring. The bit-level operations are converted into side-channel protected bitslice programs, by expanding individual bitslices into bitslice aggregate C-code.\n2. Countermeasure Insertion: Leakage countermeasures, such as parallel Boolean masking and bounded moment leakage model, are inserted into the software using a random refresh bit.\n3. Leakage Detection: To determine if the countermeasure was effective, a leakage score is determined for both software implementation and prototyped hardware implementation (representative of the physical device using reconfigurable hardware). If this score indicates very minimal or no leakage, the post silicon design process is started to create the physical device; otherwise, leakage mitigation is performed.\n4. Leakage Mitigation: The bitslice C-code after bitslice expansion can be resliced, releveled, or remasked.Releveling involves relocating bitslice operations, if leakage is found to occur evenly across all slices. If leakage is confined to one or more slices and spread out over several clock cycles, data is redistributed to different slices through the reslicing process; this redistribution of sensitive data is done automatically. Remasking involves inserting random bits at different points in the code, in case the mitigation algorithm fails to classify the cause of leakage in the slices. We mitigate side-channel vulnerabilities by performing algorithmic resolution of leakage into time and spatial bit-sliced software components, with respect to an underlying computer architecture, and perform subsequent updates to the code using advanced techniques.\r\n\n\nOur automated design flow to discover and correct side-channel leakage early in the design process iteratively has been shown to significantly improve side-channel resistance of our countermeasure-protected bit-sliced code. Protected software modules for general-purpose cipher designs have been created, and the project has demonstrated the automatic insertion of countermeasures to manage side-channel attacks. Further, we have assessed the effectiveness of our approach through a novel composition of leakage detection methodologies, an open-source side-channel analysis test bench, and user-defined security goals.\r\n\n\nWith the growth of multicore processing, we further proposed and evaluated distributed on-chip power supplies in mitigating power side-channel attacks. Compared to invasive attacks, power side-channel attacks are common because theyre easy to carry out without detection. Our approach, based on single-input multiple-output distributed power supplies, utilizes runtime operation information from different workloads to decorrelate device operations from measurable power consumption profiles. We found that distributed power supplies improved device resilience against power side-channel attacks by at least 30%, compared with single power sources.\r\n\n\nThe project has enabled partnerships with academic and industrial institutions (e.g., ADI, Riscure, WPI, etc.), and it has helped train a half-dozen doctoral and masters students in their dissertation and thesis research. Results have been disseminated through reputable conference presentations and journal publications (e.g., TVLSI, CHES, AsiaCCS, etc.). We have also incorporated our findings in our courses and lectures.\t\t\t\t\tLast Modified: 01/21/2025\n\n\t\t\t\t\tSubmitted by: PaulKAmpadu\n"
 }
}