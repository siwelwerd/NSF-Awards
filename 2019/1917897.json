{
 "awd_id": "1917897",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "FMitF: Track II: Automated Verification for Assembly Implementations of Cryptography Libraries",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2019-08-01",
 "awd_exp_date": "2022-01-31",
 "tot_intn_awd_amt": 99996.0,
 "awd_amount": 99996.0,
 "awd_min_amd_letter_date": "2019-07-23",
 "awd_max_amd_letter_date": "2019-07-23",
 "awd_abstract_narration": "Mainstream libraries for cryptography, like OpenSSL and BoringSSL, contain several thousand lines of manually optimized assembly code for high performance. Bugs in these systems are unfortunately somewhat common. This project develops techniques and a tool, CASM-Verify, to automatically check the equivalence of highly optimized assembly implementations of cryptographic algorithms against unoptimized reference versions of these algorithms in order to ensure that bugs are not introduced during the optimization process. The project's novelty is in decomposing the equivalence checking problem into several small sub-problems using a combination of concrete and symbolic evaluation. The project aims to improve the assurance of widely used cryptography libraries with usable equivalence checking tools. The project also will educate graduate and undergraduate students and practitioners on various formal tools and techniques.\r\n\r\nThe software developed as part of this project takes a given a reference and an optimized implementation, and  concretely execute the two implementations on randomly generated inputs and identifies likely equivalent variables. Subsequently, it uses symbolic verification using satisfiability modulo theory solvers to determine whether the identified variables are indeed equivalent. Further, it decomposes the original query into small sub-queries using a collection of optimizations for memory accesses.  To enable the usage of these ideas by mainstream developers, this project explores the following directions: (1) support Qhasm and Jasmin languages for high-speed cryptography, (2) support reasoning about large integer arithmetic, and (3) verify constant-time properties of assembly implementations.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Santosh",
   "pi_last_name": "Nagarakatte",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Santosh Nagarakatte",
   "pi_email_addr": "santosh.nagarakatte@rutgers.edu",
   "nsf_id": "000630570",
   "pi_start_date": "2019-07-23",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Rutgers University New Brunswick",
  "inst_street_address": "3 RUTGERS PLZ",
  "inst_street_address_2": "",
  "inst_city_name": "NEW BRUNSWICK",
  "inst_state_code": "NJ",
  "inst_state_name": "New Jersey",
  "inst_phone_num": "8489320150",
  "inst_zip_code": "089018559",
  "inst_country_name": "United States",
  "cong_dist_code": "12",
  "st_cong_dist_code": "NJ12",
  "org_lgl_bus_name": "RUTGERS, THE STATE UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "M1LVPE5GLSD9"
 },
 "perf_inst": {
  "perf_inst_name": "Rutgers University",
  "perf_str_addr": "110 Frelinghuysen Road",
  "perf_city_name": "Piscataway",
  "perf_st_code": "NJ",
  "perf_st_name": "New Jersey",
  "perf_zip_code": "088548072",
  "perf_ctry_code": "US",
  "perf_cong_dist": "06",
  "perf_st_cong_dist": "NJ06",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "094Y00",
   "pgm_ele_name": "FMitF: Formal Methods in the F"
  },
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "062Z",
   "pgm_ref_txt": "Harnessing the Data Revolution"
  },
  {
   "pgm_ref_code": "8206",
   "pgm_ref_txt": "Formal Methods and Verification"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 99996.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The goal of this project is to improve our tool, CASM-Verify, to enable equivalence checking of highly optimized assembly implementations of cryptography algorithms. We improved the prototype of CASM-Verify with bug-fixes. We explored new methods for specifications. We explored using hacspec, a specification language in Rust. We also explored initial methods to check constant-time properties of assembly implementations.</p>\n<p><br />The source code of CASM-Verify is publicly available with a FreeBSDlicense at https://github.com/rutgers-apl/CASM-Verify</p>\n<p>We organized a session on \"Real world Equivalence Checking\" at the High-Assurance Cryptography Workshop in April 2021 to increase the adoption of various equivalence checking tools.</p>\n<p>This project trained one PhD student (Jay Lim) and one undergraduates tudent (Matan Shachnai) on tools and techniques for equivalence checking.</p>\n<p><br />During this project, we realized that the idea of splitting a large equivalence checking problem into small sub-problems using a combination of both concrete and symbolic execution is applicable in many other contexts. Specifically, we used similar ideas in the context of shadow execution for detecting numerical errors with floating point programs and implementation of polynomial approximations for math libraries.</p>\n<p>Overall, our research findings and prototypes advance the field of equivalence checking in general and specifically in the context of implementations of cryptography libraries.&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 04/23/2022<br>\n\t\t\t\t\tModified by: Santosh&nbsp;Nagarakatte</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThe goal of this project is to improve our tool, CASM-Verify, to enable equivalence checking of highly optimized assembly implementations of cryptography algorithms. We improved the prototype of CASM-Verify with bug-fixes. We explored new methods for specifications. We explored using hacspec, a specification language in Rust. We also explored initial methods to check constant-time properties of assembly implementations.\n\n\nThe source code of CASM-Verify is publicly available with a FreeBSDlicense at https://github.com/rutgers-apl/CASM-Verify\n\nWe organized a session on \"Real world Equivalence Checking\" at the High-Assurance Cryptography Workshop in April 2021 to increase the adoption of various equivalence checking tools.\n\nThis project trained one PhD student (Jay Lim) and one undergraduates tudent (Matan Shachnai) on tools and techniques for equivalence checking.\n\n\nDuring this project, we realized that the idea of splitting a large equivalence checking problem into small sub-problems using a combination of both concrete and symbolic execution is applicable in many other contexts. Specifically, we used similar ideas in the context of shadow execution for detecting numerical errors with floating point programs and implementation of polynomial approximations for math libraries.\n\nOverall, our research findings and prototypes advance the field of equivalence checking in general and specifically in the context of implementations of cryptography libraries. \n\n\t\t\t\t\tLast Modified: 04/23/2022\n\n\t\t\t\t\tSubmitted by: Santosh Nagarakatte"
 }
}