{
 "awd_id": "1918573",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "FMitF: Collaborative Research: Track I: Finding and Eliminating Bugs in Operating Systems",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032922585",
 "po_email": "pprabhak@nsf.gov",
 "po_sign_block_name": "Pavithra Prabhakar",
 "awd_eff_date": "2019-07-01",
 "awd_exp_date": "2023-06-30",
 "tot_intn_awd_amt": 500000.0,
 "awd_amount": 516000.0,
 "awd_min_amd_letter_date": "2019-06-19",
 "awd_max_amd_letter_date": "2020-06-02",
 "awd_abstract_narration": "Operating systems are both huge -- tens of millions of lines of code -- and hugely important -- they manage resources and provide services to the applications that run society. Like all software, operating systems contain bugs. Unfortunately, bugs in such foundational systems can have catastrophic consequences, from large-scale data leaks to complete machine takeovers by malicious agents. The team of researchers develops new tools that can be used to find and eliminate such bugs before a system is deployed, when the bugs can compromise performance, reliability, and security. The project's novelties are foundational techniques, languages, and algorithms that empower software developers to describe buggy patterns that allow automated tools to scale and find bugs in many millions of lines of code. The project's impacts will be in improving the robustness, reliability, and security of real-world operating systems.\r\n    \r\nExisting approaches to bug finding either are precise or scale to large systems but not both. This project reconciles scalability and precision with a key insight: that system-specific extensibility will allow developers to extend core algorithms to check for properties and patterns that are important to their particular systems in a way that scales to large code bases. To this end, the researchers develop new symbolic-execution-based methods that are extensible, precise and scalable, thereby allowing developers to easily customize extensions to focus on likely error patterns while allowing them to swiftly ignore many millions of lines of irrelevant code. The speed, precision and scalability in turn allows developers to directly integrate the project's tools into their software-development cycle to eliminate bugs well before deployment.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Deian",
   "pi_last_name": "Stefan",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Deian Stefan",
   "pi_email_addr": "deian@cs.ucsd.edu",
   "nsf_id": "000764590",
   "pi_start_date": "2019-06-19",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Ranjit",
   "pi_last_name": "Jhala",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Ranjit Jhala",
   "pi_email_addr": "jhala@cs.ucsd.edu",
   "nsf_id": "000486287",
   "pi_start_date": "2019-06-19",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of California-San Diego",
  "inst_street_address": "9500 GILMAN DR",
  "inst_street_address_2": "",
  "inst_city_name": "LA JOLLA",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "8585344896",
  "inst_zip_code": "920930021",
  "inst_country_name": "United States",
  "cong_dist_code": "50",
  "st_cong_dist_code": "CA50",
  "org_lgl_bus_name": "UNIVERSITY OF CALIFORNIA, SAN DIEGO",
  "org_prnt_uei_num": "",
  "org_uei_num": "UYTTZT6G9DT1"
 },
 "perf_inst": {
  "perf_inst_name": "University of California-San Diego",
  "perf_str_addr": "",
  "perf_city_name": "La Jolla",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "920930934",
  "perf_ctry_code": "US",
  "perf_cong_dist": "50",
  "perf_st_cong_dist": "CA50",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "094Y00",
   "pgm_ele_name": "FMitF: Formal Methods in the F"
  },
  {
   "pgm_ele_code": "287800",
   "pgm_ele_name": "Special Projects - CCF"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "062Z",
   "pgm_ref_txt": "Harnessing the Data Revolution"
  },
  {
   "pgm_ref_code": "8206",
   "pgm_ref_txt": "Formal Methods and Verification"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 500000.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 16000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><pre class=\"c-mrkdwn__pre\">This project developed new techniques and tools, rooted in formal methods, that allow developers to find and eliminate bugs from operating systems and browsers.  Operating systems and browsers are both huge&mdash;tens of millions of lines of code&mdash;and hugely important&mdash;they manage resources and provide services to the applications that run society. But, like all software, operating systems and browsers contain bugs&mdash;and bugs in such foundational systems have catastrophic consequences. The Shellshock vulnerabilities in the Bash OS shell, for example, allowed attackers to perform remote code execution on affected machines; the Mutagen Astronomy vulnerability in the Linux OS kernel allowed local users to gain root privileges.\n\nDespite significant efforts, many serious bugs in OSes and browsers remain undiscovered for years, sometimes until they are exploited by attackers. For example, a bug in the Firefox browser was discovered only after it was used by attackers to target employees of Coinbase. Over the last five years, groups like Google's Threat Analysis Group identified websites that directly targeted both high-profile individuals and vulnerable classes of people by, again, exploiting \"zero-day\" security bugs in browsers.\n\nThe researchers developed new techniques and tools to bridge this gap. Sys, for example, is the first symbolic execution tool to successfully run and find bugs in huge browser code. The researchers found 51 security bugs in the Chrome and Firefox web browsers and the FreeBSD and Tizen operating systems with Sys. This work alone led to (1) patches and security improvements in multiple browsers and operating systems, in direct response to the team's reports, (2) security audits at both Google and Mozilla and (3) use of Sys at several companies, including Cisco and Samsung. The novel symbolic execution techniques that underlie Sys have been adopted by many other research groups, including high-profile Pwn2Own teams and security teams at Google, to similarly find bugs in operating system binaries and kernels &mdash; bugs that would otherwise have put users and their data at risk.\n\nThe researchers also developed new program analysis techniques, rooted in formal methods, for finding and eliminating Spectre vulnerabilities which directly impact the security of both browsers and operating systems.  One of the direct outcomes from this work is a formal model that has informed the design of multiple bug-finding tools (e.g., counterintuitively, the model shows that tools using more abstract (and thus faster to execute) analyses find the same classes of Spectre bugs as more precise tools &mdash; with lower false positive rates). One of these tools, developed by the researchers, found multiple classes of Spectre vulnerabilities in programs produced by existing compilers &mdash; and, in response to this, the team developed new compilation techniques, Swivel, can be used to build browser and operating system abstractions that are not vulnerable to Spectre attacks.\n\nOverall the tools and techniques developed in this project have the potential to help developers improve existing systems and build new systems and applications that are robust and secure by construction.  The hundreds of millions of end-users that use applications built atop operating systems (e.g., FreeBSD, ChromeOS, and Tizen), runtime systems (e.g., the Wasmtime runtime system, and Firefox JavaScript engine), and browsers (e.g., Firefox and Chrome) are the ultimate beneficiaries though: the team's tools have directly improved the robustness, reliability, and security of the software infrastructure that manages their devices and data.</pre>\n<p>&nbsp;</p><br>\n<p>\n Last Modified: 07/21/2024<br>\nModified by: Deian&nbsp;Stefan</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nThis project developed new techniques and tools, rooted in formal methods, that allow developers to find and eliminate bugs from operating systems and browsers.  Operating systems and browsers are both hugetens of millions of lines of codeand hugely importantthey manage resources and provide services to the applications that run society. But, like all software, operating systems and browsers contain bugsand bugs in such foundational systems have catastrophic consequences. The Shellshock vulnerabilities in the Bash OS shell, for example, allowed attackers to perform remote code execution on affected machines; the Mutagen Astronomy vulnerability in the Linux OS kernel allowed local users to gain root privileges.\n\nDespite significant efforts, many serious bugs in OSes and browsers remain undiscovered for years, sometimes until they are exploited by attackers. For example, a bug in the Firefox browser was discovered only after it was used by attackers to target employees of Coinbase. Over the last five years, groups like Google's Threat Analysis Group identified websites that directly targeted both high-profile individuals and vulnerable classes of people by, again, exploiting \"zero-day\" security bugs in browsers.\n\nThe researchers developed new techniques and tools to bridge this gap. Sys, for example, is the first symbolic execution tool to successfully run and find bugs in huge browser code. The researchers found 51 security bugs in the Chrome and Firefox web browsers and the FreeBSD and Tizen operating systems with Sys. This work alone led to (1) patches and security improvements in multiple browsers and operating systems, in direct response to the team's reports, (2) security audits at both Google and Mozilla and (3) use of Sys at several companies, including Cisco and Samsung. The novel symbolic execution techniques that underlie Sys have been adopted by many other research groups, including high-profile Pwn2Own teams and security teams at Google, to similarly find bugs in operating system binaries and kernels  bugs that would otherwise have put users and their data at risk.\n\nThe researchers also developed new program analysis techniques, rooted in formal methods, for finding and eliminating Spectre vulnerabilities which directly impact the security of both browsers and operating systems.  One of the direct outcomes from this work is a formal model that has informed the design of multiple bug-finding tools (e.g., counterintuitively, the model shows that tools using more abstract (and thus faster to execute) analyses find the same classes of Spectre bugs as more precise tools  with lower false positive rates). One of these tools, developed by the researchers, found multiple classes of Spectre vulnerabilities in programs produced by existing compilers  and, in response to this, the team developed new compilation techniques, Swivel, can be used to build browser and operating system abstractions that are not vulnerable to Spectre attacks.\n\nOverall the tools and techniques developed in this project have the potential to help developers improve existing systems and build new systems and applications that are robust and secure by construction.  The hundreds of millions of end-users that use applications built atop operating systems (e.g., FreeBSD, ChromeOS, and Tizen), runtime systems (e.g., the Wasmtime runtime system, and Firefox JavaScript engine), and browsers (e.g., Firefox and Chrome) are the ultimate beneficiaries though: the team's tools have directly improved the robustness, reliability, and security of the software infrastructure that manages their devices and data.\n\n\n\t\t\t\t\tLast Modified: 07/21/2024\n\n\t\t\t\t\tSubmitted by: DeianStefan\n"
 }
}