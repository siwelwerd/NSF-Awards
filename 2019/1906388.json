{
 "awd_id": "1906388",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF:Small:RUI: Semantic Complexity of Advanced Data Types",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2019-10-01",
 "awd_exp_date": "2024-09-30",
 "tot_intn_awd_amt": 510823.0,
 "awd_amount": 510823.0,
 "awd_min_amd_letter_date": "2019-06-27",
 "awd_max_amd_letter_date": "2019-06-27",
 "awd_abstract_narration": "Testing of programs has dominated the last 50 years of software development, but the next 50 will see an increased demand for provably correct software. This is partly because modern applications are increasingly safety critical, partly because testing is by its very nature only a partial correctness guarantee, and partly because programming language technology is now at the stage where it is feasible to formally verify critical programs. Language-based verification uses a programming language's type system to help guarantee program correctness: the more program properties a type system can express, the more the compiler can automatically verify. Advanced data types such as Generalized Algebraic Data Types (GADTs) help close the so-called \"semantic gap\" between what programmers know about programs involving them and what a type system can express about those programs. The key observation underlying this project is that GADTs and other advanced data types are underspecified by their syntax, which often leads to them being used in unjustified ways that undermine their promise for verification. The project's novelty is a fully semantic response to this observation, embodied by the entirely novel notion of the functorial completion of a data type. This notion of functorial completion leads directly to the project's overall impact, which is to change the way programmers understand, and thus program with, GADTs and other advanced data types.\r\n\r\nThe project shows that the way that even ordinary GADTs are currently understood is not formally justifiable and leads to unsafe programming practices, with the obvious consequences for verification, security, and reliability of software systems. It gives a grammar that generates a very general class of GADTs and other advanced data types, and uses the new notion of the functorial completion of a data type to give the data types generated by this grammar the same kind of semantics that has long been the cornerstone of the theory of standard algebraic data types. This ensures that data types generated by the grammar can be used with semantic and computational confidence. Furthermore it allows the data types to be classified according to semantic complexity--a novel notion introduced in this project--that helps programmers better understand a data type's semantic and computational properties. Finally, the project gives a framework for constructing parametric models for polymorphic languages supporting the advanced data types generated by the grammar. This framework is principled, conceptually simple, uniform, comprehensive, and predictive. It is constructed specifically to validate the semantics of the GADTs and other advanced data types generated by the grammar, and the constructs that are derived in a standard way from such semantics.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Patricia",
   "pi_last_name": "Johann",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Patricia Johann",
   "pi_email_addr": "johannp@appstate.edu",
   "nsf_id": "000659322",
   "pi_start_date": "2019-06-27",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Appalachian State University",
  "inst_street_address": "438 ACADEMY ST",
  "inst_street_address_2": "",
  "inst_city_name": "BOONE",
  "inst_state_code": "NC",
  "inst_state_name": "North Carolina",
  "inst_phone_num": "8282627459",
  "inst_zip_code": "286080001",
  "inst_country_name": "United States",
  "cong_dist_code": "05",
  "st_cong_dist_code": "NC05",
  "org_lgl_bus_name": "APPALACHIAN STATE UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "F1NAKY5L1425"
 },
 "perf_inst": {
  "perf_inst_name": "Appalachian State University",
  "perf_str_addr": "P.O. Box 32174",
  "perf_city_name": "Boone",
  "perf_st_code": "NC",
  "perf_st_name": "North Carolina",
  "perf_zip_code": "286082174",
  "perf_ctry_code": "US",
  "perf_cong_dist": "05",
  "perf_st_cong_dist": "NC05",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  },
  {
   "pgm_ref_code": "9102",
   "pgm_ref_txt": "WOMEN, MINORITY, DISABLED, NEC"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 510823.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Generalized algebraic data types (GADTs) and other advanced data types provide a key technology for language-based program verification that uses the extra information present in a data type's indices to detect more program errors and provide greater correctness guarantees than is possible with only algebraic data types (ADTs) and their (syntactic and semantic)&nbsp;generalization known as nested types. Syntactically, GADTs generalize nested types (and thus ADTs). The goal of this project was to understand GADTs as a semantic generalization of nested types (and thus ADTs) as well. Specifically, it sought (i) to find/develop the same kind of functorial initial algebra semantics that nested types have (and one that specializes to the standard initial algebra semantics for nested types); (ii) to use such semantics to classify GADTs according to what their so-called \"semantic complexity\" (i.e.,the smallest presentability cardinal associated with the semantic categories in which they are known to be well-defined); (iii) to construct parametric models for polymorphic languages supporting GADTs; and (iv) to develop principled tools that improve practical programming and verification based on GADTs.</p>\n<p>The main outcomes of this project were three-fold. First, a robust family of nested types (including all those appearing in the literature) was first defined, the semantic settings in which these nested types are well-defined were investigated, and a parametric model for a polymorphic calculus providing constructs for defining these nested types by type-level recursion (rather than via Church encodings) was constructed.</p>\n<p>Secondly, we showed that GADTs support two distinct semantics: i) a\"syntax-only\" semantics that interprets each GADT as the interpretation of its Church encoding, and thus in general is not functorial, and ii) a \"map completion\" semantics that interprets each GADT as the smallest functor generated by its Church encoding. &nbsp;We also showed that no fibrational model obtained by naively extending the map completion semantics to a calculus supporting GADTs as primitive fixpoints can be parametric.&nbsp;</p>\n<p>Thirdly, we extended the notion of deep induction from nested types to GADTs. Deep induction is an extension of structural induction that traverses all of the structure in a deep data type --- i.e., a datatype that is constructed from other data types, including, possibly, itself --- propagating predicates on its primitive data throughout its entire structure. Deep induction has been shown to prove properties of nested types, including truly nested types, that cannot be proved via structural induction. Extending deep induction to GADTs that are not deep, i.e., that are not defined in terms of other GADTs, opens the way to incorporating automatic generation of (deep) induction rules for them into proof assistants. However, because GADTs still lack functorial initial algebra semantics, current the techniques cannot beused to extend (deep) induction to deep GADTs.</p>\n<p>Because a functorial initial algebra semantics for GADTs is so critical to our research programme, we have devoted the majority of this project to finding a categorical setting in which one can be developed. Despite our many attempts, to date we have succeeded neither in finding/constructing one nor in proving that one cannot exist. &nbsp;We have, however, established a number of results describing some essential properties of categories in which such semantics may possibly be found. &nbsp;For example, we have shown that no category that captures partiality in a computationally relevant way can interpret GADTs in the way we seek, and that the promising idea of interpreting GADTs as lax functors in suitable categories cannot give the kind of semantics we seek either. &nbsp;We continue to work toward finding/constructing a functorial initial algebra semantics for GADTs that specializes to the usual initial algebra semantics for nested types (including ADTs), or perhaps to show that one cannot possibly exist, but we have not yet solved this fascinating and vexing problem.</p>\n<p>All of the technical results from this project were reported in journals, internationally competitive conferences, and a Master's thesis. Beyond these results, the project also provided opportunities to mentor two postdoctoral scholars and one student. It created the opportunity for an undergraduate to get involved in internationally leading research, and to stay on for a Master's degree in which they could continue that work. It also provided one of the postdocs good training in mentoring a research student.</p><br>\n<p>\n Last Modified: 07/17/2024<br>\nModified by: Patricia&nbsp;Johann</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nGeneralized algebraic data types (GADTs) and other advanced data types provide a key technology for language-based program verification that uses the extra information present in a data type's indices to detect more program errors and provide greater correctness guarantees than is possible with only algebraic data types (ADTs) and their (syntactic and semantic)generalization known as nested types. Syntactically, GADTs generalize nested types (and thus ADTs). The goal of this project was to understand GADTs as a semantic generalization of nested types (and thus ADTs) as well. Specifically, it sought (i) to find/develop the same kind of functorial initial algebra semantics that nested types have (and one that specializes to the standard initial algebra semantics for nested types); (ii) to use such semantics to classify GADTs according to what their so-called \"semantic complexity\" (i.e.,the smallest presentability cardinal associated with the semantic categories in which they are known to be well-defined); (iii) to construct parametric models for polymorphic languages supporting GADTs; and (iv) to develop principled tools that improve practical programming and verification based on GADTs.\n\n\nThe main outcomes of this project were three-fold. First, a robust family of nested types (including all those appearing in the literature) was first defined, the semantic settings in which these nested types are well-defined were investigated, and a parametric model for a polymorphic calculus providing constructs for defining these nested types by type-level recursion (rather than via Church encodings) was constructed.\n\n\nSecondly, we showed that GADTs support two distinct semantics: i) a\"syntax-only\" semantics that interprets each GADT as the interpretation of its Church encoding, and thus in general is not functorial, and ii) a \"map completion\" semantics that interprets each GADT as the smallest functor generated by its Church encoding. We also showed that no fibrational model obtained by naively extending the map completion semantics to a calculus supporting GADTs as primitive fixpoints can be parametric.\n\n\nThirdly, we extended the notion of deep induction from nested types to GADTs. Deep induction is an extension of structural induction that traverses all of the structure in a deep data type --- i.e., a datatype that is constructed from other data types, including, possibly, itself --- propagating predicates on its primitive data throughout its entire structure. Deep induction has been shown to prove properties of nested types, including truly nested types, that cannot be proved via structural induction. Extending deep induction to GADTs that are not deep, i.e., that are not defined in terms of other GADTs, opens the way to incorporating automatic generation of (deep) induction rules for them into proof assistants. However, because GADTs still lack functorial initial algebra semantics, current the techniques cannot beused to extend (deep) induction to deep GADTs.\n\n\nBecause a functorial initial algebra semantics for GADTs is so critical to our research programme, we have devoted the majority of this project to finding a categorical setting in which one can be developed. Despite our many attempts, to date we have succeeded neither in finding/constructing one nor in proving that one cannot exist. We have, however, established a number of results describing some essential properties of categories in which such semantics may possibly be found. For example, we have shown that no category that captures partiality in a computationally relevant way can interpret GADTs in the way we seek, and that the promising idea of interpreting GADTs as lax functors in suitable categories cannot give the kind of semantics we seek either. We continue to work toward finding/constructing a functorial initial algebra semantics for GADTs that specializes to the usual initial algebra semantics for nested types (including ADTs), or perhaps to show that one cannot possibly exist, but we have not yet solved this fascinating and vexing problem.\n\n\nAll of the technical results from this project were reported in journals, internationally competitive conferences, and a Master's thesis. Beyond these results, the project also provided opportunities to mentor two postdoctoral scholars and one student. It created the opportunity for an undergraduate to get involved in internationally leading research, and to stay on for a Master's degree in which they could continue that work. It also provided one of the postdocs good training in mentoring a research student.\t\t\t\t\tLast Modified: 07/17/2024\n\n\t\t\t\t\tSubmitted by: PatriciaJohann\n"
 }
}