{
 "awd_id": "1940048",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CSR: Small: IOQL: an I/O Interface for Near-Data Processing",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032925197",
 "po_email": "mmcclure@nsf.gov",
 "po_sign_block_name": "Marilyn McClure",
 "awd_eff_date": "2019-05-15",
 "awd_exp_date": "2022-07-31",
 "tot_intn_awd_amt": 460496.0,
 "awd_amount": 460496.0,
 "awd_min_amd_letter_date": "2019-07-30",
 "awd_max_amd_letter_date": "2019-07-30",
 "awd_abstract_narration": "As data sets grow, the overhead of moving data around different units in computers significantly affect the execution time of applications. Performing computation near the source location of data as much as possible can fundamentally minimize the demand of data movement. However, doing this is difficult with the existing computer systems. This project will develop a Input/Output Query Language (IOQL) to provide a natural language and interface for users to easily describe the tasks to compute near data storage. The IOQL infrastructure optimizes and coordinates the allocation of all tasks in the system. IOQL will boost the performance of many critical datacenter applications. \r\n\r\nIOQL will achieve its goal through presenting a query language with easy-to-understand syntax, application programming interfaces for popular programming languages, a query engine that optimizes and assigns tasks among heterogeneous computing resources during runtime, kernel modules to interact with data storage/memory devices with computing facilities and architectural support of IOQL. IOQL will evaluate the proposed concepts by implementing real system prototype with extended data storage devices and memory controllers. This project will measure the performance, power and energy consumption for data-intensive compute kernels, machine learning frameworks and database systems.\r\n\r\nIOQL will be made compatible with existing computing systems, especially data centers, to address the demand of real-world applications for financial (e.g., business intelligence), scientific (e.g., simulation), and public health (e.g., genomics) applications. The design of IOQL minimizes the amount of additional costs of supporting the proposed tasks but maximizes extensibility of the framework, making IOQL an ideal long-term solution for similar problems.\r\n\r\nThis project will publish research results in related peer-reviewed conferences, journals and workshops that allow public to access. This project will also make the stabilized source code of IOQL and all related modules available on https://github.com/ESCALNCSU. The research group plans to retain all related data for at least three years.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Hung-Wei",
   "pi_last_name": "Tseng",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Hung-Wei Tseng",
   "pi_email_addr": "htseng@ucr.edu",
   "nsf_id": "000728421",
   "pi_start_date": "2019-07-30",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of California-Riverside",
  "inst_street_address": "200 UNIVERSTY OFC BUILDING",
  "inst_street_address_2": "",
  "inst_city_name": "RIVERSIDE",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "9518275535",
  "inst_zip_code": "925210001",
  "inst_country_name": "United States",
  "cong_dist_code": "39",
  "st_cong_dist_code": "CA39",
  "org_lgl_bus_name": "REGENTS OF THE UNIVERSITY OF CALIFORNIA AT RIVERSIDE",
  "org_prnt_uei_num": "",
  "org_uei_num": "MR5QC5FCAVH5"
 },
 "perf_inst": {
  "perf_inst_name": "University of California-Riverside",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "925210001",
  "perf_ctry_code": "US",
  "perf_cong_dist": "39",
  "perf_st_cong_dist": "CA39",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 460496.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Near-data processing (NDP) has proved its ability to mitigate the data movement overhead by leaving parts of the computation at the intelligence nearby data sources. However, the biggest obstacle to NDP is programming those intelligent devices, as conventional NDP platforms require device-level firmware programming. Moreover, even though the programmer invests considerable efforts in programming NDP devices, there is still no guarantee of performance gain. Therefore, an optimal architecture is to design an appropriate hardware/software abstraction that defines the set of operations that intelligent devices can perform and provide a runtime system that dynamically adjusts the distribution of workloads by gauging the current system workloads and application datasets.</p>\n<p><br />This award explores the capability of modern intelligent data storage devices and the demands of modern applications. We gradually evolved three generations of intelligent data storage platforms that require the least amount of user programming but fulfill the demand of modern computing platforms.<br />The first work is Varifocal Storage. Varifocal Storage is an intelligent storage device streamlining the data supply for heterogeneous computing platforms with hardware accelerators using various precisions. Varifocal Storage adjusts the data resolutions to exactly fit the demand of the target computing hardware before datasets leave the storage device. Varifocal Storage also takes care of the delivered dataset qualities to reduce the potential waste of computing resources. Varifocal Storage does not require programmers to compose code running on the device but simply needs programmers to describe their desired data resolution and qualities. In contrast, conventional architectures consume more system interconnect bandwidth and CPU processing power as traditional architectures always require devices to send raw datasets to the main memory and use the CPU to adjust the datasets. Varifocal Storage shows a 1.46x speedup in real systems with reduced precision hardware accelerators.</p>\n<p><br />Upon the success of Varifocal Storage, we extended the interface to more efficiently support the demand for modern hardware accelerators, especially artificial intelligence (AI) and machine learning (ML) accelerators. In addition to precisions, these accelerators also feature their ability to process high-dimensional datasets directly. Therefore, we designed the N-Dimensional Storage (NDS) interface. The NDS interface allows programmers to specify data locations using the most natural coordinates in the problem space of the application without any dimensional reduction as conventional programming models require. By receiving information regarding the original dataset dimensionality, NDS can optimize the data allocation in the storage device and further maximize the bandwidth utilization. We achieve more than 5x speedup through the NDS interface.</p>\n<p><br />To fundamentally address the flexibility and ultimately reduce programmers' overhead in using NDP devices and their interfaces, we designed a language runtime that receives raw Python programs and dynamically generates programs to use NDP devices and Varifocal Storage and NDS interfaces if the underlying devices can support them. As Python are widely adopted as a domain-specific programming interface for AI/ML, statistics, data analytics, bioinformatics, and many other areas, and our framework requires no modifications to user code, the new framework enables the use of NDP immediately in many applications. Furthermore, our implementation shows the proposed framework achieves almost identical performance as the most manually optimized programs.</p>\n<p><br />This award resulted in a few influential papers, including two best paper candidates in the IEEE/ACM Microarchitecture conference in 2019 and 2021 and one outstanding paper award in the 2021 IEEE Real-Time and Embedded Technology and Applications Symposium. The PI are invited to give research and distinguished lecture talks at universities and industry locations. The artifacts this award generated are publicly available on GitHub. The result of the work also becomes part of the materials in the PI's operating systems and computer architecture classes. The PI also graduated one PhD student working in a data storage company and is still advising six other PhD students with diverse backgrounds with the awarded funding.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 11/29/2022<br>\n\t\t\t\t\tModified by: Hung-Wei&nbsp;Tseng</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nNear-data processing (NDP) has proved its ability to mitigate the data movement overhead by leaving parts of the computation at the intelligence nearby data sources. However, the biggest obstacle to NDP is programming those intelligent devices, as conventional NDP platforms require device-level firmware programming. Moreover, even though the programmer invests considerable efforts in programming NDP devices, there is still no guarantee of performance gain. Therefore, an optimal architecture is to design an appropriate hardware/software abstraction that defines the set of operations that intelligent devices can perform and provide a runtime system that dynamically adjusts the distribution of workloads by gauging the current system workloads and application datasets.\n\n\nThis award explores the capability of modern intelligent data storage devices and the demands of modern applications. We gradually evolved three generations of intelligent data storage platforms that require the least amount of user programming but fulfill the demand of modern computing platforms.\nThe first work is Varifocal Storage. Varifocal Storage is an intelligent storage device streamlining the data supply for heterogeneous computing platforms with hardware accelerators using various precisions. Varifocal Storage adjusts the data resolutions to exactly fit the demand of the target computing hardware before datasets leave the storage device. Varifocal Storage also takes care of the delivered dataset qualities to reduce the potential waste of computing resources. Varifocal Storage does not require programmers to compose code running on the device but simply needs programmers to describe their desired data resolution and qualities. In contrast, conventional architectures consume more system interconnect bandwidth and CPU processing power as traditional architectures always require devices to send raw datasets to the main memory and use the CPU to adjust the datasets. Varifocal Storage shows a 1.46x speedup in real systems with reduced precision hardware accelerators.\n\n\nUpon the success of Varifocal Storage, we extended the interface to more efficiently support the demand for modern hardware accelerators, especially artificial intelligence (AI) and machine learning (ML) accelerators. In addition to precisions, these accelerators also feature their ability to process high-dimensional datasets directly. Therefore, we designed the N-Dimensional Storage (NDS) interface. The NDS interface allows programmers to specify data locations using the most natural coordinates in the problem space of the application without any dimensional reduction as conventional programming models require. By receiving information regarding the original dataset dimensionality, NDS can optimize the data allocation in the storage device and further maximize the bandwidth utilization. We achieve more than 5x speedup through the NDS interface.\n\n\nTo fundamentally address the flexibility and ultimately reduce programmers' overhead in using NDP devices and their interfaces, we designed a language runtime that receives raw Python programs and dynamically generates programs to use NDP devices and Varifocal Storage and NDS interfaces if the underlying devices can support them. As Python are widely adopted as a domain-specific programming interface for AI/ML, statistics, data analytics, bioinformatics, and many other areas, and our framework requires no modifications to user code, the new framework enables the use of NDP immediately in many applications. Furthermore, our implementation shows the proposed framework achieves almost identical performance as the most manually optimized programs.\n\n\nThis award resulted in a few influential papers, including two best paper candidates in the IEEE/ACM Microarchitecture conference in 2019 and 2021 and one outstanding paper award in the 2021 IEEE Real-Time and Embedded Technology and Applications Symposium. The PI are invited to give research and distinguished lecture talks at universities and industry locations. The artifacts this award generated are publicly available on GitHub. The result of the work also becomes part of the materials in the PI's operating systems and computer architecture classes. The PI also graduated one PhD student working in a data storage company and is still advising six other PhD students with diverse backgrounds with the awarded funding.\n\n\t\t\t\t\tLast Modified: 11/29/2022\n\n\t\t\t\t\tSubmitted by: Hung-Wei Tseng"
 }
}