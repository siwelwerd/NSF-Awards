{
 "awd_id": "1910216",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "III: Small: Native Compilation, Query Processing, and Indexing for In-memory Graph Relational Data Systems",
 "cfda_num": "47.070",
 "org_code": "05020000",
 "po_phone": "7032924481",
 "po_email": "hmunoz@nsf.gov",
 "po_sign_block_name": "Hector Munoz-Avila",
 "awd_eff_date": "2019-10-01",
 "awd_exp_date": "2023-09-30",
 "tot_intn_awd_amt": 499461.0,
 "awd_amount": 499461.0,
 "awd_min_amd_letter_date": "2019-09-03",
 "awd_max_amd_letter_date": "2019-09-03",
 "awd_abstract_narration": "A wide variety of applications spanning various domains have graphs as first-class citizens, e.g., communication networks, road networks, social networks, and biological networks. The nodes and edges of these graphs are often associated with descriptors, e.g., labels and properties, or more generally, attributes. Many of these applications need efficient and real-time processing of the graph data. Because relational data systems are very mature and ubiquitous, extending these systems to support graph data is a natural choice. However, there is an impedance mismatch between the relational model and the graph model at the various levels that makes extending relational systems to efficiently support graph data very challenging. This project will address this impedance mismatch and the hurdles that face graph applications that run over graph-enabled relational systems in order to function properly and efficiently. More specifically, this project will address the following research challenges: (1) The expressiveness challenge to address the mismatch between the declarative nature in querying relational data and the navigational nature in querying graph data, (2) the scalability challenge to support large amounts of graph and relational data and queries in real-time, and (3) the performance challenge to address the complexity in answering graph and relational queries and the real-time processing needs of graph applications. Addressing these challenges is the focus of this project.\r\n\r\nThis project addresses how to overcome the impedance mismatch between the relational and graph models by addressing the above challenges. Techniques are proposed to seamlessly and natively process large graph databases inside relational systems without negatively affecting the graph query performance. The techniques to be developed include: (1) Graph query compilation techniques: State-of-art query compilation mechanisms will be developed to mixes of graph and relational query evaluation pipelines to efficiently execute compiled query processing plans that include both graph and relational operators, (2) Graph-as-an-index: In-memory graph indexing techniques that will facilitate the navigation of the graph relational data using the graph topology. The graph indexes will efficiently support sub-graph selection based on the attribute data of both the graph nodes and edges, and performing graph operations on the selected sub-graphs. The techniques to be developed will support dynamic graphs where both the graph topology as well as the graph attributes can be updated. The introduced techniques will tolerate updates that would otherwise invalidate graph intermediate representations that are typically prepared offline to speedup graph query processing. (3) Native graph+relational query execution: Introduce graph navigation operators that operate over graph data in native mode, yet seamlessly integrate with relational algebra operators inside query evaluation pipelines. The developed query processing techniques will permit bidirectional navigation over the relational and the graph data within the same query evaluation pipeline to permit further query optimization strategies that are infeasible otherwise, and to efficiently evaluate interleaved graph and relational operators in query evaluation pipelines, and (4) Costing of the interleaved relational and graph operations for query optimization purposes.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "IIS",
 "org_div_long_name": "Division of Information & Intelligent Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Walid",
   "pi_last_name": "Aref",
   "pi_mid_init": "G",
   "pi_sufx_name": "",
   "pi_full_name": "Walid G Aref",
   "pi_email_addr": "aref@cs.purdue.edu",
   "nsf_id": "000235103",
   "pi_start_date": "2019-09-03",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Tiark",
   "pi_last_name": "Rompf",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Tiark Rompf",
   "pi_email_addr": "tiark@purdue.edu",
   "nsf_id": "000678623",
   "pi_start_date": "2019-09-03",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Purdue University",
  "inst_street_address": "2550 NORTHWESTERN AVE # 1100",
  "inst_street_address_2": "",
  "inst_city_name": "WEST LAFAYETTE",
  "inst_state_code": "IN",
  "inst_state_name": "Indiana",
  "inst_phone_num": "7654941055",
  "inst_zip_code": "479061332",
  "inst_country_name": "United States",
  "cong_dist_code": "04",
  "st_cong_dist_code": "IN04",
  "org_lgl_bus_name": "PURDUE UNIVERSITY",
  "org_prnt_uei_num": "YRXVL4JYCEF5",
  "org_uei_num": "YRXVL4JYCEF5"
 },
 "perf_inst": {
  "perf_inst_name": "Purdue University",
  "perf_str_addr": "Department of Computer Science",
  "perf_city_name": "West Lafayette",
  "perf_st_code": "IN",
  "perf_st_name": "Indiana",
  "perf_zip_code": "479072114",
  "perf_ctry_code": "US",
  "perf_cong_dist": "04",
  "perf_st_cong_dist": "IN04",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "736400",
   "pgm_ele_name": "Info Integration & Informatics"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7364",
   "pgm_ref_txt": "INFO INTEGRATION & INFORMATICS"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 499461.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>A wide variety of applications spanning various domains have graphs as first-class citizens, e.g., communication networks, road networks, and social networks. Graph nodes and edges are associated with descriptors, e.g., labels and properties. Many of these graph applications need efficient and real-time processing. Because relational databases are very mature and ubiquitous, extending relational data-systems to support graphs is a natural choice. However, there is impedance mismatch between the relational and graph models that makes extending relational systems to efficiently support graph data very challenging.&nbsp;This project addresses this impedance mismatch and the hurdles that face graph applications running over graph-enabled relational systems in order to function properly and efficiently.&nbsp;More specifically, this project addresses the following research challenges:</p>\n<p>(1)&nbsp;<strong>The</strong>&nbsp;<strong>expressiveness challenge</strong>&nbsp;to address the mismatch between the declarative nature in querying relational data and the navigational nature in querying graphs</p>\n<p>(2)&nbsp;<strong>The</strong>&nbsp;<strong>scalability challenge</strong>&nbsp;to support large graphs and relational data and queries&nbsp;in real-time,&nbsp;and&nbsp;</p>\n<p>(3)&nbsp;<strong>The performance challenge&nbsp;</strong>to address the complexity in answering graph and relational queries and the real-time processing needs of graph applications.&nbsp;</p>\n<p>Addressing these challenges is&nbsp;the focus of this project.</p>\n<p>This project addresses how to overcome the impedance mismatch between the relational and graph models. Techniques are developed to seamlessly and natively process large graph databases inside relational systems without negatively affecting graph query performance. The techniques developed include: (1) Graph query compilation techniques: State-of-art query compilation mechanisms are developed to mixes of graph and relational query evaluation pipelines to efficiently execute compiled query processing plans that include both graph and relational operators, (2) Graph-as-an-index: In-memory indexing techniques that facilitate the navigation of graph relational data using the graph topology. The graph indexes efficiently support sub-graph selection based on the attribute data of both the graph nodes and edges, and perform graph operations on the selected sub-graphs. The techniques developed support dynamic graphs where both the graph topology and the graph attributes are continuously updated. The introduced techniques tolerate updates that would otherwise invalidate graph intermediate representations that are typically prepared offline to speedup graph query processing, and (3) Native&nbsp;graph + relational&nbsp;query execution: Introduce graph navigation operators that operate over graph data in native mode, yet seamlessly integrate with relational algebra operators inside query evaluation pipelines. The developed query processing techniques permit bidirectional navigation over the relational and the graph data within the same query evaluation pipeline to permit further query optimization strategies that are infeasible otherwise, and to efficiently evaluate interleaved graph and relational operators in query evaluation pipelines, and (4) Costing of the interleaved relational and graph operations for query optimization purposes.</p>\n<p>In 2019/2020, we developed native query compilation techniques, query processing, and indexing for in-memory graph-relational data systems including compiling symbolic execution with staging and algebraic effects, cluster-based data partitioning and elastic scheduling, machine-learning-based data partitioning in big data systems, shared execution techniques for business data analytics, and grid-enabled tree-indexes for efficient query processing.&nbsp;</p>\n<p>In 2020/2021, we studied tracking type reachability sets for ownership reasoning in higher-order functional programs, developed a prototype compiler for nondeterministic parallel symbolic execution of intermediate representations, participated in visionary&nbsp;community view on graph processing systems, developed attack-resilient adaptive load-balancing techniques,&nbsp;&nbsp;light-weight adaptivity protocols to continuously monitor query workloads&nbsp;in distributed systems, unbiased online sampling technique for the visualization of large datasets, update tolerant indexing techniques, online workload estimation techniques, and surveyed machine-learning-based multi-dimensional indexes and developed new ones.</p>\n<p>In 2021/2022, we developed techniques for reducing latency and producing up-to-date analytical results over fast-arriving data in distributed data systems, new type system that features a stack delayed-popping strategy allowing variable-size data, e.g., graph reachability, to be returned from function calls as stack-allocated data from a callee, mitigated non-deterministic performance in update-intensive indexes, studied the impact of separating memory from compute in a disaggregated setup on the design of database systems.</p>\n<p>&nbsp;</p>\n<p>In 2022/2023, we developed an open-source write-optimized transactional graph data system, investigated usage of skiplists in big-data systems, studied offering online data analytics over data streams, developed vectorized indexes for efficient query processing, surveyed Machine-Learning-based multidimensional indexes, envisioned the new notion of &ldquo;location-optimized&rdquo; data systems in contrast to location data being supported as an afterthought, developed write-optimized tree-indexes over disaggregated memory architectures and investigated they can be optimized for heavy-update workloads, designed adaptive indexes to handle oscillating workloads between being write- vs read-heavy, developed&nbsp;<em>generalizable&nbsp;</em>indexes for trajectory data and graph road networks, participated in a community-wide vision paper for the emerging field of mobility data science and the pivotal role that graph data plays in this domain.</p>\n<p>Three Ph.D. students have graduated&nbsp;and over 50 graduate and undergraduate students have been trained&nbsp;to conduct research in topics related to this project.&nbsp;PI gave eight invited lectures/keynotes to report on research developed under this grant.&nbsp;</p>\n<p>For further information, see the project website:&nbsp;<a href=\"https://www.cs.purdue.edu/homes/aref/CGR/\">https://www.cs.purdue.edu/homes/aref/CGR/</a></p>\n<p>&nbsp;</p><br>\n<p>\n Last Modified: 10/19/2024<br>\nModified by: Walid&nbsp;G&nbsp;Aref</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nA wide variety of applications spanning various domains have graphs as first-class citizens, e.g., communication networks, road networks, and social networks. Graph nodes and edges are associated with descriptors, e.g., labels and properties. Many of these graph applications need efficient and real-time processing. Because relational databases are very mature and ubiquitous, extending relational data-systems to support graphs is a natural choice. However, there is impedance mismatch between the relational and graph models that makes extending relational systems to efficiently support graph data very challenging.This project addresses this impedance mismatch and the hurdles that face graph applications running over graph-enabled relational systems in order to function properly and efficiently.More specifically, this project addresses the following research challenges:\n\n\n(1)Theexpressiveness challengeto address the mismatch between the declarative nature in querying relational data and the navigational nature in querying graphs\n\n\n(2)Thescalability challengeto support large graphs and relational data and queriesin real-time,and\n\n\n(3)The performance challengeto address the complexity in answering graph and relational queries and the real-time processing needs of graph applications.\n\n\nAddressing these challenges isthe focus of this project.\n\n\nThis project addresses how to overcome the impedance mismatch between the relational and graph models. Techniques are developed to seamlessly and natively process large graph databases inside relational systems without negatively affecting graph query performance. The techniques developed include: (1) Graph query compilation techniques: State-of-art query compilation mechanisms are developed to mixes of graph and relational query evaluation pipelines to efficiently execute compiled query processing plans that include both graph and relational operators, (2) Graph-as-an-index: In-memory indexing techniques that facilitate the navigation of graph relational data using the graph topology. The graph indexes efficiently support sub-graph selection based on the attribute data of both the graph nodes and edges, and perform graph operations on the selected sub-graphs. The techniques developed support dynamic graphs where both the graph topology and the graph attributes are continuously updated. The introduced techniques tolerate updates that would otherwise invalidate graph intermediate representations that are typically prepared offline to speedup graph query processing, and (3) Nativegraph + relationalquery execution: Introduce graph navigation operators that operate over graph data in native mode, yet seamlessly integrate with relational algebra operators inside query evaluation pipelines. The developed query processing techniques permit bidirectional navigation over the relational and the graph data within the same query evaluation pipeline to permit further query optimization strategies that are infeasible otherwise, and to efficiently evaluate interleaved graph and relational operators in query evaluation pipelines, and (4) Costing of the interleaved relational and graph operations for query optimization purposes.\n\n\nIn 2019/2020, we developed native query compilation techniques, query processing, and indexing for in-memory graph-relational data systems including compiling symbolic execution with staging and algebraic effects, cluster-based data partitioning and elastic scheduling, machine-learning-based data partitioning in big data systems, shared execution techniques for business data analytics, and grid-enabled tree-indexes for efficient query processing.\n\n\nIn 2020/2021, we studied tracking type reachability sets for ownership reasoning in higher-order functional programs, developed a prototype compiler for nondeterministic parallel symbolic execution of intermediate representations, participated in visionarycommunity view on graph processing systems, developed attack-resilient adaptive load-balancing techniques,light-weight adaptivity protocols to continuously monitor query workloadsin distributed systems, unbiased online sampling technique for the visualization of large datasets, update tolerant indexing techniques, online workload estimation techniques, and surveyed machine-learning-based multi-dimensional indexes and developed new ones.\n\n\nIn 2021/2022, we developed techniques for reducing latency and producing up-to-date analytical results over fast-arriving data in distributed data systems, new type system that features a stack delayed-popping strategy allowing variable-size data, e.g., graph reachability, to be returned from function calls as stack-allocated data from a callee, mitigated non-deterministic performance in update-intensive indexes, studied the impact of separating memory from compute in a disaggregated setup on the design of database systems.\n\n\n\n\n\nIn 2022/2023, we developed an open-source write-optimized transactional graph data system, investigated usage of skiplists in big-data systems, studied offering online data analytics over data streams, developed vectorized indexes for efficient query processing, surveyed Machine-Learning-based multidimensional indexes, envisioned the new notion of location-optimized data systems in contrast to location data being supported as an afterthought, developed write-optimized tree-indexes over disaggregated memory architectures and investigated they can be optimized for heavy-update workloads, designed adaptive indexes to handle oscillating workloads between being write- vs read-heavy, developedgeneralizableindexes for trajectory data and graph road networks, participated in a community-wide vision paper for the emerging field of mobility data science and the pivotal role that graph data plays in this domain.\n\n\nThree Ph.D. students have graduatedand over 50 graduate and undergraduate students have been trainedto conduct research in topics related to this project.PI gave eight invited lectures/keynotes to report on research developed under this grant.\n\n\nFor further information, see the project website:https://www.cs.purdue.edu/homes/aref/CGR/\n\n\n\t\t\t\t\tLast Modified: 10/19/2024\n\n\t\t\t\t\tSubmitted by: WalidGAref\n"
 }
}