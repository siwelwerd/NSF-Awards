{
 "awd_id": "1908494",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SaTC: CORE: Medium: Collaborative: Effective Formal Reasoning for Mobile Malware",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2019-10-01",
 "awd_exp_date": "2024-09-30",
 "tot_intn_awd_amt": 448877.0,
 "awd_amount": 464877.0,
 "awd_min_amd_letter_date": "2019-06-18",
 "awd_max_amd_letter_date": "2021-07-01",
 "awd_abstract_narration": "Since their inception a decade ago, smartphones have become the pillars of our digital life, storing security-sensitive information ranging from medical and banking data to our entire electronic communication history. Due to our increasing reliance on mobile applications in daily life, there has been a steady increase in both the number and sophistication of mobile malware samples. This project's impacts are to make it easier for users and organizations to identify malicious applications and thereby prevent people from around the globe from becoming victims of mobile malware. The project's novelties are to develop advanced program analysis and natural language processing techniques to identify salient characteristics of  different malware families and use them to detect previously unknown malware instances.\r\n\r\nThis project's technical effort is focused on several fronts. The first is matching of \"anti-protocols\", which are sequences of abstract events characterizing malicious behavior. The investigators will explore approaches for identifying anti-protocols and matching them both exactly and approximately against apps. Second, since malware instances typically disguise themselves through behavioral obfuscation, the project will investigate new techniques for reasoning precisely and accurately about obfuscated mobile applications. Finally, detecting malware may require identifying inconsistencies with behavior that might be specified in natural language. The investigators develop techniques for characterizing the alignment between a program's stated operation and its formally-analyzed fingerprint in order to spot unexpected, possibly malicious behavior.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Yu",
   "pi_last_name": "Feng",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Yu Feng",
   "pi_email_addr": "yufeng@cs.ucsb.edu",
   "nsf_id": "000788537",
   "pi_start_date": "2019-06-18",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of California-Santa Barbara",
  "inst_street_address": "3227 CHEADLE HALL",
  "inst_street_address_2": "",
  "inst_city_name": "SANTA BARBARA",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "8058934188",
  "inst_zip_code": "931060001",
  "inst_country_name": "United States",
  "cong_dist_code": "24",
  "st_cong_dist_code": "CA24",
  "org_lgl_bus_name": "UNIVERSITY OF CALIFORNIA, SANTA BARBARA",
  "org_prnt_uei_num": "",
  "org_uei_num": "G9QBQDH39DF4"
 },
 "perf_inst": {
  "perf_inst_name": "University of Texas, Austin",
  "perf_str_addr": "",
  "perf_city_name": "Austin",
  "perf_st_code": "TX",
  "perf_st_name": "Texas",
  "perf_zip_code": "787121757",
  "perf_ctry_code": "US",
  "perf_cong_dist": "25",
  "perf_st_cong_dist": "TX25",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  },
  {
   "pgm_ref_code": "9178",
   "pgm_ref_txt": "UNDERGRADUATE EDUCATION"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0121",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 448877.0
  },
  {
   "fund_oblg_fiscal_yr": 2021,
   "fund_oblg_amt": 16000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The objective of this project was to develop scalable and effective program analysis techniques to detect a broad class of mobile malware, including ransomware, toll/SMS/call fraud, commercial spyware, and Trojans. By leveraging formal methods, we aimed to advance malware detection capabilities, improve security auditors' efficiency, and enhance the security of trusted app markets.</p>\r\n<p>Our work centered on formal anti-protocols, automatic learning of malware behaviors, natural language-based inconsistency detection, and advanced program reasoning techniques for analyzing obfuscated applications. The project resulted in novel contributions in combining large language models (LLMs) with symbolic reasoning, as well as modular approaches for verifying authentication protocols.</p>\r\n<h3>Major Activities and Accomplishments</h3>\r\n<h3><strong>1. Suspicious Behavior Detection using LLMs and Symbolic Reasoning</strong></h3>\r\n<p>We developed a novel hybrid approach integrating machine learning with symbolic execution to detect vulnerabilities in large-scale open-source libraries. Given the growing reliance on open-source software in mobile applications, our approach effectively analyzes codebases with minimal training data while achieving high detection accuracy. Key results include:</p>\r\n<ul>\r\n<li>Achieved <strong>82.86% recall</strong> in identifying vulnerable code.</li>\r\n<li>Detected <strong>76 zero-day vulnerabilities</strong>, leading to <strong>12 accepted CVEs</strong>.</li>\r\n<li>Demonstrated scalability and efficiency across multiple open-source projects.</li>\r\n</ul>\r\n<h3><strong>2. Verification of Authentication Protocols</strong></h3>\r\n<p>To enhance the security of authentication protocols such as OAuth and OpenID, we developed <strong>AuthSaber</strong>, an automated verifier for OpenID Connect (OIDC) implementations. Our contributions in this area include:</p>\r\n<ul>\r\n<li>Introduction of <strong>AuthLTL</strong>, a domain-specific specification language based on linear temporal logic for defining OIDC security properties.</li>\r\n<li>Development of an automaton-based modeling approach to formally verify OIDC programs.</li>\r\n<li>Analysis of <strong>15 widely used OIDC libraries</strong>, leading to the discovery of <strong>16 previously unknown vulnerabilities</strong> and the assignment of <strong>five new CVEs</strong>.</li>\r\n<li>Verification of <strong>134 security properties</strong>, demonstrating the effectiveness of AuthSaber in strengthening authentication security.</li>\r\n</ul>\r\n<h3><strong>3. Checking Android apps against GUI policies</strong></h3>\r\n<p>Checking conformance between an app and a GUI policy turns out to be challenging for two key reasons. First, Android applications consist of several interacting activities, all of which provide a different and dynamically changing interface. Thus, checking adherence to a GUI policy requires exploring the (possibly infinite) ways that a user can interact with the app. Second, many security analysts concern not only about the static appearance of the app, but also how the interface needs to dynamically evolve as users interact with it. Thus, verifying an app against a GUI policy requires reasoning about the dynamic behavior of the app in relation to the GUI elements it provides. We first describe a specification language for formalizing GUI policies and then propose a new program abstraction called an event-driven layout forest. Finally, we introduce a static analysis for constructing this abstraction and checking it against a GUI policy.</p>\r\n<h3>Specific Objectives Achieved</h3>\r\n<ul>\r\n<li>Development of <strong>refinement types</strong> to express program invariants.</li>\r\n<li>Utilization of <strong>LLMs and symbolic reasoning</strong> to identify suspicious behaviors, improving scalability compared to purely symbolic approaches.</li>\r\n<li>Implementation of <strong>modular techniques</strong> for verifying correct security patches.</li>\r\n<li>Creation of <strong>new verification algorithms</strong> for authentication protocols.</li>\r\n</ul>\r\n<h3>Significant Results</h3>\r\n<ul>\r\n<li><strong>New algorithm</strong> for verifying authentication protocols.</li>\r\n<li><strong>Refinement type-based specification language</strong> for security properties.</li>\r\n<li><strong>Publication on static analysis on authentication in Android</strong> (ASE&rsquo;19).</li>\r\n<li><strong>Publication on refinement-type-based specifications</strong> (ASE&rsquo;24).</li>\r\n<li><strong>Publication on verification algorithm for authentication protocols</strong> (CCS&rsquo;24).</li>\r\n<li><strong>Publication on Android apps against GUI policies (FSE&rsquo;21)</strong></li>\r\n<li><strong>Publication on hybrid analysis combining ML and symbolic reasoning</strong> (under submission).</li>\r\n</ul>\r\n<h3>Key Outcomes &amp; Other Achievements</h3>\r\n<p>The research led to several significant contributions in mobile security and formal methods. Key outcomes include:</p>\r\n<ul>\r\n<li>Development of scalable techniques for malware detection and security verification.</li>\r\n<li>Impact on the <strong>Google Play Protect (GPP) team</strong>, where our techniques were integrated to test real-world applications.</li>\r\n<li>Identification of new vulnerabilities in widely used authentication libraries.</li>\r\n<li>Acceptance of multiple research papers in top-tier security conferences.</li>\r\n</ul>\r\n<h3>Training &amp; Professional Development</h3>\r\n<p>The project contributed to the training and mentorship of <strong>PhD students at UCSB (Specifically, Yanju Chen graduated in 2024, and Junrui Liu will be graduated in 2026)</strong> equipping them with expertise in:</p>\r\n<ul>\r\n<li>Formal methods and program verification.</li>\r\n<li>Machine learning for security analysis.</li>\r\n<li>Large-scale software vulnerability detection.</li>\r\n</ul>\r\n<h3>Dissemination of Results</h3>\r\n<p>The research findings were disseminated through:</p>\r\n<ul>\r\n<li><strong>Publications</strong> in leading security conferences and journals (ASE&rsquo;19, FSE&rsquo;21, CCS&rsquo;22, ASE&rsquo;24, CCS&rsquo;24, and others under submission).</li>\r\n<li><strong>Collaborations with industry</strong>, particularly Google Play Protect, to validate the real-world applicability of our techniques.</li>\r\n<li><strong>Workshops and conference presentations</strong>, sharing insights with the broader cybersecurity community.</li>\r\n</ul>\r\n<h3>Conclusion</h3>\r\n<p>This project successfully advanced the field of mobile malware detection and authentication protocol verification through a combination of formal methods, machine learning, and program analysis. The results demonstrate significant contributions to securing mobile applications, detecting vulnerabilities in real-world software, and influencing industry practices. The research outcomes will continue to shape future advancements in cybersecurity, providing robust tools for malware analysis and authentication security verification.</p><br>\n<p>\n Last Modified: 02/18/2025<br>\nModified by: Yu&nbsp;Feng</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nThe objective of this project was to develop scalable and effective program analysis techniques to detect a broad class of mobile malware, including ransomware, toll/SMS/call fraud, commercial spyware, and Trojans. By leveraging formal methods, we aimed to advance malware detection capabilities, improve security auditors' efficiency, and enhance the security of trusted app markets.\r\n\n\nOur work centered on formal anti-protocols, automatic learning of malware behaviors, natural language-based inconsistency detection, and advanced program reasoning techniques for analyzing obfuscated applications. The project resulted in novel contributions in combining large language models (LLMs) with symbolic reasoning, as well as modular approaches for verifying authentication protocols.\r\nMajor Activities and Accomplishments\r\n1. Suspicious Behavior Detection using LLMs and Symbolic Reasoning\r\n\n\nWe developed a novel hybrid approach integrating machine learning with symbolic execution to detect vulnerabilities in large-scale open-source libraries. Given the growing reliance on open-source software in mobile applications, our approach effectively analyzes codebases with minimal training data while achieving high detection accuracy. Key results include:\r\n\r\nAchieved 82.86% recall in identifying vulnerable code.\r\nDetected 76 zero-day vulnerabilities, leading to 12 accepted CVEs.\r\nDemonstrated scalability and efficiency across multiple open-source projects.\r\n\r\n2. Verification of Authentication Protocols\r\n\n\nTo enhance the security of authentication protocols such as OAuth and OpenID, we developed AuthSaber, an automated verifier for OpenID Connect (OIDC) implementations. Our contributions in this area include:\r\n\r\nIntroduction of AuthLTL, a domain-specific specification language based on linear temporal logic for defining OIDC security properties.\r\nDevelopment of an automaton-based modeling approach to formally verify OIDC programs.\r\nAnalysis of 15 widely used OIDC libraries, leading to the discovery of 16 previously unknown vulnerabilities and the assignment of five new CVEs.\r\nVerification of 134 security properties, demonstrating the effectiveness of AuthSaber in strengthening authentication security.\r\n\r\n3. Checking Android apps against GUI policies\r\n\n\nChecking conformance between an app and a GUI policy turns out to be challenging for two key reasons. First, Android applications consist of several interacting activities, all of which provide a different and dynamically changing interface. Thus, checking adherence to a GUI policy requires exploring the (possibly infinite) ways that a user can interact with the app. Second, many security analysts concern not only about the static appearance of the app, but also how the interface needs to dynamically evolve as users interact with it. Thus, verifying an app against a GUI policy requires reasoning about the dynamic behavior of the app in relation to the GUI elements it provides. We first describe a specification language for formalizing GUI policies and then propose a new program abstraction called an event-driven layout forest. Finally, we introduce a static analysis for constructing this abstraction and checking it against a GUI policy.\r\nSpecific Objectives Achieved\r\n\r\nDevelopment of refinement types to express program invariants.\r\nUtilization of LLMs and symbolic reasoning to identify suspicious behaviors, improving scalability compared to purely symbolic approaches.\r\nImplementation of modular techniques for verifying correct security patches.\r\nCreation of new verification algorithms for authentication protocols.\r\n\r\nSignificant Results\r\n\r\nNew algorithm for verifying authentication protocols.\r\nRefinement type-based specification language for security properties.\r\nPublication on static analysis on authentication in Android (ASE19).\r\nPublication on refinement-type-based specifications (ASE24).\r\nPublication on verification algorithm for authentication protocols (CCS24).\r\nPublication on Android apps against GUI policies (FSE21)\r\nPublication on hybrid analysis combining ML and symbolic reasoning (under submission).\r\n\r\nKey Outcomes & Other Achievements\r\n\n\nThe research led to several significant contributions in mobile security and formal methods. Key outcomes include:\r\n\r\nDevelopment of scalable techniques for malware detection and security verification.\r\nImpact on the Google Play Protect (GPP) team, where our techniques were integrated to test real-world applications.\r\nIdentification of new vulnerabilities in widely used authentication libraries.\r\nAcceptance of multiple research papers in top-tier security conferences.\r\n\r\nTraining & Professional Development\r\n\n\nThe project contributed to the training and mentorship of PhD students at UCSB (Specifically, Yanju Chen graduated in 2024, and Junrui Liu will be graduated in 2026) equipping them with expertise in:\r\n\r\nFormal methods and program verification.\r\nMachine learning for security analysis.\r\nLarge-scale software vulnerability detection.\r\n\r\nDissemination of Results\r\n\n\nThe research findings were disseminated through:\r\n\r\nPublications in leading security conferences and journals (ASE19, FSE21, CCS22, ASE24, CCS24, and others under submission).\r\nCollaborations with industry, particularly Google Play Protect, to validate the real-world applicability of our techniques.\r\nWorkshops and conference presentations, sharing insights with the broader cybersecurity community.\r\n\r\nConclusion\r\n\n\nThis project successfully advanced the field of mobile malware detection and authentication protocol verification through a combination of formal methods, machine learning, and program analysis. The results demonstrate significant contributions to securing mobile applications, detecting vulnerabilities in real-world software, and influencing industry practices. The research outcomes will continue to shape future advancements in cybersecurity, providing robust tools for malware analysis and authentication security verification.\t\t\t\t\tLast Modified: 02/18/2025\n\n\t\t\t\t\tSubmitted by: YuFeng\n"
 }
}