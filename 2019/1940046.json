{
 "awd_id": "1940046",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CRII: CSR: Rethinking the FTL in SSDs -- a file translation layer instead of a flash translation layer",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032925197",
 "po_email": "mmcclure@nsf.gov",
 "po_sign_block_name": "Marilyn McClure",
 "awd_eff_date": "2019-05-15",
 "awd_exp_date": "2020-02-29",
 "tot_intn_awd_amt": 61788.0,
 "awd_amount": 61788.0,
 "awd_min_amd_letter_date": "2019-07-30",
 "awd_max_amd_letter_date": "2019-07-30",
 "awd_abstract_narration": "As data sets for artificial intelligence, network services, and cloud storage grows, so does the demand of quickly and efficiently serving data from the storage device. Using solid state drives (SSDs) based on non-volatile, flash memory technologies is an effective approach to improve the performance of storage devices. However, as the rest parts of the computer system leverage the entrenched interface to communicate with SSDs, the overhead of supporting these abstractions buries the real potential of SSDs. Specifically, the different addressing modes for different system layers result in multiple address translations when accessing a single file and require additional system resource to maintain the mapping. This address translation overhead takes time and limits the bandwidth of SSDs. This project is addressing this problem by proposing an innovative storage interface that minimizes the system overhead but better fits the behaviors of applications in accessing data. The proposed interface will simplify the design of operating systems. This interface will require no modifications to existing applications. \r\n\r\nAs most file accessing overhead coming from the operating system, simplifying operating systems with the proposed interface will significantly boost the latency and bandwidth when applications access SSDs. This project will implement the proposed design in real SSDs without changes to existing hardware, meaning that the result of this project can immediately facilitate existing computer systems hosting big data applications without additional hardware costs. This project will also encourage researchers to revisit existing hardware/software interfaces for achieving better performance on emerging peripheral devices as well as exploring other benefits, including enhanced security and reduced energy consumption of pursuing this research direction.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Hung-Wei",
   "pi_last_name": "Tseng",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Hung-Wei Tseng",
   "pi_email_addr": "htseng@ucr.edu",
   "nsf_id": "000728421",
   "pi_start_date": "2019-07-30",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of California-Riverside",
  "inst_street_address": "200 UNIVERSTY OFC BUILDING",
  "inst_street_address_2": "",
  "inst_city_name": "RIVERSIDE",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "9518275535",
  "inst_zip_code": "925210001",
  "inst_country_name": "United States",
  "cong_dist_code": "39",
  "st_cong_dist_code": "CA39",
  "org_lgl_bus_name": "REGENTS OF THE UNIVERSITY OF CALIFORNIA AT RIVERSIDE",
  "org_prnt_uei_num": "",
  "org_uei_num": "MR5QC5FCAVH5"
 },
 "perf_inst": {
  "perf_inst_name": "University of California-Riverside",
  "perf_str_addr": "",
  "perf_city_name": "riverside",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "925210001",
  "perf_ctry_code": "US",
  "perf_cong_dist": "39",
  "perf_st_cong_dist": "CA39",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "026Y00",
   "pgm_ele_name": "CRII CISE Research Initiation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7354",
   "pgm_ref_txt": "COMPUTER SYSTEMS"
  },
  {
   "pgm_ref_code": "8228",
   "pgm_ref_txt": "CISE Resrch Initiatn Initiatve"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 61788.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>\n<div><span class=\" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qovuvz88zlez122zvz82z8z76z0z80zdcz79zij4z70zz81zz69zz68zz75z8volz87zdyz83z\">As non-volatile memory storage devices, especially solid state drives</span><span class=\" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qovuvz88zlez122zvz82z8z76z0z80zdcz79zij4z70zz81zz69zz68zz75z8volz87zdyz83z s-lparen\"> </span><span class=\" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qovuvz88zlez122zvz82z8z76z0z80zdcz79zij4z70zz81zz69zz68zz75z8volz87zdyz83z h-lparen\">(SSDs),</span><span class=\" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qovuvz88zlez122zvz82z8z76z0z80zdcz79zij4z70zz81zz69zz68zz75z8volz87zdyz83z\"> significantly shrinking their internal media access latency and containing multi-core controllers to handle requests, applications can potentially leverage the intelligence near raw data to further reduce the bandwidth demand, end-to-end latency and computation power for data processing. However, as conventional computer systems create and maintain the file abstraction outside of storage devices &mdash; using the host computer processors and main memory, any computation relying on file system abstraction will still require the host system resources, burying the potential of near-data processing model. An ultimate architecture that addresses the aforementioned deficiency is allowing the storage device itself to understand the semantic of file system abstraction and thus reducing the unnecessary queries to the host system when managing, preprocessing data inside storage devices.</span></div>\n<div><span class=\" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qovuvz88zlez122zvz82z8z76z0z80zdcz79zij4z70zz81zz69zz68zz75z8volz87zdyz83z\"><br /></span></div>\n<div><span class=\" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qovuvz88zlez122zvz82z8z76z0z80zdcz79zij4z70zz81zz69zz68zz75z8volz87zdyz83z\">This work explores and produces three prototype systems that demonstrates the effectiveness of an SSD architecture that can work without relying on the file system abstraction on the host computer.</span></div>\n<div><span class=\" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qovuvz88zlez122zvz82z8z76z0z80zdcz79zij4z70zz81zz69zz68zz75z8volz87zdyz83z\"><br /></span></div>\n<div><span class=\" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qovuvz88zlez122zvz82z8z76z0z80zdcz79zij4z70zz81zz69zz68zz75z8volz87zdyz83z\">The first is an intelligent SSD prototype that uses its built-in machine learning model to automatically detect the type of incoming data and use the most appropriate data compression algorithm without any hint from the application or the host file system. In contrast to conventional approaches that either require the file system to consume additional host computer processor resources or modify the application code, the proposed intelligent SSD architecture does not have any of these drawbacks. The real system implementation of the this SSD prototype shows 19% improvement in SSD&rsquo;s lifetime with reasonable 13.4% performance degradation.</span></div>\n<div><span class=\" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qovuvz88zlez122zvz82z8z76z0z80zdcz79zij4z70zz81zz69zz68zz75z8volz87zdyz83z\"><br /></span></div>\n<div><span class=\" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qovuvz88zlez122zvz82z8z76z0z80zdcz79zij4z70zz81zz69zz68zz75z8volz87zdyz83z\">The second prototype used the same intelligent SSD prototype, but the firmware code on the SSD controller to work with applications in storing and managing storage data by understanding the graphical relationships of data elements in applications. In this way, SSDs&rsquo; firmware code can retrieve important information regarding the graph stored inside the device without querying the host system&rsquo;s application or file system and directly preprocess large graph efficiently. The result shows up to 1.85x speedup over the conventional approach in fetching graphs.</span></div>\n<div><span class=\" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qovuvz88zlez122zvz82z8z76z0z80zdcz79zij4z70zz81zz69zz68zz75z8volz87zdyz83z\"><br /></span></div>\n<div><span class=\" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qovuvz88zlez122zvz82z8z76z0z80zdcz79zij4z70zz81zz69zz68zz75z8volz87zdyz83z\">The third prototype is an intelligent SSD that completely host the file system in-storage, and the host system&rsquo;s file system is simply an interface to the file system on SSD. This work is still under submission to a peer-reviewed conference. To demonstrate the full potential of this work, the third prototype also provides a easy-to-program interface that allows code accessing storage data to flexibly located among different system components without worrying about the file system abstraction. The result shows 29% performance gain over traditional intelligent SSD frameworks.</span></div>\n<div><span class=\" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qovuvz88zlez122zvz82z8z76z0z80zdcz79zij4z70zz81zz69zz68zz75z8volz87zdyz83z\"><br /></span></div>\n<div><span class=\" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qovuvz88zlez122zvz82z8z76z0z80zdcz79zij4z70zz81zz69zz68zz75z8volz87zdyz83z\">This work resulted in a number of papers, an award paper</span><span class=\" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qovuvz88zlez122zvz82z8z76z0z80zdcz79zij4z70zz81zz69zz68zz75z8volz87zdyz83z s-lparen\"> </span><span class=\" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qovuvz88zlez122zvz82z8z76z0z80zdcz79zij4z70zz81zz69zz68zz75z8volz87zdyz83z h-lparen\">(top</span><span class=\" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qovuvz88zlez122zvz82z8z76z0z80zdcz79zij4z70zz81zz69zz68zz75z8volz87zdyz83z\"> picks in computer architecture, recognizing the top research publications from the prior year), a number of invited research and distinguished lecture talks at universities and industry locations, and a software/hardware infrastructure that will be made available to other users after all the produced papers are published. The result of the work also becomes part of the materials in the PI&rsquo;s operating systems and computer architecture classes. Among the students who have worked on the project and been mentored by the PI, several are continuing students at UC Riverside, but two have joined industry and are currently working in related fields.</span></div>\n</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 04/27/2020<br>\n\t\t\t\t\tModified by: Hung-Wei&nbsp;Tseng</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n\nAs non-volatile memory storage devices, especially solid state drives (SSDs), significantly shrinking their internal media access latency and containing multi-core controllers to handle requests, applications can potentially leverage the intelligence near raw data to further reduce the bandwidth demand, end-to-end latency and computation power for data processing. However, as conventional computer systems create and maintain the file abstraction outside of storage devices &mdash; using the host computer processors and main memory, any computation relying on file system abstraction will still require the host system resources, burying the potential of near-data processing model. An ultimate architecture that addresses the aforementioned deficiency is allowing the storage device itself to understand the semantic of file system abstraction and thus reducing the unnecessary queries to the host system when managing, preprocessing data inside storage devices.\n\n\nThis work explores and produces three prototype systems that demonstrates the effectiveness of an SSD architecture that can work without relying on the file system abstraction on the host computer.\n\n\nThe first is an intelligent SSD prototype that uses its built-in machine learning model to automatically detect the type of incoming data and use the most appropriate data compression algorithm without any hint from the application or the host file system. In contrast to conventional approaches that either require the file system to consume additional host computer processor resources or modify the application code, the proposed intelligent SSD architecture does not have any of these drawbacks. The real system implementation of the this SSD prototype shows 19% improvement in SSD\u2019s lifetime with reasonable 13.4% performance degradation.\n\n\nThe second prototype used the same intelligent SSD prototype, but the firmware code on the SSD controller to work with applications in storing and managing storage data by understanding the graphical relationships of data elements in applications. In this way, SSDs\u2019 firmware code can retrieve important information regarding the graph stored inside the device without querying the host system\u2019s application or file system and directly preprocess large graph efficiently. The result shows up to 1.85x speedup over the conventional approach in fetching graphs.\n\n\nThe third prototype is an intelligent SSD that completely host the file system in-storage, and the host system\u2019s file system is simply an interface to the file system on SSD. This work is still under submission to a peer-reviewed conference. To demonstrate the full potential of this work, the third prototype also provides a easy-to-program interface that allows code accessing storage data to flexibly located among different system components without worrying about the file system abstraction. The result shows 29% performance gain over traditional intelligent SSD frameworks.\n\n\nThis work resulted in a number of papers, an award paper (top picks in computer architecture, recognizing the top research publications from the prior year), a number of invited research and distinguished lecture talks at universities and industry locations, and a software/hardware infrastructure that will be made available to other users after all the produced papers are published. The result of the work also becomes part of the materials in the PI\u2019s operating systems and computer architecture classes. Among the students who have worked on the project and been mentored by the PI, several are continuing students at UC Riverside, but two have joined industry and are currently working in related fields.\n\n\n\t\t\t\t\tLast Modified: 04/27/2020\n\n\t\t\t\t\tSubmitted by: Hung-Wei Tseng"
 }
}