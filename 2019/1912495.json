{
 "awd_id": "1912495",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "FoMR: Shrinking the Control and Data Flow Latencies of Single Thread Executions for Emerging Workloads",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Danella Zhao",
 "awd_eff_date": "2019-10-01",
 "awd_exp_date": "2022-09-30",
 "tot_intn_awd_amt": 200000.0,
 "awd_amount": 200000.0,
 "awd_min_amd_letter_date": "2019-08-05",
 "awd_max_amd_letter_date": "2019-08-05",
 "awd_abstract_narration": "Edge devices such as AR/VR glasses, smart cameras, gaming consoles are permeating rapidly through society for performing numerous applications in surveillance, multi-user gaming, immersive social networking, autonomous control, etc. While one would want to perform all of the data processing at these edge devices, resource constraints with the need for accessing a broader corpus of data, require offloading the computations to a back-end server. These computations are usually parallelized for their throughput needs, but the slowest thread still impacts the latency/responsiveness to the edge device/user.  The highly interactive nature of these workloads, thus, makes it imperative to ensure that no thread is left behind, and individual data path of each thread is maximally utilized. This project seeks to address this challenge and work to eliminate the mismatch in responsiveness across various applications run at edge devices. The investigators aim to offer a graduate level course on this subject, help enhance the related undergraduate courses, conduct summer camps for middle school girls.\r\n\r\nThis project proposes three optimizations each for reducing control and data flow latencies in the normal data path for the emerging edge-serving workloads. The three control flow optimizations include: (i) cross-stack code layouts for better instruction locality, (ii) identifying and boosting the fetch bandwidth of critical instruction chains (CritICs), and (iii) improving branch prediction accuracy especially in shared libraries/OS by leveraging application/data knowledge. On the data flow side, the three optimizations try to leverage the importance of data content: (i) identifying frequent data flow sequences across the entire software stack and memorizing them, (ii) developing content-aware tiling techniques for code generation to reduce re-use distance between same/similar content, and (iii) dynamically leveraging approximations.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Anand",
   "pi_last_name": "Sivasubramaniam",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Anand Sivasubramaniam",
   "pi_email_addr": "axs53@psu.edu",
   "nsf_id": "000258710",
   "pi_start_date": "2019-08-05",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Chitaranjan",
   "pi_last_name": "Das",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Chitaranjan Das",
   "pi_email_addr": "cxd12@psu.edu",
   "nsf_id": "000358842",
   "pi_start_date": "2019-08-05",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Pennsylvania State Univ University Park",
  "inst_street_address": "201 OLD MAIN",
  "inst_street_address_2": "",
  "inst_city_name": "UNIVERSITY PARK",
  "inst_state_code": "PA",
  "inst_state_name": "Pennsylvania",
  "inst_phone_num": "8148651372",
  "inst_zip_code": "168021503",
  "inst_country_name": "United States",
  "cong_dist_code": "15",
  "st_cong_dist_code": "PA15",
  "org_lgl_bus_name": "THE PENNSYLVANIA STATE UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "NPM2J7MSCF61"
 },
 "perf_inst": {
  "perf_inst_name": "Pennsylvania State University",
  "perf_str_addr": "W320 Westgate Bldg",
  "perf_city_name": "University Park",
  "perf_st_code": "PA",
  "perf_st_name": "Pennsylvania",
  "perf_zip_code": "168027000",
  "perf_ctry_code": "US",
  "perf_cong_dist": null,
  "perf_st_cong_dist": "PA",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "021Z",
   "pgm_ref_txt": "Industry Partnerships"
  },
  {
   "pgm_ref_code": "7798",
   "pgm_ref_txt": "SOFTWARE & HARDWARE FOUNDATION"
  },
  {
   "pgm_ref_code": "7941",
   "pgm_ref_txt": "COMPUTER ARCHITECTURE"
  },
  {
   "pgm_ref_code": "8585",
   "pgm_ref_txt": "NSF/Intel Partnership Projects"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 200000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Conventional von-Neumann processors rely on a steady supply of instructions and data from the memory hierarchy for their efficent operation. However, non-regular accesses in both, can result in unduly stalling their operation. This project explores \"reuse\" not just in what is being fetched from memory, but also in their content to deal with such stalls.</p>\n<p>For the instructions, while instruction caches have provided high hit rates, they have been less efficient for today's datacenter workloads with very large code bases, that not only includes applications but also libraries and operating system services. In this project, we have shown that conventional instruction caches tend to get polluted with these large code footprints. To mitigate this problem, we have proposed a new structure, called iFilter, that controls/regulates the admission of new instructions into the instruction cache by identifying bursts of accesses and spearating out temporal and spatial localities.</p>\n<p>For the data stream, this project has tried to short-circuit entire instruction sequences by identifying previously encountered inputs. THis is particularly useful in gaming applications where there are a menu of commonly used inputs that can be memoized and repeatedly used. Such reuse avoids the need for re-getting data, and even instructions, from the memory hierarchy.</p>\n<p>This project has trained 2 PhD students, including 1 female student. A graduate level seminar course on background and state-of-the-art material related to this project has been taught at Penn State over the duration of the project. There has been continuous collaboration with Intel Corp over the duration of this project.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 11/06/2022<br>\n\t\t\t\t\tModified by: Anand&nbsp;Sivasubramaniam</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nConventional von-Neumann processors rely on a steady supply of instructions and data from the memory hierarchy for their efficent operation. However, non-regular accesses in both, can result in unduly stalling their operation. This project explores \"reuse\" not just in what is being fetched from memory, but also in their content to deal with such stalls.\n\nFor the instructions, while instruction caches have provided high hit rates, they have been less efficient for today's datacenter workloads with very large code bases, that not only includes applications but also libraries and operating system services. In this project, we have shown that conventional instruction caches tend to get polluted with these large code footprints. To mitigate this problem, we have proposed a new structure, called iFilter, that controls/regulates the admission of new instructions into the instruction cache by identifying bursts of accesses and spearating out temporal and spatial localities.\n\nFor the data stream, this project has tried to short-circuit entire instruction sequences by identifying previously encountered inputs. THis is particularly useful in gaming applications where there are a menu of commonly used inputs that can be memoized and repeatedly used. Such reuse avoids the need for re-getting data, and even instructions, from the memory hierarchy.\n\nThis project has trained 2 PhD students, including 1 female student. A graduate level seminar course on background and state-of-the-art material related to this project has been taught at Penn State over the duration of the project. There has been continuous collaboration with Intel Corp over the duration of this project.\n\n\t\t\t\t\tLast Modified: 11/06/2022\n\n\t\t\t\t\tSubmitted by: Anand Sivasubramaniam"
 }
}