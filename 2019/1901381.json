{
 "awd_id": "1901381",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "SHF: Medium: Algorithmic lambda-Calculus for the Design, Analysis, and Implementation of Parallel Algorithms",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2019-07-01",
 "awd_exp_date": "2024-06-30",
 "tot_intn_awd_amt": 1199773.0,
 "awd_amount": 1399291.0,
 "awd_min_amd_letter_date": "2019-05-31",
 "awd_max_amd_letter_date": "2022-07-16",
 "awd_abstract_narration": "The hardware advances of recent years have brought multicore chips and parallel computing to the mainstream.  While there have been many advances in parallel software for such multicore chips over the past decade, there is still no satisfactory model for analyzing the performance of parallel algorithms.  In particular, and unlike the case for sequential algorithms, there is a gap between cost models for estimating performance of algorithms and easy to use programming models for implementing the algorithms.  This project is developing a practical approach to parallel algorithms by bringing together two fundamental but distinct theories of computing---one based on machine models and following the work that dates back to Dr. Alan Turing, and the other based on language models and following the work that dates back to Dr. Alonzo Church.  The novelty of the project is in combining these two theories, for which there is currently a large rift.  The impact of the project is in making significant steps in simplifying the design and analysis of parallel algorithms, and better understanding of the relationship between the two theories of computing. The educational component of this project involves teaching undergraduates parallel algorithms and creates ample opportunities to test the practical effectiveness of the proposed approach, along with concrete efforts to broaden participation in computing through programs at Carnegie-Mellon University.\r\n\r\nThe work is following an end-to-end methodology bridging Church and Turing's theories along with practice.  On the theory side, the project is developing a calculus called the ``algorithmic lambda-calculus,'' that equips Church's lambda-calculus with a cost semantics, making it possible to reason about the total work and parallel span (time) of programs, which in turn can be used to understand the performance of algorithms, at least asymptotically.  To show that this calculus is realizable, the project is theoretically establishing that the calculus is faithful to a transition semantics, which can then be efficiently realized on an abstract machine such as the Parallel-RAM.  On the practical side, the project is developing a programming language and a compiler that faithfully implements this theory.  The project is also extending the algorithmic lambda-calculus, the realizability theorems, and the implementation to support important features such as aggregate parallel data structures, interaction, and different forms of parallelism.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Guy",
   "pi_last_name": "Blelloch",
   "pi_mid_init": "E",
   "pi_sufx_name": "",
   "pi_full_name": "Guy E Blelloch",
   "pi_email_addr": "guyb@cs.cmu.edu",
   "nsf_id": "000196851",
   "pi_start_date": "2019-05-31",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Robert",
   "pi_last_name": "Harper",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Robert Harper",
   "pi_email_addr": "rwh@cs.cmu.edu",
   "nsf_id": "000113062",
   "pi_start_date": "2019-05-31",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Umut",
   "pi_last_name": "Acar",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Umut Acar",
   "pi_email_addr": "umut@cs.cmu.edu",
   "nsf_id": "000636864",
   "pi_start_date": "2019-05-31",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Carnegie-Mellon University",
  "inst_street_address": "5000 FORBES AVE",
  "inst_street_address_2": "",
  "inst_city_name": "PITTSBURGH",
  "inst_state_code": "PA",
  "inst_state_name": "Pennsylvania",
  "inst_phone_num": "4122688746",
  "inst_zip_code": "152133815",
  "inst_country_name": "United States",
  "cong_dist_code": "12",
  "st_cong_dist_code": "PA12",
  "org_lgl_bus_name": "CARNEGIE MELLON UNIVERSITY",
  "org_prnt_uei_num": "U3NKNFLNQ613",
  "org_uei_num": "U3NKNFLNQ613"
 },
 "perf_inst": {
  "perf_inst_name": "Carnegie-Mellon University",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "PA",
  "perf_st_name": "Pennsylvania",
  "perf_zip_code": "152133890",
  "perf_ctry_code": "US",
  "perf_cong_dist": "12",
  "perf_st_cong_dist": "PA12",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "287800",
   "pgm_ele_name": "Special Projects - CCF"
  },
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  },
  {
   "pgm_ref_code": "8206",
   "pgm_ref_txt": "Formal Methods and Verification"
  }
 ],
 "app_fund": [
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01002223DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 894377.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 199518.0
  },
  {
   "fund_oblg_fiscal_yr": 2022,
   "fund_oblg_amt": 305396.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The focus of the work of this grant was on developing effective<br />parallel algorithms in functional languages (i.e. languages that<br />derive from the pure lambda calculus).&nbsp; Functional languages are<br />inherently safer than sequential languages for parallelism due to the<br />lack of mutation and hence no race conditions.&nbsp; The work follows<br />several thrusts.<br /><br />It developed foundational approaches to memory management for<br />functional programs, that bridges theoretical guarantees and practical<br />performance.&nbsp; The specific intellectual contributions include the<br />design, development, analysis, and evaluation of a<br />disentanglement-based approach to parallel memory management.&nbsp; The<br />project includes a full implementation of the approach in the Parallel<br />ML language, which has been used in teaching parallelism to<br />undergraduate students as part of a core computer science curriculum,<br />along with the development of supporting course materials.&nbsp; The<br />project also includes the development of an online learning platform<br />that integrates online books with discussions, grading, and<br />autograding.&nbsp; This project has been used by many thousands of students<br />and has supported online education during the COVID-19 pandemic.&nbsp; The<br />work resulted in several papers including two distinguished paper at<br />POPL and a distinguished paper at ICFP.<br /><br />It developed an approach to cost verification of parallel functional<br />programs using the concept of a *phase distinction* to isolate the<br />pure behavior of a program from its instrumentation with cost<br />profiling.&nbsp; Using this distinction we may prove, for example, that<br />insertion sort and merge sort are behaviorally equal (i.e., they both<br />sort), while at the same time verifying that the former uses<br />quadratically many comparisons, whereas the latter uses only<br />logarithmically many.&nbsp; These characteristics permit assigning both<br />sequential and parallel asymptotic cost bounds while also verifying<br />the equality of the two algorithms.&nbsp; In this manner we achieve a<br />smooth integration of cost and behavior of parallel functional<br />programs.<br /><br />It developed purely functional data structures for graph<br />problems. For example, we developed a compressed purely-functional<br />search tree data structure that significantly improves on the space<br />usage and locality of purely-functional trees.&nbsp; We then designed<br />theoretically-efficient and practical algorithms for performing batch<br />updates to the trees, and also show that we can store massive dynamic<br />real-world graphs using only a few bytes per edge, thereby achieving<br />space usage close to that of the best static graph processing<br />frameworks.<br /><br />It Developed compiler optimizations based on \"loop fusion\" for<br />functional algorithms along with a cost model to indicate how those<br />optimizations perform.&nbsp; Specifically, we developed an approach that<br />fuses widely used operations on collections such as map, reduce, scan,<br />filter and flatten.&nbsp; Our approach is based on a novel technique that<br />parallelizes over blocks of a loop using streaming within each block.<br />We demonstrated the effectiveness of the approach by implementing a<br />multicore library in Parallel ML.&nbsp; To help users understand when to<br />use the approach and how much can be gained we define a cost semantics<br />indicating when fusion occurs and how it effects both memory capacity<br />and number of memory accesses.&nbsp; We experimented across a dozen<br />benchmarks demonstrating significant reductions in both space and<br />time.&nbsp; The work was published in PPoPP 2022.<br /><br />As part of the project the principal investigators have trained<br />several Ph.D. students and undergraduates in all aspects of the work.<br />The project resulted in numerous awards including numerous awards for<br />papers written and a nation-wide Ph.D. thesis award.</p><br>\n<p>\n Last Modified: 12/20/2024<br>\nModified by: Guy&nbsp;E&nbsp;Blelloch</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nThe focus of the work of this grant was on developing effective\nparallel algorithms in functional languages (i.e. languages that\nderive from the pure lambda calculus). Functional languages are\ninherently safer than sequential languages for parallelism due to the\nlack of mutation and hence no race conditions. The work follows\nseveral thrusts.\n\nIt developed foundational approaches to memory management for\nfunctional programs, that bridges theoretical guarantees and practical\nperformance. The specific intellectual contributions include the\ndesign, development, analysis, and evaluation of a\ndisentanglement-based approach to parallel memory management. The\nproject includes a full implementation of the approach in the Parallel\nML language, which has been used in teaching parallelism to\nundergraduate students as part of a core computer science curriculum,\nalong with the development of supporting course materials. The\nproject also includes the development of an online learning platform\nthat integrates online books with discussions, grading, and\nautograding. This project has been used by many thousands of students\nand has supported online education during the COVID-19 pandemic. The\nwork resulted in several papers including two distinguished paper at\nPOPL and a distinguished paper at ICFP.\n\nIt developed an approach to cost verification of parallel functional\nprograms using the concept of a *phase distinction* to isolate the\npure behavior of a program from its instrumentation with cost\nprofiling. Using this distinction we may prove, for example, that\ninsertion sort and merge sort are behaviorally equal (i.e., they both\nsort), while at the same time verifying that the former uses\nquadratically many comparisons, whereas the latter uses only\nlogarithmically many. These characteristics permit assigning both\nsequential and parallel asymptotic cost bounds while also verifying\nthe equality of the two algorithms. In this manner we achieve a\nsmooth integration of cost and behavior of parallel functional\nprograms.\n\nIt developed purely functional data structures for graph\nproblems. For example, we developed a compressed purely-functional\nsearch tree data structure that significantly improves on the space\nusage and locality of purely-functional trees. We then designed\ntheoretically-efficient and practical algorithms for performing batch\nupdates to the trees, and also show that we can store massive dynamic\nreal-world graphs using only a few bytes per edge, thereby achieving\nspace usage close to that of the best static graph processing\nframeworks.\n\nIt Developed compiler optimizations based on \"loop fusion\" for\nfunctional algorithms along with a cost model to indicate how those\noptimizations perform. Specifically, we developed an approach that\nfuses widely used operations on collections such as map, reduce, scan,\nfilter and flatten. Our approach is based on a novel technique that\nparallelizes over blocks of a loop using streaming within each block.\nWe demonstrated the effectiveness of the approach by implementing a\nmulticore library in Parallel ML. To help users understand when to\nuse the approach and how much can be gained we define a cost semantics\nindicating when fusion occurs and how it effects both memory capacity\nand number of memory accesses. We experimented across a dozen\nbenchmarks demonstrating significant reductions in both space and\ntime. The work was published in PPoPP 2022.\n\nAs part of the project the principal investigators have trained\nseveral Ph.D. students and undergraduates in all aspects of the work.\nThe project resulted in numerous awards including numerous awards for\npapers written and a nation-wide Ph.D. thesis award.\t\t\t\t\tLast Modified: 12/20/2024\n\n\t\t\t\t\tSubmitted by: GuyEBlelloch\n"
 }
}