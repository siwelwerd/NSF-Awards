{
 "awd_id": "1931408",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "Elements: C++ as a service - rapid software development and dynamic  interoperability with Python and beyond",
 "cfda_num": "47.070",
 "org_code": "05090000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Rob Beverly",
 "awd_eff_date": "2019-10-01",
 "awd_exp_date": "2023-09-30",
 "tot_intn_awd_amt": 599608.0,
 "awd_amount": 599608.0,
 "awd_min_amd_letter_date": "2019-09-04",
 "awd_max_amd_letter_date": "2019-09-04",
 "awd_abstract_narration": "A key enabler of innovation and discovery for many scientific researchers is the ability to explore data and express ideas quickly as software prototypes. Tools and techniques that reduce the \"time to insight\" are essential to the productivity of researchers. At the same time, massive increases in data volumes and computational needs require a continual focus on maximizing code performance to realize the potential science from novel scientific apparatus. Programming language usability and interoperability are omni-disciplinary issues affecting today's scientific research community. As a result, a common approach across many scientific fields research is for scientists to program in Python, while steering kernels written in C++. This C++ as a service (CaaS) project brings a novel interpretative technology to science researchers through a state-of-the-art C++ execution environment. CaaS will enable both beginners and experts in C++. It enables higher-productivity in development and extends the interactive education and training platform for programming languages. CaaS will enable existing technologies as well as truly new development and analysis approaches. CaaS will directly support grow cyber-capabilities that advance scientific research across a broad range of pursuits.\r\n\r\nPerformance-focused languages, such as C++, are a critical infrastructure component for many scientific fields that have either large computing challenges or the need for low latency for results. The productivity of data scientists can be dramatically increased by an easy to use dynamic programming and development environment, together with a fully featured interoperability layer. The CaaS project provides a dynamic C++ execution environment and enables runtime language interoperability between C++ and other languages, such as Python, through a native-like, dynamic environment. CaaS provides seamless offloading of work in a heterogeneous computing environment, including hardware accelerators, which is more and more often required by today's researchers. These advances will enable researchers to more easily develop in, and use, large C++ codebases that are critical infrastructure components in many scientific fields. CaaS also allows true interoperability with C++ in Jupyter notebooks, and a robust prototyping environment for C++ developments. It encourages analysis and code sharing and facilitates scientific provenance tracking. By reducing the technical burden of development, researchers can focus instead on their scientific productivity. More broadly, notebook-based training in C++, or in a mixed programming environment that includes C++, is a key functionality. Enhancements in technical training will enable national advancements in science, technology, engineering, and mathematics capabilities.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "OAC",
 "org_div_long_name": "Office of Advanced Cyberinfrastructure (OAC)",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "David",
   "pi_last_name": "Lange",
   "pi_mid_init": "J",
   "pi_sufx_name": "",
   "pi_full_name": "David J Lange",
   "pi_email_addr": "david.lange@princeton.edu",
   "nsf_id": "000776533",
   "pi_start_date": "2019-09-04",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Princeton University",
  "inst_street_address": "1 NASSAU HALL",
  "inst_street_address_2": "",
  "inst_city_name": "PRINCETON",
  "inst_state_code": "NJ",
  "inst_state_name": "New Jersey",
  "inst_phone_num": "6092583090",
  "inst_zip_code": "085442001",
  "inst_country_name": "United States",
  "cong_dist_code": "12",
  "st_cong_dist_code": "NJ12",
  "org_lgl_bus_name": "THE TRUSTEES OF PRINCETON UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "NJ1YPQXQG7U5"
 },
 "perf_inst": {
  "perf_inst_name": "Princeton University",
  "perf_str_addr": "",
  "perf_city_name": "Princeton",
  "perf_st_code": "NJ",
  "perf_st_name": "New Jersey",
  "perf_zip_code": "085442020",
  "perf_ctry_code": "US",
  "perf_cong_dist": "12",
  "perf_st_cong_dist": "NJ12",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "800400",
   "pgm_ele_name": "Software Institutes"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "026Z",
   "pgm_ref_txt": "NSCI: National Strategic Computing Initi"
  },
  {
   "pgm_ref_code": "077Z",
   "pgm_ref_txt": "CSSI-1: Cyberinfr for Sustained Scientif"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 599608.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-069cc35b-7fff-a4de-cb0b-90dc032a8f7a\"> </span></p>\n<p dir=\"ltr\"><span>Programming language usability and interoperability are omnidisciplinary issues affecting scientific researchers. The C++ compiler as a service (CaaS) concept brings novel interpretative C++ technology to science researchers by providing a state-of-the-art C++ execution environment based on the LLVM and Clang technologies. CaaS provides a uniform C++ execution environment, and enables runtime language interactive interoperability between C++ and other languages through a native-like, dynamic bindings.&nbsp;</span></p>\n<p dir=\"ltr\"><span>This work generalized the Cling software to offer a robust, sustainable and omnidisciplinary solution for C++ language interoperability. Clang-Repl provides the LLVM ecosystem an interpretative technology supporting a state-of-the-art C++ execution environment and has developed native-like, dynamic runtime interoperability between C++ and Python.</span></p>\n<p dir=\"ltr\"><span>This project developed prototypes and demonstrators for numerous other scientific applications. Xeus-Clang-Repl will replace the Xeus-Cling package (based on our Cling package) package as a standard Jupyter system plugin for C++. Xeus-Clang-Repl provides integrated interoperability support to mix C++ and Python code blocks. This platform has allowed us to put into practice the programming model that we initially envisioned: a user can initialize a setup in using python, then call a C++ function that takes that setup as input, and finally plot results of that function back in Python. This allows the use of powerful Python libraries together with native C++ code bases within a single integrated programming environment.</span></p>\n<p dir=\"ltr\"><span>The development of a floating-point uncertainties estimation tool as a plugin to Clang-Repl. Clad is a source-transformation based automatic differentiation tool. By being embedded in the compiler, Clang-Repl allows Clad to assess and track the floating-point errors introduced at each step of a program's call chain. This can then be used to assess a total error budget (eg, to function as an uncertainty quantification tool) of a program. The CPPYY project is adopting our C++ and Python interoperability infrastructure (CppInterOp) where it provides significant performance enhancements and easies distribution. CPPYY is a general library used by a range of sciences. It provides an automatic, on-demand mapping of Python to C++ concepts.It relies on on-demand reflection information which can be provided by LLVM as a result of our work. Our work enables a header-only library to replace a large library in the dependency chain of CPPYY.&nbsp;</span></p>\n<p dir=\"ltr\"><span>Our software is now routinely released with the LLVM software release cycles. We have realized the goal of enabling our rather low-level tools to reach a broad set of use cases. Within the high-energy physics application from which Cling originated, the process of software upgrades has become easier and the code base of tools smaller. This reduced maintenance burden is a clear benefit of moving technology into community tools like LLVM.</span></p>\n<p dir=\"ltr\"><span>The interactive C++ environment has proven to be very useful for education. This project leveraged it to develop scientific application tutorials and training courses on C++. Our project has also proven to be very attractive to undergraduate and graduate students pursuing computer science research (most often specifically in compiler research, a field not widely taught). This project mentored numerous students by taking advantage of community programs. These students have progressed into STEM careers both via academic pursuits and in industry. </span></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p><br>\n<p>\n Last Modified: 01/27/2024<br>\nModified by: David&nbsp;J&nbsp;Lange</p></div>\n<div class=\"porSideCol\"\n><div class=\"each-gallery\">\n<div class=\"galContent\" id=\"gallery0\">\n<div class=\"photoCount\" id=\"photoCount0\">\n\t\t\t\t\t\t\t\t\tImages (<span id=\"selectedPhoto0\">1</span> of <span class=\"totalNumber\"></span>)\t\n\t\t\t\t\t\t\t\t</div>\n<div class=\"galControls onePhoto\" id=\"controls0\"></div>\n<div class=\"galSlideshow\" id=\"slideshow0\"></div>\n<div class=\"galEmbox\" id=\"embox\">\n<div class=\"image-title\"></div>\n</div>\n</div>\n<div class=\"galNavigation\" id=\"navigation0\">\n<ul class=\"thumbs\" id=\"thumbs0\">\n<li>\n<a href=\"/por/images/Reports/POR/2024/1931408/1931408_10640006_1706292304641_Screenshot_2024_01_26_at_6.58.20_PM--rgov-214x142.png\" original=\"/por/images/Reports/POR/2024/1931408/1931408_10640006_1706292304641_Screenshot_2024_01_26_at_6.58.20_PM--rgov-800width.png\" title=\"CppInterOp impact on CPPYY\"><img src=\"/por/images/Reports/POR/2024/1931408/1931408_10640006_1706292304641_Screenshot_2024_01_26_at_6.58.20_PM--rgov-66x44.png\" alt=\"CppInterOp impact on CPPYY\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Example impacts of the adoption of CppInterOp by the CPPYY package on performance of automatic C++ Python bindings.</div>\n<div class=\"imageCredit\">Baidyanath Kundu</div>\n<div class=\"imagePermisssions\">Creative Commons</div>\n<div class=\"imageSubmitted\">David&nbsp;J&nbsp;Lange\n<div class=\"imageTitle\">CppInterOp impact on CPPYY</div>\n</div>\n</li><li>\n<a href=\"/por/images/Reports/POR/2024/1931408/1931408_10640006_1706292162410_Screenshot_2024_01_26_at_6.59.35_PM--rgov-214x142.png\" original=\"/por/images/Reports/POR/2024/1931408/1931408_10640006_1706292162410_Screenshot_2024_01_26_at_6.59.35_PM--rgov-800width.png\" title=\"RooFit AD speedup demonstration\"><img src=\"/por/images/Reports/POR/2024/1931408/1931408_10640006_1706292162410_Screenshot_2024_01_26_at_6.59.35_PM--rgov-66x44.png\" alt=\"RooFit AD speedup demonstration\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Demonstration of the RooFit speed up due to the adoption of the Clad Automatic Differentiation toolkit.</div>\n<div class=\"imageCredit\">Garima Singh</div>\n<div class=\"imagePermisssions\">Creative Commons</div>\n<div class=\"imageSubmitted\">David&nbsp;J&nbsp;Lange\n<div class=\"imageTitle\">RooFit AD speedup demonstration</div>\n</div>\n</li><li>\n<a href=\"/por/images/Reports/POR/2024/1931408/1931408_10640006_1706292400361_Screenshot_2024_01_26_at_6.56.44_PM--rgov-214x142.png\" original=\"/por/images/Reports/POR/2024/1931408/1931408_10640006_1706292400361_Screenshot_2024_01_26_at_6.56.44_PM--rgov-800width.png\" title=\"Python and C++ Interoperability\"><img src=\"/por/images/Reports/POR/2024/1931408/1931408_10640006_1706292400361_Screenshot_2024_01_26_at_6.56.44_PM--rgov-66x44.png\" alt=\"Python and C++ Interoperability\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Demonstration of Python and C++ interoperability enabled by Clang-Repl and CppInterOp</div>\n<div class=\"imageCredit\">Vassil Vassilev</div>\n<div class=\"imagePermisssions\">Creative Commons</div>\n<div class=\"imageSubmitted\">David&nbsp;J&nbsp;Lange\n<div class=\"imageTitle\">Python and C++ Interoperability</div>\n</div>\n</li></ul>\n</div>\n</div></div>\n</div>\n",
  "por_txt_cntn": "\n\n \n\n\nProgramming language usability and interoperability are omnidisciplinary issues affecting scientific researchers. The C++ compiler as a service (CaaS) concept brings novel interpretative C++ technology to science researchers by providing a state-of-the-art C++ execution environment based on the LLVM and Clang technologies. CaaS provides a uniform C++ execution environment, and enables runtime language interactive interoperability between C++ and other languages through a native-like, dynamic bindings.\n\n\nThis work generalized the Cling software to offer a robust, sustainable and omnidisciplinary solution for C++ language interoperability. Clang-Repl provides the LLVM ecosystem an interpretative technology supporting a state-of-the-art C++ execution environment and has developed native-like, dynamic runtime interoperability between C++ and Python.\n\n\nThis project developed prototypes and demonstrators for numerous other scientific applications. Xeus-Clang-Repl will replace the Xeus-Cling package (based on our Cling package) package as a standard Jupyter system plugin for C++. Xeus-Clang-Repl provides integrated interoperability support to mix C++ and Python code blocks. This platform has allowed us to put into practice the programming model that we initially envisioned: a user can initialize a setup in using python, then call a C++ function that takes that setup as input, and finally plot results of that function back in Python. This allows the use of powerful Python libraries together with native C++ code bases within a single integrated programming environment.\n\n\nThe development of a floating-point uncertainties estimation tool as a plugin to Clang-Repl. Clad is a source-transformation based automatic differentiation tool. By being embedded in the compiler, Clang-Repl allows Clad to assess and track the floating-point errors introduced at each step of a program's call chain. This can then be used to assess a total error budget (eg, to function as an uncertainty quantification tool) of a program. The CPPYY project is adopting our C++ and Python interoperability infrastructure (CppInterOp) where it provides significant performance enhancements and easies distribution. CPPYY is a general library used by a range of sciences. It provides an automatic, on-demand mapping of Python to C++ concepts.It relies on on-demand reflection information which can be provided by LLVM as a result of our work. Our work enables a header-only library to replace a large library in the dependency chain of CPPYY.\n\n\nOur software is now routinely released with the LLVM software release cycles. We have realized the goal of enabling our rather low-level tools to reach a broad set of use cases. Within the high-energy physics application from which Cling originated, the process of software upgrades has become easier and the code base of tools smaller. This reduced maintenance burden is a clear benefit of moving technology into community tools like LLVM.\n\n\nThe interactive C++ environment has proven to be very useful for education. This project leveraged it to develop scientific application tutorials and training courses on C++. Our project has also proven to be very attractive to undergraduate and graduate students pursuing computer science research (most often specifically in compiler research, a field not widely taught). This project mentored numerous students by taking advantage of community programs. These students have progressed into STEM careers both via academic pursuits and in industry. \n\n\n\n\n\n\t\t\t\t\tLast Modified: 01/27/2024\n\n\t\t\t\t\tSubmitted by: DavidJLange\n"
 }
}