{
 "awd_id": "1910017",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Collaborative Research: Fuzzing Cyber-Physical System Development Tool Chains with Deep Learning (DeepFuzz-CPS)",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2019-10-01",
 "awd_exp_date": "2023-09-30",
 "tot_intn_awd_amt": 248445.0,
 "awd_amount": 248445.0,
 "awd_min_amd_letter_date": "2019-07-29",
 "awd_max_amd_letter_date": "2019-07-29",
 "awd_abstract_narration": "Developing a modern technical product such as a car, plane, or a complex medical device includes designing the complex interplay between sensors (which measure physical product and environment state) and actuators (such as small electric motors that control the product). To design this interplay, engineers rely on complex design software tools. This project will address two problems these engineers face. (1) First, little systematic knowledge of the design tools or the resulting designs is available to guide engineers. For example, little is known about how basic design properties (such as various design size measures) relate to design quality attributes (such as design complexity and comprehensibility). This project will thus collect and analyze a large number of publicly available designs to build such knowledge. (2) Second, since the design tools are complex they can contain software bugs. These bugs may in turn silently introduce bugs into widely-deployed safety-critical systems, since product control software generated from designs is often deployed in safety-critical environments. Bugs in such systems often lead to costly product recalls and may have serious consequences. This project will thus develop techniques for automatically finding software bugs in such design tools.\r\n \r\nThis project consists of the following three major components. (1) First, this project will build the largest curated corpus of publicly available cyber-physical system models and related artifacts. Preliminary results analyzing this corpus both confirms and contradicts earlier findings that are based on significantly fewer models, suggesting the utility of a large corpus for future research. (2) Second, to side-step the age-old problem of missing complete formal specifications of cyber-physical system tool chains, this project instead will design a novel scheme to infer the cyber-physical system language validity rules via deep learning from the project's model corpus. Sampling the deep learner will enable generating additional models for the researchers' existing differential cyber-physical system tool chain testing infrastructure. (3) Third, this project will supplement the deep learner's training set via the first systematic cyber-physical system-model mutation scheme based on equivalence modulo inputs. Initial experiments have found several bugs in a commercial cyber-physical system tool chain that have been confirmed by the vendor of the tool chain.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Taylor",
   "pi_last_name": "Johnson",
   "pi_mid_init": "T",
   "pi_sufx_name": "",
   "pi_full_name": "Taylor T Johnson",
   "pi_email_addr": "taylor.johnson@gmail.com",
   "nsf_id": "000663375",
   "pi_start_date": "2019-07-29",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Vanderbilt University",
  "inst_street_address": "110 21ST AVE S",
  "inst_street_address_2": "",
  "inst_city_name": "NASHVILLE",
  "inst_state_code": "TN",
  "inst_state_name": "Tennessee",
  "inst_phone_num": "6153222631",
  "inst_zip_code": "372032416",
  "inst_country_name": "United States",
  "cong_dist_code": "05",
  "st_cong_dist_code": "TN05",
  "org_lgl_bus_name": "VANDERBILT UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "GTNBNWXJ12D5"
 },
 "perf_inst": {
  "perf_inst_name": "Vanderbilt University",
  "perf_str_addr": "1025 16th Avenue South, Room 401",
  "perf_city_name": "Nashville",
  "perf_st_code": "TN",
  "perf_st_name": "Tennessee",
  "perf_zip_code": "372121234",
  "perf_ctry_code": "US",
  "perf_cong_dist": "05",
  "perf_st_cong_dist": "TN05",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  },
  {
   "pgm_ele_code": "791800",
   "pgm_ele_name": "CPS-Cyber-Physical Systems"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7918",
   "pgm_ref_txt": "CYBER-PHYSICAL SYSTEMS (CPS)"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 248445.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Cyber-physical systems (CPS) such as motor vehicles, medical devices, and aerospace systems increasingly are built with design automation tool chains that encompass design-time modeling through implementation and deployment of auto-generated code to embedded computing devices. All stages of this process (simulation, code generation, compilation for the target hardware, etc.) have the potential to introduce software defects and bugs in the resulting software executed during operation of the CPS. Given these risks, this project investigated three major objectives. Objective A is to build and maintain a large-scale CPS model corpus and analyze model metrics and modeling practice. Objectives B and C generate new CPS models via deep learning (C) and equivalence modulo input (EMI)-based mutation (B), as input for differential testing to find CPS tool chain bugs. We evaluate these objectives using the MathWorks' Simulink/Stateflow, a prototypical and widely-used CPS development environment.</p>\n<p>The outcomes of the project include numerous peer reviewed publications in prestigious venues, education of student researchers, and engagement with relevant industry partners to transition the methodologies and technologies developed. For example, the EMI fuzzing methods and deep learning fuzzing methods found novel confirmed code generation bugs in the CPS tool chains. Given the further emergence of generative artificial intelligence (AI) and other deep learning techniques over the project, such generative models were explored for their capability to perform more sophisticated fuzzing than some earlier randomized differential testing based approaches. The project also investigated utilizing software engineering and verification techniques for deep learning systems themselves as utilized within CPS, given the increasing usage of such AI and machine learning (ML) techniques within CPS for tasks ranging from perception to planning and control. Events were organized in support of these activities within the research community, such as the International Verification of Neural Networks Competition (VNN-COMP) and the&nbsp;International Competition on Verifying Continuous and Hybrid Systems (ARCH-COMP), particularly the category on&nbsp;Artificial Intelligence and Neural Network Control Systems (AINNCS), as well as a tutorial at the&nbsp;ACM SIGBED International Conference on Embedded Software (EMSOFT). Overall, the intellectual merit and broader impacts outcomes and results of the project may lead to increased usage of these novel rigorous software engineering techniques in the design of CPS by utilizing AI techniques for testing and verification, and also enhanced safety and trustworthiness of AI, particularly as used within CPS.</p><br>\n<p>\n Last Modified: 01/29/2024<br>\nModified by: Taylor&nbsp;T&nbsp;Johnson</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nCyber-physical systems (CPS) such as motor vehicles, medical devices, and aerospace systems increasingly are built with design automation tool chains that encompass design-time modeling through implementation and deployment of auto-generated code to embedded computing devices. All stages of this process (simulation, code generation, compilation for the target hardware, etc.) have the potential to introduce software defects and bugs in the resulting software executed during operation of the CPS. Given these risks, this project investigated three major objectives. Objective A is to build and maintain a large-scale CPS model corpus and analyze model metrics and modeling practice. Objectives B and C generate new CPS models via deep learning (C) and equivalence modulo input (EMI)-based mutation (B), as input for differential testing to find CPS tool chain bugs. We evaluate these objectives using the MathWorks' Simulink/Stateflow, a prototypical and widely-used CPS development environment.\n\n\nThe outcomes of the project include numerous peer reviewed publications in prestigious venues, education of student researchers, and engagement with relevant industry partners to transition the methodologies and technologies developed. For example, the EMI fuzzing methods and deep learning fuzzing methods found novel confirmed code generation bugs in the CPS tool chains. Given the further emergence of generative artificial intelligence (AI) and other deep learning techniques over the project, such generative models were explored for their capability to perform more sophisticated fuzzing than some earlier randomized differential testing based approaches. The project also investigated utilizing software engineering and verification techniques for deep learning systems themselves as utilized within CPS, given the increasing usage of such AI and machine learning (ML) techniques within CPS for tasks ranging from perception to planning and control. Events were organized in support of these activities within the research community, such as the International Verification of Neural Networks Competition (VNN-COMP) and theInternational Competition on Verifying Continuous and Hybrid Systems (ARCH-COMP), particularly the category onArtificial Intelligence and Neural Network Control Systems (AINNCS), as well as a tutorial at theACM SIGBED International Conference on Embedded Software (EMSOFT). Overall, the intellectual merit and broader impacts outcomes and results of the project may lead to increased usage of these novel rigorous software engineering techniques in the design of CPS by utilizing AI techniques for testing and verification, and also enhanced safety and trustworthiness of AI, particularly as used within CPS.\t\t\t\t\tLast Modified: 01/29/2024\n\n\t\t\t\t\tSubmitted by: TaylorTJohnson\n"
 }
}