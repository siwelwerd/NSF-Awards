{
 "awd_id": "1901098",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "SHF: Medium: Collaborative Research: HUGS: Human-Guided Software Testing and Analysis for Scalable Bug Detection and Repair",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2019-08-01",
 "awd_exp_date": "2024-07-31",
 "tot_intn_awd_amt": 399987.0,
 "awd_amount": 415987.0,
 "awd_min_amd_letter_date": "2019-07-19",
 "awd_max_amd_letter_date": "2022-08-09",
 "awd_abstract_narration": "As all aspects of human society increasingly rely on software systems, there is an urgent need for scalable techniques and tools that can detect and eliminate software bugs effectively. In the last decade, hybrid approaches that combine software analysis techniques of different strengths have resulted in powerful tools for automated software testing and repair. However, despite the significant progress that has been made so far, fully automated techniques often fail to scale in practice. The key strength of automated techniques is their ability to quickly analyze many program behaviors by performing repetitive, computational tasks at a rate far beyond the human attention span and computation speed.  However, they do not know how to intelligently navigate complex state spaces, which often requires contextual and common-sense reasoning that humans excel at. The goal of this project is to combine the strengths of human ingenuity and automated tools in order to achieve bug and vulnerability detection and repair at scale, while keeping the human intervention at a minimum. All the techniques developed within the context of this project will be transitionable to scalable software testing products by industry and government, leading to better software dependability in all application domains, including critical national infrastructures. The project will also seek to broaden participation in computing by training students from under-represented groups.\r\n\r\nThe project will develop human-guided hybrid techniques that combine fuzz testing, symbolic execution, and search strategies that will aim to optimize the search towards efficient and scalable bug detection; annotations for controlling the search and for pruning the search space; input generation techniques and human-guided value generation; and automated and semi-automated synthesis of repairs. All these techniques will be integrated into open-source tools targeting multiple programming languages. To minimize the human effort, the framework will incorporate self-monitoring mechanisms to detect when the automatic analysis fails, which will provide detailed feedback to the developers to remedy the problem. This will result in an interactive testing and analysis process that leverages human input in a principled way to best guide the automated techniques, resulting in scalable bug detection and software repair.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Tevfik",
   "pi_last_name": "Bultan",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Tevfik Bultan",
   "pi_email_addr": "bultan@cs.ucsb.edu",
   "nsf_id": "000232096",
   "pi_start_date": "2019-07-19",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of California-Santa Barbara",
  "inst_street_address": "3227 CHEADLE HALL",
  "inst_street_address_2": "",
  "inst_city_name": "SANTA BARBARA",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "8058934188",
  "inst_zip_code": "931060001",
  "inst_country_name": "United States",
  "cong_dist_code": "24",
  "st_cong_dist_code": "CA24",
  "org_lgl_bus_name": "UNIVERSITY OF CALIFORNIA, SANTA BARBARA",
  "org_prnt_uei_num": "",
  "org_uei_num": "G9QBQDH39DF4"
 },
 "perf_inst": {
  "perf_inst_name": "University of California, Santa Barbara",
  "perf_str_addr": "",
  "perf_city_name": "Santa Barbara",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "931065110",
  "perf_ctry_code": "US",
  "perf_cong_dist": "24",
  "perf_st_cong_dist": "CA24",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "287800",
   "pgm_ele_name": "Special Projects - CCF"
  },
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0121",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0122",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002223DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 193970.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 16000.0
  },
  {
   "fund_oblg_fiscal_yr": 2021,
   "fund_oblg_amt": 101672.0
  },
  {
   "fund_oblg_fiscal_yr": 2022,
   "fund_oblg_amt": 104345.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The HUGS project was a collaboration between Carnegie Mellon University, UC Berkeley and UC Santa Barbara, that aimed to develop novel hybrid approaches&nbsp; that combine software analysis techniques of different strengths (such as symbolic execution and fuzzing) with judicious human input to achieve program analysis at scale.</p>\r\n<p><br />The project resulted in a number of publications at top conferences in the field (such as ICSE, ICST, PLDI, ASE, and OOPSLA) as well as top journals, notably an article in IEEE Software, titled &ldquo;Fuzzing, Symbolic Execution, and Expert Guidance for Better Testing&rdquo;, which is co-authored by the participants in this project.&nbsp;</p>\r\n<p><br />Figure 1 gives an overview of the main activities that were conducted under this project. The central effort of software testing relies on automated tools, but human intervention is envisioned to be minimal, while still being indispensable. In this project, we developed analysis techniques that leverage expert input to address challenging analysis problems that can not be solved fully automatically. Specifically, we developed fuzzing with human intervention in the form of domain-specific generators and feedback via human-provided metrics; information leakage analysis based on fuzzing, where the inputs are modified based on human-defined mutations; a combination of symbolic execution with fuzzing for estimating computational complexity of pro- grams, where the human intervention is provided through user-defined cost functions to be maximized by the program analysis, and various differential analysis types where the user defined cost functions are leveraged across multiple program executions. Through our project we have shown that through seemingly simple devices, such as user-defined generators, mutations, and cost functions, we can significantly improve testing and solve challenging problems, ranging from the traditional testing objectives of bug finding, to side channel analysis, vulnerability analysis, algorithmic complexity estimation and differential analysis applied to complex software systems, which are difficult, if not impossible, to perform fully automatically. Both fuzzing and symbolic execution remain very active areas of research in the software engineering community, which we believe can further benefit from other ways of user intervention.<span> </span></p>\r\n<p>&nbsp;</p>\r\n<p><span>&nbsp;</span>As all aspects of human society increasingly rely on software systems, there is an urgent need for scalable techniques and tools that can detect and eliminate software bugs effectively. Our project addresses precisely this gap.&nbsp; All the techniques developed within the context of this project are transitionable to scalable software testing products by industry and government, leading to better software dependability in all application domains, including critical national infrastructures.&nbsp;</p>\r\n<p><br />The project funded one PhD student at Carnegie Mellon University and also provided the foundation for the work of several (18) Masters students, half of them being women.&nbsp; The project also resulted in a published book and lecture notes at international summer schools.</p>\r\n<p><br />The project partially funded four PhD students at the University of California, Santa Barbara (UCSB) and they all completed their PhDs. Two of them joined the Computer Science Department of Stevens Institute of Technology as Assistant Professors, one of them joined Intel as a Software Development Engineer, and another one joined Veridise (a blockchain security startup company) as a Research Scientist. Throughout this project, 21 undergraduate students conducted research at the UCSB Verification Laboratory (VLab) under the supervision of PI Bultan, and 18 of these students were participants of the diversity-focused Early Research Scholars Program (ERSP) at UCSB.</p><br>\n<p>\n Last Modified: 12/13/2024<br>\nModified by: Tevfik&nbsp;Bultan</p></div>\n<div class=\"porSideCol\"\n><div class=\"each-gallery\">\n<div class=\"galContent\" id=\"gallery0\">\n<div class=\"photoCount\" id=\"photoCount0\">\n\t\t\t\t\t\t\t\t\tImage\n\t\t\t\t\t\t\t\t</div>\n<div class=\"galControls onePhoto\" id=\"controls0\"></div>\n<div class=\"galSlideshow\" id=\"slideshow0\"></div>\n<div class=\"galEmbox\" id=\"embox\">\n<div class=\"image-title\"></div>\n</div>\n</div>\n<div class=\"galNavigation onePhoto\" id=\"navigation0\">\n<ul class=\"thumbs\" id=\"thumbs0\">\n<li>\n<a href=\"/por/images/Reports/POR/2024/1901098/1901098_10623357_1734126496216_HUGSFig--rgov-214x142.png\" original=\"/por/images/Reports/POR/2024/1901098/1901098_10623357_1734126496216_HUGSFig--rgov-800width.png\" title=\"Human Guided Testing\"><img src=\"/por/images/Reports/POR/2024/1901098/1901098_10623357_1734126496216_HUGSFig--rgov-66x44.png\" alt=\"Human Guided Testing\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Software testing with expert human input.</div>\n<div class=\"imageCredit\">Ismet Burak Kadron; Yannic Noller; Rohan Padhye; Tevfik Bultan; Corina S. P&#259;s&#259;reanu; Koushik Sen</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Tevfik&nbsp;Bultan\n<div class=\"imageTitle\">Human Guided Testing</div>\n</div>\n</li></ul>\n</div>\n</div></div>\n</div>\n",
  "por_txt_cntn": "\n\nThe HUGS project was a collaboration between Carnegie Mellon University, UC Berkeley and UC Santa Barbara, that aimed to develop novel hybrid approaches that combine software analysis techniques of different strengths (such as symbolic execution and fuzzing) with judicious human input to achieve program analysis at scale.\r\n\n\n\nThe project resulted in a number of publications at top conferences in the field (such as ICSE, ICST, PLDI, ASE, and OOPSLA) as well as top journals, notably an article in IEEE Software, titled Fuzzing, Symbolic Execution, and Expert Guidance for Better Testing, which is co-authored by the participants in this project.\r\n\n\n\nFigure 1 gives an overview of the main activities that were conducted under this project. The central effort of software testing relies on automated tools, but human intervention is envisioned to be minimal, while still being indispensable. In this project, we developed analysis techniques that leverage expert input to address challenging analysis problems that can not be solved fully automatically. Specifically, we developed fuzzing with human intervention in the form of domain-specific generators and feedback via human-provided metrics; information leakage analysis based on fuzzing, where the inputs are modified based on human-defined mutations; a combination of symbolic execution with fuzzing for estimating computational complexity of pro- grams, where the human intervention is provided through user-defined cost functions to be maximized by the program analysis, and various differential analysis types where the user defined cost functions are leveraged across multiple program executions. Through our project we have shown that through seemingly simple devices, such as user-defined generators, mutations, and cost functions, we can significantly improve testing and solve challenging problems, ranging from the traditional testing objectives of bug finding, to side channel analysis, vulnerability analysis, algorithmic complexity estimation and differential analysis applied to complex software systems, which are difficult, if not impossible, to perform fully automatically. Both fuzzing and symbolic execution remain very active areas of research in the software engineering community, which we believe can further benefit from other ways of user intervention. \r\n\n\n\r\n\n\nAs all aspects of human society increasingly rely on software systems, there is an urgent need for scalable techniques and tools that can detect and eliminate software bugs effectively. Our project addresses precisely this gap. All the techniques developed within the context of this project are transitionable to scalable software testing products by industry and government, leading to better software dependability in all application domains, including critical national infrastructures.\r\n\n\n\nThe project funded one PhD student at Carnegie Mellon University and also provided the foundation for the work of several (18) Masters students, half of them being women. The project also resulted in a published book and lecture notes at international summer schools.\r\n\n\n\nThe project partially funded four PhD students at the University of California, Santa Barbara (UCSB) and they all completed their PhDs. Two of them joined the Computer Science Department of Stevens Institute of Technology as Assistant Professors, one of them joined Intel as a Software Development Engineer, and another one joined Veridise (a blockchain security startup company) as a Research Scientist. Throughout this project, 21 undergraduate students conducted research at the UCSB Verification Laboratory (VLab) under the supervision of PI Bultan, and 18 of these students were participants of the diversity-focused Early Research Scholars Program (ERSP) at UCSB.\t\t\t\t\tLast Modified: 12/13/2024\n\n\t\t\t\t\tSubmitted by: TevfikBultan\n"
 }
}