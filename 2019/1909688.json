{
 "awd_id": "1909688",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Foundations of Software Testing Representations of Natural Processes",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2019-10-01",
 "awd_exp_date": "2024-09-30",
 "tot_intn_awd_amt": 499961.0,
 "awd_amount": 499961.0,
 "awd_min_amd_letter_date": "2019-07-16",
 "awd_max_amd_letter_date": "2019-07-16",
 "awd_abstract_narration": "Over the past 20 years, scientific computing has become a staple for exploration and reasoning about natural processes.  For instance, researchers in bioinformatics routinely use computational tools to understand the relationship between a genetic sequence and the behavior of an organism with that sequence. Research questions concerning natural processes range from decoding biological pathways to determining if a mutation can lead to cancer.   During this same time, novel computation techniques have been investigated, such as programming DNA via chemical reaction networks (CRNs).  Many new programming environments, simulation platforms, and tools have been developed to support these new research directions and are now widely used. Since these programs are being employed to advance scientific discovery and to perform critical tasks, there is a need to ensure they behave correctly. This project develops foundations for software testing of these natural computing systems using natural representations. It focuses on developing quality test suites, handling error rates in test outcomes and validating behavior in the absence of known answers.  Research topics from this project will be incorporated into courses on software testing and molecular programming.  Undergraduate students will participate in this research and encouraged to compete in the International Genetically Engineered Machine competition.\r\n \r\nBioinformatics tools, and programming via chemical reaction networks (CRNs), result in simulations of a natural process such as an organism's growth, the interactions between molecules as reactions execute over time, DNA alignment, etc.  CRNs themselves are representations of a naturally occurring process (a set of chemical reactions in solution), that can be provably manipulated to perform computations.  While these types of abstractions form a powerful and growing computational paradigm, these are encoded as software programs, which simulate the natural processes, and hence they are prone to faults. Thus, they need to be tested to ensure they behave as expected. There are several characteristics that make these representations challenging to validate. First, the inputs and outputs may not be clearly defined as in traditional software systems, and the connection between inputs and execution of paths in the software is often unclear. Second, the use case may determine the expected results, and the expected results may be sets of information, rather than a single property or value. Third, they may compute a result stochastically, which is correct most of the time, yet incorrect within an allowed error. Fourth, these systems are often simulated using complex sets of options that when modified can change both the non-functional behavior as well as the functional answers returned.  This project develops foundations for software testing of natural representations. More specifically, it develops techniques for test generation with measurable code and model coverage. It creates testing methods that infer oracles and utilize metamorphic relations. Finally, it designs configuration-aware testing and optimization techniques to guide end-users who depend upon the results of these systems.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Myra",
   "pi_last_name": "Cohen",
   "pi_mid_init": "B",
   "pi_sufx_name": "",
   "pi_full_name": "Myra B Cohen",
   "pi_email_addr": "mcohen@iastate.edu",
   "nsf_id": "000124813",
   "pi_start_date": "2019-07-16",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "James",
   "pi_last_name": "Lathrop",
   "pi_mid_init": "I",
   "pi_sufx_name": "",
   "pi_full_name": "James I Lathrop",
   "pi_email_addr": "jil@cs.iastate.edu",
   "nsf_id": "000443930",
   "pi_start_date": "2019-07-16",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Iowa State University",
  "inst_street_address": "1350 BEARDSHEAR HALL",
  "inst_street_address_2": "515 MORRILL ROAD",
  "inst_city_name": "AMES",
  "inst_state_code": "IA",
  "inst_state_name": "Iowa",
  "inst_phone_num": "5152945225",
  "inst_zip_code": "500112103",
  "inst_country_name": "United States",
  "cong_dist_code": "04",
  "st_cong_dist_code": "IA04",
  "org_lgl_bus_name": "IOWA STATE UNIVERSITY OF SCIENCE AND TECHNOLOGY",
  "org_prnt_uei_num": "DQDBM7FGJPC5",
  "org_uei_num": "DQDBM7FGJPC5"
 },
 "perf_inst": {
  "perf_inst_name": "Iowa State University",
  "perf_str_addr": "",
  "perf_city_name": "Ames",
  "perf_st_code": "IA",
  "perf_st_name": "Iowa",
  "perf_zip_code": "500111090",
  "perf_ctry_code": "US",
  "perf_cong_dist": "04",
  "perf_st_cong_dist": "IA04",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  },
  {
   "pgm_ref_code": "9102",
   "pgm_ref_txt": "WOMEN, MINORITY, DISABLED, NEC"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 499961.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Over the course of this project, we have developed novel techniques for test generation, fault localization, automated test generation and program repair for programs that compute using natural processes such as chemical reactions, and for programs that simulate nature such as those created in bioinformatics.&nbsp; &nbsp;We expanded the theory of CRNs with respect to their testability. In addition, we examined ways to explore correctness across, and leverage, the vast configuration space of bioinformatics tools and cyber-physical systems via sampling and self-adaptation. We also designed automated approaches to reduce information leakage of private information in software using an entropy-based metric. Last we proposed and evaluated state of the art testing approaches for bioinformatics software, uncovering challenges and new directions for improving their quality. We highlight some key findings below.</p>\r\n<p><strong>Intellectual Merit<br /></strong>(1)&nbsp; We designed a testing framework, <em>ChemTest</em>, for testing chemical reaction networks and evaluated it on a set of benchmarks we created for this project. <em>ChemTest</em> supports different types of test cases (functional, metamorphic, and internal) and runs them multiple times to account for non-determinism (or flakiness). We formalize the system requirements using a continuous time variant of linear temporal logic (LTL). We then build abstract (parameterized) test cases based on the requirements, which can be instantiated for a range of input. Due to the temporal nature of these programs, evaluation for correctness is performed at different points in time. &nbsp;We then extended <em>ChemTest</em> with automated test generation using invariants inferred from the structure of the chemical reactions. Our invariant inference algorithm, <em>ChemFlow</em>, uses Gaussian elimination to reduce reactions to small sets of always true relations between reactions. Next, we designed a novel fault localization technique called <em>TraceBack</em>. <em>TraceBack </em>uses simulation traces of failing tests to find the points of inflection where the program changes from passing to failing. Reactions within a given distance from this point are the most suspicious.&nbsp; Last, we designed CRNRepair, an automated program repair approach for CRNs. We showed we can automatically find and fix faults in our benchmark programs using an evolutionary algorithm.</p>\r\n<p>(2)&nbsp; We enhanced the theory of CRNs to improve their testability. First, we developed a higher-level language for one type of CRN that utilizes a functional reactive programming paradigm to represent CRNs as a dataflow network. The benefits of our approach is that it provides strong static typing which will prevent runtime faults due to type mismatches. &nbsp;The language will also help translate our testing paradigm from the type of CRN used in <em>ChemTest</em> which uses stochastic simulation, and ones which are based on differential equations (deterministic CRNs). &nbsp;We also demonstrated we can utilize invariants from <em>ChemFlow</em> to help us perform automated theorem proving. Last, we studied characteristics of CRNs that can lead to large changes in behavior (phase transitions) and demonstrated the potential pitfalls of these for model checking and testing.<strong> <br /></strong></p>\r\n<p>(3)&nbsp; We explored several challenges for ensuring bioinformatics software is correct. An important part of experimentation in the biosciences is to provide data and artifacts that adhere to the findable, accessible, interoperable, and reusable paradigm.&nbsp; However, since these principles are mostly data-centric they may not be sufficient for software. Instead, we proposed CORE (Comparable, Open, Reliable and Extensible) as the necessary set of principles for software.&nbsp; We then focused on two aspects of CORE, Reliability and Comparability and performed a large study testing four different bioinformatics tools using the same models and environment. We used both differential testing (testing of different programs that perform the same task on the same set of inputs) and metamorphic testing (using sets of test cases which have an expected output relationship). In our studies we were able to detect and confirmed faults in some of the systems, but we also uncovered many challenges which can prevent generality.&nbsp; We have synthesized these as lessons learned and provide suggested directions for future research.</p>\r\n<p><strong>Broader Impacts<br /></strong>This work aims to improve software that may be used in synthetic biology, chemistry, and bioinformatics, hence our research has been shared with those in other disciplines. We have involved both graduate and undergraduate students in various aspects of this research. The research has contributed in part both to MS theses and PhD dissertations and students working on this project have had the opportunity to attend conferences and present their research to the broader research community.&nbsp;Many of our papers have associated data artifacts archived online which can be leveraged by others for reproducibility. For our research on <em>ChemTest</em> we have developed a set of benchmarks (programs with specifications, faulty versions and test cases). Last, <em>ChemFlow</em> is available as an open-source tool.</p><br>\n<p>\n Last Modified: 02/14/2025<br>\nModified by: Myra&nbsp;B&nbsp;Cohen</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nOver the course of this project, we have developed novel techniques for test generation, fault localization, automated test generation and program repair for programs that compute using natural processes such as chemical reactions, and for programs that simulate nature such as those created in bioinformatics. We expanded the theory of CRNs with respect to their testability. In addition, we examined ways to explore correctness across, and leverage, the vast configuration space of bioinformatics tools and cyber-physical systems via sampling and self-adaptation. We also designed automated approaches to reduce information leakage of private information in software using an entropy-based metric. Last we proposed and evaluated state of the art testing approaches for bioinformatics software, uncovering challenges and new directions for improving their quality. We highlight some key findings below.\r\n\n\nIntellectual Merit\n(1) We designed a testing framework, ChemTest, for testing chemical reaction networks and evaluated it on a set of benchmarks we created for this project. ChemTest supports different types of test cases (functional, metamorphic, and internal) and runs them multiple times to account for non-determinism (or flakiness). We formalize the system requirements using a continuous time variant of linear temporal logic (LTL). We then build abstract (parameterized) test cases based on the requirements, which can be instantiated for a range of input. Due to the temporal nature of these programs, evaluation for correctness is performed at different points in time. We then extended ChemTest with automated test generation using invariants inferred from the structure of the chemical reactions. Our invariant inference algorithm, ChemFlow, uses Gaussian elimination to reduce reactions to small sets of always true relations between reactions. Next, we designed a novel fault localization technique called TraceBack. TraceBack uses simulation traces of failing tests to find the points of inflection where the program changes from passing to failing. Reactions within a given distance from this point are the most suspicious. Last, we designed CRNRepair, an automated program repair approach for CRNs. We showed we can automatically find and fix faults in our benchmark programs using an evolutionary algorithm.\r\n\n\n(2) We enhanced the theory of CRNs to improve their testability. First, we developed a higher-level language for one type of CRN that utilizes a functional reactive programming paradigm to represent CRNs as a dataflow network. The benefits of our approach is that it provides strong static typing which will prevent runtime faults due to type mismatches. The language will also help translate our testing paradigm from the type of CRN used in ChemTest which uses stochastic simulation, and ones which are based on differential equations (deterministic CRNs). We also demonstrated we can utilize invariants from ChemFlow to help us perform automated theorem proving. Last, we studied characteristics of CRNs that can lead to large changes in behavior (phase transitions) and demonstrated the potential pitfalls of these for model checking and testing. \n\r\n\n\n(3) We explored several challenges for ensuring bioinformatics software is correct. An important part of experimentation in the biosciences is to provide data and artifacts that adhere to the findable, accessible, interoperable, and reusable paradigm. However, since these principles are mostly data-centric they may not be sufficient for software. Instead, we proposed CORE (Comparable, Open, Reliable and Extensible) as the necessary set of principles for software. We then focused on two aspects of CORE, Reliability and Comparability and performed a large study testing four different bioinformatics tools using the same models and environment. We used both differential testing (testing of different programs that perform the same task on the same set of inputs) and metamorphic testing (using sets of test cases which have an expected output relationship). In our studies we were able to detect and confirmed faults in some of the systems, but we also uncovered many challenges which can prevent generality. We have synthesized these as lessons learned and provide suggested directions for future research.\r\n\n\nBroader Impacts\nThis work aims to improve software that may be used in synthetic biology, chemistry, and bioinformatics, hence our research has been shared with those in other disciplines. We have involved both graduate and undergraduate students in various aspects of this research. The research has contributed in part both to MS theses and PhD dissertations and students working on this project have had the opportunity to attend conferences and present their research to the broader research community.Many of our papers have associated data artifacts archived online which can be leveraged by others for reproducibility. For our research on ChemTest we have developed a set of benchmarks (programs with specifications, faulty versions and test cases). Last, ChemFlow is available as an open-source tool.\t\t\t\t\tLast Modified: 02/14/2025\n\n\t\t\t\t\tSubmitted by: MyraBCohen\n"
 }
}