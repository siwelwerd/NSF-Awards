{
 "awd_id": "1851927",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "I-Corps: OSSPolice",
 "cfda_num": "47.084",
 "org_code": "15030000",
 "po_phone": "7032927403",
 "po_email": "rshearma@nsf.gov",
 "po_sign_block_name": "Rebecca Shearman",
 "awd_eff_date": "2018-11-01",
 "awd_exp_date": "2020-12-31",
 "tot_intn_awd_amt": 50000.0,
 "awd_amount": 50000.0,
 "awd_min_amd_letter_date": "2018-10-26",
 "awd_max_amd_letter_date": "2020-03-31",
 "awd_abstract_narration": "This technology will help mobile app developers do their due diligence and easily scan their apps for any legal and security issues, thereby not only protecting their brand, but also ensuring the security and privacy of end users. The technology also preserves the open-source software ecosystem, by enabling mobile app developers to proactively scan their app and identifying any inadvertent open-source license violations. Based on the reported results, app developers can either comply with the licensing terms of the software being used or switch over to a more permissive Open-Source Software (OSS).\r\n\r\nApp stores are quickly getting crowded, with currently over 6 million apps. Therefore, app developers often rely on Open-Source Software (OSS) to reduce the development cost and quickly bring their apps to market. Unfortunately, careless use of OSS can introduce severe legal and security risks. If ignored, such risks can not only jeopardize the security and privacy of end users, but also cause high financial losses to businesses owning such apps and damage their brand. However, tracking all OSS components, their versions, and inter-dependencies can be tedious and error-prone, particularly if the OSS is imported with little to no knowledge of its provenance. This problem is exacerbated by the esoteric licensing terms of these OSS, as developers may lack awareness about the legal ramifications of their use. The PI's research team has built a fully-automated software system that analyzes mobile app binaries to detect usage of all Open-Source Software (OSS) components being used, and report associated security and legal risks.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "TIP",
 "org_dir_long_name": "Directorate for Technology, Innovation, and Partnerships",
 "div_abbr": "TI",
 "org_div_long_name": "Translational Impacts",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Umakishore",
   "pi_last_name": "Ramachandran",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Umakishore Ramachandran",
   "pi_email_addr": "rama@cc.gatech.edu",
   "nsf_id": "000336913",
   "pi_start_date": "2018-10-26",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Georgia Tech Research Corporation",
  "inst_street_address": "926 DALNEY ST NW",
  "inst_street_address_2": "",
  "inst_city_name": "ATLANTA",
  "inst_state_code": "GA",
  "inst_state_name": "Georgia",
  "inst_phone_num": "4048944819",
  "inst_zip_code": "303186395",
  "inst_country_name": "United States",
  "cong_dist_code": "05",
  "st_cong_dist_code": "GA05",
  "org_lgl_bus_name": "GEORGIA TECH RESEARCH CORP",
  "org_prnt_uei_num": "EMW9FC8J3HN4",
  "org_uei_num": "EMW9FC8J3HN4"
 },
 "perf_inst": {
  "perf_inst_name": "Georgia Institute of Technology",
  "perf_str_addr": "225 North Avenue, NW",
  "perf_city_name": "Atlanta",
  "perf_st_code": "GA",
  "perf_st_name": "Georgia",
  "perf_zip_code": "303320002",
  "perf_ctry_code": "US",
  "perf_cong_dist": "05",
  "perf_st_cong_dist": "GA05",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "802300",
   "pgm_ele_name": "I-Corps"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "8023",
   "pgm_ref_txt": "Health Care Enterprise Systems"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 50000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Businesses often rely on Open-Source Software (OSS) to reduce thedevelopment costs and quickly bring their digital products and servicesto market. BlackDuck reported that the average percentage of OSS inproprietary applications scanned grew from 36% in 2017 to 57% in2018.Unfortunately, OSS may contain bugs and vulnerabilities that could goundetected for months and be exploited by hackers for profit. Thewidespread use of OSS has also made them a prime target for hackers toinject malicious code in popular OSS packages and steal sensitive data.Therefore, careless use of OSS can not only jeopardize the security andprivacy of customers, but also cause high financial losses to businessesand damage their brand.Today, businesses must spend time thoroughly analyzing and vettingOSS packages for security issues prior to importing them. We conducted272 interactions with potential customers across various industries(retail, finance, health care, etc.) as a part of the National ScienceFoundation (NSF) Innovation Corps (I-Corps) activities to understandchallenges around the adoption of OSS. Commonly followed bestpractices that emerged across interactions were 1) analyzing andmanaging OSS packages for security and operational risks as well asscanning them for known vulnerabilities, 2) testing for functionality andstability, 3) leveraging download count and GitHub stars as proxymetrics for popularity, and 4) manually reviewing code anddocumentation to evaluate project quality (e.g., determining whetherbest security and privacy practices are being followed) prior toimporting them. Nevertheless, reviewing hundreds of OSS packages,their versions and transitive dependencies can be tedious, timeconsuming,and even error-prone, particularly if the package is importedwith little to no knowledge of its provenance. Furthermore, existingauditing tools such as Snyk and BlackDuck can only identify publiclyknown vulnerabilities in OSS packages.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 03/21/2021<br>\n\t\t\t\t\tModified by: Umakishore&nbsp;Ramachandran</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nBusinesses often rely on Open-Source Software (OSS) to reduce thedevelopment costs and quickly bring their digital products and servicesto market. BlackDuck reported that the average percentage of OSS inproprietary applications scanned grew from 36% in 2017 to 57% in2018.Unfortunately, OSS may contain bugs and vulnerabilities that could goundetected for months and be exploited by hackers for profit. Thewidespread use of OSS has also made them a prime target for hackers toinject malicious code in popular OSS packages and steal sensitive data.Therefore, careless use of OSS can not only jeopardize the security andprivacy of customers, but also cause high financial losses to businessesand damage their brand.Today, businesses must spend time thoroughly analyzing and vettingOSS packages for security issues prior to importing them. We conducted272 interactions with potential customers across various industries(retail, finance, health care, etc.) as a part of the National ScienceFoundation (NSF) Innovation Corps (I-Corps) activities to understandchallenges around the adoption of OSS. Commonly followed bestpractices that emerged across interactions were 1) analyzing andmanaging OSS packages for security and operational risks as well asscanning them for known vulnerabilities, 2) testing for functionality andstability, 3) leveraging download count and GitHub stars as proxymetrics for popularity, and 4) manually reviewing code anddocumentation to evaluate project quality (e.g., determining whetherbest security and privacy practices are being followed) prior toimporting them. Nevertheless, reviewing hundreds of OSS packages,their versions and transitive dependencies can be tedious, timeconsuming,and even error-prone, particularly if the package is importedwith little to no knowledge of its provenance. Furthermore, existingauditing tools such as Snyk and BlackDuck can only identify publiclyknown vulnerabilities in OSS packages.\n\n\t\t\t\t\tLast Modified: 03/21/2021\n\n\t\t\t\t\tSubmitted by: Umakishore Ramachandran"
 }
}