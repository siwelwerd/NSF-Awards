{
 "awd_id": "1910488",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Whole-application Coordiated Parallelization Through The Optimization Of Abstraction Hierarchies",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927498",
 "po_email": "achtchel@nsf.gov",
 "po_sign_block_name": "Almadena Chtchelkanova",
 "awd_eff_date": "2019-10-01",
 "awd_exp_date": "2024-09-30",
 "tot_intn_awd_amt": 499510.0,
 "awd_amount": 499510.0,
 "awd_min_amd_letter_date": "2019-07-17",
 "awd_max_amd_letter_date": "2022-07-25",
 "awd_abstract_narration": "Large computer software is based on programming abstractions, e.g., functions and object-oriented types, to organize computation and data, which are in turn parallelized by invoking a variety of lower-level library support. A correct and efficient software implementation requires meticulous attention to coding details and is often error-prone. However, these implementations frequently need to be adapted to run on  different hardware platforms as part of the software evolution and maintenance process. This project develops new cutting-edge compiler technology to automatically enhance the parallelization efficiency of large computer software, thereby simultaneously enhancing their productivity, correctness assurance, performance, and hardware portability. This project is aligned with object-oriented design principles in modern software engineering and therefore is expected to impact a modern software practices by enabling automatic exploration of alternative parallelization and data structure designs for better performance, maintainability, and hardware portability. The compiler toolsets developed in this project will be disseminated open source and will be used as an educational toolkit in the teaching of programming languages, compilers, high performance computing, and parallel programming courses.\r\n\r\nThe research methodology of this project explores a new scope of optimization at the user-defined abstraction level, by grouping and encapsulating related operations into hierarchies of abstractions, and by adapting a set of concepts traditionally used in the practice of software engineering, specifically abstract data types, abstraction adapters, and application abstraction hierarchy, to automatically discover higher-level semantics of user-defined abstractions and to isolate algorithm-level structures and logistics from their lower-level implementations. Pattern-driven analysis techniques are then developed to automatically discover a whole-application task graph, and coordinated optimizations are applied across abstraction boundaries to maximize overall application efficiency. A uniform interface is designed to concisely document the higher-level semantics of abstractions. Empirical performance tuning is used to support the performance portability of applications on a variety of modern computing platforms.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Qing",
   "pi_last_name": "Yi",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Qing Yi",
   "pi_email_addr": "yi7@llnl.gov",
   "nsf_id": "000492904",
   "pi_start_date": "2019-07-17",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Shouhuai",
   "pi_last_name": "Xu",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Shouhuai Xu",
   "pi_email_addr": "sxu@uccs.edu",
   "nsf_id": "000243285",
   "pi_start_date": "2022-07-25",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Colorado at Colorado Springs",
  "inst_street_address": "1420 AUSTIN BLUFFS PKWY",
  "inst_street_address_2": "",
  "inst_city_name": "COLORADO SPRINGS",
  "inst_state_code": "CO",
  "inst_state_name": "Colorado",
  "inst_phone_num": "7192553153",
  "inst_zip_code": "809183733",
  "inst_country_name": "United States",
  "cong_dist_code": "05",
  "st_cong_dist_code": "CO05",
  "org_lgl_bus_name": "THE REGENTS OF THE UNIVERSITY OF COLORADO",
  "org_prnt_uei_num": "",
  "org_uei_num": "RH87YDXC1AY5"
 },
 "perf_inst": {
  "perf_inst_name": "University of Colorado at Colorado Springs",
  "perf_str_addr": "1420 Austin Bluffs Parkway",
  "perf_city_name": "Colorado Springs",
  "perf_st_code": "CO",
  "perf_st_name": "Colorado",
  "perf_zip_code": "809183733",
  "perf_ctry_code": "US",
  "perf_cong_dist": "05",
  "perf_st_cong_dist": "CO05",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7942",
   "pgm_ref_txt": "HIGH-PERFORMANCE COMPUTING"
  },
  {
   "pgm_ref_code": "9102",
   "pgm_ref_txt": "WOMEN, MINORITY, DISABLED, NEC"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 499510.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p class=\"p1\"><span class=\"s1\">This project aims to develop new compiler techniques to automatically enhance the whole-application level computation efficiency of large computer software, thereby simultaneously enhancing their correctness assurance, performance, and hardware portability. The key research thrusts include systematic analysis and inference of the designr-level semantics of data and function abstractions, coordinated optimization of data structures and algorithms across boundaries, and automated discovery and refinement of whole-application abstraction hierarchies.<span>&nbsp; </span>Significant Results from research include an infrastructure to automatically extract the loop-leval and function-level properties of C/C++ implementations to reason about the side-effects of function calls, a new optimization model to correlate mathematical properties of stencil computations to optimization decisions, a set of program analysis and code synthesis techniques to automate non-blocking synchronization for sequential data structures, a declarative language to concisely specify design-level semantics of data abstractions such as queues and stacks, and a prototype compiler to automatically map such semantics to lower-level C/C++ implementations by using a state-of-the-art SMT solver as backend. These results have enabled a variety of stencil computations to be more systematically optimized in scientific applications and allowed compilers to use abstraction-driven analysis to understand the design-level semantics of applications, while promising an abstraction-driven optimization approach to systematically enhance whole-application performance and hardware portability. The funded project has supported two Ph.D students and two MS students to receive research training and career development mentoring.<span>&nbsp; </span>Results of this research have been diseminated at its project web page and published in various venues in the areas of software engineering, compiler optimization, and computer security.</span></p>\r\n<p>&nbsp;</p><br>\n<p>\n Last Modified: 12/04/2024<br>\nModified by: Qing&nbsp;Yi</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nThis project aims to develop new compiler techniques to automatically enhance the whole-application level computation efficiency of large computer software, thereby simultaneously enhancing their correctness assurance, performance, and hardware portability. The key research thrusts include systematic analysis and inference of the designr-level semantics of data and function abstractions, coordinated optimization of data structures and algorithms across boundaries, and automated discovery and refinement of whole-application abstraction hierarchies. Significant Results from research include an infrastructure to automatically extract the loop-leval and function-level properties of C/C++ implementations to reason about the side-effects of function calls, a new optimization model to correlate mathematical properties of stencil computations to optimization decisions, a set of program analysis and code synthesis techniques to automate non-blocking synchronization for sequential data structures, a declarative language to concisely specify design-level semantics of data abstractions such as queues and stacks, and a prototype compiler to automatically map such semantics to lower-level C/C++ implementations by using a state-of-the-art SMT solver as backend. These results have enabled a variety of stencil computations to be more systematically optimized in scientific applications and allowed compilers to use abstraction-driven analysis to understand the design-level semantics of applications, while promising an abstraction-driven optimization approach to systematically enhance whole-application performance and hardware portability. The funded project has supported two Ph.D students and two MS students to receive research training and career development mentoring. Results of this research have been diseminated at its project web page and published in various venues in the areas of software engineering, compiler optimization, and computer security.\r\n\n\n\t\t\t\t\tLast Modified: 12/04/2024\n\n\t\t\t\t\tSubmitted by: QingYi\n"
 }
}