{
 "awd_id": "1910976",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Automated Fine-Grained Requirements Traceability",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2019-10-01",
 "awd_exp_date": "2023-09-30",
 "tot_intn_awd_amt": 444956.0,
 "awd_amount": 460956.0,
 "awd_min_amd_letter_date": "2019-07-29",
 "awd_max_amd_letter_date": "2023-06-06",
 "awd_abstract_narration": "Requirements traceability is mandatory in safety-critical domains (such as aerospace, transportation, communication, medical device software, etc.) and it is essential in supporting acceptance testing or regulatory reviews.  The creation and maintenance of traceability links between requirements and code has been identified by researchers as one of the grand challenges in software traceability. Given that most requirements are written in natural language and source code also contains large amounts of natural language, researchers proposed using text-retrieval techniques for automated traceability-link recovery.  Text-retrieval-based approaches inherently suffer from low accuracy due to the vocabulary mismatch between requirements and source code and the coarse-grained granularity of the retrieved code (such as classes, files, methods).  As a consequence, developers rarely use traceability links in everyday tasks related to code change. Improving the automated recovery between requirements and code will help with important daily tasks faced by the software engineers (such as bug localization and code reviews), which in turn will have a potentially large economic impact, as it may lead to higher quality software and less development effort.  In addition, regulatory reviewers of safety-critical software are expected to adopt results of this research project to improve their work.  The impact of their work on society is expected to be high as a result.\r\n \r\nThis project redefines the requirement-to-code traceability-retrieval problem into a heuristic-driven approach, using static code analysis and text analysis, which accurately matches functional constraints embedded in requirements to their source code implementations.  One contribution of the project will be the identification and classification of functional constraints present in requirements, written in natural language.  Central to the project is the hypothesis, supported by preliminary research, that developers use well-defined patterns to express and implement the functional constraints in code, which will be discovered and cataloged.  The functional constraints described in requirements will be automatically identified using natural-language-processing techniques and deep learning.  The implementation patterns will be automatically identified using precise static-analysis techniques.  Overall, the novel requirements-to-code traceability paradigm will allow recovering links at various granularity levels, as needed by various users.  Finally, the new type of traceability links will be used to improve essential software-development tasks, namely bug localization and code reviews.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Former Principal Investigator",
   "pi_first_name": "Andrian",
   "pi_last_name": "Marcus",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Andrian Marcus",
   "pi_email_addr": "amarcus7@gmu.edu",
   "nsf_id": "000488981",
   "pi_start_date": "2019-07-29",
   "pi_end_date": "2023-06-06"
  },
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Shiyi",
   "pi_last_name": "Wei",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Shiyi Wei",
   "pi_email_addr": "swei@utdallas.edu",
   "nsf_id": "000754240",
   "pi_start_date": "2023-06-06",
   "pi_end_date": null
  },
  {
   "pi_role": "Former Co-Principal Investigator",
   "pi_first_name": "Shiyi",
   "pi_last_name": "Wei",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Shiyi Wei",
   "pi_email_addr": "swei@utdallas.edu",
   "nsf_id": "000754240",
   "pi_start_date": "2019-07-29",
   "pi_end_date": "2023-06-06"
  }
 ],
 "inst": {
  "inst_name": "University of Texas at Dallas",
  "inst_street_address": "800 WEST CAMPBELL RD.",
  "inst_street_address_2": "SP2.25",
  "inst_city_name": "RICHARDSON",
  "inst_state_code": "TX",
  "inst_state_name": "Texas",
  "inst_phone_num": "9728832313",
  "inst_zip_code": "750803021",
  "inst_country_name": "United States",
  "cong_dist_code": "24",
  "st_cong_dist_code": "TX24",
  "org_lgl_bus_name": "UNIVERSITY OF TEXAS AT DALLAS",
  "org_prnt_uei_num": "",
  "org_uei_num": "EJCVPNN1WFS5"
 },
 "perf_inst": {
  "perf_inst_name": "University of Texas at Dallas",
  "perf_str_addr": "800 W. Campbell Rd.",
  "perf_city_name": "Richardson",
  "perf_st_code": "TX",
  "perf_st_name": "Texas",
  "perf_zip_code": "750803021",
  "perf_ctry_code": "US",
  "perf_cong_dist": "24",
  "perf_st_cong_dist": "TX24",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "287800",
   "pgm_ele_name": "Special Projects - CCF"
  },
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 444956.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 16000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Requirements traceability is mandatory in safety-critical domains (e.g., aerospace, transportation, communication, and medical device software) and it is essential in supporting acceptance testing or regulatory reviews. The creation and maintenance of traceability links between requirements and code is one of the grand challenges in software traceability. One solution, proposed by researchers, is automated traceability link recovery, defined as a text retrieval problem. Text retrieval-based approaches inherently suffer from low accuracy due to the vocabulary mismatch between requirements and source code and the coarse-grained granularity of the retrieved code (e.g., classes, files, and methods). In consequence, developers rarely use traceability links in everyday tasks related to code change, as they do not always trust them.</p>\n<p>The research supported by this grant addressed these problems by redefining the requirement-to-code traceability retrieval problem into a heuristic-driven approach, using static code analysis and text analysis, which accurately matches data constraints embedded in requirements to their source code implementations. Specifically, the research project identified and defined existing categories of data constraints described in software documents. More so, the project identified and documented a set of linguistic discourse patterns used in the description of the data constraints, which are documented in a data constraints description patterns catalog. These discourse patterns are important for developing tools that can automatically identify and classify the data descriptions in natural language text. Additionally, the project studied the way these data constraints are implemented in Java code. A catalog of 31 data constraint implementation patterns was produced and disseminated. The research also produced a large data set of manually-annotated software data constraints and their implementations, which is essential in supporting future research in the field. More importantly, the constraint implementation patterns were used to develop a tool, named LASSO, which can precisely identify data constraint implementations at line-of-code granularity. The main novelty of LASSO is the development of a grammar-based constraint implementation pattern matching component. For a given data constraint, extracted from the software documentation, LASSO combines this matching component with any existing method-level traceability link recovery tool and produces a list of methods, ranked by their likelihood that they implement a given data constraint, and a list of code statements inside each method, ranked by their likelihood to enforce the constraint. LASSO performs substantially better than existing traceability link recovery tools, based on text retrieval approaches.</p>\n<p>The educational and broader impact component of the project was centered on augmenting the existing software engineering curriculum with findings from the performed research and on integrating the results of the research in educational material (tutorials and keynotes) for wide dissemination to other researchers at conferences and to students in classroom projects and teaching. During the duration of the grant, seven graduate students and three undergraduate students worked on topics related to this project under the direct advising of the PIs, with six of them belonging underrepresented groups (Hispanic/Latino, Women, and African American). This grant contributed to the training, professional development, and the fostering of networks for the supported graduate students, by allowing the PIs to train and involve the students in research and by allowing the students to (i) present their papers at conferences and get feedback on their work from other researchers from academia and industry, (ii) attend research presentations at conferences and enrich their knowledge about the field, and (iii) interact with other students, researchers, and practitioners in the field, therefore building a professional network that can benefit their future careers. Two of the graduate students&rsquo; Doctoral dissertation and Master&rsquo;s thesis topics were centered on the research of this project.</p>\n<p>We expect that the project outcomes on identifying and tracing data constraints to their code implementations will have a significant impact on the large body of work in the field of software engineering that leverages traceability in software, such as software testing, code reviewing, and compliance checking.</p><br>\n<p>\n Last Modified: 01/30/2024<br>\nModified by: Shiyi&nbsp;Wei</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nRequirements traceability is mandatory in safety-critical domains (e.g., aerospace, transportation, communication, and medical device software) and it is essential in supporting acceptance testing or regulatory reviews. The creation and maintenance of traceability links between requirements and code is one of the grand challenges in software traceability. One solution, proposed by researchers, is automated traceability link recovery, defined as a text retrieval problem. Text retrieval-based approaches inherently suffer from low accuracy due to the vocabulary mismatch between requirements and source code and the coarse-grained granularity of the retrieved code (e.g., classes, files, and methods). In consequence, developers rarely use traceability links in everyday tasks related to code change, as they do not always trust them.\n\n\nThe research supported by this grant addressed these problems by redefining the requirement-to-code traceability retrieval problem into a heuristic-driven approach, using static code analysis and text analysis, which accurately matches data constraints embedded in requirements to their source code implementations. Specifically, the research project identified and defined existing categories of data constraints described in software documents. More so, the project identified and documented a set of linguistic discourse patterns used in the description of the data constraints, which are documented in a data constraints description patterns catalog. These discourse patterns are important for developing tools that can automatically identify and classify the data descriptions in natural language text. Additionally, the project studied the way these data constraints are implemented in Java code. A catalog of 31 data constraint implementation patterns was produced and disseminated. The research also produced a large data set of manually-annotated software data constraints and their implementations, which is essential in supporting future research in the field. More importantly, the constraint implementation patterns were used to develop a tool, named LASSO, which can precisely identify data constraint implementations at line-of-code granularity. The main novelty of LASSO is the development of a grammar-based constraint implementation pattern matching component. For a given data constraint, extracted from the software documentation, LASSO combines this matching component with any existing method-level traceability link recovery tool and produces a list of methods, ranked by their likelihood that they implement a given data constraint, and a list of code statements inside each method, ranked by their likelihood to enforce the constraint. LASSO performs substantially better than existing traceability link recovery tools, based on text retrieval approaches.\n\n\nThe educational and broader impact component of the project was centered on augmenting the existing software engineering curriculum with findings from the performed research and on integrating the results of the research in educational material (tutorials and keynotes) for wide dissemination to other researchers at conferences and to students in classroom projects and teaching. During the duration of the grant, seven graduate students and three undergraduate students worked on topics related to this project under the direct advising of the PIs, with six of them belonging underrepresented groups (Hispanic/Latino, Women, and African American). This grant contributed to the training, professional development, and the fostering of networks for the supported graduate students, by allowing the PIs to train and involve the students in research and by allowing the students to (i) present their papers at conferences and get feedback on their work from other researchers from academia and industry, (ii) attend research presentations at conferences and enrich their knowledge about the field, and (iii) interact with other students, researchers, and practitioners in the field, therefore building a professional network that can benefit their future careers. Two of the graduate students Doctoral dissertation and Masters thesis topics were centered on the research of this project.\n\n\nWe expect that the project outcomes on identifying and tracing data constraints to their code implementations will have a significant impact on the large body of work in the field of software engineering that leverages traceability in software, such as software testing, code reviewing, and compliance checking.\t\t\t\t\tLast Modified: 01/30/2024\n\n\t\t\t\t\tSubmitted by: ShiyiWei\n"
 }
}