{
 "awd_id": "1910593",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CNS Core:Small: File System Offloading",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032925197",
 "po_email": "mmcclure@nsf.gov",
 "po_sign_block_name": "Marilyn McClure",
 "awd_eff_date": "2019-10-01",
 "awd_exp_date": "2024-09-30",
 "tot_intn_awd_amt": 499839.0,
 "awd_amount": 499839.0,
 "awd_min_amd_letter_date": "2019-07-05",
 "awd_max_amd_letter_date": "2019-07-05",
 "awd_abstract_narration": "Computers use filesystems that facilitate applications to store and access data in a storage device. Filesystems reside inside a trusted Operating System (OS) and enable consistent, secure, and durable access to data. Applications run inside untrusted user space and must cross the trusted OS boundary for accessing storage hardware using filesystems. In this era of ultra-fast storage technologies such as flash and nonvolatile memory, crossing the OS boundary for input/output (I/O) access incurs high software overheads and impacts I/O and application performance. Therefore, reducing software overheads is critical but must be done without compromising data consistency, security, and durability.\r\n\r\nThis project investigates the redesign of a high-performance filesystem that allows applications to access the storage hardware directly bypassing the OS, while respecting crash-consistency, security, and durability.  The project involves three research thrusts. The first thrust identifies critical filesystem components responsible for crash-consistency, security, and durability and offloads them into the storage hardware allowing applications to bypass the OS. The second thrust explores the use of accelerators for accelerating offloaded components for higher performance. The third thrust redesigns offloaded components to exploit hardware capabilities such as device capacitance that can reduce software overheads and improve crash-consistency.\r\n\r\nBy redesigning storage software, this project has the potential to significantly improve I/O performance for a wide domain of applications including Internet of Things (IoT) as well as personal, datacenter, and mission-critical systems where running commodity OS is not feasible. Equally, the ideas and prototypes developed will educate undergraduate, graduate, and high-school students on the benefits of reducing software overheads, understanding the hardware capabilities when designing software, and hardware-software codesign. \r\n\r\nTo evaluate the filesystem design, the project builds a software prototype and an accelerated emulator running a wide-range of personal computing and datacenter applications. The research publications, source code with documentation, and the instructions for reproducing published measurement of the system will be made public and available from the Rutgers University's (https://www.cs.rutgers.edu/~sk2113/fsoffload) website maintained for the duration of the project.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Sudarsun",
   "pi_last_name": "Kannan",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Sudarsun Kannan",
   "pi_email_addr": "sudarsun.kannan@rutgers.edu",
   "nsf_id": "000791229",
   "pi_start_date": "2019-07-05",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Rutgers University New Brunswick",
  "inst_street_address": "3 RUTGERS PLZ",
  "inst_street_address_2": "",
  "inst_city_name": "NEW BRUNSWICK",
  "inst_state_code": "NJ",
  "inst_state_name": "New Jersey",
  "inst_phone_num": "8489320150",
  "inst_zip_code": "089018559",
  "inst_country_name": "United States",
  "cong_dist_code": "12",
  "st_cong_dist_code": "NJ12",
  "org_lgl_bus_name": "RUTGERS, THE STATE UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "M1LVPE5GLSD9"
 },
 "perf_inst": {
  "perf_inst_name": "Rutgers University",
  "perf_str_addr": "33 knighbridge road",
  "perf_city_name": "Piscataway",
  "perf_st_code": "NJ",
  "perf_st_name": "New Jersey",
  "perf_zip_code": "088548072",
  "perf_ctry_code": "US",
  "perf_cong_dist": "06",
  "perf_st_cong_dist": "NJ06",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 499839.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The file system offloading project explores new filesystem designs that allow applications to directly access storage hardware while maintaining key filesystem properties. Traditional filesystems reside within the operating system (OS) and serve as a bridge between applications and storage hardware, ensuring data consistency, security, and durability. However, modern ultra-fast storage technologies such as flash and nonvolatile memory have exposed significant software inefficiencies, as applications must frequently cross the OS boundary for input/output (I/O) access. These overheads degrade performance and limit the potential of high-speed storage devices.</p>\r\n<p>The file system offloading project offloads critical filesystem functions to storage hardware, leveraging accelerators to enhance performance, and redesigning storage software to exploit modern hardware capabilities.</p>\r\n<p>Intellectual contributions: The project makes several key contributions. First, through filesystem offloading and direct storage access, the research demonstrates that bypassing the OS for certain storage operations can significantly reduce I/O overhead while preserving crash consistency, security, and durability. The project identified filesystem components that can be safely offloaded and designed a meta-layer to enable efficient direct access.</p>\r\n<p>Second, the project develops hardware-accelerated filesystem operations using programmable accelerators to speed up essential storage functions such as metadata management and integrity verification. Experiments showed that offloading select operations to dedicated accelerators can improve I/O throughput while maintaining low CPU overhead.</p>\r\n<p>Third, the project reduces software bottlenecks by leveraging hardware capabilities. It restructures filesystem components to exploit features such as device capacitance and persistent memory properties, improving crash consistency and reducing data recovery time. These capabilities reduces write amplification, lower CPU utilization, and improved durability guarantees.</p>\r\n<p>Fourth, the project introduces near-storage caching, which exploits memory resources available near the storage device to further reduce storage access bottlenecks and minimize I/O amplification. By intelligently placing frequently accessed data in near-storage memory, the approach improves data locality and reduces costly storage accesses.</p>\r\n<p>Finally, the project develops a new concurrency model that efficiently utilizes hardware queues available in modern storage devices. This model reduces synchronization overhead and improves parallelism, enabling applications to achieve higher I/O throughput while maintaining consistency and isolation across concurrent operations.</p>\r\n<p>Experimental evaluations shows 1.5x to 9x performance improvements for various workloads, including datacenter applications, machine learning pipelines, and high-performance computing workloads. The system demonstrates the ability to scale efficiently across heterogeneous storage devices, reducing both latency and contention.</p>\r\n<p>Broader impact: The project provided research training for three Ph.D. students, two M.S. students, and six undergraduate students, equipping them with expertise in storage systems, operating systems, and hardware-software co-design. The research findings influenced industry collaborations, particularly in optimizing storage performance for next-generation computing platforms. Open-source software artifacts and benchmarking tools from the project have been released to the public, ensuring continued impact beyond academia. Additionally, this work has shaped storage curriculum content in systems and architecture courses, providing students with insights into modern filesystem design principles.</p>\r\n<p>By rethinking how applications interact with storage, this project lays the groundwork for next-generation storage systems that balance performance, security, and efficiency, benefiting a wide range of computing environments, from personal devices to large-scale cloud infrastructure.</p>\r\n<p>&nbsp;</p><br>\n<p>\n Last Modified: 01/30/2025<br>\nModified by: Sudarsun&nbsp;Kannan</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nThe file system offloading project explores new filesystem designs that allow applications to directly access storage hardware while maintaining key filesystem properties. Traditional filesystems reside within the operating system (OS) and serve as a bridge between applications and storage hardware, ensuring data consistency, security, and durability. However, modern ultra-fast storage technologies such as flash and nonvolatile memory have exposed significant software inefficiencies, as applications must frequently cross the OS boundary for input/output (I/O) access. These overheads degrade performance and limit the potential of high-speed storage devices.\r\n\n\nThe file system offloading project offloads critical filesystem functions to storage hardware, leveraging accelerators to enhance performance, and redesigning storage software to exploit modern hardware capabilities.\r\n\n\nIntellectual contributions: The project makes several key contributions. First, through filesystem offloading and direct storage access, the research demonstrates that bypassing the OS for certain storage operations can significantly reduce I/O overhead while preserving crash consistency, security, and durability. The project identified filesystem components that can be safely offloaded and designed a meta-layer to enable efficient direct access.\r\n\n\nSecond, the project develops hardware-accelerated filesystem operations using programmable accelerators to speed up essential storage functions such as metadata management and integrity verification. Experiments showed that offloading select operations to dedicated accelerators can improve I/O throughput while maintaining low CPU overhead.\r\n\n\nThird, the project reduces software bottlenecks by leveraging hardware capabilities. It restructures filesystem components to exploit features such as device capacitance and persistent memory properties, improving crash consistency and reducing data recovery time. These capabilities reduces write amplification, lower CPU utilization, and improved durability guarantees.\r\n\n\nFourth, the project introduces near-storage caching, which exploits memory resources available near the storage device to further reduce storage access bottlenecks and minimize I/O amplification. By intelligently placing frequently accessed data in near-storage memory, the approach improves data locality and reduces costly storage accesses.\r\n\n\nFinally, the project develops a new concurrency model that efficiently utilizes hardware queues available in modern storage devices. This model reduces synchronization overhead and improves parallelism, enabling applications to achieve higher I/O throughput while maintaining consistency and isolation across concurrent operations.\r\n\n\nExperimental evaluations shows 1.5x to 9x performance improvements for various workloads, including datacenter applications, machine learning pipelines, and high-performance computing workloads. The system demonstrates the ability to scale efficiently across heterogeneous storage devices, reducing both latency and contention.\r\n\n\nBroader impact: The project provided research training for three Ph.D. students, two M.S. students, and six undergraduate students, equipping them with expertise in storage systems, operating systems, and hardware-software co-design. The research findings influenced industry collaborations, particularly in optimizing storage performance for next-generation computing platforms. Open-source software artifacts and benchmarking tools from the project have been released to the public, ensuring continued impact beyond academia. Additionally, this work has shaped storage curriculum content in systems and architecture courses, providing students with insights into modern filesystem design principles.\r\n\n\nBy rethinking how applications interact with storage, this project lays the groundwork for next-generation storage systems that balance performance, security, and efficiency, benefiting a wide range of computing environments, from personal devices to large-scale cloud infrastructure.\r\n\n\n\t\t\t\t\tLast Modified: 01/30/2025\n\n\t\t\t\t\tSubmitted by: SudarsunKannan\n"
 }
}