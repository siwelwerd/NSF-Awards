{
 "awd_id": "1845446",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CAREER: Data-Driven Debugging of Complex Program Changes",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2019-05-01",
 "awd_exp_date": "2024-04-30",
 "tot_intn_awd_amt": 500000.0,
 "awd_amount": 500000.0,
 "awd_min_amd_letter_date": "2019-04-22",
 "awd_max_amd_letter_date": "2021-09-11",
 "awd_abstract_narration": "After the initial release of a software application, developers continue changing it by adding new features, fixing software defects, or improving the implementation of existing features. As the application becomes older and larger, program changes become more complex. It becomes more difficult for developers to change or maintain the software efficiently and correctly. Slowly and incorrectly evolved software systems negatively impact both software producers and consumers; these systems can cause tremendous economic costs, put customers' data and privacy at risk, and even threaten people's lives. This project addresses this problem by helping computers and developers better understand, check, and apply complex changes. The project's novelty is in new methods and tools to characterize, model, validate, and suggest code modifications. The project's impacts are increasing programmer productivity, improving software reliability, reducing software cost, and protecting people and privacy data from issues caused by problematic software upgrades. \r\n\r\nThe project will conduct empirical studies of software projects (in the GitHub repository) to understand and characterize multi-change edits \"in the wild\" to discover frequently co-changed patterns among code and non-code entities. Using these inferred patterns, the project will classify multi-change edits into different types such as bug fixes, refactorings, and feature enhancements. Techniques will be devised to make multi-edit changes, to ensure their correctness, and to automatically repair programs' multi-change edit sequences. These capabilities will be combined with delta debugging and dynamic patch validation in a a prototype editing and testing tool called Oedit, which will automatically recover programs from erroneous software updates and upgrades. The long-term vision is to provide a programming environment that supports complex, multi-change edits, with attention to their correctness, and with self-healing capabilities.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Na",
   "pi_last_name": "Meng",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Na Meng",
   "pi_email_addr": "nm8247@cs.vt.edu",
   "nsf_id": "000702964",
   "pi_start_date": "2019-04-22",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Virginia Polytechnic Institute and State University",
  "inst_street_address": "300 TURNER ST NW",
  "inst_street_address_2": "STE 4200",
  "inst_city_name": "BLACKSBURG",
  "inst_state_code": "VA",
  "inst_state_name": "Virginia",
  "inst_phone_num": "5402315281",
  "inst_zip_code": "240603359",
  "inst_country_name": "United States",
  "cong_dist_code": "09",
  "st_cong_dist_code": "VA09",
  "org_lgl_bus_name": "VIRGINIA POLYTECHNIC INSTITUTE & STATE UNIVERSITY",
  "org_prnt_uei_num": "X6KEFGLHSJX7",
  "org_uei_num": "QDE5UHE5XD16"
 },
 "perf_inst": {
  "perf_inst_name": "Virginia Polytechnic Institute and State University",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "VA",
  "perf_st_name": "Virginia",
  "perf_zip_code": "240610001",
  "perf_ctry_code": "US",
  "perf_cong_dist": "09",
  "perf_st_cong_dist": "VA09",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "287800",
   "pgm_ele_name": "Special Projects - CCF"
  },
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "1045",
   "pgm_ref_txt": "CAREER-Faculty Erly Career Dev"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  },
  {
   "pgm_ref_code": "9102",
   "pgm_ref_txt": "WOMEN, MINORITY, DISABLED, NEC"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0121",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0122",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002223DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0123",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002324DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 97718.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 194196.0
  },
  {
   "fund_oblg_fiscal_yr": 2021,
   "fund_oblg_amt": 208086.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Research Objectives:&nbsp;</p>\n<p>A multi-entity edit is a program commit that simultaneously modifies multiple entities. The major goals of this project include to (a) characterize, (b) classify, (c) check, and (d) correct multi-entity edits, in order to add (e) self-healing functionality to software systems. Specifically, preliminary work is conducted to mine software repositories and extract recurring change patterns from multi-entity edits. The PI will integrate program semantics analysis with machine learning to classify multi-entity edits. New approaches, such as peer field identification and association rule-based pattern matching, will be built to detect and fix erroneous complex changes. By combining these new approaches with delta debugging and dynamic patch validation via testing, our approach will automatically recover programs from erroneous software updates/upgrades. Big data sets of software repositories will be created to build and assess the new tools.</p>\n<p>Major Research Findings:</p>\n<p>1. We did an empirical study to characterize multi-entity edits separately for open-source Java programs and JavaScript programs [ICSME'18,JSS'21]. Although the syntax and semantics of those two programming languages are different, we observed similar results. For instance, over half of the studied program commits involve multi-entity edits instead of single-method changes. Among a significant percentage of multi-entity edits (36%--76%), we observed the simultaneously edited entities to be syntactically relevant to each other. Many multi-entity edits present recurring change patterns. The repetitively co-changed entities usually share commonality like similar content, relevant field usage, or identical method invocations. All these observations imply opportunities of creating new tools that (1) classify program commits to facilitate program comprehension, or (2) suggest changes to complement or correct the edits applied in program commits.</p>\n<p>2. Based on the characterization studies mentioned above, we created a new approach named CClassifier to predict whether a given program commit intends to fix bugs, add functionality, or serve for other purposes [IJCNN'21]. Specifically, given a program commit, CClassifier extracts program edits as well as their relationship, models those edits as well as relations with graphs, and applies convolutional neural networks (CNN) to classify graphs. Our evaluation results show that CClassifier can effectively classify program commits. Developers can leverage it to better comprehend program commits, or automatically process commits based on the change intent.</p>\n<p>3. Based on the characterization studies mentioned above, we created tools (CMSuggester [SATE'18,JSS'19] and CoRec [JSS'21]) to recommend entities-to-change given a program commit with multi-entity edits. Specifically, each of the tools crawls version history for relevant commits, and trains a classifier to predict method pairs that should be co-changed. Given a new program commit, each of these tools extracts features from the commit and/or version history, and uses the trained classifier to suggest methods that should be changed together with any of the edited entities in that commit. Such tools can help developers check or modify their program commits, to avoid applying multi-entity edits incompletely.</p>\n<p>4. To achieve the high-level goal of adding self-healing functionality to existing software systems, we created a tool named LibCatch [ICSE'24], which automatically fixes compilation errors due to library upgrade and API-breaking changes. Specifically, LibCatch defines 14 migration operators. It exploits the combinations of migration operators to modify code, to fix compilation errors due to the naive replacement of library dependencies. In the future, developers can use LibCatch to automatically fix most compilation errors that are caused by library upgrades or API-breaking changes.</p>\n<p>5. To achieve the high-level goal of helping developers check for programming errors, we created and/or empirically assessed tools that automatically detect bugs [ASE'20,ICSE'21,ICST Industry'21,ASE'22,ICPC'22,TSE'22,TOSEM'23,ICSE Industry'24a,ICSE Industry'24b] or automatically generate tests [SANER'22,ASE'23]. Our research will help developers locate bugs more effectively and more efficiently. Our ICSE'21 paper received the ACM SIGSOFT Distinguished Paper Award.</p>\n<p>6. To achieve the high-level goal of helping developers address errors in programs, we created tools to automatically fix bugs [ASE'20,ICSE'21,ICPC'22], or suggest resolution strategies for software merge conflicts [JSS'23,ICPC RENE'24]. Our research will help developers fix bugs or vulnerabilities more effectively.&nbsp;</p>\n<p>Outcomes:</p>\n<p>Thanks to the funding support, we were able to provide partial financial support (GRAs) to three PhD students. During 2019-2024, the PI and her collaborators published 25 papers relevant to this project; 11 of the papers were published at top-tier conferences or journals. The PI graduated 12 MS students and 2 PhD students, including 4 female students. Seven of the graduated MS students conducted research relevant to this project, and both graduated PhD students did research related to this project. One graduated PhD student and one graduated MS student now work as assistant professors in universities. One graduated MS student continued with his PhD study in Virginia Tech. The other graduated students work as software developers in industry (e.g., Microsoft) or academia (e.g., Eastern Michigan University).&nbsp;&nbsp;</p>\n<p>&nbsp;</p><br>\n<p>\n Last Modified: 06/20/2024<br>\nModified by: Na&nbsp;Meng</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nResearch Objectives:\n\n\nA multi-entity edit is a program commit that simultaneously modifies multiple entities. The major goals of this project include to (a) characterize, (b) classify, (c) check, and (d) correct multi-entity edits, in order to add (e) self-healing functionality to software systems. Specifically, preliminary work is conducted to mine software repositories and extract recurring change patterns from multi-entity edits. The PI will integrate program semantics analysis with machine learning to classify multi-entity edits. New approaches, such as peer field identification and association rule-based pattern matching, will be built to detect and fix erroneous complex changes. By combining these new approaches with delta debugging and dynamic patch validation via testing, our approach will automatically recover programs from erroneous software updates/upgrades. Big data sets of software repositories will be created to build and assess the new tools.\n\n\nMajor Research Findings:\n\n\n1. We did an empirical study to characterize multi-entity edits separately for open-source Java programs and JavaScript programs [ICSME'18,JSS'21]. Although the syntax and semantics of those two programming languages are different, we observed similar results. For instance, over half of the studied program commits involve multi-entity edits instead of single-method changes. Among a significant percentage of multi-entity edits (36%--76%), we observed the simultaneously edited entities to be syntactically relevant to each other. Many multi-entity edits present recurring change patterns. The repetitively co-changed entities usually share commonality like similar content, relevant field usage, or identical method invocations. All these observations imply opportunities of creating new tools that (1) classify program commits to facilitate program comprehension, or (2) suggest changes to complement or correct the edits applied in program commits.\n\n\n2. Based on the characterization studies mentioned above, we created a new approach named CClassifier to predict whether a given program commit intends to fix bugs, add functionality, or serve for other purposes [IJCNN'21]. Specifically, given a program commit, CClassifier extracts program edits as well as their relationship, models those edits as well as relations with graphs, and applies convolutional neural networks (CNN) to classify graphs. Our evaluation results show that CClassifier can effectively classify program commits. Developers can leverage it to better comprehend program commits, or automatically process commits based on the change intent.\n\n\n3. Based on the characterization studies mentioned above, we created tools (CMSuggester [SATE'18,JSS'19] and CoRec [JSS'21]) to recommend entities-to-change given a program commit with multi-entity edits. Specifically, each of the tools crawls version history for relevant commits, and trains a classifier to predict method pairs that should be co-changed. Given a new program commit, each of these tools extracts features from the commit and/or version history, and uses the trained classifier to suggest methods that should be changed together with any of the edited entities in that commit. Such tools can help developers check or modify their program commits, to avoid applying multi-entity edits incompletely.\n\n\n4. To achieve the high-level goal of adding self-healing functionality to existing software systems, we created a tool named LibCatch [ICSE'24], which automatically fixes compilation errors due to library upgrade and API-breaking changes. Specifically, LibCatch defines 14 migration operators. It exploits the combinations of migration operators to modify code, to fix compilation errors due to the naive replacement of library dependencies. In the future, developers can use LibCatch to automatically fix most compilation errors that are caused by library upgrades or API-breaking changes.\n\n\n5. To achieve the high-level goal of helping developers check for programming errors, we created and/or empirically assessed tools that automatically detect bugs [ASE'20,ICSE'21,ICST Industry'21,ASE'22,ICPC'22,TSE'22,TOSEM'23,ICSE Industry'24a,ICSE Industry'24b] or automatically generate tests [SANER'22,ASE'23]. Our research will help developers locate bugs more effectively and more efficiently. Our ICSE'21 paper received the ACM SIGSOFT Distinguished Paper Award.\n\n\n6. To achieve the high-level goal of helping developers address errors in programs, we created tools to automatically fix bugs [ASE'20,ICSE'21,ICPC'22], or suggest resolution strategies for software merge conflicts [JSS'23,ICPC RENE'24]. Our research will help developers fix bugs or vulnerabilities more effectively.\n\n\nOutcomes:\n\n\nThanks to the funding support, we were able to provide partial financial support (GRAs) to three PhD students. During 2019-2024, the PI and her collaborators published 25 papers relevant to this project; 11 of the papers were published at top-tier conferences or journals. The PI graduated 12 MS students and 2 PhD students, including 4 female students. Seven of the graduated MS students conducted research relevant to this project, and both graduated PhD students did research related to this project. One graduated PhD student and one graduated MS student now work as assistant professors in universities. One graduated MS student continued with his PhD study in Virginia Tech. The other graduated students work as software developers in industry (e.g., Microsoft) or academia (e.g., Eastern Michigan University).\n\n\n\t\t\t\t\tLast Modified: 06/20/2024\n\n\t\t\t\t\tSubmitted by: NaMeng\n"
 }
}