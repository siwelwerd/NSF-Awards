{
 "awd_id": "1919181",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SPX: Collaborative Research: NG4S: A Next-generation Geo-distributed Scalable Stateful Stream Processing System",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032925197",
 "po_email": "mmcclure@nsf.gov",
 "po_sign_block_name": "Marilyn McClure",
 "awd_eff_date": "2019-10-01",
 "awd_exp_date": "2023-09-30",
 "tot_intn_awd_amt": 261873.0,
 "awd_amount": 261873.0,
 "awd_min_amd_letter_date": "2019-07-24",
 "awd_max_amd_letter_date": "2022-06-21",
 "awd_abstract_narration": "Our society increasingly relies on applications that process streaming data across geo-distributed sites, such as making business decisions from marketing data, identifying spam campaigns in social network streams, and analyzing genome datasets in different labs and countries to track the sources of potential epidemics. State-of-art solutions for these needs are centered around stateless stream processing. This project advances stream processing to enable next-generation streaming applications to store and update state along with computation, therefore processing live data streams in a timely fashion from massive and geo-distributed datasets. Existing systems are mainly designed for stateless stream processing in intra-datacenter settings and do not scale well for running stream applications that contain large distributed states. This project breaks the traditional abstractions of a centralized architecture and hashtable-based stateless operators, redefining them with a new decentralized architecture and new memory-efficient stateful operators, which enables novel approaches to improve overall system performance and scalability.  \r\n \r\nThis project builds a next-generation geo-distributed scalable stateful stream processing system that will significantly improve the scalability of stream processing systems. This work includes three primary research directions. (1) At the architecture level, a new decentralized 'many masters/many workers' architecture will be proposed, which provides each master with maximum independence. (2) At the operator level, a new in-memory data structure will be designed and implemented to store application state and minimize the memory overhead so as to handle 'big data' requirements. (3) A new shard-based parallel recovery mechanism will be proposed to handle failures and stragglers in a scalable way. All three parts of the project will be prototyped and implemented on a widely adopted stream processing system (Apache Storm).\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Abdullah",
   "pi_last_name": "Muzahid",
   "pi_mid_init": "A",
   "pi_sufx_name": "",
   "pi_full_name": "Abdullah A Muzahid",
   "pi_email_addr": "abdullah.muzahid@tamu.edu",
   "nsf_id": "000634302",
   "pi_start_date": "2022-06-21",
   "pi_end_date": null
  },
  {
   "pi_role": "Former Principal Investigator",
   "pi_first_name": "Dilma",
   "pi_last_name": "Da Silva",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Dilma Da Silva",
   "pi_email_addr": "dilma@tamu.edu",
   "nsf_id": "000695299",
   "pi_start_date": "2019-07-24",
   "pi_end_date": "2022-06-21"
  }
 ],
 "inst": {
  "inst_name": "Texas A&M Engineering Experiment Station",
  "inst_street_address": "3124 TAMU",
  "inst_street_address_2": "",
  "inst_city_name": "COLLEGE STATION",
  "inst_state_code": "TX",
  "inst_state_name": "Texas",
  "inst_phone_num": "9798626777",
  "inst_zip_code": "778433124",
  "inst_country_name": "United States",
  "cong_dist_code": "10",
  "st_cong_dist_code": "TX10",
  "org_lgl_bus_name": "TEXAS A&M ENGINEERING EXPERIMENT STATION",
  "org_prnt_uei_num": "QD1MX6N5YTN4",
  "org_uei_num": "QD1MX6N5YTN4"
 },
 "perf_inst": {
  "perf_inst_name": "Texas A&M Engineering Experiment Station",
  "perf_str_addr": "HRBB Building Office 305-B",
  "perf_city_name": "College Station",
  "perf_st_code": "TX",
  "perf_st_name": "Texas",
  "perf_zip_code": "778433112",
  "perf_ctry_code": "US",
  "perf_cong_dist": "10",
  "perf_st_cong_dist": "TX10",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "042Y00",
   "pgm_ele_name": "PPoSS-PP of Scalable Systems"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "026Z",
   "pgm_ref_txt": "NSCI: National Strategic Computing Initi"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 261873.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Today, large-scale cloud organizations are deploying data centers and edge clusters globally to provide their users with low-latency access to their services. Running stream applications across these geo-distributed sites is emerging as a frequent requirement, such as making business decisions from marketing streams, identifying spam campaigns from social network streams, and analyzing existing genomes in different labs and countries to track the sources of a potential epidemic. This project aimed at developing a next-generation, scalable, and stateful stream processing system that can timely process live data streams from massive and geo-distributed data sets.</p>\n<p>&nbsp;</p>\n<p>This project spanned three complementary thrusts. First, a new decentralized \"many coordinators/many workers\" architecture has been designed and prototyped. Its experimental evaluation showed that the new approach revolutionarily improves the scalability of stream processing systems. Second, a new in-memory data structure for storing large, distributed states that significantly amortizes the memory overhead has been designed and implemented. Third, a new fragmented-based parallel recovery mechanism has been developed, and its experimental evaluation demonstrated it can handle failures and stragglers in a scalable way to achieve system reliability. The systems implemented in this project were evaluated and validated on both lab-based prototypes and practical, real-world deployments on a cloud testbed.</p>\n<p>&nbsp;</p>\n<p>The results of this project introduce an effective and practical solution that benefits a broad class of applications across domains such as stock trading, social networks, system monitoring, atmospheric sensing, and fraud detection. The outcomes of this project can also be extended to many other system software stacks that require maintaining application states, including graph databases, task queues, data caching systems, event tracking systems, NoSQL stores, and distributed databases. The toolkit, source code, datasets, and course materials developed in this project are documented and open-sourced. The results have been published at several conferences and journals. In addition to its technical contributions, this project involved various educational and outreach activities. The research results have been integrated into undergraduate and graduate systems courses.&nbsp;</p><br>\n<p>\n Last Modified: 01/30/2024<br>\nModified by: Abdullah&nbsp;A&nbsp;Muzahid</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nToday, large-scale cloud organizations are deploying data centers and edge clusters globally to provide their users with low-latency access to their services. Running stream applications across these geo-distributed sites is emerging as a frequent requirement, such as making business decisions from marketing streams, identifying spam campaigns from social network streams, and analyzing existing genomes in different labs and countries to track the sources of a potential epidemic. This project aimed at developing a next-generation, scalable, and stateful stream processing system that can timely process live data streams from massive and geo-distributed data sets.\n\n\n\n\n\nThis project spanned three complementary thrusts. First, a new decentralized \"many coordinators/many workers\" architecture has been designed and prototyped. Its experimental evaluation showed that the new approach revolutionarily improves the scalability of stream processing systems. Second, a new in-memory data structure for storing large, distributed states that significantly amortizes the memory overhead has been designed and implemented. Third, a new fragmented-based parallel recovery mechanism has been developed, and its experimental evaluation demonstrated it can handle failures and stragglers in a scalable way to achieve system reliability. The systems implemented in this project were evaluated and validated on both lab-based prototypes and practical, real-world deployments on a cloud testbed.\n\n\n\n\n\nThe results of this project introduce an effective and practical solution that benefits a broad class of applications across domains such as stock trading, social networks, system monitoring, atmospheric sensing, and fraud detection. The outcomes of this project can also be extended to many other system software stacks that require maintaining application states, including graph databases, task queues, data caching systems, event tracking systems, NoSQL stores, and distributed databases. The toolkit, source code, datasets, and course materials developed in this project are documented and open-sourced. The results have been published at several conferences and journals. In addition to its technical contributions, this project involved various educational and outreach activities. The research results have been integrated into undergraduate and graduate systems courses.\t\t\t\t\tLast Modified: 01/30/2024\n\n\t\t\t\t\tSubmitted by: AbdullahAMuzahid\n"
 }
}