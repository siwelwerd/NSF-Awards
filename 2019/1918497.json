{
 "awd_id": "1918497",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "FMiTF: Track II: Rigorous and Versatile Float-Point Precision Analysis and Tuning",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032922585",
 "po_email": "pprabhak@nsf.gov",
 "po_sign_block_name": "Pavithra Prabhakar",
 "awd_eff_date": "2019-10-01",
 "awd_exp_date": "2021-12-31",
 "tot_intn_awd_amt": 100000.0,
 "awd_amount": 116000.0,
 "awd_min_amd_letter_date": "2019-06-17",
 "awd_max_amd_letter_date": "2020-02-20",
 "awd_abstract_narration": "Floating-point numbers serve as the mostly commonly used representation within computers of real-valued quantities such as the average global temperature on Earth.  Since computer storage cells have finite precision, floating-point quantities must be suitably rounded, following standard rounding rules such as promulgated by the Institute of Electrical and Electronics Engineers (IEEE). Unfortunately, these rounding rules are sometimes incorrectly implemented in existing pieces of important software.  In other cases, key links in the software transformation pipeline deviate from mathematical stipulations.  This project provides an integrated collection of tools called FPFormal that helps establish mathematically rigorous estimates of round-off error. It assists designers pinpoint exactly which links in the transformation pipeline must be enhanced to attain certifiable calculation results. This research eliminates or vastly minimize deviations in calculation results that inform critical scientific decisions. The tools developed in this project will be open to the entire scientific community, and also play a key role in promoting pedagogy at all levels of computing education.\r\n\r\nThe FPFormal project provides an integrated collection of point tools that help researchers in science and engineering establish tight round-off error bounds for their numerical calculations. Some of these tools employ symbolic differentiation supported by a novel idea called Taylor Forms, feeding the results to a global optimizer called Gelpia. Other tools in FPFormal will help pinpoint the sources of result deviations through differently branching computations. They will also compute inputs that cause the most roundoff errors.  FPFormal will be released to the research community and promoted at conferences and workshops specifically targeting three groups: computational scientists at national laboratories; companies invested in developing mathematical software; and individual researchers in areas such as Physics where calculations are the only means of exploring the unknown.  A major emphasis of the investigators will be to adhere to standards such as FPBench being developed by the community to supply well-vetted benchmarks. Broader impacts of the project are to equip domain science and engineering researchers and practitioners with tools that help them make their computational software trustworthy as well as more energy efficient, by enabling them to choose lower precision whenever the underlying specifications allow. Potential impacts span both high-performance computing and machine learning.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Ganesh",
   "pi_last_name": "Gopalakrishnan",
   "pi_mid_init": "L",
   "pi_sufx_name": "",
   "pi_full_name": "Ganesh L Gopalakrishnan",
   "pi_email_addr": "ganesh@cs.utah.edu",
   "nsf_id": "000160895",
   "pi_start_date": "2019-06-17",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Zvonimir",
   "pi_last_name": "Rakamaric",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Zvonimir Rakamaric",
   "pi_email_addr": "zvonimir@cs.utah.edu",
   "nsf_id": "000623290",
   "pi_start_date": "2019-06-17",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Utah",
  "inst_street_address": "201 PRESIDENTS CIR",
  "inst_street_address_2": "",
  "inst_city_name": "SALT LAKE CITY",
  "inst_state_code": "UT",
  "inst_state_name": "Utah",
  "inst_phone_num": "8015816903",
  "inst_zip_code": "841129049",
  "inst_country_name": "United States",
  "cong_dist_code": "01",
  "st_cong_dist_code": "UT01",
  "org_lgl_bus_name": "UNIVERSITY OF UTAH",
  "org_prnt_uei_num": "",
  "org_uei_num": "LL8GLEVH6MG3"
 },
 "perf_inst": {
  "perf_inst_name": "University of Utah",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "UT",
  "perf_st_name": "Utah",
  "perf_zip_code": "841129205",
  "perf_ctry_code": "US",
  "perf_cong_dist": "01",
  "perf_st_cong_dist": "UT01",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "094Y00",
   "pgm_ele_name": "FMitF: Formal Methods in the F"
  },
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "062Z",
   "pgm_ref_txt": "Harnessing the Data Revolution"
  },
  {
   "pgm_ref_code": "8206",
   "pgm_ref_txt": "Formal Methods and Verification"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 100000.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 16000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>This project named FPFormal was aimed at transitioning research on correct numerical software design into practice through usable software tools. In particular, the investigators focused on the problem of tightly bounding the rounding error exhibited by floating-point expressions. Tools that support this activity must handle expressions with millions of computational operators such as addition and multiplication. They must compute error-bounds that are not overly pessimistic. The tools must be widely usable. They must also be easily runnable on multiple computational platforms. Last but not least, projects such as these must emphasize community outreach through discussions and regularly held meeting, and especially provide opportunities for students to present their work on these topics.</p>\n<p><br />The FPFormal project met these objectives in the following ways. It developed two new error analysis tools, namely Satire and Seesaw, both released via Github. Some highlights around these tools are now presented. Satire was presented at Supercomputing 2020 (SC'20) where it won the Outstanding Student Paper award for the whole of SC'20. It developed core ideas that helped error analysis scale from the previous record (held by other tools) of about 200 operators to four million operator nodes. Unfortunately, Satire does not handle conditional operators. A follow-on tool, namely Seesaw, was developed by the PI's team and was presented at IEEE Cluster 2020. Seesaw subsumes all the features of Satire, and handles conditional statements that are fundamental to geometric modeling tools. In addition, the FPFormal project members interacted with researchers working on floating-point arithmetic reasoning once a month by attending meetings organized under \"FPTalks\" (see FPBench.org). They also interacted with researchers from the University of Perpignan (under the supervision of Prof. Matthieu Martel). Collaborations are underway with them aimed at integrating our tools. Participants of the FPFormal project were also involved in organizing two workshops, namely the FPTalks conference of 2020 and 2021.</p>\n<p><br />Software released under FPFormal will benefit the society in many tangible ways. Numerical software is fundamental to high-performance computing (HPC) and artificial intelligence (AI). Just to highlight the societal impact possible through projects such as FPFormal, the amount of data in computing systems has grown steadily, requiring that we reduce the amount of data moved (since data movement costs energy and our carbon footprint). Data compression methods are designed to represent relevant data using fewer bits; unfortunately, these compression (and associated decompression) algorithms must be formally verified. Unfortunately, today's tools do not scale well when it comes to tasks such as verifying entire data compression/decompression pipelines. Tools developed in FPFormal can play a significant role in bridging this scalability gap. Last but not least, FPFormal has been fundamental to PhD student mentoring, impacting the work of at least three PhD students in the PI's group.</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 05/05/2022<br>\n\t\t\t\t\tModified by: Ganesh&nbsp;L&nbsp;Gopalakrishnan</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThis project named FPFormal was aimed at transitioning research on correct numerical software design into practice through usable software tools. In particular, the investigators focused on the problem of tightly bounding the rounding error exhibited by floating-point expressions. Tools that support this activity must handle expressions with millions of computational operators such as addition and multiplication. They must compute error-bounds that are not overly pessimistic. The tools must be widely usable. They must also be easily runnable on multiple computational platforms. Last but not least, projects such as these must emphasize community outreach through discussions and regularly held meeting, and especially provide opportunities for students to present their work on these topics.\n\n\nThe FPFormal project met these objectives in the following ways. It developed two new error analysis tools, namely Satire and Seesaw, both released via Github. Some highlights around these tools are now presented. Satire was presented at Supercomputing 2020 (SC'20) where it won the Outstanding Student Paper award for the whole of SC'20. It developed core ideas that helped error analysis scale from the previous record (held by other tools) of about 200 operators to four million operator nodes. Unfortunately, Satire does not handle conditional operators. A follow-on tool, namely Seesaw, was developed by the PI's team and was presented at IEEE Cluster 2020. Seesaw subsumes all the features of Satire, and handles conditional statements that are fundamental to geometric modeling tools. In addition, the FPFormal project members interacted with researchers working on floating-point arithmetic reasoning once a month by attending meetings organized under \"FPTalks\" (see FPBench.org). They also interacted with researchers from the University of Perpignan (under the supervision of Prof. Matthieu Martel). Collaborations are underway with them aimed at integrating our tools. Participants of the FPFormal project were also involved in organizing two workshops, namely the FPTalks conference of 2020 and 2021.\n\n\nSoftware released under FPFormal will benefit the society in many tangible ways. Numerical software is fundamental to high-performance computing (HPC) and artificial intelligence (AI). Just to highlight the societal impact possible through projects such as FPFormal, the amount of data in computing systems has grown steadily, requiring that we reduce the amount of data moved (since data movement costs energy and our carbon footprint). Data compression methods are designed to represent relevant data using fewer bits; unfortunately, these compression (and associated decompression) algorithms must be formally verified. Unfortunately, today's tools do not scale well when it comes to tasks such as verifying entire data compression/decompression pipelines. Tools developed in FPFormal can play a significant role in bridging this scalability gap. Last but not least, FPFormal has been fundamental to PhD student mentoring, impacting the work of at least three PhD students in the PI's group.\n\n \n\n\t\t\t\t\tLast Modified: 05/05/2022\n\n\t\t\t\t\tSubmitted by: Ganesh L Gopalakrishnan"
 }
}