{
 "awd_id": "1908389",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Collaborative Research: A Rational Reconstruction of the Julia Type System",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2019-10-01",
 "awd_exp_date": "2022-09-30",
 "tot_intn_awd_amt": 247222.0,
 "awd_amount": 247222.0,
 "awd_min_amd_letter_date": "2019-06-14",
 "awd_max_amd_letter_date": "2019-06-14",
 "awd_abstract_narration": "Julia is an up-and-coming language in scientific computing. Julia straddles the line between being general-purpose and being domain-specific, and the line between being statically typed versus being dynamically typed. Despite being only six years old, Julia has been downloaded over 2 million times and has had nearly 2,000 packages developed by its community. The novelty of this project is to develop some of the foundations of the Julia type system which have not been formalized to date. The project's impacts are to provide a well-grounded specification to the language so that the specification can be used by programmers to reason about their code, and by tool developers to write program analysis and transformation software for the Julia community.\r\n\r\nJulia supports dynamic typing. Programs can be written without any type annotations as they would be written in, say, Python. Yet, Julia's grammar of types and its subtyping system is reminiscent of what one would expect of a modern statically typed language with an original combination of structural subtyping, invariant nominal generics, union types, existential types, covariant tuples, distributivity, and singleton types, as well as the, so-called, diagonal rule. This complex system is used to determine the run-time behavior of Julia programs. Specifically it is used to determine, for a given multimethod, which of its implementations is applicable. To make this determination, Julia compares the run-time types of arguments with the static types of the parameters of various overloadings. This means that the algorithmic behavior of Julia's type system is central to the language's semantics, performance, and usage. Yet Julia uses features, such as iterated unions, for which the research community has not yet developed adequate algorithms. As such, Julia's type system is currently specified by a reference implementation in C, one that has been made complex after years of balancing performance trade-offs with the need to patch bug reports filed by the language's users. The project, therefore, aims to perform experiments and studies to determine what the underlying intent of the implementation is, formalize that intent axiomatically as a type system, and then develop and verify the key algorithms for implementing the core of the Julia language.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Jan",
   "pi_last_name": "Vitek",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Jan Vitek",
   "pi_email_addr": "j.vitek@neu.edu",
   "nsf_id": "000290862",
   "pi_start_date": "2019-06-14",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Northeastern University",
  "inst_street_address": "360 HUNTINGTON AVE",
  "inst_street_address_2": "",
  "inst_city_name": "BOSTON",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "6173735600",
  "inst_zip_code": "021155005",
  "inst_country_name": "United States",
  "cong_dist_code": "07",
  "st_cong_dist_code": "MA07",
  "org_lgl_bus_name": "NORTHEASTERN UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "HLTMVS2JZBS6"
 },
 "perf_inst": {
  "perf_inst_name": "Northeastern University",
  "perf_str_addr": "360 Huntington Avenue",
  "perf_city_name": "Boston",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "021155005",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "MA07",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 247222.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The Julia programming language is a new tool for the scientific community to develop mathematical and statistical libraries that are both easy to use and efficient. It is unusual for new programming languages to be widely adopted, especially ones that created in open source without the backing of a major industrial concern. Julia has beaten the odds with a radically new language design and novel implemenation technology. In just a few years, it has become the language of choice in several scientific communities. The goal of this grant was to strengthen the foundations of Julia and provide an account of its novel features that can be understood both by researchers and users. The first contribution of the project was a formal model of the notion of subtyping in Julia. That model ellucidated some of the complexities involved in determining whether one particular data type is subsumed by another. This uncovered both small and more fundamental flaws in the design, which were addresses by the Julia authors. The second key contribution was a formalization of the notion of World Age which underlies the implementation of the just in time compiler and shield code from changes performed by reflection. The third and final contribution of the project was the formalizaiton of the notion of Type Stability, this is the idea that a particular code fragement is stable in terms of the types over which it operates. This concept is crucial to generating fast machine code and part of a conversation between programmers and the implementation of the language. These contributions form the basis of a better understanding of the language and provide ideas to designers of future languages.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 11/13/2022<br>\n\t\t\t\t\tModified by: Jan&nbsp;Vitek</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThe Julia programming language is a new tool for the scientific community to develop mathematical and statistical libraries that are both easy to use and efficient. It is unusual for new programming languages to be widely adopted, especially ones that created in open source without the backing of a major industrial concern. Julia has beaten the odds with a radically new language design and novel implemenation technology. In just a few years, it has become the language of choice in several scientific communities. The goal of this grant was to strengthen the foundations of Julia and provide an account of its novel features that can be understood both by researchers and users. The first contribution of the project was a formal model of the notion of subtyping in Julia. That model ellucidated some of the complexities involved in determining whether one particular data type is subsumed by another. This uncovered both small and more fundamental flaws in the design, which were addresses by the Julia authors. The second key contribution was a formalization of the notion of World Age which underlies the implementation of the just in time compiler and shield code from changes performed by reflection. The third and final contribution of the project was the formalizaiton of the notion of Type Stability, this is the idea that a particular code fragement is stable in terms of the types over which it operates. This concept is crucial to generating fast machine code and part of a conversation between programmers and the implementation of the language. These contributions form the basis of a better understanding of the language and provide ideas to designers of future languages.\n\n\t\t\t\t\tLast Modified: 11/13/2022\n\n\t\t\t\t\tSubmitted by: Jan Vitek"
 }
}