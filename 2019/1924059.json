{
 "awd_id": "1924059",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "Collaborative Research: CyberTraining: Pilot: Semi-Automatic Assessment of Parallel Programs in Training of Students and Faculty",
 "cfda_num": "47.070",
 "org_code": "05090000",
 "po_phone": "7032928235",
 "po_email": "bmihaila@nsf.gov",
 "po_sign_block_name": "Bogdan Mihaila",
 "awd_eff_date": "2019-09-01",
 "awd_exp_date": "2024-08-31",
 "tot_intn_awd_amt": 218000.0,
 "awd_amount": 218000.0,
 "awd_min_amd_letter_date": "2019-07-10",
 "awd_max_amd_letter_date": "2023-06-22",
 "awd_abstract_narration": "Modern computers allow a computer program to be decomposed into multiple activities or threads that can execute concurrently.  Emerging big-data scientific, health, social, and engineering applications require such concurrency to give results in a timely manner. The key to matching the computation needs of these applications to the available computing resources is training of a workforce to develop, maintain, and configure concurrent programs. Ongoing work on developing toolkits for teaching concurrency is challenging because instruction is particularly labor-intensive, and thus, these toolkits, on their own, cannot help instructors meet the demands for such instruction. Specifically, concurrent programs are notoriously difficult to write, and substantial instructor effort is required to evaluate the performance and correctness of these programs, and identify potential problems. This project will extend an existing instructional toolkit with a new software framework to automate assessment of concurrent programs, and using instructional workshops and university courses to validate the extended toolkit. Successful execution of the project will improve the workforce development and promote the progress of science.\r\n\r\nThe main research question we are exploring is: What should be the nature of a rule-based software framework for assessing concurrent programs written in multiple programming languages that improves the productivity and learning, respectively, of trainers and trainees? The key novel steps we are taking to explore this question are (a) development of a semi-automatic assessment model in which manual evaluation, integrated with automatic rules, reduces false positives and negatives of the automated checks; (b) identification of  new protocols and associated architectures that leverage the capabilities of several existing powerful tools that have not been used before to address our question, (c) creation of new techniques based on the insight that solutions to a concurrent programming assignment often have a prescribed code-structure and algorithm, (d) support for layered techniques that allow rule-writers to tradeoff assessment quality for low rule-writing effort, (e) development of a meta-assessment framework to train the trainers to write rules, (f) use of the meta-assessment and assessment framework in instructional workshops and university course offerings, respectively, and (g) evaluation of the usability, programmability, effectiveness and learning gain of the frameworks through diverse mechanisms including pre-post surveys, course exit interviews, and focus groups.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "OAC",
 "org_div_long_name": "Office of Advanced Cyberinfrastructure (OAC)",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Prasun",
   "pi_last_name": "Dewan",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Prasun Dewan",
   "pi_email_addr": "dewan@cs.unc.edu",
   "nsf_id": "000336210",
   "pi_start_date": "2019-07-10",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of North Carolina at Chapel Hill",
  "inst_street_address": "104 AIRPORT DR STE 2200",
  "inst_street_address_2": "",
  "inst_city_name": "CHAPEL HILL",
  "inst_state_code": "NC",
  "inst_state_name": "North Carolina",
  "inst_phone_num": "9199663411",
  "inst_zip_code": "275995023",
  "inst_country_name": "United States",
  "cong_dist_code": "04",
  "st_cong_dist_code": "NC04",
  "org_lgl_bus_name": "UNIVERSITY OF NORTH CAROLINA AT CHAPEL HILL",
  "org_prnt_uei_num": "D3LHU66KBLD5",
  "org_uei_num": "D3LHU66KBLD5"
 },
 "perf_inst": {
  "perf_inst_name": "University of North Carolina at Chapel Hill",
  "perf_str_addr": "201 S Columbia St",
  "perf_city_name": "Chapel Hill",
  "perf_st_code": "NC",
  "perf_st_name": "North Carolina",
  "perf_zip_code": "275993175",
  "perf_ctry_code": "US",
  "perf_cong_dist": "04",
  "perf_st_cong_dist": "NC04",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "044Y00",
   "pgm_ele_name": "CyberTraining - Training-based"
  },
  {
   "pgm_ele_code": "199800",
   "pgm_ele_name": "IUSE"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "8209",
   "pgm_ref_txt": "Improv Undergrad STEM Ed(IUSE)"
  },
  {
   "pgm_ref_code": "8244",
   "pgm_ref_txt": "EHR CL Opportunities (NSF 14-302)"
  },
  {
   "pgm_ref_code": "9150",
   "pgm_ref_txt": "EXP PROG TO STIM COMP RES"
  },
  {
   "pgm_ref_code": "9178",
   "pgm_ref_txt": "UNDERGRADUATE EDUCATION"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0419",
   "app_name": "NSF Education & Human Resource",
   "app_symb_id": "040106",
   "fund_code": "04001920DB",
   "fund_name": "NSF Education & Human Resource",
   "fund_symb_id": "040106"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 218000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Modern computers allow a computer program to be decomposed into multiple activities or threads that can execute concurrently. Emerging big-data scientific, health, social, and engineering applications require such concurrency to give results in a timely manner. The key to matching the computation needs of these applications to the available computing resources is the training of a workforce to develop, maintain, and configure concurrent programs.</p>\n<p>&nbsp;Such training faces four related challenges we have addressed in this proposal. First, concurrent programming is not a part of the standard undergraduate curriculum. Introducing concurrent execution in a standard undergraduate course requires sacrificing some existing important concepts in the course. Second, there is a lack of trained faculty members in this area, because many of them never took a course in this area. &nbsp;Third, there has been a lack of tools to support the automatic assessment of these programs. Finally, concurrent programs are notoriously difficult to write, and without automatic assessment, substantial instructor effort is required to evaluate the performance and correctness of these programs, and identify potential problems.</p>\n<p>At the heart of our solution is a new pedagogical model, depicted in the accompanying figure, based on the idea of automated assignment assessment. The instructor gives the trainee a set of requirements for a carefully chosen concurrent-programming problem. Associated with the assignment are problem-specific checks, which consist of both tests and hints on how to solve the issues identified by the tests. The messages produced by them provide a new form of feedback for the trainee, which is meant to augment the feedback provided by peers and instructors. The logs of execution of these checks are processed by an awareness engine to make the instructors aware of the work of the trainees on their solutions. This information is used to refine the teaching of the concepts and the assignment itself.</p>\n<p>The following are some accomplishments based on this model:</p>\n<p><strong>Visualized Concurrency</strong>: We have created and successfully tested problems that visualize concurrency by simulating real-world concurrency. Such visualization makes it easy for trainees to discover and solve problems with their solutions.</p>\n<p><strong>Multi-language and Multi-Modal Concurrent Event Interception</strong>: Traditional techniques for automatic program assessment do not work as they process only the final output of a program. They do not determine if the output is computed sequentially or concurrently. We have augmented these with techniques for intercepting concurrency-level events in the algorithm used to compute the output. &nbsp;These are multi-language in that they have been developed for both Java and C. They are multi-modal in that they intercept procedure calls and graphical and textual output.</p>\n<p><strong>Concurrent-Event Database</strong>: Processing these events directly to check application constraints requires complex programming in the tests. We have reduced this overhead by creating an infrastructure for writing these tests that intercepts the events and provides the tests with a high-level API to process them.</p>\n<p><strong>Fork-Join Layer</strong>: An important class of concurrency problems involves a parent thread forking a set of child threads to perform part of the given task, waiting for the children to finish, and then completing the task. We have built a layer above the concurrent event database to make it easy to write tests for this class of problems.</p>\n<p><strong>Online Exercises</strong>: We have used the tests and our model to create exercises that provide lecture-less introductions to concurrency that can be taught in as little as an hour, making such an introduction easier to add to a packed existing course. &nbsp;These exercises involved four different iterations and awareness from each iteration was used to refine the final exercise. In the final exercise, trainees are asked to read, run, fix, and test an existing fork-join concurrent program, and take a quiz that evaluates their understanding. An online tutorial, explanatory comments in the program, and tests and hints are used as substitutes for instructor lectures.&nbsp;</p>\n<p><strong>Concurrency Tests</strong>: We have used our infrastructure to write more than 200 tests and hints for our lecture-less online exercises and concurrency assignments in semester-wide courses on object-oriented programming, programming languages, distributed computing, and parallel computing.</p>\n<p><strong>Student and Faculty Training:</strong> More than 200 students and faculty members have been trained using the tests above. The faculty were trained in workshops held at TTU and a conference in India (HiPC 23), in which participants selected from the US and India, respectively, were trained. The students were trained in courses offered at UNC and Manipal Institute of Technology, India.</p>\n<p>Our work on the general model, visualized concurrency, event interception and database, fork-join layer, and online exercises has persistence beyond the lifetime of this project, and can be expected to form the bases for future concurrency training. Our experience with writing tests and student and faculty training should inform future work in this area.</p>\n<p>&nbsp;</p><br>\n<p>\n Last Modified: 09/02/2024<br>\nModified by: Prasun&nbsp;Dewan</p></div>\n<div class=\"porSideCol\"\n><div class=\"each-gallery\">\n<div class=\"galContent\" id=\"gallery0\">\n<div class=\"photoCount\" id=\"photoCount0\">\n\t\t\t\t\t\t\t\t\tImage\n\t\t\t\t\t\t\t\t</div>\n<div class=\"galControls onePhoto\" id=\"controls0\"></div>\n<div class=\"galSlideshow\" id=\"slideshow0\"></div>\n<div class=\"galEmbox\" id=\"embox\">\n<div class=\"image-title\"></div>\n</div>\n</div>\n<div class=\"galNavigation onePhoto\" id=\"navigation0\">\n<ul class=\"thumbs\" id=\"thumbs0\">\n<li>\n<a href=\"/por/images/Reports/POR/2024/1924059/1924059_10619865_1725315421910_parallel_vision--rgov-214x142.png\" original=\"/por/images/Reports/POR/2024/1924059/1924059_10619865_1725315421910_parallel_vision--rgov-800width.png\" title=\"Test-based Pedagogical Model\"><img src=\"/por/images/Reports/POR/2024/1924059/1924059_10619865_1725315421910_parallel_vision--rgov-66x44.png\" alt=\"Test-based Pedagogical Model\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Associated with an assignment are automatic tests and hints that provide messages to guide the trainees. An awareness engine makes the instructors aware of their execution. This information is used to refine the teaching of the concepts and the assignment itself.</div>\n<div class=\"imageCredit\">Prasun Dewan</div>\n<div class=\"imagePermisssions\">Public Domain</div>\n<div class=\"imageSubmitted\">Prasun&nbsp;Dewan\n<div class=\"imageTitle\">Test-based Pedagogical Model</div>\n</div>\n</li></ul>\n</div>\n</div></div>\n</div>\n",
  "por_txt_cntn": "\n\nModern computers allow a computer program to be decomposed into multiple activities or threads that can execute concurrently. Emerging big-data scientific, health, social, and engineering applications require such concurrency to give results in a timely manner. The key to matching the computation needs of these applications to the available computing resources is the training of a workforce to develop, maintain, and configure concurrent programs.\n\n\nSuch training faces four related challenges we have addressed in this proposal. First, concurrent programming is not a part of the standard undergraduate curriculum. Introducing concurrent execution in a standard undergraduate course requires sacrificing some existing important concepts in the course. Second, there is a lack of trained faculty members in this area, because many of them never took a course in this area. Third, there has been a lack of tools to support the automatic assessment of these programs. Finally, concurrent programs are notoriously difficult to write, and without automatic assessment, substantial instructor effort is required to evaluate the performance and correctness of these programs, and identify potential problems.\n\n\nAt the heart of our solution is a new pedagogical model, depicted in the accompanying figure, based on the idea of automated assignment assessment. The instructor gives the trainee a set of requirements for a carefully chosen concurrent-programming problem. Associated with the assignment are problem-specific checks, which consist of both tests and hints on how to solve the issues identified by the tests. The messages produced by them provide a new form of feedback for the trainee, which is meant to augment the feedback provided by peers and instructors. The logs of execution of these checks are processed by an awareness engine to make the instructors aware of the work of the trainees on their solutions. This information is used to refine the teaching of the concepts and the assignment itself.\n\n\nThe following are some accomplishments based on this model:\n\n\nVisualized Concurrency: We have created and successfully tested problems that visualize concurrency by simulating real-world concurrency. Such visualization makes it easy for trainees to discover and solve problems with their solutions.\n\n\nMulti-language and Multi-Modal Concurrent Event Interception: Traditional techniques for automatic program assessment do not work as they process only the final output of a program. They do not determine if the output is computed sequentially or concurrently. We have augmented these with techniques for intercepting concurrency-level events in the algorithm used to compute the output. These are multi-language in that they have been developed for both Java and C. They are multi-modal in that they intercept procedure calls and graphical and textual output.\n\n\nConcurrent-Event Database: Processing these events directly to check application constraints requires complex programming in the tests. We have reduced this overhead by creating an infrastructure for writing these tests that intercepts the events and provides the tests with a high-level API to process them.\n\n\nFork-Join Layer: An important class of concurrency problems involves a parent thread forking a set of child threads to perform part of the given task, waiting for the children to finish, and then completing the task. We have built a layer above the concurrent event database to make it easy to write tests for this class of problems.\n\n\nOnline Exercises: We have used the tests and our model to create exercises that provide lecture-less introductions to concurrency that can be taught in as little as an hour, making such an introduction easier to add to a packed existing course. These exercises involved four different iterations and awareness from each iteration was used to refine the final exercise. In the final exercise, trainees are asked to read, run, fix, and test an existing fork-join concurrent program, and take a quiz that evaluates their understanding. An online tutorial, explanatory comments in the program, and tests and hints are used as substitutes for instructor lectures.\n\n\nConcurrency Tests: We have used our infrastructure to write more than 200 tests and hints for our lecture-less online exercises and concurrency assignments in semester-wide courses on object-oriented programming, programming languages, distributed computing, and parallel computing.\n\n\nStudent and Faculty Training: More than 200 students and faculty members have been trained using the tests above. The faculty were trained in workshops held at TTU and a conference in India (HiPC 23), in which participants selected from the US and India, respectively, were trained. The students were trained in courses offered at UNC and Manipal Institute of Technology, India.\n\n\nOur work on the general model, visualized concurrency, event interception and database, fork-join layer, and online exercises has persistence beyond the lifetime of this project, and can be expected to form the bases for future concurrency training. Our experience with writing tests and student and faculty training should inform future work in this area.\n\n\n\t\t\t\t\tLast Modified: 09/02/2024\n\n\t\t\t\t\tSubmitted by: PrasunDewan\n"
 }
}