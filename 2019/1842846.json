{
 "awd_id": "1842846",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SBIR Phase I:  X-Containers: Fast, Secure Containers for a Cloud-Native World",
 "cfda_num": "47.084",
 "org_code": "15030000",
 "po_phone": "7032928772",
 "po_email": "patherto@nsf.gov",
 "po_sign_block_name": "Peter Atherton",
 "awd_eff_date": "2019-02-01",
 "awd_exp_date": "2019-12-31",
 "tot_intn_awd_amt": 224967.0,
 "awd_amount": 249967.0,
 "awd_min_amd_letter_date": "2019-01-30",
 "awd_max_amd_letter_date": "2020-01-07",
 "awd_abstract_narration": "The broader impact/commercial potential of this Small Business Innovation Research (SBIR) Phase I project will be to improve security of cloud computing without sacrificing performance and cost efficiency. Cloud computing has proven to be a disruptive technology in the Information Technology (IT) sector, and the application container market is a rapidly growing segment of this sector. Although containers provide a simpler and more efficient apparatus to host applications in the cloud, there are important problems to address, such as weak security isolation, low kernel compatibility, and poor kernel customization. Security is the most common concern because one infected kernel can affect a multitude of containers. So far, each organization that has adopted container applications has been required to independently ensure their own security. One study found that a majority (54% of participants) ran containers on top of virtual machines (VMs) for security isolation, which sacrifices performance and cost efficiency. Thus, there is a significant need to provide a container architecture that supports greater security without sacrificing performance and cost efficiency. This project addresses this urgent need, and the resulting technology can be applied broadly to domains such as cloud computing, Information Technology (IT) infrastructures, Network Function Virtualization (NFV), etc.\r\n\r\nThis Small Business Innovation Research (SBIR) Phase I project will further improve usability, security, and efficiency of a novel software application container architecture, so that it can be easily deployed and evaluated by customers. While the current platform can run Docker containers without modifications, it is incompatible with the Docker and Kubernetes orchestration platforms, which is a probable obstacle to adoption for many container users and developers. The novel containers can run unmodified iterations of existing applications and automatically optimize performance of many applications by patching the binary during runtime. However, it is challenging to handle complicated scenarios in the application binary, and a more sophisticated technique is required to further improve the coverage of the automatic binary optimization module. Due to the licensing requirements of some of the software the novel container platform is based on, the research prototype is run open-source. The goal of this project is to address these limitations and challenges through five major objectives: support Docker and Kubernetes ecosystem compatibility; improve automatic binary optimization coverage; re-design the platform to avoid open-source license violations; further improve security; develop an automatic installation tool and a product demonstration.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "TIP",
 "org_dir_long_name": "Directorate for Technology, Innovation, and Partnerships",
 "div_abbr": "TI",
 "org_div_long_name": "Translational Impacts",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Zhiming",
   "pi_last_name": "Shen",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Zhiming Shen",
   "pi_email_addr": "zhiming.shim@gmail.com",
   "nsf_id": "000782769",
   "pi_start_date": "2019-01-30",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "EXOTANIUM, INC.",
  "inst_street_address": "350 DUFFIELD HALL STE N",
  "inst_street_address_2": "",
  "inst_city_name": "ITHACA",
  "inst_state_code": "NY",
  "inst_state_name": "New York",
  "inst_phone_num": "6072293395",
  "inst_zip_code": "148532700",
  "inst_country_name": "United States",
  "cong_dist_code": "19",
  "st_cong_dist_code": "NY19",
  "org_lgl_bus_name": "EXOSTELLAR, INC.",
  "org_prnt_uei_num": "SU9JJNRLLAL4",
  "org_uei_num": "SU9JJNRLLAL4"
 },
 "perf_inst": {
  "perf_inst_name": "EXOTANIUM, INC.",
  "perf_str_addr": "154 Lexington Dr.",
  "perf_city_name": "Ithaca",
  "perf_st_code": "NY",
  "perf_st_name": "New York",
  "perf_zip_code": "148501719",
  "perf_ctry_code": "US",
  "perf_cong_dist": "19",
  "perf_st_cong_dist": "NY19",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "537100",
   "pgm_ele_name": "SBIR Phase I"
  },
  {
   "pgm_ele_code": "809100",
   "pgm_ele_name": "SBIR Outreach & Tech. Assist"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "5371",
   "pgm_ref_txt": "SMALL BUSINESS PHASE I"
  },
  {
   "pgm_ref_code": "8032",
   "pgm_ref_txt": "Software Services and Applications"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 249967.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Exotanium is developing X-Containers, a container platform that runs each container with a dedicated library operating system (LibOS) kernel, achieving greater security and performance for cloud-based applications. Application containers provide a more efficient way of hosting applications in the cloud comparing to traditional virtual machines (VMs), because containers utilize the same OS kernel for reducing overheads and costs. This reduces issues with running different software efficiently on the same infrastructure by isolating the software from its surroundings. Although there are many benefits, there are also drawbacks to this approach, as one infected kernel can affect several containers. Many container platforms have weak isolation, low kernel compatibility, and poor kernel customization support. In contrast, X-Containers provide isolation between containers as strong as VM isolation. Each container has its own LibOS kernel, and the attack surface to other containers is minimized. In many cases, X-Containers outperform traditional containers running in the cloud and enable kernel customization that can fully unlock the potential of an OS kernel. X-Containers are fast to boot and require minimal resource footprints. Multiple X-Containers effectively share the same VM running in the cloud without sacrificing security isolation. X-Containers do not require special hardware support and can be deployed on different platforms including both physical machines in private data centers and VMs in public clouds. Thus, X-Container is the first to support secure isolation of containers in the cloud, without sacrificing cost-efficiency or performance.</p>\n<p>During Phase I, we addressed the following challenges to advance the initial research prototype developed at Cornell University (XCv1) into the commercial version (XCv2):</p>\n<p><strong>Compatibility: </strong>XCv1 was not compatible with industry standards such as Docker and Kubernetes. This was a dealbreaker for industry adoption and the most critical aspect of Phase I to address. XCv2 is compatible with both Open Container Interface (OCI) used by Docker and Container Runtime Interface (CRI) used by Kubernetes, as well as <em>container-d</em> used by Amazon.</p>\n<p><strong>Performance:</strong> Critical to the X-Container platform is the ability to recognize patterns in the machine code of applications. The machine code pattern recognition for XCv1 was limited, constraining the number of applications that experience performance improvements. XCv2 has significant coverage of nearly all patterns seen in the most popular applications.</p>\n<p><strong>Open-source license limitations:</strong> XCv1 was based on GPL-licensed open-source projects. A key risk of GPL licenses is that all derived implementations must be open sourced with a GPL license as well. Working with an IP lawyer, we have created a product line for X-Containers with community (open source with GPL license), professional, enterprise, and cloud-hosted versions. The latter three include proprietary tools necessary to unlock additional performance and security features. Furthermore, we can offer a cloud hosting option that avoids licensing issues entirely.</p>\n<p><strong>Security:</strong> In XCv1, we used a modified VM hypervisor called Xen to serve as the secure multiplexing layer that we call the X-Kernel. Although VM hypervisors are generally considered more secure than the Linux kernel, there are some unnecessary functionality and features that introduced bugs and vulnerabilities. XCv2 is reimplemented using a new version of Xen and removes unnecessary features and functionality. The code size has been reduced by a third, drastically increasing security isolation.</p>\n<p><strong>Demonstrations, Deployment, and Evaluation:</strong> Demonstrating XCv1 was difficult, requiring manual installation and deployment of the X-Containers platform. XCv2 includes automated support for installation and deployment, allowing users to easily download and test a community version of X-Containers. We already have an active user community providing feedback on a regular basis.</p>\n<p>Phase I has enabled us to transform the X-Containers platform to a viable commercial product that is highly efficient and fully compatible with industry standards. We improved our Automatic Binary Optimization Module (ABOM), enabling the successful translation of more than 92% of system calls into function calls for a wide range of popular container applications. Thus, the majority of applications experience a significant performance increase while at the same time securely being isolated from other applications. These applications include the top 10 most popular containerized applications, written in a variety of programming languages such as C/C++, Go, Ruby, Java, and Erlang. XCv2 dramatically improves performance, with a 27X increase in system call throughput compared to Docker, as well as 134&ndash;208% and 21&ndash;50% increases in end-to-end throughput compared to Memcached (a popular in-memory database) and NGINX (a popular web server), respectively. Furthermore, XCv2 outperforms other popular library operating systems such as Unikernel and Graphene.</p>\n<p>By accomplishing the proposed Phase I technical milestones with greater than 90% success, we have demonstrated the technical viability of the X-container core technology, showing that X-Containers can effectively secure the container environment and combine this with excellent performance. Based on the feedback from our early customers and users, we see an opportunity to make X-Containers the de facto solution for secure cloud-native platforms.</p>\n<p><strong>&nbsp;</strong></p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 02/13/2020<br>\n\t\t\t\t\tModified by: Zhiming&nbsp;Shen</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nExotanium is developing X-Containers, a container platform that runs each container with a dedicated library operating system (LibOS) kernel, achieving greater security and performance for cloud-based applications. Application containers provide a more efficient way of hosting applications in the cloud comparing to traditional virtual machines (VMs), because containers utilize the same OS kernel for reducing overheads and costs. This reduces issues with running different software efficiently on the same infrastructure by isolating the software from its surroundings. Although there are many benefits, there are also drawbacks to this approach, as one infected kernel can affect several containers. Many container platforms have weak isolation, low kernel compatibility, and poor kernel customization support. In contrast, X-Containers provide isolation between containers as strong as VM isolation. Each container has its own LibOS kernel, and the attack surface to other containers is minimized. In many cases, X-Containers outperform traditional containers running in the cloud and enable kernel customization that can fully unlock the potential of an OS kernel. X-Containers are fast to boot and require minimal resource footprints. Multiple X-Containers effectively share the same VM running in the cloud without sacrificing security isolation. X-Containers do not require special hardware support and can be deployed on different platforms including both physical machines in private data centers and VMs in public clouds. Thus, X-Container is the first to support secure isolation of containers in the cloud, without sacrificing cost-efficiency or performance.\n\nDuring Phase I, we addressed the following challenges to advance the initial research prototype developed at Cornell University (XCv1) into the commercial version (XCv2):\n\nCompatibility: XCv1 was not compatible with industry standards such as Docker and Kubernetes. This was a dealbreaker for industry adoption and the most critical aspect of Phase I to address. XCv2 is compatible with both Open Container Interface (OCI) used by Docker and Container Runtime Interface (CRI) used by Kubernetes, as well as container-d used by Amazon.\n\nPerformance: Critical to the X-Container platform is the ability to recognize patterns in the machine code of applications. The machine code pattern recognition for XCv1 was limited, constraining the number of applications that experience performance improvements. XCv2 has significant coverage of nearly all patterns seen in the most popular applications.\n\nOpen-source license limitations: XCv1 was based on GPL-licensed open-source projects. A key risk of GPL licenses is that all derived implementations must be open sourced with a GPL license as well. Working with an IP lawyer, we have created a product line for X-Containers with community (open source with GPL license), professional, enterprise, and cloud-hosted versions. The latter three include proprietary tools necessary to unlock additional performance and security features. Furthermore, we can offer a cloud hosting option that avoids licensing issues entirely.\n\nSecurity: In XCv1, we used a modified VM hypervisor called Xen to serve as the secure multiplexing layer that we call the X-Kernel. Although VM hypervisors are generally considered more secure than the Linux kernel, there are some unnecessary functionality and features that introduced bugs and vulnerabilities. XCv2 is reimplemented using a new version of Xen and removes unnecessary features and functionality. The code size has been reduced by a third, drastically increasing security isolation.\n\nDemonstrations, Deployment, and Evaluation: Demonstrating XCv1 was difficult, requiring manual installation and deployment of the X-Containers platform. XCv2 includes automated support for installation and deployment, allowing users to easily download and test a community version of X-Containers. We already have an active user community providing feedback on a regular basis.\n\nPhase I has enabled us to transform the X-Containers platform to a viable commercial product that is highly efficient and fully compatible with industry standards. We improved our Automatic Binary Optimization Module (ABOM), enabling the successful translation of more than 92% of system calls into function calls for a wide range of popular container applications. Thus, the majority of applications experience a significant performance increase while at the same time securely being isolated from other applications. These applications include the top 10 most popular containerized applications, written in a variety of programming languages such as C/C++, Go, Ruby, Java, and Erlang. XCv2 dramatically improves performance, with a 27X increase in system call throughput compared to Docker, as well as 134&ndash;208% and 21&ndash;50% increases in end-to-end throughput compared to Memcached (a popular in-memory database) and NGINX (a popular web server), respectively. Furthermore, XCv2 outperforms other popular library operating systems such as Unikernel and Graphene.\n\nBy accomplishing the proposed Phase I technical milestones with greater than 90% success, we have demonstrated the technical viability of the X-container core technology, showing that X-Containers can effectively secure the container environment and combine this with excellent performance. Based on the feedback from our early customers and users, we see an opportunity to make X-Containers the de facto solution for secure cloud-native platforms.\n\n \n\n \n\n\t\t\t\t\tLast Modified: 02/13/2020\n\n\t\t\t\t\tSubmitted by: Zhiming Shen"
 }
}