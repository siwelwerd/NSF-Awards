{
 "awd_id": "1916393",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SaTC: CORE: Medium: Collaborative: Taming Memory Corruption with Security Monitors",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032920000",
 "po_email": "qyu@nsf.gov",
 "po_sign_block_name": "Qiaoyan Yu",
 "awd_eff_date": "2019-10-01",
 "awd_exp_date": "2024-09-30",
 "tot_intn_awd_amt": 800000.0,
 "awd_amount": 800000.0,
 "awd_min_amd_letter_date": "2019-07-02",
 "awd_max_amd_letter_date": "2019-07-02",
 "awd_abstract_narration": "Modern computing systems are under constant attack by organized crime syndicates, nation-state adversaries, and regular cyber-criminals alike. Among the most damaging attacks are those that exploit so-called memory corruption vulnerabilities which often confer the attacker with access to sensitive information or allow the attacker to execute arbitrary code on the victim's machine. To counter the threat posed by memory corruption vulnerabilities, this project will research and develop new defensive capabilities realized through the joint design of hardware and software. Hardware and software co-design holds the promise to enable the introduction of rigorous, principled, and efficient protection against low-level exploitation.\r\n\r\nTo defend computing systems against memory corruption attacks, this project will augment a RISC-V processor with an array of security policy engines (ASPEn). ASPEn will feature both specialized and programmable policy engines. Specialized engines will be optimized for performance, power, and area, and enforce static security policies that are known at design time. To accommodate for the constantly-changing nature of the security landscape, programmable engines will be programmed to enforce more flexible security policies. The project is structured into two thrusts; Thrust-1 will design the ASPEn Security Monitor System for the RISC-V processor and Thrust-2 will focus on software design and the various policy types.\r\n\r\nThis project will result in a generic security-focused hardware/software co-design approach that can be leveraged to secure other processors than the RISC-V core used for this project. This broader impact will further be supported by the open-source release of the resulting hardware designs, as well as the new and modified software stack consisting of tool chains, libraries, and policy types. Furthermore, the project will include a variety of training and outreach activities through tutorials, workshops, and curricular development. The project will also continue existing successful efforts of involving undergraduate, high-school, and underrepresented minority and women students throughout its duration.\r\n\r\nThe project's resources and results will be made available publicly. The main project page can be found at https://seclab.bu.edu/projects/aspen.html, and source code releases will be made available via the project's code repository at https://github.com/BUseclab/ASPEn.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Manuel",
   "pi_last_name": "Egele",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Manuel Egele",
   "pi_email_addr": "megele@bu.edu",
   "nsf_id": "000679598",
   "pi_start_date": "2019-07-02",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Ajay",
   "pi_last_name": "Joshi",
   "pi_mid_init": "J",
   "pi_sufx_name": "",
   "pi_full_name": "Ajay J Joshi",
   "pi_email_addr": "joshi@bu.edu",
   "nsf_id": "000554674",
   "pi_start_date": "2019-07-02",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Trustees of Boston University",
  "inst_street_address": "1 SILBER WAY",
  "inst_street_address_2": "",
  "inst_city_name": "BOSTON",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "6173534365",
  "inst_zip_code": "022151703",
  "inst_country_name": "United States",
  "cong_dist_code": "07",
  "st_cong_dist_code": "MA07",
  "org_lgl_bus_name": "TRUSTEES OF BOSTON UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "THL6A6JLE1S7"
 },
 "perf_inst": {
  "perf_inst_name": "Trustees of Boston University",
  "perf_str_addr": "",
  "perf_city_name": "Boston",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "022151300",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "MA07",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 800000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p id=\"docs-internal-guid-24f44b13-7fff-700d-d134-3ea1a4078510\" style=\"line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial,sans-serif; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">The root cause for a significant fraction of cyberattacks are bugs and vulnerabilities based on memory corruption. Minimizing the impact such attacks can have, or outright preventing them from happening, would significantly improve the security posture of modern day computer systems. This project set out to explore the use of an array of security policy engines (ASPEn) to detect, prevent, and reduce the impact of memory corruption vulnerabilities.</span></p>\r\n<p>&nbsp;</p>\r\n<p style=\"line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial,sans-serif; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">The main outcomes of this project consist of the research findings and associated prototype implementations that demonstrate how both, programmable and fixed security policy engines can be leveraged to address certain types of memory corruption vulnerabilities.</span></p>\r\n<p>&nbsp;</p>\r\n<p style=\"line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial,sans-serif; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Along the axis of flexible policy engines, PHMon demonstrated how programmable hardware monitors can be used to improve software security (e.g., via architecturally backed shadow stacks) or how the same monitor can be leveraged to improve the performance of gray-box fuzzing (i.e., one of today&rsquo;s most used mechanisms to identify bugs and vulnerabilities) by orders of magnitude. Moreover, FlexFilt showed how a comparatively simple programmable policy engine can be used to ensure that processors will not execute security sensitive instructions from memory areas that are not designated as valid sources for such instructions. These mechanisms combined allow researchers and practitioners to detect bugs and vulnerabilities, and prevent powerful attacks from succeeding.</span></p>\r\n<p>&nbsp;</p>\r\n<p style=\"line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial,sans-serif; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Our investigations of fixed policy engines yielded new insights from novel uses of Intel&rsquo;s Memory Protection Key (MPK) mechanisms. For example, MPKAlloc demonstrated how to leverage MPK to secure memory allocators &ndash; a crucial component required by virtually any modern program. Another outcome of this project is an IEEE Security &amp; Privacy Viewpoint article that shines a light on how modern architecturally supported security primitives can benefit the security of heap managers.</span></p>\r\n<p>&nbsp;</p>\r\n<p style=\"line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial,sans-serif; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Finally, the project&rsquo;s outcomes include novel capabilities that detect bugs and vulnerabilities in processor designs and prevent the exploitation of memory corruption vulnerabilities between the host system and peripheral devices.</span></p>\r\n<p>&nbsp;</p>\r\n<p style=\"line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial,sans-serif; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Importantly, the scientific outcomes achieved during this project are backed by prototype implementations that are available as open source projects. Many of which have already been used by other researchers to build on top of.</span></p>\r\n<p>&nbsp;</p><br>\n<p>\n Last Modified: 02/28/2025<br>\nModified by: Manuel&nbsp;Egele</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nThe root cause for a significant fraction of cyberattacks are bugs and vulnerabilities based on memory corruption. Minimizing the impact such attacks can have, or outright preventing them from happening, would significantly improve the security posture of modern day computer systems. This project set out to explore the use of an array of security policy engines (ASPEn) to detect, prevent, and reduce the impact of memory corruption vulnerabilities.\r\n\n\n\r\n\n\nThe main outcomes of this project consist of the research findings and associated prototype implementations that demonstrate how both, programmable and fixed security policy engines can be leveraged to address certain types of memory corruption vulnerabilities.\r\n\n\n\r\n\n\nAlong the axis of flexible policy engines, PHMon demonstrated how programmable hardware monitors can be used to improve software security (e.g., via architecturally backed shadow stacks) or how the same monitor can be leveraged to improve the performance of gray-box fuzzing (i.e., one of todays most used mechanisms to identify bugs and vulnerabilities) by orders of magnitude. Moreover, FlexFilt showed how a comparatively simple programmable policy engine can be used to ensure that processors will not execute security sensitive instructions from memory areas that are not designated as valid sources for such instructions. These mechanisms combined allow researchers and practitioners to detect bugs and vulnerabilities, and prevent powerful attacks from succeeding.\r\n\n\n\r\n\n\nOur investigations of fixed policy engines yielded new insights from novel uses of Intels Memory Protection Key (MPK) mechanisms. For example, MPKAlloc demonstrated how to leverage MPK to secure memory allocators  a crucial component required by virtually any modern program. Another outcome of this project is an IEEE Security & Privacy Viewpoint article that shines a light on how modern architecturally supported security primitives can benefit the security of heap managers.\r\n\n\n\r\n\n\nFinally, the projects outcomes include novel capabilities that detect bugs and vulnerabilities in processor designs and prevent the exploitation of memory corruption vulnerabilities between the host system and peripheral devices.\r\n\n\n\r\n\n\nImportantly, the scientific outcomes achieved during this project are backed by prototype implementations that are available as open source projects. Many of which have already been used by other researchers to build on top of.\r\n\n\n\t\t\t\t\tLast Modified: 02/28/2025\n\n\t\t\t\t\tSubmitted by: ManuelEgele\n"
 }
}