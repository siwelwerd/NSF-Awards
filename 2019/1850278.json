{
 "awd_id": "1850278",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CRII: SaTC: A Malware-Inspired Approach to Mobile Application Repackaging and Tampering Detection",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2019-06-15",
 "awd_exp_date": "2022-05-31",
 "tot_intn_awd_amt": 174879.0,
 "awd_amount": 174879.0,
 "awd_min_amd_letter_date": "2019-04-18",
 "awd_max_amd_letter_date": "2019-04-18",
 "awd_abstract_narration": "Mobile application (\"app\") repackaging is a severe threat to the flourishing mobile market and numerous users. 97% of the top paid Android apps and 87% of the iOS ones have been repackaged. Besides, it is one of the most common ways of propagating mobile malware. Existing countermeasures mostly detect repackaging based on app similarity measurement, which tends to be imprecise when obfuscations are applied to repackaged apps. Moreover, they rely on a centralized party, typically the hosting app store, to perform the detection, but many alternative app stores fail to commit proper effort to piracy detection. This research aims at an effective defense against app repackaging, and will result in substantial progress in tackling malware propagated via repackaged apps. It will help mitigate attacks such as ransomware or DDoS launched from repackaged apps. It will also help reduce the massive monetary loss of legitimate app developers. Industrial collaborations ensure rapidly translate scientific discovery and technical knowledge into beneficial commercial products. Educational resources from this project, including course modules on mobile security and malware detection, will be disseminated through a dedicated web site. This research will foster new research and education opportunities at University of South Carolina. Students from underrepresented groups will participate in the project.\r\n\r\nThis research is to explore a decentralized scheme that adds repackaging detection capability into the app to be protected, such that the host devices are made use of to conduct detection when the app is running. The main challenge is how to protect the repackaging detection code from attacks. The team of research proposes a novel malware-inspired approach to handling the important mobile app repackaging problem. The team will explore a creative use of logic bombs, which are regularly used in malware: the trigger conditions are constructed to exploit the differences between the attacker and users (in terms of hardware, sensor values, and inputs), such that a bomb that lies dormant on the attacker side will be activated on the user side. The repackaging detection code, which is packed as the bomb payload, is executed only if the bomb is activated. (2) Unlike many conventional software tampering detection techniques that try to conceal the detection code, by leveraging various methods used in malware this design is non-stealthy, which means that the detection code is not hidden, yet still resilient to attacks. (3) The proposed system also aims to detect code tampering, which occurs when malicious code is inserted and hence implies extraordinary dangers. (4) The decentralized repackaging/tampering detection is proposed to be used for crowdsourced malware information collection to fight against malware propagation. (5) Finally, the team is to address how to prevent the proposed techniques from being abused by malware authors.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Lannan",
   "pi_last_name": "Luo",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Lannan Luo",
   "pi_email_addr": "lluo4@gmu.edu",
   "nsf_id": "000763998",
   "pi_start_date": "2019-04-18",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of South Carolina at Columbia",
  "inst_street_address": "1600 HAMPTON ST",
  "inst_street_address_2": "",
  "inst_city_name": "COLUMBIA",
  "inst_state_code": "SC",
  "inst_state_name": "South Carolina",
  "inst_phone_num": "8037777093",
  "inst_zip_code": "292083403",
  "inst_country_name": "United States",
  "cong_dist_code": "06",
  "st_cong_dist_code": "SC06",
  "org_lgl_bus_name": "UNIVERSITY OF SOUTH CAROLINA",
  "org_prnt_uei_num": "Q93ZDA59ZAR5",
  "org_uei_num": "J22LNTMEDP73"
 },
 "perf_inst": {
  "perf_inst_name": "University of South Carolina at Columbia",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "SC",
  "perf_st_name": "South Carolina",
  "perf_zip_code": "292080001",
  "perf_ctry_code": "US",
  "perf_cong_dist": "06",
  "perf_st_cong_dist": "SC06",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "026Y00",
   "pgm_ele_name": "CRII CISE Research Initiation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "8228",
   "pgm_ref_txt": "CISE Resrch Initiatn Initiatve"
  },
  {
   "pgm_ref_code": "9102",
   "pgm_ref_txt": "WOMEN, MINORITY, DISABLED, NEC"
  },
  {
   "pgm_ref_code": "9150",
   "pgm_ref_txt": "EXP PROG TO STIM COMP RES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 174879.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>This project is to explore a decentralized scheme that adds repackaging detection capability into the app to be protected, such that the host devices are made use of to conduct detection when the app is running. However, once an enhanced app is published, an attacker can analyze and modify it arbitrarily, trying to remove or tamper with the repackaging detection capability. Therefore, the main challenge is how to protect the repackaging detection capability from attacks. We designed a malware-inspired approach to overcome the challenge. Our adversary model takes into account various attack measures, such as API hooking, fuzzing, symbolic execution, multi-path exploration, and program slicing. To make the research concrete, the proposed ideas and techniques have been showcased on Android.</p>\n<p>In this project, the PI studied the Android app repackaging attacks and designed approaches to present such attacks. Specifically, we have achieved the following major outcomes.</p>\n<p>(1) A novel malware-inspired approach to handling the important Android app repackaging problem has been designed. We explored a creative use of logic bombs, which are regularly used in malware: the trigger conditions are constructed to exploit the differences between the attacker and users (in terms of hardware, sensor values, and inputs), such that a bomb that lies dormant on the attacker side will be activated on the user side. The repackaging detection code, which is packed as the bomb payload, is executed only if the bomb is activated. Repackaging detection is based on public key comparison: if the public key of the app is different from the one hard coded in the logic bomb payload, repackaging is detected.</p>\n<p>To protect the logic bombs, we have implemented the following enhancements. First, each logic bomb is encrypted and, more importantly, the key used to decrypt the code is not embedded in the app. Instead, the key can only be derived when the trigger condition is satisfied during program execution. Because the code is encrypted, attacks that try to search for specific API calls or bypass trigger conditions will fail. Second, the bomb code is woven into the original app code before being encrypted, such that attacks that simply delete suspicious code will corrupt the app execution.&nbsp;</p>\n<p>(2) We have designed the code-tampering detection capability into apps to warn users of illegal code modifications of their apps. Unlike many conventional software tampering detection techniques that try to conceal the detection code, our design is nonstealthy, which means that the detection code is not hidden, yet still resilient to attacks. Code tampering detection is based on file digest comparison. We noticed that file digests are stored as part of an app. If a file is modified during repackaging, its digest must change. Thus our approach retrieves the code file digests at runtime and compare them against the ones hard coded in the logic bomb payload. If they are not equal, code tampering is detected.</p>\n<p>(3) We have evaluated the resilience of the built-in detection capability by measuring the percentage of inserted bombs that survived adversary analysis, including API hooking, fuzzing, symbolic execution, multi-path exploration, and program slicing. We also invited volunteer security analysts who have expertise in reverse engineering Android apps to analyze apps enhanced by our system, and measured the percentage of bombs that can be defused by them. Moreover, we evaluated the side effects of the detection capability in terms of the program size increase and speed slowdown. Finally, we conducted user studies to evaluate the usability of our system. Specifically, we invited mobile app developers to use mobile apps protected by our system, and then interviewed them about their experience when using these apps.</p>\n<p>The project outcomes have been disseminated through presentations in workshops and conferences, and publications in journals and dissertations. We have published research papers on many top tier venues including CCS, NDSS, MobiCom, MobiSys, UbiComp, ACSAC, RAID, SANER, TMC, and TDSC. Two PhD students (including one female) have received support.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 08/04/2022<br>\n\t\t\t\t\tModified by: Lannan&nbsp;Luo</p>\n</div>\n<div class=\"porSideCol\">\n<div class=\"each-gallery\">\n<div class=\"galContent\" id=\"gallery0\">\n<div class=\"photoCount\" id=\"photoCount0\">\n\t\t\t\t\t\t\t\t\tImages (<span id=\"selectedPhoto0\">1</span> of <span class=\"totalNumber\"></span>)\t\t\n\t\t\t\t\t\t\t\t</div>\n<div class=\"galControls\" id=\"controls0\"></div>\n<div class=\"galSlideshow\" id=\"slideshow0\"></div>\n<div class=\"galEmbox\" id=\"embox\">\n<div class=\"image-title\"></div>\n</div>\n</div>\n<div class=\"galNavigation\" id=\"navigation0\">\n<ul class=\"thumbs\" id=\"thumbs0\">\n<li>\n<a href=\"/por/images/Reports/POR/2022/1850278/1850278_10601378_1659636900218_system-architecture--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2022/1850278/1850278_10601378_1659636900218_system-architecture--rgov-800width.jpg\" title=\"System Architecture\"><img src=\"/por/images/Reports/POR/2022/1850278/1850278_10601378_1659636900218_system-architecture--rgov-66x44.jpg\" alt=\"System Architecture\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">System architecture</div>\n<div class=\"imageCredit\">Lannan Luo</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Lannan&nbsp;Luo</div>\n<div class=\"imageTitle\">System Architecture</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2022/1850278/1850278_10601378_1659636961556_logic-bomb--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2022/1850278/1850278_10601378_1659636961556_logic-bomb--rgov-800width.jpg\" title=\"The design of logic bomb\"><img src=\"/por/images/Reports/POR/2022/1850278/1850278_10601378_1659636961556_logic-bomb--rgov-66x44.jpg\" alt=\"The design of logic bomb\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">The design of logic bomb</div>\n<div class=\"imageCredit\">Lannan Luo</div>\n<div class=\"imagePermisssions\">Copyrighted</div>\n<div class=\"imageSubmitted\">Lannan&nbsp;Luo</div>\n<div class=\"imageTitle\">The design of logic bomb</div>\n</div>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>",
  "por_txt_cntn": "\nThis project is to explore a decentralized scheme that adds repackaging detection capability into the app to be protected, such that the host devices are made use of to conduct detection when the app is running. However, once an enhanced app is published, an attacker can analyze and modify it arbitrarily, trying to remove or tamper with the repackaging detection capability. Therefore, the main challenge is how to protect the repackaging detection capability from attacks. We designed a malware-inspired approach to overcome the challenge. Our adversary model takes into account various attack measures, such as API hooking, fuzzing, symbolic execution, multi-path exploration, and program slicing. To make the research concrete, the proposed ideas and techniques have been showcased on Android.\n\nIn this project, the PI studied the Android app repackaging attacks and designed approaches to present such attacks. Specifically, we have achieved the following major outcomes.\n\n(1) A novel malware-inspired approach to handling the important Android app repackaging problem has been designed. We explored a creative use of logic bombs, which are regularly used in malware: the trigger conditions are constructed to exploit the differences between the attacker and users (in terms of hardware, sensor values, and inputs), such that a bomb that lies dormant on the attacker side will be activated on the user side. The repackaging detection code, which is packed as the bomb payload, is executed only if the bomb is activated. Repackaging detection is based on public key comparison: if the public key of the app is different from the one hard coded in the logic bomb payload, repackaging is detected.\n\nTo protect the logic bombs, we have implemented the following enhancements. First, each logic bomb is encrypted and, more importantly, the key used to decrypt the code is not embedded in the app. Instead, the key can only be derived when the trigger condition is satisfied during program execution. Because the code is encrypted, attacks that try to search for specific API calls or bypass trigger conditions will fail. Second, the bomb code is woven into the original app code before being encrypted, such that attacks that simply delete suspicious code will corrupt the app execution. \n\n(2) We have designed the code-tampering detection capability into apps to warn users of illegal code modifications of their apps. Unlike many conventional software tampering detection techniques that try to conceal the detection code, our design is nonstealthy, which means that the detection code is not hidden, yet still resilient to attacks. Code tampering detection is based on file digest comparison. We noticed that file digests are stored as part of an app. If a file is modified during repackaging, its digest must change. Thus our approach retrieves the code file digests at runtime and compare them against the ones hard coded in the logic bomb payload. If they are not equal, code tampering is detected.\n\n(3) We have evaluated the resilience of the built-in detection capability by measuring the percentage of inserted bombs that survived adversary analysis, including API hooking, fuzzing, symbolic execution, multi-path exploration, and program slicing. We also invited volunteer security analysts who have expertise in reverse engineering Android apps to analyze apps enhanced by our system, and measured the percentage of bombs that can be defused by them. Moreover, we evaluated the side effects of the detection capability in terms of the program size increase and speed slowdown. Finally, we conducted user studies to evaluate the usability of our system. Specifically, we invited mobile app developers to use mobile apps protected by our system, and then interviewed them about their experience when using these apps.\n\nThe project outcomes have been disseminated through presentations in workshops and conferences, and publications in journals and dissertations. We have published research papers on many top tier venues including CCS, NDSS, MobiCom, MobiSys, UbiComp, ACSAC, RAID, SANER, TMC, and TDSC. Two PhD students (including one female) have received support.\n\n\t\t\t\t\tLast Modified: 08/04/2022\n\n\t\t\t\t\tSubmitted by: Lannan Luo"
 }
}