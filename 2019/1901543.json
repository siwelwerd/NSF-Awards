{
 "awd_id": "1901543",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "EAGER: Bio-inspired Assurance and Regression Testing to Secure Organic Programs",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2018-08-11",
 "awd_exp_date": "2021-08-31",
 "tot_intn_awd_amt": 161899.0,
 "awd_amount": 177899.0,
 "awd_min_amd_letter_date": "2018-12-11",
 "awd_max_amd_letter_date": "2018-12-11",
 "awd_abstract_narration": "Software Engineering needs to address an increasingly significant class of programs that are self-adaptive and self-healing. These programs sense changes to their environment and react by modifying configurations, libraries or program code. Furthermore, automated approaches for program repair and program transplantation change a program?s source code directly to fix, optimize or add new functionality. Together, self-modification provides continual availability in the presence of change and can harden a system against intruders. While this organic nature of self-modification is a powerful paradigm, the overall dependability and security of such programs is at risk. Prior test results or assurance cases developed to reason about their functionality, safety and security are invalid as soon as any adaptation occurs. Yet the time needed to run a full regression testing cycle, or to develop new evidence and arguments for an assurance case can take hours, days or weeks.\r\n\r\nThis proposal explores the feasibility of reasoning dynamically and efficiently about the changes made to organic programs and their associated test suites and assurance cases during adaptation. Given that these programs mimic living systems, and many adaptations are already implemented with evolutionary algorithms, the proposed work draws inspiration from nature and uses bio-inspired techniques to achieve its goals. Both traditional functional faults as well as security vulnerabilities are targeted in this proposal, given the criticality of vulnerabilities in an online, unmonitored system. More specifically the proposal will first explore techniques to identify the evolution timeline for assurance, finding intervals at which re-validation must occur. Second, it will model interactions and test coverage in organic programs. Finally, it will use biologically inspired algorithms to select, order and generate tests for regression testing.\r\n\r\nThe results of the research performed in this proposal will form the foundations for being able to validate the correctness and safety of organic programs over time.  The broader impacts include co-mentoring undergraduate, inter-disciplinary teams to compete in the International Genetically Engineered Machine (iGEM) competition, and to build assurance cases for reasoning about the safety of their projects.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Myra",
   "pi_last_name": "Cohen",
   "pi_mid_init": "B",
   "pi_sufx_name": "",
   "pi_full_name": "Myra B Cohen",
   "pi_email_addr": "mcohen@iastate.edu",
   "nsf_id": "000124813",
   "pi_start_date": "2018-12-11",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Iowa State University",
  "inst_street_address": "1350 BEARDSHEAR HALL",
  "inst_street_address_2": "515 MORRILL ROAD",
  "inst_city_name": "AMES",
  "inst_state_code": "IA",
  "inst_state_name": "Iowa",
  "inst_phone_num": "5152945225",
  "inst_zip_code": "500112103",
  "inst_country_name": "United States",
  "cong_dist_code": "04",
  "st_cong_dist_code": "IA04",
  "org_lgl_bus_name": "IOWA STATE UNIVERSITY OF SCIENCE AND TECHNOLOGY",
  "org_prnt_uei_num": "DQDBM7FGJPC5",
  "org_uei_num": "DQDBM7FGJPC5"
 },
 "perf_inst": {
  "perf_inst_name": "Iowa State University",
  "perf_str_addr": "1138 Pearson",
  "perf_city_name": "Ames",
  "perf_st_code": "IA",
  "perf_st_name": "Iowa",
  "perf_zip_code": "500112207",
  "perf_ctry_code": "US",
  "perf_cong_dist": null,
  "perf_st_cong_dist": "IA",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7916",
   "pgm_ref_txt": "EAGER"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  },
  {
   "pgm_ref_code": "9102",
   "pgm_ref_txt": "WOMEN, MINORITY, DISABLED, NEC"
  },
  {
   "pgm_ref_code": "9150",
   "pgm_ref_txt": "EXP PROG TO STIM COMP RES"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0117",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001718DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0118",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001819DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2017,
   "fund_oblg_amt": 161899.0
  },
  {
   "fund_oblg_fiscal_yr": 2018,
   "fund_oblg_amt": 16000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span>The goals of this project are to build the foundations for assuring and testing organic programs (a class of programs that are built and/or modified using automated techniques such as program repair, program transplantation, and/or through self-adaptation). The research in this project leverages <span>bio</span>-inspired algorithms such as genetic algorithms to achieve several of its goals. The project targets both traditional functional faults as well as those related to system security. </span></p>\n<p><strong>Intellectual Merit:&nbsp;</strong></p>\n<p><span style=\"text-decoration: underline;\">Helping End-users Reason about Dependability of Organic Programs</span></p>\n<p>This thread of research created outcomes that can help the end-user of organic programs. We:</p>\n<p><span>(1)&nbsp; Examined the impact of <span>configurability</span> on common computational biology programs which are used extensively to make scientific discoveries. We found that changing the user configurations creates variability in the results obtained from these tools, hence it can impact the reported results. We also found missing or incorrect documentation leading to a difficult landscape for the end-user of these tools. We proposed a set of guidelines and lessons learned both for the builders of these tools and for the end-users.</span></p>\n<p>(2)&nbsp; Proposed <em>assurance recipes</em>, a template-like approach to help end-users&nbsp; design assurance cases for their programs.&nbsp; Assurance cases are commonly used in safety-critical systems, however building an assurance case requires expertise to develop the argument structure. &nbsp;Assurance Recipes provide a template-like abstraction with variation points defining the need for domain expertise.</p>\n<p><span>(3)&nbsp; Applied software product line engineering to model families of DNA parts used in synthetic biology. &nbsp;We demonstrated how a large open-source repository of <span>resusable</span> parts has characteristics which lend itself to feature-modeling, a representation of the common and variable blocks of code, which can be used to build, test and maintain software product lines. We call these <em>organic software product lines</em>.</span></p>\n<p>(4)&nbsp; Utilized software product line engineering to increase dependability in a family of miniature surgical robots that can be configured into a large number of different instantiations. We demonstrated how we can bring together lightweight formal analysis for dependability, feature modeling for defining the configuration space, and testing to provide an end to end pipeline to find validate violations found of the safety properties.</p>\n<p><span style=\"text-decoration: underline;\"><span>Use of <span>Bio</span>-inspired Algorithms for Security and Analysis</span></span></p>\n<p>The outcomes from this research aim to improve software security. We:</p>\n<p><span>(1)&nbsp; Designed a genetic algorithm for partitioning and optimizing program slices that can be placed into hardware isolation. Hardware isolation is becoming a common technique for securing sensitive information often used in mobile devices with small memory footprints and high security requirements.&nbsp; One goal of hardware isolation is to minimize the code placed in isolation, since larger code bases means more opportunities for faults (and a fault in the secure world can lead to secure data leakage). At the same time, code isolation should not lead to overly excessive communication between the secure and insecure parts of the program.&nbsp; We used the ARM <span>TrustZone</span> chip as our exemplar and demonstrated feasibility for the second goal,&nbsp; reducing communication overhead.<br /></span></p>\n<p><span>(2)&nbsp; Proposed a framework for automatically repairing information leakage faults.&nbsp; Information leakage in programs is a persistent security problem which allows secrets to be revealed either by unsafe <span>dataflow</span> or through program structure that changes public data but is dependent on protected information. While a memory fault such as a buffer overflow can leak information, it often leads to a detectable program fault. However, many information flow faults do not lead to program failures, hence they are difficult to detect and there is no automated way to fix them. &nbsp; In this research, we use genetic improvement, a repair technique for non-functional properties of programs. Our framework detects, localizes and repairs information leakage without the need for a failing test case. <br /></span></p>\n<p><strong>Broader Impacts:</strong></p>\n<p>We have involved both graduate and undergraduate students (some of whom are underrepresented) in all aspects of this grant. Several undergraduate projects led to published papers with the students as co-authors. The research has contributed in part to Ph.D dissertations and students working on this project have had the opportunity to attend conferences and present their research to the broader community.&nbsp;The PI has mentored several undergraduate senior design (5-6 person teams) in year-long projects building software on topics related to this research. She has also given several invited talks on this work. Some of the techniques developed in this proposal have been applied to systems or synthetic biology and are published on websites used by computational biologists.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 12/30/2021<br>\n\t\t\t\t\tModified by: Myra&nbsp;B&nbsp;Cohen</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nThe goals of this project are to build the foundations for assuring and testing organic programs (a class of programs that are built and/or modified using automated techniques such as program repair, program transplantation, and/or through self-adaptation). The research in this project leverages bio-inspired algorithms such as genetic algorithms to achieve several of its goals. The project targets both traditional functional faults as well as those related to system security. \n\nIntellectual Merit: \n\nHelping End-users Reason about Dependability of Organic Programs\n\nThis thread of research created outcomes that can help the end-user of organic programs. We:\n\n(1)  Examined the impact of configurability on common computational biology programs which are used extensively to make scientific discoveries. We found that changing the user configurations creates variability in the results obtained from these tools, hence it can impact the reported results. We also found missing or incorrect documentation leading to a difficult landscape for the end-user of these tools. We proposed a set of guidelines and lessons learned both for the builders of these tools and for the end-users.\n\n(2)  Proposed assurance recipes, a template-like approach to help end-users  design assurance cases for their programs.  Assurance cases are commonly used in safety-critical systems, however building an assurance case requires expertise to develop the argument structure.  Assurance Recipes provide a template-like abstraction with variation points defining the need for domain expertise.\n\n(3)  Applied software product line engineering to model families of DNA parts used in synthetic biology.  We demonstrated how a large open-source repository of resusable parts has characteristics which lend itself to feature-modeling, a representation of the common and variable blocks of code, which can be used to build, test and maintain software product lines. We call these organic software product lines.\n\n(4)  Utilized software product line engineering to increase dependability in a family of miniature surgical robots that can be configured into a large number of different instantiations. We demonstrated how we can bring together lightweight formal analysis for dependability, feature modeling for defining the configuration space, and testing to provide an end to end pipeline to find validate violations found of the safety properties.\n\nUse of Bio-inspired Algorithms for Security and Analysis\n\nThe outcomes from this research aim to improve software security. We:\n\n(1)  Designed a genetic algorithm for partitioning and optimizing program slices that can be placed into hardware isolation. Hardware isolation is becoming a common technique for securing sensitive information often used in mobile devices with small memory footprints and high security requirements.  One goal of hardware isolation is to minimize the code placed in isolation, since larger code bases means more opportunities for faults (and a fault in the secure world can lead to secure data leakage). At the same time, code isolation should not lead to overly excessive communication between the secure and insecure parts of the program.  We used the ARM TrustZone chip as our exemplar and demonstrated feasibility for the second goal,  reducing communication overhead.\n\n\n(2)  Proposed a framework for automatically repairing information leakage faults.  Information leakage in programs is a persistent security problem which allows secrets to be revealed either by unsafe dataflow or through program structure that changes public data but is dependent on protected information. While a memory fault such as a buffer overflow can leak information, it often leads to a detectable program fault. However, many information flow faults do not lead to program failures, hence they are difficult to detect and there is no automated way to fix them.   In this research, we use genetic improvement, a repair technique for non-functional properties of programs. Our framework detects, localizes and repairs information leakage without the need for a failing test case. \n\n\nBroader Impacts:\n\nWe have involved both graduate and undergraduate students (some of whom are underrepresented) in all aspects of this grant. Several undergraduate projects led to published papers with the students as co-authors. The research has contributed in part to Ph.D dissertations and students working on this project have had the opportunity to attend conferences and present their research to the broader community. The PI has mentored several undergraduate senior design (5-6 person teams) in year-long projects building software on topics related to this research. She has also given several invited talks on this work. Some of the techniques developed in this proposal have been applied to systems or synthetic biology and are published on websites used by computational biologists.\n\n\t\t\t\t\tLast Modified: 12/30/2021\n\n\t\t\t\t\tSubmitted by: Myra B Cohen"
 }
}