{
 "awd_id": "1850412",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CRII: SHF: Towards the Construction of a Model for Natural Language and Source Code",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2019-05-01",
 "awd_exp_date": "2022-04-30",
 "tot_intn_awd_amt": 174532.0,
 "awd_amount": 184532.0,
 "awd_min_amd_letter_date": "2019-04-16",
 "awd_max_amd_letter_date": "2020-03-18",
 "awd_abstract_narration": "Source code is written using a combination of human languages, such as English, and programming languages. Developers use a combination of the rules for human languages and programming languages to understand code.  The act of trying to understand code is referred to as program comprehension; it is an activity that precedes all other programming-related activities a developer might undertake when coding. For example, before fixing a bug, a developer needs to understand the code where the bug is present; to add a new software feature, a developer must understand the code which will support the new feature.  If a piece of code is highly comprehensible, then developers will have an easier time maintaining, debugging, and adding to it.  To support comprehension, research must attempt to formally model how human language describes program behavior. With such a model, source code could be optimized to be maximally understandable by automatically improving, or generating, human language to best describe it.  This project aims to build such a model by combining information from natural language part of speech with a model of program behavior to assist, improve and measure comprehension. \r\n\r\nThis project aims to formally model how human language describes source code behavior. This will be achieved by combining a static-analysis-based taxonomy of identifier type categorizations with natural language techniques and identifier definition-use chains. The combination of these three activities allow the model to measure 1) how the type constrains the behavior of an identifier, 2) what role, in English, the words in an identifier correlate to, and 3) what function calls the identifier is used in. These will allow the model to understand how the English of an identifier relates to the usage (function calls) and behavior constraints (type constraints). The goal of this model is to formally measure the way human languages are used to describe source code behavior such that it could be used to train a machine to do the same. The completed model will increase the current understanding of how developers express program behavior through human languages and allow for this expression to be measurably optimized for increased comprehensibility. Additionally, the model will improve modern program comprehension techniques by allowing them to be more aware of how the underlying source code structure and rules influence the way human languages are used to describe program behavior.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Christian",
   "pi_last_name": "Newman",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Christian Newman",
   "pi_email_addr": "cdnvse@rit.edu",
   "nsf_id": "000757126",
   "pi_start_date": "2019-04-16",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Rochester Institute of Tech",
  "inst_street_address": "1 LOMB MEMORIAL DR",
  "inst_street_address_2": "",
  "inst_city_name": "ROCHESTER",
  "inst_state_code": "NY",
  "inst_state_name": "New York",
  "inst_phone_num": "5854757987",
  "inst_zip_code": "146235603",
  "inst_country_name": "United States",
  "cong_dist_code": "25",
  "st_cong_dist_code": "NY25",
  "org_lgl_bus_name": "ROCHESTER INSTITUTE OF TECHNOLOGY",
  "org_prnt_uei_num": "",
  "org_uei_num": "J6TWTRKC1X14"
 },
 "perf_inst": {
  "perf_inst_name": "Rochester Institute of Technology",
  "perf_str_addr": "141 Lomb Memorial Avenue",
  "perf_city_name": "Rochester",
  "perf_st_code": "NY",
  "perf_st_name": "New York",
  "perf_zip_code": "146235603",
  "perf_ctry_code": "US",
  "perf_cong_dist": "25",
  "perf_st_cong_dist": "NY25",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  },
  {
   "pgm_ref_code": "8228",
   "pgm_ref_txt": "CISE Resrch Initiatn Initiatve"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 174532.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 10000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p id=\"docs-internal-guid-875a32f5-7fff-22e4-85a0-9937bd900315\" style=\"line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">The goal of this project was to create and study a model that understands how identifier names are influenced by the behavior of the code they describe. The final outcomes of this proposal are as follows:</span></p>\n<ul style=\"margin-top: 0; margin-bottom: 0; padding-inline-start: 48px;\">\n<li style=\"list-style-type: disc; font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">We have produced a set of part-of-speech based templates, called grammar patterns, that represent how software developers use human language in source code to describe what the code does.</span> </li>\n<li style=\"list-style-type: disc; font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">We have shown that grammar patterns can be very effective at helping us understand the similarities and differences between various identifiers. Thus, they can be used to help us understand the meaning of an identifier and how that meaning compares to other identifiers.</span> </li>\n<li style=\"list-style-type: disc; font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">We have created a part-of-speech tagger that is specialized for source code. It is the most accurate part-of-speech tagger for source code to date. This tagger is publicly available for use by anyone.</span> </li>\n<li style=\"list-style-type: disc; font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">We have created an identifier appraisal technique that uses grammar patterns to rate the quality of identifiers. In the near future, this will be extended to provide identifier name recommendations to software developers to help improve code quality. This appraisal technique will soon be made public and will be open for anyone to use or improve upon.</span> </li>\n<li style=\"list-style-type: disc; font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">We have created two publicly available datasets of identifiers and their part-of-speech tags. The tags in these datasets were manually assigned and validated by humans and can be used to train future part-of-speech taggers for source code. We have also released a dataset of abbreviations and their corresponding expansions and&nbsp; a dataset of rename refactorings (i.e., identifier name updates) and the code changes related to those name updates</span> </li>\n<li style=\"list-style-type: disc; font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">We have created a publicly available catalog of grammar patterns commonly used in software development and derived from research that took place as part of this grant. These can be used by other researchers, or software developers, for education, for further understanding natural language phenomena in source code, and for improving their practices through stronger software quality tools and code review.</span> </li>\n<li style=\"list-style-type: disc; font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">We have highlighted several weaknesses in the techniques used in modern research for identifier name analysis, emphasizing the need for stronger tools that are specialized for natural language processing on source code identifiers. These weaknesses represent research that needs to be done and, in highlighting them, we aim to attract more researchers to the field of natural language analysis for identifiers and help underscore the need and importance of this field.</span> </li>\n<li style=\"list-style-type: disc; font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">The grammar pattern technique created under this grant has set the stage for identifier name appraisal, recommendation, and analysis tools that focus on phrasal structure recommendations. This is the </span><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: bold; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">first </span><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">technique that is able to perform this level and type of identifier name analysis on code, and represents a novel perspective on how identifier recommendation should work. Most traditional recommendation tools suggest specific words or identifier names. They focus on increasing the consistency of identifier names without reasoning about the quality of the name itself. In addition, their output is not explainable and does not help developers understand why the recommendation is being made; potentially causing them to mistakenly accept/ignore recommendations due to a lack of understanding. The grammar pattern technique we have developed through this grant is different&ndash; it can help developers understand how their phrase usage is related to code behavior and how it will be interpreted by other developers; encouraging them to not only be careful about what words they&rsquo;re using, but how those words work together to convey information via an identifier. The technique is also very explainable and, thus, can be used to teach developers about good/bad naming habits and help them critically think about whether the phrasal structure of an identifier is correct. This represents a significant, potentially transformative step toward providing in-IDE identifier phrase recommendations and supporting the study of how developers use/leverage/prefer different phrases to express different behaviors. The success of this technique can eventually lead to </span><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: bold; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">optimal naming</span><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">; the idea that identifiers can be optimized for the developer, or tool, reading those identifiers. This could change the way that developers write, and perceive, programs and significantly increase the accessibility of software development by making it easier to educate, train, and onboard developers.</span> </li>\n</ul>\n<p style=\"line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Finally, research supported by this proposal has directed resulted in seven Master&rsquo;s Theses (two of which are being written by underrepresented students), one PhD student, six undergraduate students (three of which are from underrepresented groups). It was also directly responsible for creating a relationship between the PI and industry; significantly improving the probability that the work started as part of this grant will be used by developers in industry.</span></p><br>\n<p>\n\t\t\t\t      \tLast Modified: 01/11/2022<br>\n\t\t\t\t\tModified by: Christian&nbsp;Newman</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "The goal of this project was to create and study a model that understands how identifier names are influenced by the behavior of the code they describe. The final outcomes of this proposal are as follows:\n\nWe have produced a set of part-of-speech based templates, called grammar patterns, that represent how software developers use human language in source code to describe what the code does. \nWe have shown that grammar patterns can be very effective at helping us understand the similarities and differences between various identifiers. Thus, they can be used to help us understand the meaning of an identifier and how that meaning compares to other identifiers. \nWe have created a part-of-speech tagger that is specialized for source code. It is the most accurate part-of-speech tagger for source code to date. This tagger is publicly available for use by anyone. \nWe have created an identifier appraisal technique that uses grammar patterns to rate the quality of identifiers. In the near future, this will be extended to provide identifier name recommendations to software developers to help improve code quality. This appraisal technique will soon be made public and will be open for anyone to use or improve upon. \nWe have created two publicly available datasets of identifiers and their part-of-speech tags. The tags in these datasets were manually assigned and validated by humans and can be used to train future part-of-speech taggers for source code. We have also released a dataset of abbreviations and their corresponding expansions and  a dataset of rename refactorings (i.e., identifier name updates) and the code changes related to those name updates \nWe have created a publicly available catalog of grammar patterns commonly used in software development and derived from research that took place as part of this grant. These can be used by other researchers, or software developers, for education, for further understanding natural language phenomena in source code, and for improving their practices through stronger software quality tools and code review. \nWe have highlighted several weaknesses in the techniques used in modern research for identifier name analysis, emphasizing the need for stronger tools that are specialized for natural language processing on source code identifiers. These weaknesses represent research that needs to be done and, in highlighting them, we aim to attract more researchers to the field of natural language analysis for identifiers and help underscore the need and importance of this field. \nThe grammar pattern technique created under this grant has set the stage for identifier name appraisal, recommendation, and analysis tools that focus on phrasal structure recommendations. This is the first technique that is able to perform this level and type of identifier name analysis on code, and represents a novel perspective on how identifier recommendation should work. Most traditional recommendation tools suggest specific words or identifier names. They focus on increasing the consistency of identifier names without reasoning about the quality of the name itself. In addition, their output is not explainable and does not help developers understand why the recommendation is being made; potentially causing them to mistakenly accept/ignore recommendations due to a lack of understanding. The grammar pattern technique we have developed through this grant is different&ndash; it can help developers understand how their phrase usage is related to code behavior and how it will be interpreted by other developers; encouraging them to not only be careful about what words they\u2019re using, but how those words work together to convey information via an identifier. The technique is also very explainable and, thus, can be used to teach developers about good/bad naming habits and help them critically think about whether the phrasal structure of an identifier is correct. This represents a significant, potentially transformative step toward providing in-IDE identifier phrase recommendations and supporting the study of how developers use/leverage/prefer different phrases to express different behaviors. The success of this technique can eventually lead to optimal naming; the idea that identifiers can be optimized for the developer, or tool, reading those identifiers. This could change the way that developers write, and perceive, programs and significantly increase the accessibility of software development by making it easier to educate, train, and onboard developers. \n\nFinally, research supported by this proposal has directed resulted in seven Master\u2019s Theses (two of which are being written by underrepresented students), one PhD student, six undergraduate students (three of which are from underrepresented groups). It was also directly responsible for creating a relationship between the PI and industry; significantly improving the probability that the work started as part of this grant will be used by developers in industry.\n\n\t\t\t\t\tLast Modified: 01/11/2022\n\n\t\t\t\t\tSubmitted by: Christian Newman"
 }
}