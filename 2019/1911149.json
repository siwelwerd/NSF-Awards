{
 "awd_id": "1911149",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: NSF-BSF: Synthesis of Safe Pointer-Manipulating Programs",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032922585",
 "po_email": "pprabhak@nsf.gov",
 "po_sign_block_name": "Pavithra Prabhakar",
 "awd_eff_date": "2019-07-01",
 "awd_exp_date": "2024-06-30",
 "tot_intn_awd_amt": 500000.0,
 "awd_amount": 500000.0,
 "awd_min_amd_letter_date": "2019-06-20",
 "awd_max_amd_letter_date": "2019-06-20",
 "awd_abstract_narration": "Low-level pointer-manipulating programs form the backbone of our digital infrastructure: web browsers, operating systems, and cryptographic libraries are all implemented in low-level languages like C. These programs are both expensive to develop and susceptible to memory-safety bugs, which lead to crashes and security vulnerabilities, such as the infamous Heartbleed bug. This project's impact is to address both the cost and the safety issue at the same time, by generating low-level code automatically from high-level specifications in a way that guarantees absence of memory-safety bugs. This project's novelty is to advance the state of the art in program synthesis by developing a new synthesis technique that is both efficient and capable of generating memory-safe pointer-manipulating code.\r\n\r\nPointer-manipulating programs have been largely beyond the capabilities of the state-of-the-art program synthesizers due to the difficulty of reasoning automatically about their behavior and lack of structural constraints, such as strict typing, that are traditionally used to prune the search space the synthesizer has to explore. To enable efficient synthesis of safe pointer-manipulating programs, the investigators combine state-of-the-art program verification techniques based on separation logic with deductive program synthesis, a method for deriving provably correct programs directly from their specifications. This research addresses both challenges outlined above: (1) separation logic enables automatic reasoning about pointer-manipulating programs, and (2) deductive synthesis leverages the specification to preemptively prune unsafe programs from the search space. This approach is implemented in the SafeSpace synthesis framework, which accepts separation logic specifications as input, and produces C programs as output.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Nadia",
   "pi_last_name": "Polikarpova",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Nadia Polikarpova",
   "pi_email_addr": "nadia.polikarpova@gmail.com",
   "nsf_id": "000754051",
   "pi_start_date": "2019-06-20",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of California-San Diego",
  "inst_street_address": "9500 GILMAN DR",
  "inst_street_address_2": "",
  "inst_city_name": "LA JOLLA",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "8585344896",
  "inst_zip_code": "920930021",
  "inst_country_name": "United States",
  "cong_dist_code": "50",
  "st_cong_dist_code": "CA50",
  "org_lgl_bus_name": "UNIVERSITY OF CALIFORNIA, SAN DIEGO",
  "org_prnt_uei_num": "",
  "org_uei_num": "UYTTZT6G9DT1"
 },
 "perf_inst": {
  "perf_inst_name": "University of California-San Diego",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "920930934",
  "perf_ctry_code": "US",
  "perf_cong_dist": "50",
  "perf_st_cong_dist": "CA50",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "8206",
   "pgm_ref_txt": "Formal Methods and Verification"
  },
  {
   "pgm_ref_code": "9102",
   "pgm_ref_txt": "WOMEN, MINORITY, DISABLED, NEC"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 500000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Low-level pointer-manipulating programs are essential for core software, like operating systems and cryptographic libraries, but are costly to develop and vulnerable to memory-safety bugs that can lead to serious security issues. This NSF-funded project tackled these challenges by developing techniques to automatically generate safe, efficient code from high-level specifications, specifically targeting memory safety for pointer-manipulating programs.</p>\n<p>Over the project's five years, our team made substantial advancements in program synthesis. We developed and iteratively improved tools like SuSLik, Cypress, and RusSOL, each addressing critical issues in synthesizing pointer-manipulating programs. SuSLik, our initial tool, demonstrated that separation logic&mdash;a formalism designed for reasoning about memory structure&mdash;can be combined with deductive synthesis techniques to safely generate C programs. Cypress extended SuSLik by enabling complex recursive functions, which allowed us to synthesize more advanced algorithms and recursive patterns in code generation. This approach has since been expanded to produce correctness certificates, meaning that each program generated is verifiably correct and can be integrated into broader verified systems. This feature significantly improves the trustworthiness of synthesized programs.</p>\n<p>As part of our effort to bring these techniques to a wider audience of developers, we also developed RusSOL, a Rust-based synthesizer, in collaboration with ETH Zurich. RusSOL leverages Rust&rsquo;s type and ownership system, which naturally encodes aliasing and memory-safety information. Notably, a recent White House report from the Office of the National Cyber Director (ONCD) encourages developers to adopt Rust for critical systems to reduce vulnerabilities, underscoring the importance of our work in making Rust-based synthesis accessible. RusSOL synthesizes code that is not only functionally correct but also guarantees strong memory safety&mdash;a critical feature for secure, reliable systems programming.</p>\n<p>Our work has been published in peer-reviewed conferences throughout the project, earning multiple awards, including two Distinguished Paper Awards and a Distinguished Artifact Award.</p>\n<p>In summary, this project has resulted in tools that allow developers to automatically generate memory-safe code for pointer-manipulating programs, bridging a gap between specification and implementation. These innovations reduce development time, enhance security, and make it feasible to generate code that is both efficient and provably correct. Our tools and techniques promise a future where software at the very foundation of digital infrastructure can be developed faster, with fewer vulnerabilities, and with assurances of safety and reliability.</p><br>\n<p>\n Last Modified: 11/19/2024<br>\nModified by: Nadia&nbsp;Polikarpova</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nLow-level pointer-manipulating programs are essential for core software, like operating systems and cryptographic libraries, but are costly to develop and vulnerable to memory-safety bugs that can lead to serious security issues. This NSF-funded project tackled these challenges by developing techniques to automatically generate safe, efficient code from high-level specifications, specifically targeting memory safety for pointer-manipulating programs.\n\n\nOver the project's five years, our team made substantial advancements in program synthesis. We developed and iteratively improved tools like SuSLik, Cypress, and RusSOL, each addressing critical issues in synthesizing pointer-manipulating programs. SuSLik, our initial tool, demonstrated that separation logica formalism designed for reasoning about memory structurecan be combined with deductive synthesis techniques to safely generate C programs. Cypress extended SuSLik by enabling complex recursive functions, which allowed us to synthesize more advanced algorithms and recursive patterns in code generation. This approach has since been expanded to produce correctness certificates, meaning that each program generated is verifiably correct and can be integrated into broader verified systems. This feature significantly improves the trustworthiness of synthesized programs.\n\n\nAs part of our effort to bring these techniques to a wider audience of developers, we also developed RusSOL, a Rust-based synthesizer, in collaboration with ETH Zurich. RusSOL leverages Rusts type and ownership system, which naturally encodes aliasing and memory-safety information. Notably, a recent White House report from the Office of the National Cyber Director (ONCD) encourages developers to adopt Rust for critical systems to reduce vulnerabilities, underscoring the importance of our work in making Rust-based synthesis accessible. RusSOL synthesizes code that is not only functionally correct but also guarantees strong memory safetya critical feature for secure, reliable systems programming.\n\n\nOur work has been published in peer-reviewed conferences throughout the project, earning multiple awards, including two Distinguished Paper Awards and a Distinguished Artifact Award.\n\n\nIn summary, this project has resulted in tools that allow developers to automatically generate memory-safe code for pointer-manipulating programs, bridging a gap between specification and implementation. These innovations reduce development time, enhance security, and make it feasible to generate code that is both efficient and provably correct. Our tools and techniques promise a future where software at the very foundation of digital infrastructure can be developed faster, with fewer vulnerabilities, and with assurances of safety and reliability.\t\t\t\t\tLast Modified: 11/19/2024\n\n\t\t\t\t\tSubmitted by: NadiaPolikarpova\n"
 }
}