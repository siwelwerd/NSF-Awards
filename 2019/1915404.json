{
 "awd_id": "1915404",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "Using Program Dependence Graphs to Propagate Feedback to Students on Programming Assignments and Promote Responsive Teaching",
 "cfda_num": "47.076",
 "org_code": "11040000",
 "po_phone": "7032922635",
 "po_email": "mferrara@nsf.gov",
 "po_sign_block_name": "Mike Ferrara",
 "awd_eff_date": "2019-10-01",
 "awd_exp_date": "2023-09-30",
 "tot_intn_awd_amt": 298728.0,
 "awd_amount": 298728.0,
 "awd_min_amd_letter_date": "2019-05-14",
 "awd_max_amd_letter_date": "2019-05-14",
 "awd_abstract_narration": "With support from the NSF Improving Undergraduate STEM Education Program: Education and Human Resources (IUSE: EHR), this project aims to serve the national interest by enabling faculty to improve their ability to assess student understanding in computer science courses and give feedback on student assignments. Student interest in computer science courses is rapidly increasing nationwide, putting strain on departments and instructors to offer a quality education. Providing effective personalized feedback to students is a critical part of the learning process, but a limited number of qualified instructors and large student enrollments make providing such feedback a challenge when student to faculty ratios are high. This Engaged Student Learning track Exploration and Design tier project will develop a new teaching platform to assist instructors in computer science courses by automatically propagating feedback to a large body of students. In addition, the new teaching platform aims to help instructors understand collective strengths and weaknesses of students in their courses based on their assignment submissions. This project aims to affect over 1,000 undergraduate students each year at the Rochester Institute of Technology. \r\n\r\nThe teaching platform developed by this project will analyze student program submissions to create program dependence graphs that combine control and data flows for Java and Python programs. The graphs will be used to cluster similar student submissions using graph alignment, and to detect semantic expected code patterns using subgraph mining. The goal of the platform is to promote improved teaching effectiveness by presenting analytics that will help instructors understand the performance of individual students and classes as a whole. It is also designed to suggest avenues for further discussion with the class. The technical evaluation of the project will study how well the platform identifies clusters and patterns in both synthetic and real assignments. Instructors from Rochester Institute of Technology, several neighboring universities, and local high schools will participate in training workshops, and the platform will be used in introductory courses at Rochester Institute of Technology. An additional goal of the project is to develop knowledge bases to enable the use of the teaching platform with new assignments, and to evaluate the impact of the platform on the instructors' grading and teaching style. The teaching platform targets instructors of computer science courses and has the potential to influence any student studying computer science. The NSF IUSE: EHR Program supports research and development projects to improve the effectiveness of STEM education for all students. Through the Engaged Student Learning track, the program supports the creation, exploration, and implementation of promising practices and tools.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "EDU",
 "org_dir_long_name": "Directorate for STEM Education",
 "div_abbr": "DUE",
 "org_div_long_name": "Division Of Undergraduate Education",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Carlos",
   "pi_last_name": "Rivero",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Carlos Rivero",
   "pi_email_addr": "crr@cs.rit.edu",
   "nsf_id": "000727853",
   "pi_start_date": "2019-05-14",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Zack",
   "pi_last_name": "Butler",
   "pi_mid_init": "J",
   "pi_sufx_name": "",
   "pi_full_name": "Zack J Butler",
   "pi_email_addr": "zjb@cs.rit.edu",
   "nsf_id": "000159710",
   "pi_start_date": "2019-05-14",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Hadi",
   "pi_last_name": "Hosseini",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Hadi Hosseini",
   "pi_email_addr": "hadi@psu.edu",
   "nsf_id": "000754775",
   "pi_start_date": "2019-05-14",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Rochester Institute of Tech",
  "inst_street_address": "1 LOMB MEMORIAL DR",
  "inst_street_address_2": "",
  "inst_city_name": "ROCHESTER",
  "inst_state_code": "NY",
  "inst_state_name": "New York",
  "inst_phone_num": "5854757987",
  "inst_zip_code": "146235603",
  "inst_country_name": "United States",
  "cong_dist_code": "25",
  "st_cong_dist_code": "NY25",
  "org_lgl_bus_name": "ROCHESTER INSTITUTE OF TECHNOLOGY",
  "org_prnt_uei_num": "",
  "org_uei_num": "J6TWTRKC1X14"
 },
 "perf_inst": {
  "perf_inst_name": "Rochester Institute of Tech",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "NY",
  "perf_st_name": "New York",
  "perf_zip_code": "146235603",
  "perf_ctry_code": "US",
  "perf_cong_dist": "25",
  "perf_st_cong_dist": "NY25",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "199800",
   "pgm_ele_name": "IUSE"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "083Z",
   "pgm_ref_txt": "ECR:PEER-Productn Eng Ed Res"
  },
  {
   "pgm_ref_code": "8209",
   "pgm_ref_txt": "Improv Undergrad STEM Ed(IUSE)"
  },
  {
   "pgm_ref_code": "8244",
   "pgm_ref_txt": "EHR CL Opportunities (NSF 14-302)"
  },
  {
   "pgm_ref_code": "9178",
   "pgm_ref_txt": "UNDERGRADUATE EDUCATION"
  }
 ],
 "app_fund": [
  {
   "app_code": "0419",
   "app_name": "NSF Education & Human Resource",
   "app_symb_id": "040106",
   "fund_code": "04001920DB",
   "fund_name": "NSF Education & Human Resource",
   "fund_symb_id": "040106"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 298728.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Our goal was to provide personalized feedback in introductory programming assignments. Current tools to provide feedback mostly focus on automating its delivery; unfortunately, the instructor has almost no control over what feedback is provided and how feedback is delivered.</p>\n<p>We focused on two components. The first component was to group similar programs. The idea is that, if two or more programs are very similar, we can group them, and the instructor can deliver the same feedback to all the students who submitted those programs. We developed several methods to group programs using program dependence graphs, a graph-based representation that combines information about the control and the data flows within the program. We also explored feedback at a more fine-grained level. Instead of full programs, we focused on grouping program statements. Instructors have thus control to deliver feedback to similar program statements found in many programs within the same assignment. We also explored the use of machine learning to recognize these statements and provide feedback.</p>\n<p>The second component was to use a correct program to repair an incorrect program. These repairs can be used as feedback to be delivered to students. We developed several methods to increase the flexibility of the program comparison based on control flow graphs, that is, graph-based representations that only include the information of the control flow within the program. We expanded control flow graphs by adding semantic labels to the program statements. Such a flexible comparison mitigates the requirement that the correct program must be very similar to the incorrect program, which is relevant in practice since we often do not have as many correct programs. We explored the use of machine learning to add feedback to unseen repairs.</p>\n<p>Our project has contributed to improving STEM education by aiding instructors deliver meaningful and timely feedback. Our outcomes have the potential to impact virtually all computer science students.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 10/16/2023<br>\n\t\t\t\t\tModified by: Carlos&nbsp;Rivero</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nOur goal was to provide personalized feedback in introductory programming assignments. Current tools to provide feedback mostly focus on automating its delivery; unfortunately, the instructor has almost no control over what feedback is provided and how feedback is delivered.\n\nWe focused on two components. The first component was to group similar programs. The idea is that, if two or more programs are very similar, we can group them, and the instructor can deliver the same feedback to all the students who submitted those programs. We developed several methods to group programs using program dependence graphs, a graph-based representation that combines information about the control and the data flows within the program. We also explored feedback at a more fine-grained level. Instead of full programs, we focused on grouping program statements. Instructors have thus control to deliver feedback to similar program statements found in many programs within the same assignment. We also explored the use of machine learning to recognize these statements and provide feedback.\n\nThe second component was to use a correct program to repair an incorrect program. These repairs can be used as feedback to be delivered to students. We developed several methods to increase the flexibility of the program comparison based on control flow graphs, that is, graph-based representations that only include the information of the control flow within the program. We expanded control flow graphs by adding semantic labels to the program statements. Such a flexible comparison mitigates the requirement that the correct program must be very similar to the incorrect program, which is relevant in practice since we often do not have as many correct programs. We explored the use of machine learning to add feedback to unseen repairs.\n\nOur project has contributed to improving STEM education by aiding instructors deliver meaningful and timely feedback. Our outcomes have the potential to impact virtually all computer science students.\n\n\t\t\t\t\tLast Modified: 10/16/2023\n\n\t\t\t\t\tSubmitted by: Carlos Rivero"
 }
}