{
 "awd_id": "1850475",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CRII: SHF: Improving the Retention of Newcomers in FLOSS Projects With Useful and Timely Code Reviews",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2019-02-15",
 "awd_exp_date": "2022-01-31",
 "tot_intn_awd_amt": 174967.0,
 "awd_amount": 174967.0,
 "awd_min_amd_letter_date": "2019-02-05",
 "awd_max_amd_letter_date": "2019-02-05",
 "awd_abstract_narration": "Although popular Free / Libre Open Source Software (FLOSS) projects (e.g., Apache, Linux, and Android) attract plenty of motivated volunteers, most of these prospective joiners fail to become long-term contributors.  According to the results of recent studies, one of the most common barriers reported by the newcomers is delayed or unfair feedback for their submitted code changes. This barrier often stems from a newcomer's struggle to identify suitable reviewers, who are experienced in the change areas and are capable of writing useful reviews. Since newcomers often have to wait 2-6 times longer than a long-term contributor to get reviews for their changes, they often become frustrated and abandon their on-boarding efforts. To address  this issue, this project aims to build RevRanker, an automated model that can suggest reviewers who can provide timely and useful reviews.\r\n\r\nToward this goal, this project will first build a theoretical understanding of useful code reviews in FLOSS projects using a mixed research method. This understanding will be then used to train and evaluate RevEval, an automated model to predict the usefulness of code reviews. Using the RevEval model as well as leveraging multiple historical dimensions of the files under review, RevRanker will be developed and evaluated. Finally, a plugin will be developed to integrate the RevRanker model with a popular code-review management system as well as to evaluate its effectiveness.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Amiangshu",
   "pi_last_name": "Bosu",
   "pi_mid_init": "S",
   "pi_sufx_name": "",
   "pi_full_name": "Amiangshu S Bosu",
   "pi_email_addr": "amiangshu.bosu@wayne.edu",
   "nsf_id": "000736785",
   "pi_start_date": "2019-02-05",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Wayne State University",
  "inst_street_address": "5700 CASS AVE STE 4900",
  "inst_street_address_2": "",
  "inst_city_name": "DETROIT",
  "inst_state_code": "MI",
  "inst_state_name": "Michigan",
  "inst_phone_num": "3135772424",
  "inst_zip_code": "482023692",
  "inst_country_name": "United States",
  "cong_dist_code": "13",
  "st_cong_dist_code": "MI13",
  "org_lgl_bus_name": "WAYNE STATE UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "M6K6NTJ2MNE5"
 },
 "perf_inst": {
  "perf_inst_name": "Wayne State University",
  "perf_str_addr": "5057 Woodward Ave",
  "perf_city_name": "Detroit",
  "perf_st_code": "MI",
  "perf_st_name": "Michigan",
  "perf_zip_code": "482024050",
  "perf_ctry_code": "US",
  "perf_cong_dist": "13",
  "perf_st_cong_dist": "MI13",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7798",
   "pgm_ref_txt": "SOFTWARE & HARDWARE FOUNDATION"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  },
  {
   "pgm_ref_code": "8228",
   "pgm_ref_txt": "CISE Resrch Initiatn Initiatve"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 174967.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The primary goal of this project is improving the retention of Newcomers in Free/Libre and Open Source Software (FLOSS) projects with useful and timely code reviews. To get a code change accepted, a prospective newcomer must submit his/her change to the code review management system (e.g., Gerrit, ReviewBoard, and Phabricator) and get it reviewed by long-term contributors. However, In large-scale FLOSS projects, newcomers often struggle to identify suitable reviewers who are experienced in that particular area and are able to provide useful reviews. As a result, triaging a newcomer?s code change often takes longer and may be assigned to an incorrect reviewer. An incorrect reviewer assignment may cause further delays by warranting reassignment or may yield reviews that are useless to the author.&nbsp; To help those newcomers, this project aims to develop an automated system to suggest reviewers for a code change to ensure timely and useful reviews. Moreover, this project will also help to&nbsp; improve the effectiveness of code reviews among all software development organizations, since developers spend a significant amount of time in code reviews.&nbsp; On this goal, we conducted three studies.<br />In our first study, we developed, deployed, and evaluated a production-ready solution using the Balanced SCorecard (BSC) strategy that a commercial organization (i.e., Samsung Research Bangladesh) is using in their day-to-day management to monitor individual developer's, a particular project's or the entire organization's code review effectiveness. Following the four-step framework of the BSC strategy, we: 1) defined the operation goals of this research, 2) defined a set of metrics to measure the effectiveness of code reviews, 3) developed an automated mechanism to measure those metrics, and 4) developed and evaluated a monitoring application to inform the key stakeholders. Our automated model to identify useful code reviews achieves 7.88% and 14.39% improvement in terms of accuracy and minority class F1 score respectively over the models proposed in prior studies. It also outperforms human evaluators from SRBD, that the model replaces, by a margin of 25.32% and 23.84% respectively in terms of accuracy and minority class F1 score. In our post-deployment survey, SRBD developers and managers indicated that they found our solution useful and it provided them with important insights to help their decision making.<br />Our second study was based on a three-stage mixed-method protocol. In the first step, we have randomly selected 2,500 MCR comments from the OpenStack Nova project and manually categorized each of those comments according to classification schemes developed in prior studies. In the second stage, we surveyed OpenStack developers to better understand their perspectives of useful MCRs. We also asked the survey respondents to rate perceived usefulness of various MCR comment categories.&nbsp; In the third stage, we combined the ratings obtained from the survey with the categories identified during our manual categorization to develop regression models to identify the factors influencing MCR usefulness. The results of our study suggest that an MCR comment's usefulness is dictated not only by its technical contributions such as defect finding or quality improvement tips,&nbsp; but also by its linguistic characteristics such as comprehensibility and politeness. While a reviewer's coding experience and recent commits to the file under review positively impact code review usefulness, the number of mutual reviews, and code review interval has the opposite effect.<br />To achieve the ultimate goal, we have developed a regression model that combines various contextual and human related factors, identified during our first two studies, to predict the likelihood of useful code reviews from a particular developer for a code change. Using this model, we have developed RevRanker, a novel type of code reviewer recommendation system. This system differentiates from the existing reviewer recommendation system by taking&nbsp; \" anticipated usefulness\" into consideration. In our analysis, reviewers suggested by our model significantly outperforms reviewers suggested by other models in terms of writing useful code reviews.<br />This project has funded two-third works for a computer science PhD student?s dissertation. We have already published two papers from this work and we expect to publish two more. We have also made code and artifacts developed through this project publicly available one Github.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 07/05/2022<br>\n\t\t\t\t\tModified by: Amiangshu&nbsp;S&nbsp;Bosu</p>\n</div>\n<div class=\"porSideCol\">\n<div class=\"each-gallery\">\n<div class=\"galContent\" id=\"gallery0\">\n<div class=\"photoCount\" id=\"photoCount0\">\n\t\t\t\t\t\t\t\t\tImages (<span id=\"selectedPhoto0\">1</span> of <span class=\"totalNumber\"></span>)\t\t\n\t\t\t\t\t\t\t\t</div>\n<div class=\"galControls\" id=\"controls0\"></div>\n<div class=\"galSlideshow\" id=\"slideshow0\"></div>\n<div class=\"galEmbox\" id=\"embox\">\n<div class=\"image-title\"></div>\n</div>\n</div>\n<div class=\"galNavigation\" id=\"navigation0\">\n<ul class=\"thumbs\" id=\"thumbs0\">\n<li>\n<a href=\"/por/images/Reports/POR/2022/1850475/1850475_10590651_1656995831241_code-review-usefulness--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2022/1850475/1850475_10590651_1656995831241_code-review-usefulness--rgov-800width.jpg\" title=\"What makes a code review useful\"><img src=\"/por/images/Reports/POR/2022/1850475/1850475_10590651_1656995831241_code-review-usefulness--rgov-66x44.jpg\" alt=\"What makes a code review useful\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Factors influencing code review usefulness</div>\n<div class=\"imageCredit\">Amiangshu Bosu</div>\n<div class=\"imagePermisssions\">Creative Commons</div>\n<div class=\"imageSubmitted\">Amiangshu&nbsp;S&nbsp;Bosu</div>\n<div class=\"imageTitle\">What makes a code review useful</div>\n</div>\n</li>\n<li>\n<a href=\"/por/images/Reports/POR/2022/1850475/1850475_10590651_1656995697706_code-review-analytics--rgov-214x142.jpg\" original=\"/por/images/Reports/POR/2022/1850475/1850475_10590651_1656995697706_code-review-analytics--rgov-800width.jpg\" title=\"Code review analytics\"><img src=\"/por/images/Reports/POR/2022/1850475/1850475_10590651_1656995697706_code-review-analytics--rgov-66x44.jpg\" alt=\"Code review analytics\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Architecture of code review analytics platform</div>\n<div class=\"imageCredit\">EMSE</div>\n<div class=\"imagePermisssions\">Creative Commons</div>\n<div class=\"imageSubmitted\">Amiangshu&nbsp;S&nbsp;Bosu</div>\n<div class=\"imageTitle\">Code review analytics</div>\n</div>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>",
  "por_txt_cntn": "\nThe primary goal of this project is improving the retention of Newcomers in Free/Libre and Open Source Software (FLOSS) projects with useful and timely code reviews. To get a code change accepted, a prospective newcomer must submit his/her change to the code review management system (e.g., Gerrit, ReviewBoard, and Phabricator) and get it reviewed by long-term contributors. However, In large-scale FLOSS projects, newcomers often struggle to identify suitable reviewers who are experienced in that particular area and are able to provide useful reviews. As a result, triaging a newcomer?s code change often takes longer and may be assigned to an incorrect reviewer. An incorrect reviewer assignment may cause further delays by warranting reassignment or may yield reviews that are useless to the author.  To help those newcomers, this project aims to develop an automated system to suggest reviewers for a code change to ensure timely and useful reviews. Moreover, this project will also help to  improve the effectiveness of code reviews among all software development organizations, since developers spend a significant amount of time in code reviews.  On this goal, we conducted three studies.\nIn our first study, we developed, deployed, and evaluated a production-ready solution using the Balanced SCorecard (BSC) strategy that a commercial organization (i.e., Samsung Research Bangladesh) is using in their day-to-day management to monitor individual developer's, a particular project's or the entire organization's code review effectiveness. Following the four-step framework of the BSC strategy, we: 1) defined the operation goals of this research, 2) defined a set of metrics to measure the effectiveness of code reviews, 3) developed an automated mechanism to measure those metrics, and 4) developed and evaluated a monitoring application to inform the key stakeholders. Our automated model to identify useful code reviews achieves 7.88% and 14.39% improvement in terms of accuracy and minority class F1 score respectively over the models proposed in prior studies. It also outperforms human evaluators from SRBD, that the model replaces, by a margin of 25.32% and 23.84% respectively in terms of accuracy and minority class F1 score. In our post-deployment survey, SRBD developers and managers indicated that they found our solution useful and it provided them with important insights to help their decision making.\nOur second study was based on a three-stage mixed-method protocol. In the first step, we have randomly selected 2,500 MCR comments from the OpenStack Nova project and manually categorized each of those comments according to classification schemes developed in prior studies. In the second stage, we surveyed OpenStack developers to better understand their perspectives of useful MCRs. We also asked the survey respondents to rate perceived usefulness of various MCR comment categories.  In the third stage, we combined the ratings obtained from the survey with the categories identified during our manual categorization to develop regression models to identify the factors influencing MCR usefulness. The results of our study suggest that an MCR comment's usefulness is dictated not only by its technical contributions such as defect finding or quality improvement tips,  but also by its linguistic characteristics such as comprehensibility and politeness. While a reviewer's coding experience and recent commits to the file under review positively impact code review usefulness, the number of mutual reviews, and code review interval has the opposite effect.\nTo achieve the ultimate goal, we have developed a regression model that combines various contextual and human related factors, identified during our first two studies, to predict the likelihood of useful code reviews from a particular developer for a code change. Using this model, we have developed RevRanker, a novel type of code reviewer recommendation system. This system differentiates from the existing reviewer recommendation system by taking  \" anticipated usefulness\" into consideration. In our analysis, reviewers suggested by our model significantly outperforms reviewers suggested by other models in terms of writing useful code reviews.\nThis project has funded two-third works for a computer science PhD student?s dissertation. We have already published two papers from this work and we expect to publish two more. We have also made code and artifacts developed through this project publicly available one Github.\n\n\t\t\t\t\tLast Modified: 07/05/2022\n\n\t\t\t\t\tSubmitted by: Amiangshu S Bosu"
 }
}