{
 "awd_id": "1909715",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "NSF-BSF: SHF: CCF: Small: Collaborative Research: Hardware/Software Design of Durable Data Structures and Algorithms for Non-Volatile Main Memory",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927843",
 "po_email": "sabasu@nsf.gov",
 "po_sign_block_name": "Sankar Basu",
 "awd_eff_date": "2019-07-01",
 "awd_exp_date": "2024-06-30",
 "tot_intn_awd_amt": 112639.0,
 "awd_amount": 112639.0,
 "awd_min_amd_letter_date": "2019-06-13",
 "awd_max_amd_letter_date": "2019-06-13",
 "awd_abstract_narration": "Memory is said to be non-volatile if it does not lose its contents when it loses power (i.e., crashes). Hardware for non-volatile memory is advancing fast, and soon it is expected to displace volatile DRAM for main memory in many architectures. This project entails developing concurrent data structures and software that can exploit emerging forms of non-volatile memory that provide simple, faster, and more energy-efficient crash recovery.  This research has the potential to benefit society by enhancing the robustness and fault-tolerance of systems on which modern society increasingly depends. The results of this research may also significantly improve energy-efficiency, since such systems would require smaller caches and fewer accesses to energy-hungry secondary storage devices. New curriculum development activities are also planned as part of this project.\r\n \r\nThis project investigates how to make common data structures, such as queues, skip-lists, hash maps, and others, durable. Different levels of durability are considered, with special emphasis on high performance and ease of programming.  The project also evaluates several memory architectures, including both conventional multilevel memory and emerging near-data processing architectures. A complementary effort investigates hardware primitives needed to flush caches, and to move data between volatile and non-volatile memory regions. Building on these efforts, the project will produce a collection of performance and energy-efficient durable concurrent data structures, packaged as software libraries that allow for easy adaptation by programmers.  Evaluation will be done on synthetic benchmarks as well as concurrent applications such as concurrent key-value stores, work-stealing schedulers, and concurrent memory management.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Tali",
   "pi_last_name": "Moreshet",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Tali Moreshet",
   "pi_email_addr": "talim@bu.edu",
   "nsf_id": "000496495",
   "pi_start_date": "2019-06-13",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Trustees of Boston University",
  "inst_street_address": "1 SILBER WAY",
  "inst_street_address_2": "",
  "inst_city_name": "BOSTON",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "6173534365",
  "inst_zip_code": "022151703",
  "inst_country_name": "United States",
  "cong_dist_code": "07",
  "st_cong_dist_code": "MA07",
  "org_lgl_bus_name": "TRUSTEES OF BOSTON UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "THL6A6JLE1S7"
 },
 "perf_inst": {
  "perf_inst_name": "Trustees of Boston University",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "022151300",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "MA07",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7945",
   "pgm_ref_txt": "DES AUTO FOR MICRO & NANO SYST"
  },
  {
   "pgm_ref_code": "9102",
   "pgm_ref_txt": "WOMEN, MINORITY, DISABLED, NEC"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 112639.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>This project entails developing concurrent data structures, microarchitecture, and supporting software that can exploit emerging forms of memory to provide simple, faster, and more energy-efficient memory access and crash recovery. This research has the potential to benefit society by enhancing the robustness and fault-tolerance of systems on which modern society increasingly depends. The results of this research may also significantly improve energy-efficiency, since such systems would require smaller caches and fewer accesses to energy-hungry secondary storage devices. Additional broader impacts include new curriculum development activities and outreach to undergraduate and high school students, including women and under-represented minorities through research opportunities, mentoring, and workshop participation.</p>\n<p>Our main investigations centered around 1) the use of near-memory processing to improve the performance of applications that access large data structures, and 2) hardware/software protocols for providing integrity protected non-volatile memory that is fast, secure, and quickly recoverable.</p>\n<p>We have shown that near-memory-processing (NMP) architectures can significantly improve the performance and energy savings of common <em>pointer-chasing</em> data structures such as linked lists, which consist of nodes that store pointer references to connected nodes. This includes hierarchical data structures that are widely used in in-memory online transaction processing (OLTP) systems. The access process of these data structures often results in irregular and unpredictable memory access patterns, which leads to slow performance from memory access stalls.</p>\n<p>In this project, we designed and evaluated NMP-enabled <em>hybrid</em> data structures for such hierarchical data structures, which combine the cache-conscious benefits of conventional hierarchical data structures with the benefits of NMP. The key insight in our hybrid data structure design was leveraging the skew in access frequency that stems from the data structure's topology. Essentially, we partitioned each data structure into a <em>host-managed</em> portion consisting of the higher levels of the data structure and an NMP-managed portion consisting of the lower levels.</p>\n<p>Despite the seemingly simple concept of our idea, rigorous technical detail with respect to the architecture and algorithms is required to ensure high concurrency and correctness. In particular, with this partition, the data structure must still be kept coherent throughout the entire operation execution, even as multiple operations are applied concurrently. Careful coordination among the host threads, among the near-memory compute units, and between the host threads and near-memory compute units is required to meet high concurrency and correctness guarantees.</p>\n<p>We proposed a data structure that is applicable to any generic NMP architecture and provided a concrete hybrid implementation of two data structures widely used in OLTP systems, a skiplist and B+ tree. We have demonstrated through rigorous simulation that our NMP-hybrid approach can improve performance by up to 3.1X and 2.1X for the skiplist and B+ tree, respectively, compared to non-NMP implementations.</p>\n<p>We have also shown some promising results indicating potential benefits of using NMP architectures to reduce latencies incurred during garbage collection memory management. The mark-and-sweep algorithm, which identifies the live objects of a program, is fundamentally pointer-chasing and thus subject to bottlenecks arising from large amounts of irregular memory accesses, similar to pointer-chasing we have found other data structures we have explored in this project.</p>\n<p>The last part of the project focused on providing fast and efficient integrity protection for non-volatile main memory (NVMM). Non-volatile memory (NVM) is considered as an alternative to DRAM main memory, due to its non-volatility and higher density potential. It provides both increased data resilience, by preventing data loss on power failure, and improved quality-of-service, by reducing reboot times. However, these features come with their own challenges. The data stored on NVM, or persistent memory, is vulnerable to attacks, and requires means of securing its integrity. We investigated integrity-protection mechanisms for non-volatile memory, and ways of increasing their efficiency and reducing their impact on system performance degradation.</p>\n<p>The secure memory protocol which guarantees privacy and integrity of data in non-volatile main memory requires additional memory accesses for integrity verification. These extra accesses result in added delay for read and write operations. Observing that at any time, some memory addresses are more likely to be accessed than others, we propose an architecture where the amount of secure memory metadata required to authenticate data at an address is inversely related to the frequency with which that address has been accessed. This aims to reduce the associated overhead of maintaining privacy and integrity.</p><br>\n<p>\n Last Modified: 07/02/2024<br>\nModified by: Tali&nbsp;Moreshet</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nThis project entails developing concurrent data structures, microarchitecture, and supporting software that can exploit emerging forms of memory to provide simple, faster, and more energy-efficient memory access and crash recovery. This research has the potential to benefit society by enhancing the robustness and fault-tolerance of systems on which modern society increasingly depends. The results of this research may also significantly improve energy-efficiency, since such systems would require smaller caches and fewer accesses to energy-hungry secondary storage devices. Additional broader impacts include new curriculum development activities and outreach to undergraduate and high school students, including women and under-represented minorities through research opportunities, mentoring, and workshop participation.\n\n\nOur main investigations centered around 1) the use of near-memory processing to improve the performance of applications that access large data structures, and 2) hardware/software protocols for providing integrity protected non-volatile memory that is fast, secure, and quickly recoverable.\n\n\nWe have shown that near-memory-processing (NMP) architectures can significantly improve the performance and energy savings of common pointer-chasing data structures such as linked lists, which consist of nodes that store pointer references to connected nodes. This includes hierarchical data structures that are widely used in in-memory online transaction processing (OLTP) systems. The access process of these data structures often results in irregular and unpredictable memory access patterns, which leads to slow performance from memory access stalls.\n\n\nIn this project, we designed and evaluated NMP-enabled hybrid data structures for such hierarchical data structures, which combine the cache-conscious benefits of conventional hierarchical data structures with the benefits of NMP. The key insight in our hybrid data structure design was leveraging the skew in access frequency that stems from the data structure's topology. Essentially, we partitioned each data structure into a host-managed portion consisting of the higher levels of the data structure and an NMP-managed portion consisting of the lower levels.\n\n\nDespite the seemingly simple concept of our idea, rigorous technical detail with respect to the architecture and algorithms is required to ensure high concurrency and correctness. In particular, with this partition, the data structure must still be kept coherent throughout the entire operation execution, even as multiple operations are applied concurrently. Careful coordination among the host threads, among the near-memory compute units, and between the host threads and near-memory compute units is required to meet high concurrency and correctness guarantees.\n\n\nWe proposed a data structure that is applicable to any generic NMP architecture and provided a concrete hybrid implementation of two data structures widely used in OLTP systems, a skiplist and B+ tree. We have demonstrated through rigorous simulation that our NMP-hybrid approach can improve performance by up to 3.1X and 2.1X for the skiplist and B+ tree, respectively, compared to non-NMP implementations.\n\n\nWe have also shown some promising results indicating potential benefits of using NMP architectures to reduce latencies incurred during garbage collection memory management. The mark-and-sweep algorithm, which identifies the live objects of a program, is fundamentally pointer-chasing and thus subject to bottlenecks arising from large amounts of irregular memory accesses, similar to pointer-chasing we have found other data structures we have explored in this project.\n\n\nThe last part of the project focused on providing fast and efficient integrity protection for non-volatile main memory (NVMM). Non-volatile memory (NVM) is considered as an alternative to DRAM main memory, due to its non-volatility and higher density potential. It provides both increased data resilience, by preventing data loss on power failure, and improved quality-of-service, by reducing reboot times. However, these features come with their own challenges. The data stored on NVM, or persistent memory, is vulnerable to attacks, and requires means of securing its integrity. We investigated integrity-protection mechanisms for non-volatile memory, and ways of increasing their efficiency and reducing their impact on system performance degradation.\n\n\nThe secure memory protocol which guarantees privacy and integrity of data in non-volatile main memory requires additional memory accesses for integrity verification. These extra accesses result in added delay for read and write operations. Observing that at any time, some memory addresses are more likely to be accessed than others, we propose an architecture where the amount of secure memory metadata required to authenticate data at an address is inversely related to the frequency with which that address has been accessed. This aims to reduce the associated overhead of maintaining privacy and integrity.\t\t\t\t\tLast Modified: 07/02/2024\n\n\t\t\t\t\tSubmitted by: TaliMoreshet\n"
 }
}