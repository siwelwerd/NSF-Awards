{
 "awd_id": "1850436",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CRII: SaTC: Mitigating Software-Based Microarchitectural Attacks via Secure Microcode Customization",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032920000",
 "po_email": "doliveir@nsf.gov",
 "po_sign_block_name": "Daniela Oliveira",
 "awd_eff_date": "2019-03-01",
 "awd_exp_date": "2022-02-28",
 "tot_intn_awd_amt": 174996.0,
 "awd_amount": 174996.0,
 "awd_min_amd_letter_date": "2019-02-11",
 "awd_max_amd_letter_date": "2019-02-11",
 "awd_abstract_narration": "Modern high-performance processors implement complex microarchitectural optimizations involving speculative execution which has recently been shown to be vulnerable to a type of malicious attack called Spectre.  This project will investigate a microarchitectural solution framework to secure against such attacks.  This framework, called context-sensitive fencing, will seek to automatically track and detect malicious execution patterns dynamically to trigger defense code without programmer intervention and with minimal impact on processor performance.\r\n\r\nThis research will investigate a high performance defense strategy with three novel components: (a) secure microcode customization which leverages the processor's microcode engine to enable the surgical injection of Spectre defense code (e.g., speculation fences) into the dynamic instruction stream without the need for software patching, (b) a decoder-level information flow tracking framework which detects spurious execution patterns that result in the mis-training of core microprocessor structures such as the branch predictor, and (c) microarchitecture hardening mechanisms that shield sensitive microarchitectural structures against the malicious side effects of speculative execution, to further enable a security-aware processor architecture design.\r\n\r\nThe reconfigurable microcode-level defense proposed by this research may address the Spectre attack which affects millions of users.  This project will train and mentor graduate and undergraduate students and is expected to facilitate development of a hardware security course to be delivered in-class and online.\r\n\r\nThe results from this research will be disseminated in the form of publications, presentations, design reports, course materials, and source code, and will be hosted publicly for the length of this project and beyond, on the investigator's website at http://www.cs.virginia.edu/venkat.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Ashish",
   "pi_last_name": "Venkat",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Ashish Venkat",
   "pi_email_addr": "av6ds@virginia.edu",
   "nsf_id": "000784372",
   "pi_start_date": "2019-02-11",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Virginia Main Campus",
  "inst_street_address": "1001 EMMET ST N",
  "inst_street_address_2": "",
  "inst_city_name": "CHARLOTTESVILLE",
  "inst_state_code": "VA",
  "inst_state_name": "Virginia",
  "inst_phone_num": "4349244270",
  "inst_zip_code": "229034833",
  "inst_country_name": "United States",
  "cong_dist_code": "05",
  "st_cong_dist_code": "VA05",
  "org_lgl_bus_name": "RECTOR & VISITORS OF THE UNIVERSITY OF VIRGINIA",
  "org_prnt_uei_num": "",
  "org_uei_num": "JJG6HU8PA4S5"
 },
 "perf_inst": {
  "perf_inst_name": "University of Virginia Main Campus",
  "perf_str_addr": "85 Engineer's Way",
  "perf_city_name": "Charlottesville",
  "perf_st_code": "VA",
  "perf_st_name": "Virginia",
  "perf_zip_code": "229044195",
  "perf_ctry_code": "US",
  "perf_cong_dist": "05",
  "perf_st_cong_dist": "VA05",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "026Y00",
   "pgm_ele_name": "CRII CISE Research Initiation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "8228",
   "pgm_ref_txt": "CISE Resrch Initiatn Initiatve"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 174996.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Modern processors employ increasingly complex microarchitectural techniques to achieve high single thread performance and/or efficiency.&nbsp; However, this complexity invariably breeds security vulnerabilities, as evidenced recently by Meltdown and Spectre that affect nearly every computer system in the world, calling for a major redesign in many instances.</p>\n<p><span>This project tackles this problem by building significant resilience into modern processor architectures against emerging microarchitectural attacks, while greatly minimizing the impact on the efficacy of key performance features such as speculative execution.&nbsp;&nbsp;</span>In particular, it entailed a comprehensive analysis of existing hardware fences in Intel and AMD architectures, and investigation of new fences targeted at limiting information leakage along misspeculated paths from various microarchitectural structures, including caches, execution ports, functional units, and the load/store queue.&nbsp; Stemming from this analysis, it featured the design and implementation of a microcode-level fence injection mechanism, called Context-Sensitive Decoding, for the dynamic and context-sensitive deployment of the defense, without the need for recompilation or binary translation, and for a variety of different threat models, including cross-domain, cross-thread, cross-core, and cross-VM models.&nbsp; The defense also included a novel decoder-level information flow tracking mechanism that allowed for the speculative tracking and propagation of taint information at the front-end of the pipeline, acting as a trigger mechanism for the surgical insertion of fences.&nbsp; Finally, it also involved the investigation of the security implications at the processor front-end, especially the micro-op cache.</p>\n<p><span>Due to its highly configurable and flexible nature, the proposed defense strategy significantly minimizes the need for software patching. This not only reduces unnecessary programmer burden, but provides greater security guarantees since software patching is invariably prone to programmer errors.</span></p>\n<p><span><span>The results from this work have been disseminated through top-tier conference and journal publications, such as ISCA, ASPLOS, IEEE Micro, and IEEE Design &amp; Test, and through tech talks at industry and academic institutions alike.&nbsp; In addition, the software artifact for the proof-of-concept micro-op cache transient execution attack was made available through Github, for greater community use.</span></span></p>\n<p>The PI also offered a Hardware Security course for graduate students and advanced undergraduate students at the University of Virginia in Fall 2018 and Fall 2020.&nbsp; Aside from introducing students to topics in hardware security, this course takes an innovative approach and is structured in a way to walk students through the research process in Computer Science and further prepare them for a potential research career. To this end, groups of 2-4 students pursue a semester-long crossdisciplinary research project in hardware security (and other adjacent disciplines such as programming languages and software engineering) with the following major course milestones -- (a) literature survey (~3 weeks), (b) feasibility study (~3 weeks), (c) detailed design (~4 weeks), (d) experimental methodology/pencilsketch graphs (1 week), and (e) technical evaluation (~4 weeks).&nbsp; More details can be found on the course website (http://www.cs.virginia.edu/venkat/classes/cs6501/fa20).&nbsp; In addition, the PI also introduced in-class hacking workshops for Graduate Computer Architecture courses he taught in Fall 2019 and Fall 2021.</p>\n<p>The PI is also extremely committed towards diversity efforts in Computer Science and other STEM disciplines.&nbsp; He provided research mentorship to three graduate students from Iran, China, and the US, in addition to three undergraduate students, one of whom is a female student who was recognized nationally by CRA's outstanding undergraduate researcher award honorable mention.</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 04/26/2022<br>\n\t\t\t\t\tModified by: Ashish&nbsp;Venkat</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nModern processors employ increasingly complex microarchitectural techniques to achieve high single thread performance and/or efficiency.  However, this complexity invariably breeds security vulnerabilities, as evidenced recently by Meltdown and Spectre that affect nearly every computer system in the world, calling for a major redesign in many instances.\n\nThis project tackles this problem by building significant resilience into modern processor architectures against emerging microarchitectural attacks, while greatly minimizing the impact on the efficacy of key performance features such as speculative execution.  In particular, it entailed a comprehensive analysis of existing hardware fences in Intel and AMD architectures, and investigation of new fences targeted at limiting information leakage along misspeculated paths from various microarchitectural structures, including caches, execution ports, functional units, and the load/store queue.  Stemming from this analysis, it featured the design and implementation of a microcode-level fence injection mechanism, called Context-Sensitive Decoding, for the dynamic and context-sensitive deployment of the defense, without the need for recompilation or binary translation, and for a variety of different threat models, including cross-domain, cross-thread, cross-core, and cross-VM models.  The defense also included a novel decoder-level information flow tracking mechanism that allowed for the speculative tracking and propagation of taint information at the front-end of the pipeline, acting as a trigger mechanism for the surgical insertion of fences.  Finally, it also involved the investigation of the security implications at the processor front-end, especially the micro-op cache.\n\nDue to its highly configurable and flexible nature, the proposed defense strategy significantly minimizes the need for software patching. This not only reduces unnecessary programmer burden, but provides greater security guarantees since software patching is invariably prone to programmer errors.\n\nThe results from this work have been disseminated through top-tier conference and journal publications, such as ISCA, ASPLOS, IEEE Micro, and IEEE Design &amp; Test, and through tech talks at industry and academic institutions alike.  In addition, the software artifact for the proof-of-concept micro-op cache transient execution attack was made available through Github, for greater community use.\n\nThe PI also offered a Hardware Security course for graduate students and advanced undergraduate students at the University of Virginia in Fall 2018 and Fall 2020.  Aside from introducing students to topics in hardware security, this course takes an innovative approach and is structured in a way to walk students through the research process in Computer Science and further prepare them for a potential research career. To this end, groups of 2-4 students pursue a semester-long crossdisciplinary research project in hardware security (and other adjacent disciplines such as programming languages and software engineering) with the following major course milestones -- (a) literature survey (~3 weeks), (b) feasibility study (~3 weeks), (c) detailed design (~4 weeks), (d) experimental methodology/pencilsketch graphs (1 week), and (e) technical evaluation (~4 weeks).  More details can be found on the course website (http://www.cs.virginia.edu/venkat/classes/cs6501/fa20).  In addition, the PI also introduced in-class hacking workshops for Graduate Computer Architecture courses he taught in Fall 2019 and Fall 2021.\n\nThe PI is also extremely committed towards diversity efforts in Computer Science and other STEM disciplines.  He provided research mentorship to three graduate students from Iran, China, and the US, in addition to three undergraduate students, one of whom is a female student who was recognized nationally by CRA's outstanding undergraduate researcher award honorable mention.\n\n\t\t\t\t\tLast Modified: 04/26/2022\n\n\t\t\t\t\tSubmitted by: Ashish Venkat"
 }
}