{
 "awd_id": "1845514",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CAREER: Marlin: A Unified Framework for Automatic and Interactive Quantitative Program Analysis",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2019-07-01",
 "awd_exp_date": "2024-06-30",
 "tot_intn_awd_amt": 518815.0,
 "awd_amount": 534815.0,
 "awd_min_amd_letter_date": "2019-03-05",
 "awd_max_amd_letter_date": "2022-07-21",
 "awd_abstract_narration": "Achieving reliability and security of software systems that we use on a daily basis is one of the most pressing challenges of modern technology. It has been demonstrated that software verification with mathematical methods is an important component in meeting this challenge. However, most extant verification projects and tools focus on demonstrating the functional correctness of software. They do not analyze important quantitative properties of software such as resource usage, side channels, and probabilistic guarantees, which are crucial for reliability and security. The project's novelty is the design and implementation of a general framework for quantitative verification that can be applied to analyze resource usage, probabilistic programs (that incorporate randomness), and side channels. The project's impact is that this framework enables software developers to reduce the energy consumption of data centers, to mitigate serious security vulnerabilities, and to connect statistical safety guarantees to software systems that have machine-learning components. The project also provides a pedagogical opportunity for curriculum development and outreach activities. Quantitative verification and analysis tools implemented in the project are being integrated in Carnegie-Mellon's undergraduate courses on functional programming and data structures and algorithms, to both help students reason about the complexity of their code, and help instructors and teaching assistants automatically grade programming assignments by verifying complexity requirements. As part of the project's outreach activities, the investigator is designing two course modules for high-school students that are rolled out through existing programs at Carnegie-Mellon.\r\n\r\nCurrent research on quantitative analysis and verification is often problem-specific, separated into manual or automatic techniques, and there is little cross-fertilization between different areas. The aim of this project is to develop Marlin, a unified framework for quantitative verification. A distinctive feature of Marlin is the tight integration of interactive and automatic reasoning. This includes converting manually derived quantitative properties into constraints that can be consumed by automatic techniques and supporting more lightweight forms of automation beyond full inference. Marlin is based on a full-featured probabilistic programming language and an expressive quantitative program logic that supports compositional and relational reasoning. Specific innovations of Marlin include easily-understood descriptions of sub-languages for which the automation is guaranteed to succeed, the automatic generation of worst-case inputs, tail-bound analysis with higher moments, and automatic relational reasoning.  Marlin's foundation is shared by three specialized quantitative analysis tools: Resource Aware ML (RaML), a language for static resource analysis; ParML, a new language for side-channel free programming; and Borel, a tool for probabilistic inference.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Jan",
   "pi_last_name": "Hoffmann",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Jan Hoffmann",
   "pi_email_addr": "jhoffmann@cmu.edu",
   "nsf_id": "000636870",
   "pi_start_date": "2019-03-05",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Carnegie-Mellon University",
  "inst_street_address": "5000 FORBES AVE",
  "inst_street_address_2": "",
  "inst_city_name": "PITTSBURGH",
  "inst_state_code": "PA",
  "inst_state_name": "Pennsylvania",
  "inst_phone_num": "4122688746",
  "inst_zip_code": "152133815",
  "inst_country_name": "United States",
  "cong_dist_code": "12",
  "st_cong_dist_code": "PA12",
  "org_lgl_bus_name": "CARNEGIE MELLON UNIVERSITY",
  "org_prnt_uei_num": "U3NKNFLNQ613",
  "org_uei_num": "U3NKNFLNQ613"
 },
 "perf_inst": {
  "perf_inst_name": "Carnegie Mellon University",
  "perf_str_addr": "5000 Forbes Avenue",
  "perf_city_name": "Pittsburgh",
  "perf_st_code": "PA",
  "perf_st_name": "Pennsylvania",
  "perf_zip_code": "152133890",
  "perf_ctry_code": "US",
  "perf_cong_dist": "12",
  "perf_st_cong_dist": "PA12",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "1045",
   "pgm_ref_txt": "CAREER-Faculty Erly Career Dev"
  },
  {
   "pgm_ref_code": "7798",
   "pgm_ref_txt": "SOFTWARE & HARDWARE FOUNDATION"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01002223DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01002324DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 95561.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 117131.0
  },
  {
   "fund_oblg_fiscal_yr": 2021,
   "fund_oblg_amt": 104359.0
  },
  {
   "fund_oblg_fiscal_yr": 2022,
   "fund_oblg_amt": 217764.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Achieving the reliability and security of software systems that we use daily remains a challenge. It has been demonstrated that software verification with mathematical methods is a major component in meeting this challenge. However, most verification projects and tools have focused on demonstrating the functional correctness of software. They do not analyze important quantitative properties of software, such as resource usage, side channels, and probabilistic guarantees, which are crucial for reliability and security.</p>\n<p>The Marlin project has developed a framework that provides a foundation for practical verification of quantitative properties of software. The research supported by this award resulted in 14 peer-reviewed publications. Many of these publications appeared in some of the most prestigious programming-language venues. The award supported the training of several undergraduate and graduate students, including three Ph.D. students who have accepted faculty positions at universities in the US and overseas.</p>\n<p>The research supported by this award made key contributions to the original goal of the project to smoothly and uniformly integrate automatic and interactive methods to reason about important quantitative properties. This includes new methods for automatically analyzing quantitative properties of probabilistic and concurrent programs; novel automatic and interactive resource analyses; and the first technique for combining static and data-driven analyses for deriving worst-case bounds. The progress on the foundation of quantitative verification has been utilized to develop and implement domain-specific quantitative verification tools for (1) predicting the execution cost of CUDA code and (2) verifying the correctness of smart contracts.</p>\n<p>The implemented tools, such as Resource Aware ML and Nomos, are open-source and freely available to the public. Similarly, all peer-reviewed publications, technical reports, and other research results are freely accessible through the author's website and repositories such as ACM's Digital Library.</p>\n<p>&nbsp;</p><br>\n<p>\n Last Modified: 10/28/2024<br>\nModified by: Jan&nbsp;Hoffmann</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nAchieving the reliability and security of software systems that we use daily remains a challenge. It has been demonstrated that software verification with mathematical methods is a major component in meeting this challenge. However, most verification projects and tools have focused on demonstrating the functional correctness of software. They do not analyze important quantitative properties of software, such as resource usage, side channels, and probabilistic guarantees, which are crucial for reliability and security.\n\n\nThe Marlin project has developed a framework that provides a foundation for practical verification of quantitative properties of software. The research supported by this award resulted in 14 peer-reviewed publications. Many of these publications appeared in some of the most prestigious programming-language venues. The award supported the training of several undergraduate and graduate students, including three Ph.D. students who have accepted faculty positions at universities in the US and overseas.\n\n\nThe research supported by this award made key contributions to the original goal of the project to smoothly and uniformly integrate automatic and interactive methods to reason about important quantitative properties. This includes new methods for automatically analyzing quantitative properties of probabilistic and concurrent programs; novel automatic and interactive resource analyses; and the first technique for combining static and data-driven analyses for deriving worst-case bounds. The progress on the foundation of quantitative verification has been utilized to develop and implement domain-specific quantitative verification tools for (1) predicting the execution cost of CUDA code and (2) verifying the correctness of smart contracts.\n\n\nThe implemented tools, such as Resource Aware ML and Nomos, are open-source and freely available to the public. Similarly, all peer-reviewed publications, technical reports, and other research results are freely accessible through the author's website and repositories such as ACM's Digital Library.\n\n\n\t\t\t\t\tLast Modified: 10/28/2024\n\n\t\t\t\t\tSubmitted by: JanHoffmann\n"
 }
}