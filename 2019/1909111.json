{
 "awd_id": "1909111",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "AF: Small: Relative Fault Tolerance in Network Design",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032922095",
 "po_email": "kwimmer@nsf.gov",
 "po_sign_block_name": "Karl Wimmer",
 "awd_eff_date": "2019-10-01",
 "awd_exp_date": "2024-09-30",
 "tot_intn_awd_amt": 300000.0,
 "awd_amount": 300000.0,
 "awd_min_amd_letter_date": "2019-07-02",
 "awd_max_amd_letter_date": "2019-07-02",
 "awd_abstract_narration": "Fault tolerance is crucial for every computer system, particularly networked and distributed systems where computational and communication components can fail. Every network (e.g., internet, electric power grid, mobile phones or road networks with traffic/closures) needs to be resilient to component failures or malfunctions. It is crucial that quality of service is maintained in catastrophic events where there can be many failures. This project is about a new notion of fault-tolerance that is relative to some underlying system/network, which allows for more refined and powerful guarantees than traditional definitions. The PI will develop the theory of relative fault-tolerance, fundamentally improving knowledge of the capabilities and limitations of these new definitions and leading to improved reliability of networked systems. This project incorporates mentoring and including underrepresented undergraduates and high school students in the more applied aspects of this work, as well as outreach to middle schools in Baltimore through existing mathematics-based programs.\r\n\r\nThe focus of the project will be on network-design problems, where the system is a network which is either supposed to stay connected after faults or is supposed to both stay connected and preserve distances in the network after faults. The traditional notion of fault-tolerance is absolute: a network is fault tolerant if it can withstand some number of failures.  But this notion is limiting if we are building on top of an already existing system; if the underlying system is not very fault-tolerant, then our system cannot be very fault-tolerant.  To get around this limitation, the PI will study algorithms for designing networks and systems with relative fault tolerance, where the requirement is that the system be robust to faults which the underlying system is also robust to.  More formally, a network is f-fault tolerant not if it can withstand f faults (the traditional definition), but if it has the same behavior after f faults as the underlying system.  The two main problem types in this project are the following.\r\n\r\n- Survivable Network Design, where the goal is to find a subgraph of a given network where the connected components of the subgraph after faults are the same as the connected components of the full network after faults.\r\n- Graph Spanners, where the goal is to find a subgraph of a given network where the pairwise distances in the subgraph after faults are a good approximation of the pairwise distances in the full graph after faults.\r\n\r\nFor both of these types of problems, the PI will design efficient approximation algorithms for the main problems and their variants, in the traditional centralized model of computation as well as in distributed and parallel models.  In order to do this, it will be necessary to develop new algorithmic techniques that are based on but go beyond the techniques that have been used for related problems (iterative rounding for survivable network design, randomized rounding for spanners).\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Michael",
   "pi_last_name": "Dinitz",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Michael Dinitz",
   "pi_email_addr": "mdinitz@cs.jhu.edu",
   "nsf_id": "000662685",
   "pi_start_date": "2019-07-02",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Johns Hopkins University",
  "inst_street_address": "3400 N CHARLES ST",
  "inst_street_address_2": "",
  "inst_city_name": "BALTIMORE",
  "inst_state_code": "MD",
  "inst_state_name": "Maryland",
  "inst_phone_num": "4439971898",
  "inst_zip_code": "212182608",
  "inst_country_name": "United States",
  "cong_dist_code": "07",
  "st_cong_dist_code": "MD07",
  "org_lgl_bus_name": "THE JOHNS HOPKINS UNIVERSITY",
  "org_prnt_uei_num": "GS4PNKTRNKL3",
  "org_uei_num": "FTMTDMBR29C7"
 },
 "perf_inst": {
  "perf_inst_name": "Johns Hopkins University",
  "perf_str_addr": "1101 E 33rd St",
  "perf_city_name": "Baltimore",
  "perf_st_code": "MD",
  "perf_st_name": "Maryland",
  "perf_zip_code": "212182686",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "MD07",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779600",
   "pgm_ele_name": "Algorithmic Foundations"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7926",
   "pgm_ref_txt": "ALGORITHMS"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 300000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>This project was focused on a new definition of fault tolerance for network design problems, known as \"relative\" fault-tolerance.&nbsp; Previous definitions of fault-tolerance are limited in that they do not allow resilience to a large number of faults (even if it is possible to be resilient to them) if there is even a single small set of faults that would cause problems.&nbsp; That is, if there is some small set of faults that will cause problems, then even though we might be able to be resilient to *some* larger sets (though not all), previous definitions do not allow this.&nbsp; We proposed studying two particular network design settings: pure connectivity approximation algorithms, and distance-preserving objects such as spanners and emulators.&nbsp;&nbsp;<br />In the pure connectivity setting, we introduced two new problems based on our definition: Relative Survivable Network Design (a relative version of the classical Survivable Network Design problem), and k-Fault Tolerant Subgraph (a relative version of the classical k-Edge Connected Spanning Subgraph problem).&nbsp; We introduced and studied these problems in two papers [APPROX '22] and [WAOA '23].&nbsp; We showed good approximations for many reasonable regimes, but also showed that these problems are significantly more difficult than the non-relative versions.&nbsp;&nbsp;<br />For distance-preserving objects, we built on previous work and studied fault-tolerant spanners (subgraphs which approximately preserve distances even after faults).&nbsp; In [PODC '20] we showed that it was possible to design efficient algorithms for them (the previous results were purely mathematical, in that while they showed that good fault-tolerant spanners existed, they did not come with efficient algorithms to actually construct them).&nbsp; In [SODA '21] we improved these results for vertex faults to show efficient algorithm with no loss whatsoever in spanner quality compared to the previous inefficient algorithms.&nbsp; In [SODA '22] we extended this to the case of edge faults, showing that not only are efficient algorithms possible, but edge faults are actually easier than vertex faults in that we can design spanners that are provably sparser.&nbsp; In [ITCS '22] we extended this further to handle vertex faults in *emulators*, which are similar objects to spanners but without the requirement that they be the subgraph.&nbsp; We showed that vertex faults in emulators can be handled at basically the same cost as edge faults in spanners.&nbsp; In [ITCS '23] we extended this further to edge faults in emulators, showing that for most reasonable parameter regimes, edge faults can be handled in an emulator essentially for free.&nbsp;&nbsp;<br />In addition to these concrete results, one important aspect of our results was the introduciton of new *definitions*.&nbsp; This includes the definition of relative fault-tolerance in the pure connectivity setting, but also the definition of fault-tolerance for emulators, as well as a definition of \"lightness\" (a normalized notion of total weight) for fault tolerant spanners.&nbsp; These new definitions have opened up the door to a wide variety of new problems, which we believe will have lasting impact within the study of network design.</p><br>\n<p>\n Last Modified: 01/24/2025<br>\nModified by: Michael&nbsp;Dinitz</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nThis project was focused on a new definition of fault tolerance for network design problems, known as \"relative\" fault-tolerance. Previous definitions of fault-tolerance are limited in that they do not allow resilience to a large number of faults (even if it is possible to be resilient to them) if there is even a single small set of faults that would cause problems. That is, if there is some small set of faults that will cause problems, then even though we might be able to be resilient to *some* larger sets (though not all), previous definitions do not allow this. We proposed studying two particular network design settings: pure connectivity approximation algorithms, and distance-preserving objects such as spanners and emulators.\nIn the pure connectivity setting, we introduced two new problems based on our definition: Relative Survivable Network Design (a relative version of the classical Survivable Network Design problem), and k-Fault Tolerant Subgraph (a relative version of the classical k-Edge Connected Spanning Subgraph problem). We introduced and studied these problems in two papers [APPROX '22] and [WAOA '23]. We showed good approximations for many reasonable regimes, but also showed that these problems are significantly more difficult than the non-relative versions.\nFor distance-preserving objects, we built on previous work and studied fault-tolerant spanners (subgraphs which approximately preserve distances even after faults). In [PODC '20] we showed that it was possible to design efficient algorithms for them (the previous results were purely mathematical, in that while they showed that good fault-tolerant spanners existed, they did not come with efficient algorithms to actually construct them). In [SODA '21] we improved these results for vertex faults to show efficient algorithm with no loss whatsoever in spanner quality compared to the previous inefficient algorithms. In [SODA '22] we extended this to the case of edge faults, showing that not only are efficient algorithms possible, but edge faults are actually easier than vertex faults in that we can design spanners that are provably sparser. In [ITCS '22] we extended this further to handle vertex faults in *emulators*, which are similar objects to spanners but without the requirement that they be the subgraph. We showed that vertex faults in emulators can be handled at basically the same cost as edge faults in spanners. In [ITCS '23] we extended this further to edge faults in emulators, showing that for most reasonable parameter regimes, edge faults can be handled in an emulator essentially for free.\nIn addition to these concrete results, one important aspect of our results was the introduciton of new *definitions*. This includes the definition of relative fault-tolerance in the pure connectivity setting, but also the definition of fault-tolerance for emulators, as well as a definition of \"lightness\" (a normalized notion of total weight) for fault tolerant spanners. These new definitions have opened up the door to a wide variety of new problems, which we believe will have lasting impact within the study of network design.\t\t\t\t\tLast Modified: 01/24/2025\n\n\t\t\t\t\tSubmitted by: MichaelDinitz\n"
 }
}