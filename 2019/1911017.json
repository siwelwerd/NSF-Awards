{
 "awd_id": "1911017",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Collaborative Research: Fuzzing Cyber-Physical System Development Tool Chains with Deep Learning (DeepFuzz-CPS)",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2019-10-01",
 "awd_exp_date": "2023-09-30",
 "tot_intn_awd_amt": 249918.0,
 "awd_amount": 249918.0,
 "awd_min_amd_letter_date": "2019-07-29",
 "awd_max_amd_letter_date": "2019-07-29",
 "awd_abstract_narration": "Developing a modern technical product such as a car, plane, or a complex medical device includes designing the complex interplay between sensors (which measure physical product and environment state) and actuators (such as small electric motors that control the product). To design this interplay, engineers rely on complex design software tools. This project will address two problems these engineers face. (1) First, little systematic knowledge of the design tools or the resulting designs is available to guide engineers. For example, little is known about how basic design properties (such as various design size measures) relate to design quality attributes (such as design complexity and comprehensibility). This project will thus collect and analyze a large number of publicly available designs to build such knowledge. (2) Second, since the design tools are complex they can contain software bugs. These bugs may in turn silently introduce bugs into widely-deployed safety-critical systems, since product control software generated from designs is often deployed in safety-critical environments. Bugs in such systems often lead to costly product recalls and may have serious consequences. This project will thus develop techniques for automatically finding software bugs in such design tools.\r\n \r\nThis project consists of the following three major components. (1) First, this project will build the largest curated corpus of publicly available cyber-physical system models and related artifacts. Preliminary results analyzing this corpus both confirms and contradicts earlier findings that are based on significantly fewer models, suggesting the utility of a large corpus for future research. (2) Second, to side-step the age-old problem of missing complete formal specifications of cyber-physical system tool chains, this project instead will design a novel scheme to infer the cyber-physical system language validity rules via deep learning from the project's model corpus. Sampling the deep learner will enable generating additional models for the researchers' existing differential cyber-physical system tool chain testing infrastructure. (3) Third, this project will supplement the deep learner's training set via the first systematic cyber-physical system-model mutation scheme based on equivalence modulo inputs. Initial experiments have found several bugs in a commercial cyber-physical system tool chain that have been confirmed by the vendor of the tool chain.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Christoph",
   "pi_last_name": "Csallner",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Christoph Csallner",
   "pi_email_addr": "Csallner@uta.edu",
   "nsf_id": "000528419",
   "pi_start_date": "2019-07-29",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Texas at Arlington",
  "inst_street_address": "701 S NEDDERMAN DR",
  "inst_street_address_2": "",
  "inst_city_name": "ARLINGTON",
  "inst_state_code": "TX",
  "inst_state_name": "Texas",
  "inst_phone_num": "8172722105",
  "inst_zip_code": "760199800",
  "inst_country_name": "United States",
  "cong_dist_code": "25",
  "st_cong_dist_code": "TX25",
  "org_lgl_bus_name": "UNIVERSITY OF TEXAS AT ARLINGTON",
  "org_prnt_uei_num": "",
  "org_uei_num": "LMLUKUPJJ9N3"
 },
 "perf_inst": {
  "perf_inst_name": "University of Texas at Arlington",
  "perf_str_addr": "",
  "perf_city_name": "Arlington",
  "perf_st_code": "TX",
  "perf_st_name": "Texas",
  "perf_zip_code": "760190145",
  "perf_ctry_code": "US",
  "perf_cong_dist": "25",
  "perf_st_cong_dist": "TX25",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 249918.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-c2dbe80e-7fff-e9c6-6f74-7e742e95fa73\"> </span></p>\n<p dir=\"ltr\">For context,&nbsp;Simulink is a de-facto industry standard and a widely used tool in the design of cyber-physical systems, i.e.,&nbsp;in safety-critical industries such as aerospace, automotive, and medical devices.</p>\n<p dir=\"ltr\"><span>This project has produced the following results.</span></p>\n<p dir=\"ltr\"><span>(1) First, we developed SLEMI (</span><a href=\"https://doi.org/10.5281/zenodo.3627640\"><span>https://doi.org/10.5281/zenodo.3627640</span></a><span>) for finding bugs in the Simulink toolchain. SLEMI speeds up our earlier SLforge random Simulink-model generator and testing tool. Instead of generating each Simulink model from scratch, SLEMI can quickly mutate existing models. SLEMI contains novel techniques for (among others) dealing with language features that do not exist in procedural languages. SLEMI found 10 confirmed bugs in the Simulink toolchain.</span></p>\n<p dir=\"ltr\"><span>(2) Second, we developed DeepFuzzSL (</span><a href=\"https://doi.org/10.5281/zenodo.3712482\"><span>https://doi.org/10.5281/zenodo.3712482</span></a><span>), the first technique that employs Long Short Term Memory (LSTM) deep learning to automatically generate valid Simulink models. We also presented SLGPT (</span><a href=\"https://doi.org/10.5281/zenodo.4734223\"><span>https://doi.org/10.5281/zenodo.4734223</span></a><span>), the first use of transfer learning for generating graphical block-diagram models. SLGPT-generated Simulink models are more similar to third-party open-source Simulink models than DeepFuzzSL-generated models. The GPT-2 based SLGPT found a superset of the Simulink toolchain bugs that DeepFuzzSL found.</span></p>\n<p dir=\"ltr\"><span>(3) Third, we released SLNET (</span><a href=\"https://doi.org/10.5281/zenodo.5259648\"><span>https://doi.org/10.5281/zenodo.5259648</span></a><span>), which contains 9,117 third-party Simulink models from 2,837 open-source projects from GitHub and MATLAB Central. SLNET is some 8 times larger than the largest previously released corpus of Simulink models. In contrast to the earlier corpus, SLNET is also self-contained and redistributable, i.e., it only contains Simulink models whose license allows redistribution.</span></p>\n<p dir=\"ltr\"><span>(4) Fourth, we re-collected two corpora of open-source Simulink models (</span><a href=\"https://doi.org/10.6084/m9.figshare.22064969.v2\"><span>https://doi.org/10.6084/m9.figshare.22064969.v2</span></a><span>) and compared them with the largest known related corpus (SLNET). On SLNET we replicated earlier studies and found, among others, that (similar to Java- and C-like languages) in Simulink cyclomatic complexity seems to remain an independently valuable metric.</span></p>\n<p dir=\"ltr\"><span>(5) Fifth, we released EvoSL (</span><a href=\"https://doi.org/10.5281/zenodo.8217495\"><span>https://doi.org/10.5281/zenodo.8217495</span></a><span>), the first large redistributable corpus of open-source Simulink models that contains project change histories. EvoSL contains 924 Git repositories from GitHub with their 3k issues, 2k pull requests, 10k comments, and over 100k commits. On a EvoSL subset we replicate a recent Simulink model change study carried out on a closed-source industrial project.</span></p>\n<p dir=\"ltr\"><span>(6) Sixth, we developed ScoutSL (</span><a href=\"https://doi.org/10.5281/zenodo.8274109\"><span>https://doi.org/10.5281/zenodo.8274109</span></a><span>) and currently run it as a free public service (</span><a href=\"http://scoutsl.net\"><span>http://scoutsl.net</span></a><span>). ScoutSL is a web-based Simulink search engine. Users can search via free-form Google-style keywords and via Simulink model and project metrics (such as models' cyclomatic complexity or the number of GitHub pull requests) in 100k open-source Simulink models from 18k GitHub and MATLAB Central projects.</span></p>\n<p dir=\"ltr\"><span>The research papers describing these results have appeared in selective academic venues. Recordings of some of our research presentations are available on YouTube:</span></p>\n<ul>\n<li><span id=\"docs-internal-guid-0f5d5f8d-7fff-b8bd-291d-124708cb1248\"><a href=\"https://youtu.be/7rlCvIZy-7Q?t=1837\"><span>https://youtu.be/7rlCvIZy-7Q?t=1837</span></a><span> (SLEMI)</span></span></li>\n<li><span><span><span id=\"docs-internal-guid-515ea202-7fff-d26a-0c98-e443f59372d9\"><a href=\"https://youtu.be/DwADkAUr2ys?t=7495\"><span>https://youtu.be/DwADkAUr2ys?t=7495</span></a><span> (DeepFuzzSL)</span></span><br /></span></span></li>\n<li><span><span><span><span><span id=\"docs-internal-guid-7a24cb2f-7fff-ea51-8784-c59846bb40d6\"><a href=\"https://youtu.be/oy6l22xl8Tw\"><span>https://youtu.be/oy6l22xl8Tw</span></a><span> (SLGPT)</span></span><br /></span></span></span></span></li>\n<li><span><span><span><span><span><span><span id=\"docs-internal-guid-0b1246e2-7fff-0061-d5e7-27d1a448ff33\"><a href=\"https://youtu.be/2l6OTSMFZYY\"><span>https://youtu.be/2l6OTSMFZYY</span></a><span> (SLNET)</span></span><br /></span></span></span></span></span></span></li>\n<li><span><span><span><span><span><span><span><span><span id=\"docs-internal-guid-d1f6a680-7fff-1710-9707-7c1b3a30293a\"><a href=\"https://youtu.be/HwsHL8LrVCM\"><span>https://youtu.be/HwsHL8LrVCM</span></a><span> (ScoutSL)</span></span><br /></span></span></span></span></span></span></span></span></li>\n</ul>\n<p dir=\"ltr\">Other researchers have cited our papers and built on our results, tools, and datasets. Specifically, other research teams (e.g.: <a href=\"https://doi.org/10.1145/3540250.3549159\">https://doi.org/10.1145/3540250.3549159</a>, <a href=\"https://doi.org/10.1109/DAC56929.2023.10247877\">https://doi.org/10.1109/DAC56929.2023.10247877</a>, <a href=\"https://doi.org/10.1109/TR.2023.3317643\">https://doi.org/10.1109/TR.2023.3317643</a>, <a href=\"http://dx.doi.org/10.2139/ssrn.4650661\">http://dx.doi.org/10.2139/ssrn.4650661</a>) have directly built on our work in at least the following four ways. (1) First, researchers have mined our datasets to conduct empirical studies of CPS artifacts. (2) Second, researchers have used our tools to generate Simulink models (for tool evaluations or to use our tool as a component of their own tools). (3) Third, researchers have extended our tools' source code to implement novel techniques on top of our tools. (4) Finally, researchers have used our tools in empirical tool comparisons. Among others, this third-party research uncovered dozens of bugs in the Simulink toolchain, of which the Simulink vendor MathWorks has confirmed many reports as new bugs and subsequently fixed them.</p>\n<p dir=\"ltr\"><span>Much of the work has been carried out by graduate students, who have been the lead author of each paper, tool, and dataset we published during this project. With this training, the supervised students have received external recognition. For example, both Shafiul Chowdhury and Sohil Shrestha have accepted full-time positions as Research Scientists at Meta.</span></p>\n<p>&nbsp;</p><br>\n<p>\n Last Modified: 01/22/2024<br>\nModified by: Christoph&nbsp;Csallner</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\n \n\n\nFor context,Simulink is a de-facto industry standard and a widely used tool in the design of cyber-physical systems, i.e.,in safety-critical industries such as aerospace, automotive, and medical devices.\n\n\nThis project has produced the following results.\n\n\n(1) First, we developed SLEMI (https://doi.org/10.5281/zenodo.3627640) for finding bugs in the Simulink toolchain. SLEMI speeds up our earlier SLforge random Simulink-model generator and testing tool. Instead of generating each Simulink model from scratch, SLEMI can quickly mutate existing models. SLEMI contains novel techniques for (among others) dealing with language features that do not exist in procedural languages. SLEMI found 10 confirmed bugs in the Simulink toolchain.\n\n\n(2) Second, we developed DeepFuzzSL (https://doi.org/10.5281/zenodo.3712482), the first technique that employs Long Short Term Memory (LSTM) deep learning to automatically generate valid Simulink models. We also presented SLGPT (https://doi.org/10.5281/zenodo.4734223), the first use of transfer learning for generating graphical block-diagram models. SLGPT-generated Simulink models are more similar to third-party open-source Simulink models than DeepFuzzSL-generated models. The GPT-2 based SLGPT found a superset of the Simulink toolchain bugs that DeepFuzzSL found.\n\n\n(3) Third, we released SLNET (https://doi.org/10.5281/zenodo.5259648), which contains 9,117 third-party Simulink models from 2,837 open-source projects from GitHub and MATLAB Central. SLNET is some 8 times larger than the largest previously released corpus of Simulink models. In contrast to the earlier corpus, SLNET is also self-contained and redistributable, i.e., it only contains Simulink models whose license allows redistribution.\n\n\n(4) Fourth, we re-collected two corpora of open-source Simulink models (https://doi.org/10.6084/m9.figshare.22064969.v2) and compared them with the largest known related corpus (SLNET). On SLNET we replicated earlier studies and found, among others, that (similar to Java- and C-like languages) in Simulink cyclomatic complexity seems to remain an independently valuable metric.\n\n\n(5) Fifth, we released EvoSL (https://doi.org/10.5281/zenodo.8217495), the first large redistributable corpus of open-source Simulink models that contains project change histories. EvoSL contains 924 Git repositories from GitHub with their 3k issues, 2k pull requests, 10k comments, and over 100k commits. On a EvoSL subset we replicate a recent Simulink model change study carried out on a closed-source industrial project.\n\n\n(6) Sixth, we developed ScoutSL (https://doi.org/10.5281/zenodo.8274109) and currently run it as a free public service (http://scoutsl.net). ScoutSL is a web-based Simulink search engine. Users can search via free-form Google-style keywords and via Simulink model and project metrics (such as models' cyclomatic complexity or the number of GitHub pull requests) in 100k open-source Simulink models from 18k GitHub and MATLAB Central projects.\n\n\nThe research papers describing these results have appeared in selective academic venues. Recordings of some of our research presentations are available on YouTube:\n\nhttps://youtu.be/7rlCvIZy-7Q?t=1837 (SLEMI)\nhttps://youtu.be/DwADkAUr2ys?t=7495 (DeepFuzzSL)\n\nhttps://youtu.be/oy6l22xl8Tw (SLGPT)\n\nhttps://youtu.be/2l6OTSMFZYY (SLNET)\n\nhttps://youtu.be/HwsHL8LrVCM (ScoutSL)\n\n\n\n\nOther researchers have cited our papers and built on our results, tools, and datasets. Specifically, other research teams (e.g.: https://doi.org/10.1145/3540250.3549159, https://doi.org/10.1109/DAC56929.2023.10247877, https://doi.org/10.1109/TR.2023.3317643, http://dx.doi.org/10.2139/ssrn.4650661) have directly built on our work in at least the following four ways. (1) First, researchers have mined our datasets to conduct empirical studies of CPS artifacts. (2) Second, researchers have used our tools to generate Simulink models (for tool evaluations or to use our tool as a component of their own tools). (3) Third, researchers have extended our tools' source code to implement novel techniques on top of our tools. (4) Finally, researchers have used our tools in empirical tool comparisons. Among others, this third-party research uncovered dozens of bugs in the Simulink toolchain, of which the Simulink vendor MathWorks has confirmed many reports as new bugs and subsequently fixed them.\n\n\nMuch of the work has been carried out by graduate students, who have been the lead author of each paper, tool, and dataset we published during this project. With this training, the supervised students have received external recognition. For example, both Shafiul Chowdhury and Sohil Shrestha have accepted full-time positions as Research Scientists at Meta.\n\n\n\t\t\t\t\tLast Modified: 01/22/2024\n\n\t\t\t\t\tSubmitted by: ChristophCsallner\n"
 }
}