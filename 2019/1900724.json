{
 "awd_id": "1900724",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "CNS Core: Medium: Collaborative Research: Persistent memory objects for consistent sharing in Non-Volatile Main Memories",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Jason Hallstrom",
 "awd_eff_date": "2019-10-01",
 "awd_exp_date": "2023-09-30",
 "tot_intn_awd_amt": 499719.0,
 "awd_amount": 523719.0,
 "awd_min_amd_letter_date": "2019-07-19",
 "awd_max_amd_letter_date": "2021-09-20",
 "awd_abstract_narration": "The continual performance growth of data center servers is critical to the nation's economic competitiveness and as a catalyst for progress in scientific endeavors. Two important data center components are the main memory, which has fast access but can only store data temporarily, and storage, which keeps data permanently but suffers from slow access. Recent technology advances have brought in a new non-volatile memory, now commercially available, that can both host permanent data and be accessed quickly. However, to reach its potential, utilizing these new memory technologies requires rethinking of how data should be persistently and efficiently stored.\r\n \r\nThis proposal describes a new abstraction for storing persistent data in non-volatile memory: hyperfiles, which are long lived, provide fast access, and can be quickly attached to and detached from a process address space. Hyperfiles provide naming and permission characteristics similar to (but faster than) files, and speed closer to memory. They are accessed directly through loads/stores to avoid system call overhead. This project also investigates new sharing semantics for hyperfiles, allowing non-cooperating processes to share them simultaneously and safely, while keeping the crash recovery property. Architecture support to accelerate hyperfile sharing will also be designed and evaluated.\r\n \r\nThis project will enable fast access to persistent data by reducing overheads inherent in file access, and thus enable more concurrent use of data through strong sharing semantics. Big-data workloads becoming common across all industries will either perform better or require fewer resources. The software and prototyping artifacts produced will enable other researchers to further enhance the design, and to adapt workloads to take advantage of the hyperfile abstraction. The education and outreach components of this plan will train the next generation of programmers on use of persistent memory, and will encourage underrepresented students to join the next generation of programmers.\r\n \r\nThe project will maintain data, code, results, publications, and simulator artifacts for the duration of the project plus five years afterward. Each artifact will be released as it reaches sufficient maturity. They will be posted at: https://sites.google.com/view/hyperfile.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Yan",
   "pi_last_name": "Solihin",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Yan Solihin",
   "pi_email_addr": "yan.solihin@ucf.edu",
   "nsf_id": "000299551",
   "pi_start_date": "2019-07-19",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "The University of Central Florida Board of Trustees",
  "inst_street_address": "4000 CENTRAL FLORIDA BLVD",
  "inst_street_address_2": "",
  "inst_city_name": "ORLANDO",
  "inst_state_code": "FL",
  "inst_state_name": "Florida",
  "inst_phone_num": "4078230387",
  "inst_zip_code": "328168005",
  "inst_country_name": "United States",
  "cong_dist_code": "10",
  "st_cong_dist_code": "FL10",
  "org_lgl_bus_name": "THE UNIVERSITY OF CENTRAL FLORIDA BOARD OF TRUSTEES",
  "org_prnt_uei_num": "",
  "org_uei_num": "RD7MXJV7DKT9"
 },
 "perf_inst": {
  "perf_inst_name": "University of Central Florida",
  "perf_str_addr": "4353 Scorpius St",
  "perf_city_name": "Orlando",
  "perf_st_code": "FL",
  "perf_st_name": "Florida",
  "perf_zip_code": "328160120",
  "perf_ctry_code": "US",
  "perf_cong_dist": "10",
  "perf_st_cong_dist": "FL10",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "171400",
   "pgm_ele_name": "Special Projects - CNS"
  },
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7354",
   "pgm_ref_txt": "COMPUTER SYSTEMS"
  },
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0121",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 328101.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 24000.0
  },
  {
   "fund_oblg_fiscal_yr": 2021,
   "fund_oblg_amt": 171618.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The continual performance growth of data center servers is critical to the nation's economic competitiveness and as a catalyst for progress in scientific endeavors. Two important data center components are the main memory, which has fast access but can only store data temporarily, and storage, which keeps data permanently but suffers from slow access. Recent technology advances brought in a new type of memory memory: persistent memory (PM). Now commercially available, PM can host permanent data and be accessed quickly. However, to reach its potential, utilizing these new memory technologies requires rethinking of how data should be persistently and efficiently stored.&nbsp;</p>\n<p><br />This project explored a new abstraction for storing persistent data in non-volatile memory which are long lived, provide fast access, and can be quickly attached to and detached from a process address space. The abstraction, hyperfile, provides naming and permission characteristics similar to (but faster than) files, and speed closer to memory. They are accessed directly through loads/stores to avoid system call overhead. This project also investigated new sharing semantics for hyperfiles, allowing non-cooperating processes to share them simultaneously and safely, while keeping the crash recovery property. Architecture support to accelerate hyperfile sharing will also be designed and evaluated. This project will enable fast access to persistent data by reducing overheads inherent in file access, and thus enable more concurrent use of data through strong sharing semantics.&nbsp;</p>\n<p>The project resulted in a hyperfile design that was implemented in a real operating system (Linux), and several applications were ported to use it. The design provided a crash consistent guarantee for a hyperfile where upon a software or hardware crash, data in memory is not lost. The design also provided consistency semantics that provides safe sharing across processes, which allowed non-cooperative processes to share data. The project also resulted in an architecture design that supports for the semantics of efficient and secure common-case sharing. These findings and designs have been published in several conferences and journals. Finally, the education and outreach components of this plan trained the next generation of programmers on use of persistent memory.&nbsp;</p><br>\n<p>\n Last Modified: 12/18/2023<br>\nModified by: Yan&nbsp;Solihin</p></div>\n<div class=\"porSideCol\"\n><div class=\"each-gallery\">\n<div class=\"galContent\" id=\"gallery0\">\n<div class=\"photoCount\" id=\"photoCount0\">\n\t\t\t\t\t\t\t\t\tImage\n\t\t\t\t\t\t\t\t</div>\n<div class=\"galControls onePhoto\" id=\"controls0\"></div>\n<div class=\"galSlideshow\" id=\"slideshow0\"></div>\n<div class=\"galEmbox\" id=\"embox\">\n<div class=\"image-title\"></div>\n</div>\n</div>\n<div class=\"galNavigation onePhoto\" id=\"navigation0\">\n<ul class=\"thumbs\" id=\"thumbs0\">\n<li>\n<a href=\"/por/images/Reports/POR/2023/1900724/1900724_10623307_1702926438781_disagg--rgov-214x142.png\" original=\"/por/images/Reports/POR/2023/1900724/1900724_10623307_1702926438781_disagg--rgov-800width.png\" title=\"Example system with remote non-volatile memory\"><img src=\"/por/images/Reports/POR/2023/1900724/1900724_10623307_1702926438781_disagg--rgov-66x44.png\" alt=\"Example system with remote non-volatile memory\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Example system with remote non-volatile memory pool.</div>\n<div class=\"imageCredit\">Yan Solihin</div>\n<div class=\"imagePermisssions\">Royalty-free (unrestricted use)</div>\n<div class=\"imageSubmitted\">Yan&nbsp;Solihin\n<div class=\"imageTitle\">Example system with remote non-volatile memory</div>\n</div>\n</li></ul>\n</div>\n</div></div>\n</div>\n",
  "por_txt_cntn": "\n\nThe continual performance growth of data center servers is critical to the nation's economic competitiveness and as a catalyst for progress in scientific endeavors. Two important data center components are the main memory, which has fast access but can only store data temporarily, and storage, which keeps data permanently but suffers from slow access. Recent technology advances brought in a new type of memory memory: persistent memory (PM). Now commercially available, PM can host permanent data and be accessed quickly. However, to reach its potential, utilizing these new memory technologies requires rethinking of how data should be persistently and efficiently stored.\n\n\n\nThis project explored a new abstraction for storing persistent data in non-volatile memory which are long lived, provide fast access, and can be quickly attached to and detached from a process address space. The abstraction, hyperfile, provides naming and permission characteristics similar to (but faster than) files, and speed closer to memory. They are accessed directly through loads/stores to avoid system call overhead. This project also investigated new sharing semantics for hyperfiles, allowing non-cooperating processes to share them simultaneously and safely, while keeping the crash recovery property. Architecture support to accelerate hyperfile sharing will also be designed and evaluated. This project will enable fast access to persistent data by reducing overheads inherent in file access, and thus enable more concurrent use of data through strong sharing semantics.\n\n\nThe project resulted in a hyperfile design that was implemented in a real operating system (Linux), and several applications were ported to use it. The design provided a crash consistent guarantee for a hyperfile where upon a software or hardware crash, data in memory is not lost. The design also provided consistency semantics that provides safe sharing across processes, which allowed non-cooperative processes to share data. The project also resulted in an architecture design that supports for the semantics of efficient and secure common-case sharing. These findings and designs have been published in several conferences and journals. Finally, the education and outreach components of this plan trained the next generation of programmers on use of persistent memory.\t\t\t\t\tLast Modified: 12/18/2023\n\n\t\t\t\t\tSubmitted by: YanSolihin\n"
 }
}