{
 "awd_id": "1908233",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Collaborative Research: Understanding and Evolving Search-based Software Improvement",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2019-10-01",
 "awd_exp_date": "2022-09-30",
 "tot_intn_awd_amt": 249999.0,
 "awd_amount": 249999.0,
 "awd_min_amd_letter_date": "2019-08-03",
 "awd_max_amd_letter_date": "2019-08-03",
 "awd_abstract_narration": "Software is pervasive, supporting entertainment, finances, health care, travel, and social interactions. Latent software glitches, or bugs, are costly to diagnose and repair. Today, most software bugs are repaired by highly-trained software engineers, but it is uneconomical to repair all such bugs manually, and even for important security-critical problems there can be long delays between bug discoveries and fixes. This project develops improved methods for automatically finding repairs for software bugs, thus addressing a key component of the high cost of software maintenance. Techniques for automated software improvement have matured over the past\r\ndecade, and industry has begun adopting the more successful approaches. Despite these successes, current methods can repair only a fraction of presented bugs. The project focuses on extending the range of existing techniques, which search for small changes to the buggy program that will repair the error. Current approaches use search that is analogous to \"looking for one's keys under a streetlamp\": they search where it is easy, not where it would be most effective. By leveraging insights from evolutionary\r\nbiology and on-line learning methods, new algorithms will be developed that explore more aggressively, thus finding more repairs for more complex bugs more often and more consistently. In addition to repairing bugs, the new algorithms will be tested on other aspects of software improvement, for instance, reducing how much energy a program uses when it executes.\r\n\r\nAll search algorithms face a tradeoff between exploration and exploitation, balancing continued refinement of current good solutions against looking for even better solutions farther afield. Current methods for search-based software improvement overemphasize exploitation, limiting searches to only one or two changes to the original program. To search more aggressively, the project focuses on the space of \"neutral\" or \"safe\" program edits, adapting the concept of the space of neutral mutations in biology, where there is extensive theory and analysis to describe its topology and account for negative interactions among mutations. The project: (1) adapts these analyses to the software domain, (2) uses them to design new program-improvement algorithms, and (3) tests the algorithms quantitatively using three important software-improvement domains: software repair, energy optimization, and optimizing speed/accuracy tradeoffs. The resulting algorithm is a radical departure from existing search-based methods, because it eliminates two key components:  selection of the highest-performing samples from a population and recombination of high-performing partial solutions. By focusing on exploration, and by quantifying important properties of the search space, the project complements work by other researchers to improve mutation operators, fault localization, and fitness functions.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Stephanie",
   "pi_last_name": "Forrest",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Stephanie Forrest",
   "pi_email_addr": "Stephanie.Forrest@asu.edu",
   "nsf_id": "000427405",
   "pi_start_date": "2019-08-03",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Arizona State University",
  "inst_street_address": "660 S MILL AVENUE STE 204",
  "inst_street_address_2": "",
  "inst_city_name": "TEMPE",
  "inst_state_code": "AZ",
  "inst_state_name": "Arizona",
  "inst_phone_num": "4809655479",
  "inst_zip_code": "852813670",
  "inst_country_name": "United States",
  "cong_dist_code": "04",
  "st_cong_dist_code": "AZ04",
  "org_lgl_bus_name": "ARIZONA STATE UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "NTLHJXM55KZ6"
 },
 "perf_inst": {
  "perf_inst_name": "Arizona State University",
  "perf_str_addr": "P.O. Box 876011",
  "perf_city_name": "Tempe",
  "perf_st_code": "AZ",
  "perf_st_name": "Arizona",
  "perf_zip_code": "852876011",
  "perf_ctry_code": "US",
  "perf_cong_dist": "04",
  "perf_st_cong_dist": "AZ04",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  },
  {
   "pgm_ref_code": "9102",
   "pgm_ref_txt": "WOMEN, MINORITY, DISABLED, NEC"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 249999.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>All search algorithms face a tradeoff between exploration and exploitation, balancing continued refinement of known good solutions against looking for even better solutions farther afield. Existing methods for search-based software improvement, e.g., finding repairs for software bugs, overemphasize exploitation.&nbsp; These earlier methods limit searches to only one or two changes to the original program. To search more aggressively, this project developed, evaluated, and disseminated new algorithms that address this limitation. The algorithms focus on the space of neutral, or ?safe?, program edits, following biology, where there is extensive theory and analysis to describe topological properties of these spaces.&nbsp; By adapting these analyses to the software domain, the project produced a new algorithm, MWRepair, that finds repairs for software bugs.&nbsp; Evaluations on several different data sets and comparisons to other popular software repair methods showed that MWRepair often finds repairs that other methods have missed, and in many cases, it finds repairs more successfully and efficiently than its closest algorithmic relatives. The project also made improvements to the way that programs are presented to repair algorithms; characterized how different repair methods navigate the space of possible programs; studied how human novices and experts search for bug repairs; and applied evolutionary algorithms to new domains. &nbsp;<br /><br />The project results were published in peer-reviewed discipline-specific papers, and highlighted in several general perspective pieces intended for broader audiences.&nbsp; The PIs gave numerous keynote addressess and invited presentations, some to software engineering technical audiences, some to interdisciplinary scientific audiences, and some to nontechnical public audiences.&nbsp; The human study of how experts and novices search while debugging includes suggestions for pedagogy that genearalize to multiple introductory computer programming classes, opening a pathway for future translational research to improve how computer programming is taught to different student populations.&nbsp; The project provided funding to support several Ph.D students, whose dissertations are based on the project.&nbsp; It also provided research opportunities for undergraduate students. &nbsp;<br /><br /><br /></p><br>\n<p>\n\t\t\t\t      \tLast Modified: 01/02/2023<br>\n\t\t\t\t\tModified by: Stephanie&nbsp;Forrest</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nAll search algorithms face a tradeoff between exploration and exploitation, balancing continued refinement of known good solutions against looking for even better solutions farther afield. Existing methods for search-based software improvement, e.g., finding repairs for software bugs, overemphasize exploitation.  These earlier methods limit searches to only one or two changes to the original program. To search more aggressively, this project developed, evaluated, and disseminated new algorithms that address this limitation. The algorithms focus on the space of neutral, or ?safe?, program edits, following biology, where there is extensive theory and analysis to describe topological properties of these spaces.  By adapting these analyses to the software domain, the project produced a new algorithm, MWRepair, that finds repairs for software bugs.  Evaluations on several different data sets and comparisons to other popular software repair methods showed that MWRepair often finds repairs that other methods have missed, and in many cases, it finds repairs more successfully and efficiently than its closest algorithmic relatives. The project also made improvements to the way that programs are presented to repair algorithms; characterized how different repair methods navigate the space of possible programs; studied how human novices and experts search for bug repairs; and applied evolutionary algorithms to new domains.  \n\nThe project results were published in peer-reviewed discipline-specific papers, and highlighted in several general perspective pieces intended for broader audiences.  The PIs gave numerous keynote addressess and invited presentations, some to software engineering technical audiences, some to interdisciplinary scientific audiences, and some to nontechnical public audiences.  The human study of how experts and novices search while debugging includes suggestions for pedagogy that genearalize to multiple introductory computer programming classes, opening a pathway for future translational research to improve how computer programming is taught to different student populations.  The project provided funding to support several Ph.D students, whose dissertations are based on the project.  It also provided research opportunities for undergraduate students.  \n\n\n\n\n\t\t\t\t\tLast Modified: 01/02/2023\n\n\t\t\t\t\tSubmitted by: Stephanie Forrest"
 }
}