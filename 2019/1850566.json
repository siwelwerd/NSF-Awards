{
 "awd_id": "1850566",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CRII: CSR: Programmable Heterogeneous Memory Systems via Multiple Address Spaces and RAM Lake",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032925197",
 "po_email": "mmcclure@nsf.gov",
 "po_sign_block_name": "Marilyn McClure",
 "awd_eff_date": "2019-07-01",
 "awd_exp_date": "2022-06-30",
 "tot_intn_awd_amt": 174999.0,
 "awd_amount": 477817.0,
 "awd_min_amd_letter_date": "2019-02-11",
 "awd_max_amd_letter_date": "2020-10-15",
 "awd_abstract_narration": "Computer systems store an increasingly vast amount of data. The major limiting factor for computer performance is data retrieval from memory, not data processing. At the same time, these systems integrate various physical storage technologies adding complexity to data retrieval. The project will develop new improvements to computing system hardware to increase data retrieval performance in systems with many memory technologies by addressing two initial questions: how to move data between memory technologies efficiently and how to  represent different types of data flexibly for both the programmer and the hardware system.\r\n\r\nThis project will produce new hardware mechanisms and software interfaces that will increase the performance and simplify the programming of heterogeneous memory systems. Additionally, the work will expand the understanding of how software will use these nascent heterogeneous memory systems by deeply studying current and emerging systems and applications. This work will be broken into two main thrusts. First, designing novel hardware support for fine-grained user-directed and system-directed data movement, and second, designing hardware support for multiple address spaces to improve the interfaces to heterogeneous memory for programmers and system software.\r\n\r\nComputing systems ranging from datacenters and supercomputers to mobile devices and Internet-of-Things systems are processing an increasing amount of data, which is driving the trend toward heterogeneous memory systems. The proposed research will increase the performance and usability of these computing systems. This research will be presented to the scientific community and the public through conference publications, software repositories, and blog posts on a public website. Additionally, this project will develop an upper-divisional undergraduate/introductory graduate class on programming heterogeneous systems.\r\n\r\nAll data, software, and other artifacts generated through this research will be carefully managed and archived through third party repositories such as GitHub and cloud service providers. The software artifacts will be maintained indefinitely using publicly accessible history tracking version control systems. Data that can be regenerated by re-running simulation software will be kept for at least five years, as well as the foreseeable future. Links to repositories containing the simulators used, code produced, and data used in the published results can be found at https://arch.cs.ucdavis.edu/projects/heterogeneous-memory.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Jason",
   "pi_last_name": "Lowe-Power",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Jason Lowe-Power",
   "pi_email_addr": "jlowepower@ucdavis.edu",
   "nsf_id": "000784421",
   "pi_start_date": "2019-02-11",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of California-Davis",
  "inst_street_address": "1850 RESEARCH PARK DR STE 300",
  "inst_street_address_2": "",
  "inst_city_name": "DAVIS",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "5307547700",
  "inst_zip_code": "956186153",
  "inst_country_name": "United States",
  "cong_dist_code": "04",
  "st_cong_dist_code": "CA04",
  "org_lgl_bus_name": "UNIVERSITY OF CALIFORNIA, DAVIS",
  "org_prnt_uei_num": "",
  "org_uei_num": "TX2DAGQPENZ5"
 },
 "perf_inst": {
  "perf_inst_name": "University of California-Davis",
  "perf_str_addr": "1850 Research Park Dr",
  "perf_city_name": "Davis",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "956186153",
  "perf_ctry_code": "US",
  "perf_cong_dist": "04",
  "perf_st_cong_dist": "CA04",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "026Y00",
   "pgm_ele_name": "CRII CISE Research Initiation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "8228",
   "pgm_ref_txt": "CISE Resrch Initiatn Initiatve"
  },
  {
   "pgm_ref_code": "8237",
   "pgm_ref_txt": "CISE Interagency Agreements"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021RB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 174999.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 302818.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>In this project, we took two complementary approaches to investigating ways to improve the performance and programmability of emerging computing systems. We focused on two trends emerging in computer systems: the need for secure system design and the increasing heterogeneity in memory technologies. We investigated heterogeneous systems from the perspective of secure vs insecure memory and different memory technologies (i.e., DRAM and 3DXPoint). We performed system analysis and discovered that current techniques to enable programmability in these systems perform poorly. Throughout this project, we generated models and code which we disseminated by releasing it as open-source software and incorporating our changes into upstream projects. We contributed to large-scale open-source projects such as the gem5 simulator and Julia programming language. Additionally, we disseminated our work through papers published at conferences and workshops. Through this project we also trained in part three PhD students, four masters students, and four undergraduate students.</p>\n<p>In secure system design, we analyzed current technologies including Intel?s SGX and AMD?s SEV in the high-performance computing (HPC) space and found that while SEV can be configured such that there are relatively low performance overheads, SGX is inappropriate for HPC workloads. Further, we developed models for the open-source simulator gem5 for the open-source RISC-V trusted execution environment Keystone to enable future research which will overcome the performance penalty of current commercial designs.</p>\n<p>Focusing on computing systems with multiple different kinds of memory technologies, we discovered that the implementation of programmer-transparent data movement operations in commercially available hardware can cause significant performance degradation for important workloads including training large-scale machine learning applications and graph analytics. We learned that this performance degradation is caused by between 3 times and 5 times more memory accesses than is strictly necessary. We proposed a new software-based technique which manages data movement at an object granularity to overcome some of the performance pathologies of current hardware-based data movement techniques. This work, AutoTM, performs up to 3 times better than the commercially available techniques.</p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 08/24/2022<br>\n\t\t\t\t\tModified by: Jason&nbsp;Lowe-Power</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nIn this project, we took two complementary approaches to investigating ways to improve the performance and programmability of emerging computing systems. We focused on two trends emerging in computer systems: the need for secure system design and the increasing heterogeneity in memory technologies. We investigated heterogeneous systems from the perspective of secure vs insecure memory and different memory technologies (i.e., DRAM and 3DXPoint). We performed system analysis and discovered that current techniques to enable programmability in these systems perform poorly. Throughout this project, we generated models and code which we disseminated by releasing it as open-source software and incorporating our changes into upstream projects. We contributed to large-scale open-source projects such as the gem5 simulator and Julia programming language. Additionally, we disseminated our work through papers published at conferences and workshops. Through this project we also trained in part three PhD students, four masters students, and four undergraduate students.\n\nIn secure system design, we analyzed current technologies including Intel?s SGX and AMD?s SEV in the high-performance computing (HPC) space and found that while SEV can be configured such that there are relatively low performance overheads, SGX is inappropriate for HPC workloads. Further, we developed models for the open-source simulator gem5 for the open-source RISC-V trusted execution environment Keystone to enable future research which will overcome the performance penalty of current commercial designs.\n\nFocusing on computing systems with multiple different kinds of memory technologies, we discovered that the implementation of programmer-transparent data movement operations in commercially available hardware can cause significant performance degradation for important workloads including training large-scale machine learning applications and graph analytics. We learned that this performance degradation is caused by between 3 times and 5 times more memory accesses than is strictly necessary. We proposed a new software-based technique which manages data movement at an object granularity to overcome some of the performance pathologies of current hardware-based data movement techniques. This work, AutoTM, performs up to 3 times better than the commercially available techniques.\n\n \n\n\t\t\t\t\tLast Modified: 08/24/2022\n\n\t\t\t\t\tSubmitted by: Jason Lowe-Power"
 }
}