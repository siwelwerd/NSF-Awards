{
 "awd_id": "1909516",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Detecting the 1%: Growing the Science of Vulnerability Detection",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2019-10-01",
 "awd_exp_date": "2023-09-30",
 "tot_intn_awd_amt": 499998.0,
 "awd_amount": 499998.0,
 "awd_min_amd_letter_date": "2019-07-08",
 "awd_max_amd_letter_date": "2019-07-08",
 "awd_abstract_narration": "Daily, news reports reveal the latest increasingly sophisticated security attacks that threaten our national security, our cyber infrastructure, our health, our finances, our children, and democracy itself.  Yet, studies indicate that discovered vulnerabilities can be very damaging but are rare, appearing in about 1-4% of software files. Finding vulnerabilities has been described as \"searching for a needing in a haystack.\" But, protecting the American people, the American homeland, and the American way of life means that software organizations need to detect vulnerabilities so that they can be fixed before the product is used by customers, which makes the vulnerabilities available to attackers. This project will perform studies to understand the characteristics and location of the most risky vulnerabilities so that special effort can be spent and automated tools can be developed to detect the vulnerabilities. The work will improve the ability of software organizations to produce secure software products so that people can rely upon computer systems to perform critical functions and to process, store, and communicate sensitive information securely.  The research project also involves the mentoring of PhD students and innovation in software-security teaching for undergraduate and graduate students.\r\n\r\nMaking informed decisions on what code to review and test can improve a team's ability to find and remove more vulnerabilities. Therefore, security engineers  looking to prioritize security inspection and testing efforts may be better served by vulnerability-based detection techniques and tools and effective vulnerability prediction.  The goal of this project is to aid software practitioners in detecting exploitable vulnerabilities through empirical study of the characteristics of vulnerabilities and through the development and evaluation of prediction models enhanced with recent research from artificial intelligence.  The project will explore characteristics of vulnerabilities with a focus on those that pose the highest security risk. Knowledge about the fundamental characteristics of vulnerabilities can be used in the development of vulnerability-focused tools to aid teams in effectively and efficiently detecting vulnerabilities. The fundamental vulnerability characteristics can also be used to develop novel metrics and methods for building vulnerability prediction models enhanced with recent research from artificial intelligence.  The project team will also provide a testbed and test data to help other security researchers.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Laurie",
   "pi_last_name": "Williams",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Laurie Williams",
   "pi_email_addr": "williams@csc.ncsu.edu",
   "nsf_id": "000193117",
   "pi_start_date": "2019-07-08",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Timothy",
   "pi_last_name": "Menzies",
   "pi_mid_init": "J",
   "pi_sufx_name": "",
   "pi_full_name": "Timothy J Menzies",
   "pi_email_addr": "timm@ieee.org",
   "nsf_id": "000248284",
   "pi_start_date": "2019-07-08",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "North Carolina State University",
  "inst_street_address": "2601 WOLF VILLAGE WAY",
  "inst_street_address_2": "",
  "inst_city_name": "RALEIGH",
  "inst_state_code": "NC",
  "inst_state_name": "North Carolina",
  "inst_phone_num": "9195152444",
  "inst_zip_code": "276950001",
  "inst_country_name": "United States",
  "cong_dist_code": "02",
  "st_cong_dist_code": "NC02",
  "org_lgl_bus_name": "NORTH CAROLINA STATE UNIVERSITY",
  "org_prnt_uei_num": "U3NVH931QJJ3",
  "org_uei_num": "U3NVH931QJJ3"
 },
 "perf_inst": {
  "perf_inst_name": "North Carolina State University",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "NC",
  "perf_st_name": "North Carolina",
  "perf_zip_code": "276958206",
  "perf_ctry_code": "US",
  "perf_cong_dist": "02",
  "perf_st_cong_dist": "NC02",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  },
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 499998.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p class=\"p1\">This project has<span> </span>worked to bridge two approaches to handling data scarcity in security-based reearch and reasoning</p>\n<ol class=\"ol1\">\n<li class=\"li1\">Data collection (domain -&gt; data)</li>\n<li class=\"li1\">Inference from data (data -&gt; decision)</li>\n</ol>\n<p class=\"p1\">In both tasks, we have explored and assessed widely used methods and (in many cases) found them lacking.</p>\n<p class=\"p1\">For the first task, we have collected and published much new data related to vulnerabilities based upon an extensive vulnerability detection effort using seven vulnerability detection techniques/tools on a 4 million line of code open-source Java-based healthcare application.&nbsp; We were able to identify the the techniques/tools that were most efficient and most effective in detecting vulnerabilities -- but especially learned that no one technique/tools is enough to find all types of vulnerabilities [1, 2].</p>\n<p class=\"p1\">For the second task, we reviewed numerous machine learning methods for handling rare target classes. Initially, we recommended generative adversarial&nbsp; networks [3] but since then have come to realize that that better performance can be achieved via other methods (our recursive random project method, which scale much better) perform better [4]. Also, we found that while tuning these tools, we can create a large number of vulnerabilities detectors which similar performance yet which, internally, are very different. This lead&nbsp; to the development of an&nbsp; successful adversarial defect scheme where a&nbsp; learner build a large number of equally effective&nbsp; vulnerability defectors, they humped round them all (at random) at runtime [5].</p>\n<p class=\"p2\">&nbsp;</p>\n<p class=\"p2\">&nbsp;</p>\n<p class=\"p1\">[1] Sarah Elder, Nusrat Zahan, Rui Shu, Monica Metro, Valerie Kozarev, Tim Menzies, and Laurie Williams,&nbsp;&nbsp;  Do I really need all this work to find vulnerabilities? An empirical  case study comparing vulnerability detection techniques on a Java  application, &nbsp;Empirical Software Engineering journal, volume 27, article  154 (2022).</p>\n<p class=\"p1\">[2] Aishwarya Seth, Saikath Bhattacharya, Sarah Elder, Nusrat Zahan, and Laurie Williams:&nbsp; Comparing Effectiveness and Efficiency of Interactive Application Security Testing (IAST) and Runtime Application Self-Protection (RASP) Tools in a Large Java-based System, submitted to Empirical Software Engineering journal, available at https://arxiv.org/abs/2312.17726</p>\n<p class=\"p1\">[3] Rui Shu,&nbsp;<a href=\"https://dblp.org/pid/218/5181.html\">Tianpei Xia</a>,&nbsp;<a href=\"https://dblp.org/pid/w/LaurieAWilliams.html\">Laurie A. Williams</a>,&nbsp;<a href=\"https://dblp.org/pid/m/TimMenzies.html\">Tim Menzies</a>: <strong>Dazzle: Using Optimized Generative Adversarial Networks to Address Security Data Class Imbalance Issue.</strong>&nbsp;<a href=\"https://dblp.org/db/conf/msr/msr2022.html#ShuXWM22\">MSR&nbsp;2022</a>:&nbsp;144-155</p>\n<p class=\"p1\">[4] Tim Menzies et al. Handling rare data, the case against SMOTE. Submitted, IEEE Access 2023.</p>\n<p class=\"p1\">[5]<span>&nbsp; </span>Rui Shu,&nbsp;<a href=\"https://dblp.org/pid/218/5181.html\">Tianpei Xia</a>,&nbsp;<a href=\"https://dblp.org/pid/w/LaurieAWilliams.html\">Laurie A. Williams</a>,&nbsp;<a href=\"https://dblp.org/pid/m/TimMenzies.html\">Tim Menzies</a> <strong>Omni: automated ensemble with unexpected models against adversarial evasion attack.</strong>&nbsp;<a href=\"https://dblp.org/db/journals/ese/ese27.html#ShuXWM22\">Empir. Softw. Eng.&nbsp;27(1)</a>:&nbsp;26&nbsp;(2022)</p>\n<p>&nbsp;</p><br>\n<p>\n Last Modified: 01/30/2024<br>\nModified by: Laurie&nbsp;Williams</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nThis project has worked to bridge two approaches to handling data scarcity in security-based reearch and reasoning\n\nData collection (domain - data)\nInference from data (data - decision)\n\n\n\nIn both tasks, we have explored and assessed widely used methods and (in many cases) found them lacking.\n\n\nFor the first task, we have collected and published much new data related to vulnerabilities based upon an extensive vulnerability detection effort using seven vulnerability detection techniques/tools on a 4 million line of code open-source Java-based healthcare application. We were able to identify the the techniques/tools that were most efficient and most effective in detecting vulnerabilities -- but especially learned that no one technique/tools is enough to find all types of vulnerabilities [1, 2].\n\n\nFor the second task, we reviewed numerous machine learning methods for handling rare target classes. Initially, we recommended generative adversarial networks [3] but since then have come to realize that that better performance can be achieved via other methods (our recursive random project method, which scale much better) perform better [4]. Also, we found that while tuning these tools, we can create a large number of vulnerabilities detectors which similar performance yet which, internally, are very different. This lead to the development of an successful adversarial defect scheme where a learner build a large number of equally effective vulnerability defectors, they humped round them all (at random) at runtime [5].\n\n\n\n\n\n\n\n\n[1] Sarah Elder, Nusrat Zahan, Rui Shu, Monica Metro, Valerie Kozarev, Tim Menzies, and Laurie Williams,  Do I really need all this work to find vulnerabilities? An empirical  case study comparing vulnerability detection techniques on a Java  application, Empirical Software Engineering journal, volume 27, article  154 (2022).\n\n\n[2] Aishwarya Seth, Saikath Bhattacharya, Sarah Elder, Nusrat Zahan, and Laurie Williams: Comparing Effectiveness and Efficiency of Interactive Application Security Testing (IAST) and Runtime Application Self-Protection (RASP) Tools in a Large Java-based System, submitted to Empirical Software Engineering journal, available at https://arxiv.org/abs/2312.17726\n\n\n[3] Rui Shu,Tianpei Xia,Laurie A. Williams,Tim Menzies: Dazzle: Using Optimized Generative Adversarial Networks to Address Security Data Class Imbalance Issue.MSR2022:144-155\n\n\n[4] Tim Menzies et al. Handling rare data, the case against SMOTE. Submitted, IEEE Access 2023.\n\n\n[5] Rui Shu,Tianpei Xia,Laurie A. Williams,Tim Menzies Omni: automated ensemble with unexpected models against adversarial evasion attack.Empir. Softw. Eng.27(1):26(2022)\n\n\n\t\t\t\t\tLast Modified: 01/30/2024\n\n\t\t\t\t\tSubmitted by: LaurieWilliams\n"
 }
}