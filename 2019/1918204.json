{
 "awd_id": "1918204",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "FMitF: Track II: Symbolic Network Simulator",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Alexander Sprintson",
 "awd_eff_date": "2019-11-01",
 "awd_exp_date": "2022-04-30",
 "tot_intn_awd_amt": 99941.0,
 "awd_amount": 99941.0,
 "awd_min_amd_letter_date": "2019-08-23",
 "awd_max_amd_letter_date": "2019-08-23",
 "awd_abstract_narration": "Network programs, such as network protocols and applications, play essential roles on the Internet. However, their correctness is difficult to test, because their behaviors depend on their network environments, but the space of all possible network environments is prohibitively large. Symbolic execution, as a powerful program-analysis technique, can systemically and efficiently explore a large space by leveraging the equivalence classes of cases in the space. However, a significant barrier in using symbolic execution to test network programs is the substantial effort of instrumenting and modifying network programs to model their symbolic network environments. This project provides a powerful and general platform of symbolic network environments so that network programs can be more efficiently and easily tested using symbolic execution for various purposes, such as for finding low-probability bugs, and measuring worst-case performance. \r\n\r\nThis project develops symbolic network environments by leveraging a well-developed and widely used network simulator, NS-3. Specifically, this project extends NS-3 and develops a symbolic network simulator, called SymNS-3, to symbolically test network programs in various symbolic network environments. SymNS-3 is designed to be easy to use: The application program interface (API) of NS-3 will be extended so that a tester can easily and flexibly define a customized symbolic network environment by just calling the APIs in a simulation script without the need to laboriously instrument the NS-3 simulator. SymNS-3 is also designed to be efficient: multiple NS-3 core components will be re-designed in order to exponentially reduce the number of explored program execution paths while still generating the correct simulation results.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Lisong",
   "pi_last_name": "Xu",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Lisong Xu",
   "pi_email_addr": "xu@cse.unl.edu",
   "nsf_id": "000250125",
   "pi_start_date": "2019-08-23",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Nebraska-Lincoln",
  "inst_street_address": "2200 VINE ST # 830861",
  "inst_street_address_2": "",
  "inst_city_name": "LINCOLN",
  "inst_state_code": "NE",
  "inst_state_name": "Nebraska",
  "inst_phone_num": "4024723171",
  "inst_zip_code": "685032427",
  "inst_country_name": "United States",
  "cong_dist_code": "01",
  "st_cong_dist_code": "NE01",
  "org_lgl_bus_name": "BOARD OF REGENTS OF THE UNIVERSITY OF NEBRASKA",
  "org_prnt_uei_num": "",
  "org_uei_num": "HTQ6K6NJFHA6"
 },
 "perf_inst": {
  "perf_inst_name": "University of Nebraska-Lincoln",
  "perf_str_addr": "151 Prem S. Paul Research Center",
  "perf_city_name": "Lincoln",
  "perf_st_code": "NE",
  "perf_st_name": "Nebraska",
  "perf_zip_code": "685830861",
  "perf_ctry_code": "US",
  "perf_cong_dist": "01",
  "perf_st_cong_dist": "NE01",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "094Y00",
   "pgm_ele_name": "FMitF: Formal Methods in the F"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "062Z",
   "pgm_ref_txt": "Harnessing the Data Revolution"
  },
  {
   "pgm_ref_code": "8206",
   "pgm_ref_txt": "Formal Methods and Verification"
  },
  {
   "pgm_ref_code": "9150",
   "pgm_ref_txt": "EXP PROG TO STIM COMP RES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 99941.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Network programs, such as network protocols and applications, play essential roles on the Internet. However, their correctness is difficult to check because their behaviors depend on their network environments, but the space of all possible network environments is prohibitively large. Symbolic execution, as a powerful program-analysis technique, can systemically and efficiently explore a large space of cases by leveraging the equivalence classes of cases. However, a significant barrier in using symbolic execution to test network programs is the substantial effort of instrumenting and modifying network programs to model their symbolic network environments. This project provides a powerful and general platform of symbolic network environments, called sym-ns-3, by extending a well-developed and widely-used network simulator ns-3 and leveraging a powerful symbolic execution platform s2e.&nbsp;<br /><br />We have made the following major contributions in this project. 1) We have explored several different methods to introduce symbolic variables into sym-ns-3 so that sym-ns-3 users can easily manage symbolic variables and sym-ns-3 developers can easily maintain and upgrade sym-ns-3. Specifically, we have developed a symbolic class for sym-ns-3 users to easily define, operate, and inquiry symbolic network environments, such as symbolic packet delays and symbolic packet headers. In addition, symbolic variables are introduced to sym-ns-3 with as little as possible changes to current ns-3 modules so that sym-ns-3 developers can easily maintain sym-ns-3. 2) We have proposed several techniques to redesign ns-3 modules and make sym-ns-3 more efficient for exhaustive testing, because ns-3 was not originally designed and implemented for symbolic execution. Specifically, we have developed two classes of techniques to speed up two general types of exhaustive testing, respectively: first, techniques to speed up exhaustive packet dynamic testing that checks a network program in networks with all possible packet dynamics, such as all possible packet delays; second, techniques to speed up exhaustive packet semantics testing that checks a network program for packets with all possible header and payload semantics, such as all possible destination IP addresses. Our extensive simulations show that these techniques can improve the testing speeds of sym-ns-3 by several orders of magnitude.</p>\n<p><br />A total of four students were involved in this project, including three graduate students and one female undergraduate student. They received training on exhaustive testing, network protocols, symbolic execution, and discrete-event network simulators. They also received training in writing technical reports and giving technical presentations. The work of this project has been published and/or presented in multiple journals, conferences, and workshops, such as WNS3 that is the annual workshop for ns-3 users and developers. The source code of sym-ns-3 has been released to the public, and more information, such as tutorial examples and documents, can be found on the project website https://symbolicns3.github.io/.&nbsp;<br /><br /></p><br>\n<p>\n\t\t\t\t      \tLast Modified: 08/12/2022<br>\n\t\t\t\t\tModified by: Lisong&nbsp;Xu</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nNetwork programs, such as network protocols and applications, play essential roles on the Internet. However, their correctness is difficult to check because their behaviors depend on their network environments, but the space of all possible network environments is prohibitively large. Symbolic execution, as a powerful program-analysis technique, can systemically and efficiently explore a large space of cases by leveraging the equivalence classes of cases. However, a significant barrier in using symbolic execution to test network programs is the substantial effort of instrumenting and modifying network programs to model their symbolic network environments. This project provides a powerful and general platform of symbolic network environments, called sym-ns-3, by extending a well-developed and widely-used network simulator ns-3 and leveraging a powerful symbolic execution platform s2e. \n\nWe have made the following major contributions in this project. 1) We have explored several different methods to introduce symbolic variables into sym-ns-3 so that sym-ns-3 users can easily manage symbolic variables and sym-ns-3 developers can easily maintain and upgrade sym-ns-3. Specifically, we have developed a symbolic class for sym-ns-3 users to easily define, operate, and inquiry symbolic network environments, such as symbolic packet delays and symbolic packet headers. In addition, symbolic variables are introduced to sym-ns-3 with as little as possible changes to current ns-3 modules so that sym-ns-3 developers can easily maintain sym-ns-3. 2) We have proposed several techniques to redesign ns-3 modules and make sym-ns-3 more efficient for exhaustive testing, because ns-3 was not originally designed and implemented for symbolic execution. Specifically, we have developed two classes of techniques to speed up two general types of exhaustive testing, respectively: first, techniques to speed up exhaustive packet dynamic testing that checks a network program in networks with all possible packet dynamics, such as all possible packet delays; second, techniques to speed up exhaustive packet semantics testing that checks a network program for packets with all possible header and payload semantics, such as all possible destination IP addresses. Our extensive simulations show that these techniques can improve the testing speeds of sym-ns-3 by several orders of magnitude.\n\n\nA total of four students were involved in this project, including three graduate students and one female undergraduate student. They received training on exhaustive testing, network protocols, symbolic execution, and discrete-event network simulators. They also received training in writing technical reports and giving technical presentations. The work of this project has been published and/or presented in multiple journals, conferences, and workshops, such as WNS3 that is the annual workshop for ns-3 users and developers. The source code of sym-ns-3 has been released to the public, and more information, such as tutorial examples and documents, can be found on the project website https://symbolicns3.github.io/. \n\n\n\n\t\t\t\t\tLast Modified: 08/12/2022\n\n\t\t\t\t\tSubmitted by: Lisong Xu"
 }
}