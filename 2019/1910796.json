{
 "awd_id": "1910796",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CNS Core: Small: Democratizing Network Hardware Offloads",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Darleen Fisher",
 "awd_eff_date": "2019-10-01",
 "awd_exp_date": "2023-09-30",
 "tot_intn_awd_amt": 387990.0,
 "awd_amount": 387990.0,
 "awd_min_amd_letter_date": "2019-08-05",
 "awd_max_amd_letter_date": "2019-08-05",
 "awd_abstract_narration": "There are many practical applications for large-scale data processing. Examples include weather prediction, scientific computing, and Google searches. While the size of compute clusters has increased over time, the amount of data that can be processed with a single compute server is a tiny fraction of the datasets, placing a large burden on the interconnecting network that moves data among the servers. Academic researchers and industry developers have endeavored to improve the speed of this underlying network. Yet, the engineering effort required at the server side to quickly and flexibly process data arriving over the network remains enormous and out of reach for many application developers.\r\n\r\nThis project aims to significantly broaden the community of application developers benefiting from increasing network speeds. The project leverages recent technological developments in network interface cards (NICs) attached to servers, namely programmable NIC offload, to advance developer-friendly abstractions, programming languages, and platforms. The main technical contributions of this project are (1) an abstract NIC model to represent diverse NIC substrates, and (2) compilation algorithms that translate flexible developer programs into NIC implementations, and provide predictable high throughput and low delay for the traffic processed by the NIC. The result is to enable developers to process data flexibly on server NICs with guarantees of high performance.\r\n\r\nAll software prototypes developed over the course of this project will be released openly and freely to serve as research experimentation platforms and     as pedagogical tools. The PI will develop curricular material to train graduate and senior undergraduate students in high-performance network data processing. The project will also introduce research activities to diverse high school student groups.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Srinivas",
   "pi_last_name": "Narayana",
   "pi_mid_init": "G",
   "pi_sufx_name": "",
   "pi_full_name": "Srinivas G Narayana",
   "pi_email_addr": "srinivas.narayana@rutgers.edu",
   "nsf_id": "000784562",
   "pi_start_date": "2019-08-05",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Rutgers University New Brunswick",
  "inst_street_address": "3 RUTGERS PLZ",
  "inst_street_address_2": "",
  "inst_city_name": "NEW BRUNSWICK",
  "inst_state_code": "NJ",
  "inst_state_name": "New Jersey",
  "inst_phone_num": "8489320150",
  "inst_zip_code": "089018559",
  "inst_country_name": "United States",
  "cong_dist_code": "12",
  "st_cong_dist_code": "NJ12",
  "org_lgl_bus_name": "RUTGERS, THE STATE UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "M1LVPE5GLSD9"
 },
 "perf_inst": {
  "perf_inst_name": "Rutgers University",
  "perf_str_addr": "33 knighbridge road",
  "perf_city_name": "Piscataway",
  "perf_st_code": "NJ",
  "perf_st_name": "New Jersey",
  "perf_zip_code": "088548072",
  "perf_ctry_code": "US",
  "perf_cong_dist": "06",
  "perf_st_cong_dist": "NJ06",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "736300",
   "pgm_ele_name": "Networking Technology and Syst"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 387990.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The high-level goals of this project were to make network offloads broadly accessible to a wider community of developers and to educate students in high-performance networking. Towards these goals, the project has accomplished the following.</p>\n<p>(1) The project identified a unified instruction set, eBPF, that can enable expressive high-performance offloads to target a wide variety of software and hardware offload substrates, including network device drivers in the Linux kernel, SoC-based programable NICs, NIC firmware, and FPGAs. In particular, code expressed or compiled into this instruction set can be run on a diverse set of programmable NICs.</p>\n<p>(2) Given the versatility and expressiveness of eBPF, the project developed an optimizing compiler for eBPF bytecode. Optimizing eBPF bytecode is challenging because of the existence of a static code analyzer (often referred to as the \"eBPF verifier\") that rejects code that may exhibit unsafe behaviors, for example exceptions or data leaks. To avoid getting user code rejected by the analyzer, existing optimizing compilers such as clang often implement conservative code optimizations, leaving performance on the table.&nbsp;</p>\n<p>This project was the first to point out this phase-ordering problem between safety and performance for eBPF code, and the first to propose a workable solution. We developed K2, an optimizing compiler that leverages program synthesis techniques to search for code that is semantically equivalent to a given input code, yet safe and exhibiting higher performance. K2 produces code with 6--26% reduced size, 1.36%--55.03% lower average packet-processing latency, and 0--4.75% higher throughput (packets per second per core) relative to the best clang-compiled program, on realistic benchmark programs run on production systems.</p>\n<p>K2 enables developers from broad backgrounds to reap the benefits of expressive programming in the eBPF ecosystem, with guarantees of correctness, safety, and high performance. K2 is open source.&nbsp; Several academic and industrial research groups have worked with it for their own code optimization and formal verification of eBPF software.</p>\n<p>(3) Towards the educational goals of the project, this grant sponsored the work of one graduate student across several years, and supported the training of multiple Ph.D., Masters, and undergraduate students in the topics of high-performance network programming and formal methods. The lead Ph.D. student on the project has given talks at top-tier international academic conferences and leading industrial developer-oriented venues, boosting the visibility of both the student and the project. Several undergraduate and Masters students have been trained, over the course of multiple years, on programming with eBPF and programmable NIC platforms. Along with the Ph.D. student primarily sponsored by the grant, one undergraduate and Masters student were also coauthors of a top-tier academic publication in the field of computer networking.</p>\n<p>In summary, this project has advanced the state of the art in the field of high-performance network offload, led to an open source optimizing compiler that has broadened the reach of high-performance network programming and offload to a broader and diverse group of developers and students, and trained several students in the concepts and tools of network programming, some of whom are embarking on careers in computer networking.</p>\n<p>&nbsp;</p><br>\n<p>\n Last Modified: 01/30/2024<br>\nModified by: Srinivas&nbsp;G&nbsp;Narayana</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nThe high-level goals of this project were to make network offloads broadly accessible to a wider community of developers and to educate students in high-performance networking. Towards these goals, the project has accomplished the following.\n\n\n(1) The project identified a unified instruction set, eBPF, that can enable expressive high-performance offloads to target a wide variety of software and hardware offload substrates, including network device drivers in the Linux kernel, SoC-based programable NICs, NIC firmware, and FPGAs. In particular, code expressed or compiled into this instruction set can be run on a diverse set of programmable NICs.\n\n\n(2) Given the versatility and expressiveness of eBPF, the project developed an optimizing compiler for eBPF bytecode. Optimizing eBPF bytecode is challenging because of the existence of a static code analyzer (often referred to as the \"eBPF verifier\") that rejects code that may exhibit unsafe behaviors, for example exceptions or data leaks. To avoid getting user code rejected by the analyzer, existing optimizing compilers such as clang often implement conservative code optimizations, leaving performance on the table.\n\n\nThis project was the first to point out this phase-ordering problem between safety and performance for eBPF code, and the first to propose a workable solution. We developed K2, an optimizing compiler that leverages program synthesis techniques to search for code that is semantically equivalent to a given input code, yet safe and exhibiting higher performance. K2 produces code with 6--26% reduced size, 1.36%--55.03% lower average packet-processing latency, and 0--4.75% higher throughput (packets per second per core) relative to the best clang-compiled program, on realistic benchmark programs run on production systems.\n\n\nK2 enables developers from broad backgrounds to reap the benefits of expressive programming in the eBPF ecosystem, with guarantees of correctness, safety, and high performance. K2 is open source. Several academic and industrial research groups have worked with it for their own code optimization and formal verification of eBPF software.\n\n\n(3) Towards the educational goals of the project, this grant sponsored the work of one graduate student across several years, and supported the training of multiple Ph.D., Masters, and undergraduate students in the topics of high-performance network programming and formal methods. The lead Ph.D. student on the project has given talks at top-tier international academic conferences and leading industrial developer-oriented venues, boosting the visibility of both the student and the project. Several undergraduate and Masters students have been trained, over the course of multiple years, on programming with eBPF and programmable NIC platforms. Along with the Ph.D. student primarily sponsored by the grant, one undergraduate and Masters student were also coauthors of a top-tier academic publication in the field of computer networking.\n\n\nIn summary, this project has advanced the state of the art in the field of high-performance network offload, led to an open source optimizing compiler that has broadened the reach of high-performance network programming and offload to a broader and diverse group of developers and students, and trained several students in the concepts and tools of network programming, some of whom are embarking on careers in computer networking.\n\n\n\t\t\t\t\tLast Modified: 01/30/2024\n\n\t\t\t\t\tSubmitted by: SrinivasGNarayana\n"
 }
}