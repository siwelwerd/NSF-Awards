{
 "awd_id": "1909099",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CNS Core:Small: Prescriptive Software Caching Using Leases",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032925197",
 "po_email": "mmcclure@nsf.gov",
 "po_sign_block_name": "Marilyn McClure",
 "awd_eff_date": "2019-10-01",
 "awd_exp_date": "2023-09-30",
 "tot_intn_awd_amt": 499816.0,
 "awd_amount": 547816.0,
 "awd_min_amd_letter_date": "2019-06-05",
 "awd_max_amd_letter_date": "2022-04-14",
 "awd_abstract_narration": "The cost and performance of a modern system depend on its memory hierarchy.  Manual management of the memory hierarchy is complex and not portable. Automatic management is sub-optimal - it reacts to program behavior but does not directly utilize program knowledge.  This research seeks a middle ground with a new type of cache called Lease Cache.  It enables prescriptive caching by utilizing program knowledge, variable cache sizes, and multi-policy caching.\r\n\r\nPrescriptive caching takes a principled approach building on theory and optimization.  It connects programming and caching directly with programming abstractions and program analysis.  The research solves four problems.  (1) Lease cache theory, ensuring performance no worse than Least Recently Used (LRU) cache when there is no program knowledge and optimal when there is program knowledge.  (2) Lease cache optimization, including statistical caching as well as optimization for multi-policy and multi-granularity caching. (3) Locality analysis, combining static analysis and run-time sampling to analyze program locality. (4) Lease cache system, with efficient lease management including the use of approximation to reduce the overhead.\r\n\r\nCaching techniques are widely used in today's computing infrastructure from virtual memory management to server cache and memory cache.  Lease cache is a new paradigm where an application can directly control cache management.  Under this paradigm, future efforts by the research community and industry may substantially improve the utilization of computer memory for practically all applications and systems.  Beyond its technical content, the project will develop material to teach locality theory and optimization and strive to increase the diversity and participation in computing research and development.\r\n\r\nThe project will produce software and data from experiments for research papers.  Source code, experimental data and metadata will be maintained in version-controlled repositories using open-source software (git and/or Mercurial).  Source code will be made available through the Internet on the University website and on publicly-accessible source code repositories such as Github and/or Bitbucket.  The repositories will be maintained as long as the research is on-going and remains relevant and at least for three years after the end of the project in 2022.  The project page is https://roclocality.org/2019/04/12/nsf1909099/.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Chen",
   "pi_last_name": "Ding",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Chen Ding",
   "pi_email_addr": "cding@cs.rochester.edu",
   "nsf_id": "000325741",
   "pi_start_date": "2019-06-05",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Rochester",
  "inst_street_address": "910 GENESEE ST",
  "inst_street_address_2": "STE 200",
  "inst_city_name": "ROCHESTER",
  "inst_state_code": "NY",
  "inst_state_name": "New York",
  "inst_phone_num": "5852754031",
  "inst_zip_code": "146113847",
  "inst_country_name": "United States",
  "cong_dist_code": "25",
  "st_cong_dist_code": "NY25",
  "org_lgl_bus_name": "UNIVERSITY OF ROCHESTER",
  "org_prnt_uei_num": "",
  "org_uei_num": "F27KDXZMF9Y8"
 },
 "perf_inst": {
  "perf_inst_name": "University of Rochester",
  "perf_str_addr": "500 Joseph C. Wilson BLVD",
  "perf_city_name": "Rochester",
  "perf_st_code": "NY",
  "perf_st_name": "New York",
  "perf_zip_code": "146270140",
  "perf_ctry_code": "US",
  "perf_cong_dist": "25",
  "perf_st_cong_dist": "NY25",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "171400",
   "pgm_ele_name": "Special Projects - CNS"
  },
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7354",
   "pgm_ref_txt": "COMPUTER SYSTEMS"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "9178",
   "pgm_ref_txt": "UNDERGRADUATE EDUCATION"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "",
   "app_name": "",
   "app_symb_id": "",
   "fund_code": "01002223DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0121",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 499816.0
  },
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 16000.0
  },
  {
   "fund_oblg_fiscal_yr": 2021,
   "fund_oblg_amt": 16000.0
  },
  {
   "fund_oblg_fiscal_yr": 2022,
   "fund_oblg_amt": 16000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The cost and performance of a modern system depend on its memory hierarchy. Manual management of the memory hierarchy is complex and not portable. Automatic management is sub-optimal -- it reacts by observing program behavior but does not strategize by \"reading\" program code. This research has developed a middle ground with a new type of cache called Lease Cache.&nbsp;&nbsp; It has pursued a principled approach by developing the theory and optimization of prescriptive caching, i.e., integrating programming abstractions, program analysis, and cache management.<br /><br />Intellectual Merit<br /><br />The project has developed the following: theoretical properties of the compiler technique called Compiler Assigned Reference Lease (CARL) including optimality, miss-ratio convexity, and sub-partitioning monotonicity [Ding et al., TACO 2022], a statistical method to keep track of instruction pointer-based access reuse intervals of arbitrary length and uses this information to identify the Least Expected Use (LEU) blocks for replacement [Chakraborti et al., ISMM 2023]; a set of practical solutions for a physical lease cache emulated in FPGA with the full suite of PolyBench benchmarks, with and without polyhedral compiler optimization [Reber et al., TACO 2023], two novel analytical cache writeback models that function for workloads with general frequency distributions, including closed-form instantiations for Zipfian workloads, one of the most ubiquitous frequency distribution types in data-bound applications [Smith et al., MEMSYS 2021], a framework for engineers and algorithm designers to quantify the algorithmic implications of hierarchical memory [Smith et al., ICS 2022], and a relational theory of locality connecting the measures commonly used in program analysis, cache system design, and memory management [Yuan et al., TACO 2019].<br /><br />Broader Impact<br /><br />The project coincided with the Covid-19 pandemic in the US.&nbsp; Much of the work was done through remote collaboration.&nbsp; Ten peer-reviewed papers have been published and uploaded to the Public Access Repository (PAR).&nbsp; Three additional papers were accepted and presented in MEMSYS 2023 and will be published.&nbsp; Four students at Rochester graduated with a Ph.D.&nbsp; Three undergraduate students were co-authors on four published papers and have gone to graduate schools.&nbsp; Several code repositories have been made public.</p><br>\n<p>\n Last Modified: 12/30/2023<br>\nModified by: Chen&nbsp;Ding</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nThe cost and performance of a modern system depend on its memory hierarchy. Manual management of the memory hierarchy is complex and not portable. Automatic management is sub-optimal -- it reacts by observing program behavior but does not strategize by \"reading\" program code. This research has developed a middle ground with a new type of cache called Lease Cache. It has pursued a principled approach by developing the theory and optimization of prescriptive caching, i.e., integrating programming abstractions, program analysis, and cache management.\n\nIntellectual Merit\n\nThe project has developed the following: theoretical properties of the compiler technique called Compiler Assigned Reference Lease (CARL) including optimality, miss-ratio convexity, and sub-partitioning monotonicity [Ding et al., TACO 2022], a statistical method to keep track of instruction pointer-based access reuse intervals of arbitrary length and uses this information to identify the Least Expected Use (LEU) blocks for replacement [Chakraborti et al., ISMM 2023]; a set of practical solutions for a physical lease cache emulated in FPGA with the full suite of PolyBench benchmarks, with and without polyhedral compiler optimization [Reber et al., TACO 2023], two novel analytical cache writeback models that function for workloads with general frequency distributions, including closed-form instantiations for Zipfian workloads, one of the most ubiquitous frequency distribution types in data-bound applications [Smith et al., MEMSYS 2021], a framework for engineers and algorithm designers to quantify the algorithmic implications of hierarchical memory [Smith et al., ICS 2022], and a relational theory of locality connecting the measures commonly used in program analysis, cache system design, and memory management [Yuan et al., TACO 2019].\n\nBroader Impact\n\nThe project coincided with the Covid-19 pandemic in the US. Much of the work was done through remote collaboration. Ten peer-reviewed papers have been published and uploaded to the Public Access Repository (PAR). Three additional papers were accepted and presented in MEMSYS 2023 and will be published. Four students at Rochester graduated with a Ph.D. Three undergraduate students were co-authors on four published papers and have gone to graduate schools. Several code repositories have been made public.\t\t\t\t\tLast Modified: 12/30/2023\n\n\t\t\t\t\tSubmitted by: ChenDing\n"
 }
}