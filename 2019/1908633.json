{
 "awd_id": "1908633",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Collaborative Research: Understanding and Evolving Search-based Software Improvement",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2019-10-01",
 "awd_exp_date": "2023-09-30",
 "tot_intn_awd_amt": 250000.0,
 "awd_amount": 250000.0,
 "awd_min_amd_letter_date": "2019-08-03",
 "awd_max_amd_letter_date": "2019-08-03",
 "awd_abstract_narration": "Software is pervasive, supporting entertainment, finances, health care, travel, and social interactions. Latent software glitches, or bugs, are costly to diagnose and repair. Today, most software bugs are repaired by highly-trained software engineers, but it is uneconomical to repair all such bugs manually, and even for important security-critical problems there can be long delays between bug discoveries and fixes. This project develops improved methods for automatically finding repairs for software bugs, thus addressing a key component of the high cost of software maintenance. Techniques for automated software improvement have matured over the past\r\ndecade, and industry has begun adopting the more successful approaches. Despite these successes, current methods can repair only a fraction of presented bugs. The project focuses on extending the range of existing techniques, which search for small changes to the buggy program that will repair the error. Current approaches use search that is analogous to \"looking for one's keys under a streetlamp\": they search where it is easy, not where it would be most effective. By leveraging insights from evolutionary\r\nbiology and on-line learning methods, new algorithms will be developed that explore more aggressively, thus finding more repairs for more complex bugs more often and more consistently. In addition to repairing bugs, the new algorithms will be tested on other aspects of software improvement, for instance, reducing how much energy a program uses when it executes.\r\n\r\nAll search algorithms face a tradeoff between exploration and exploitation, balancing continued refinement of current good solutions against looking for even better solutions farther afield. Current methods for search-based software improvement overemphasize exploitation, limiting searches to only one or two changes to the original program. To search more aggressively, the project focuses on the space of \"neutral\" or \"safe\" program edits, adapting the concept of the space of neutral mutations in biology, where there is extensive theory and analysis to describe its topology and account for negative interactions among mutations. The project: (1) adapts these analyses to the software domain, (2) uses them to design new program-improvement algorithms, and (3) tests the algorithms quantitatively using three important software-improvement domains: software repair, energy optimization, and optimizing speed/accuracy tradeoffs. The resulting algorithm is a radical departure from existing search-based methods, because it eliminates two key components:  selection of the highest-performing samples from a population and recombination of high-performing partial solutions. By focusing on exploration, and by quantifying important properties of the search space, the project complements work by other researchers to improve mutation operators, fault localization, and fitness functions.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Westley",
   "pi_last_name": "Weimer",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Westley Weimer",
   "pi_email_addr": "weimerw@umich.edu",
   "nsf_id": "000205470",
   "pi_start_date": "2019-08-03",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Regents of the University of Michigan - Ann Arbor",
  "inst_street_address": "1109 GEDDES AVE STE 3300",
  "inst_street_address_2": "",
  "inst_city_name": "ANN ARBOR",
  "inst_state_code": "MI",
  "inst_state_name": "Michigan",
  "inst_phone_num": "7347636438",
  "inst_zip_code": "481091015",
  "inst_country_name": "United States",
  "cong_dist_code": "06",
  "st_cong_dist_code": "MI06",
  "org_lgl_bus_name": "REGENTS OF THE UNIVERSITY OF MICHIGAN",
  "org_prnt_uei_num": "",
  "org_uei_num": "GNJ7BBP73WE9"
 },
 "perf_inst": {
  "perf_inst_name": "University of Michigan Ann Arbor",
  "perf_str_addr": "3003 South State St. Room 1062",
  "perf_city_name": "Ann Arbor",
  "perf_st_code": "MI",
  "perf_st_name": "Michigan",
  "perf_zip_code": "481091274",
  "perf_ctry_code": "US",
  "perf_cong_dist": "06",
  "perf_st_cong_dist": "MI06",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 250000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p id=\"docs-internal-guid-2f3ef3d6-7fff-a7e7-9e77-818742ae4588\" style=\"line-height: 1.38; margin-top: 12pt; margin-bottom: 12pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial,sans-serif; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Software maintenance, which includes improving and fixing bugs in existing programs, is a critical component of computer science in general and software engineering in particular. Software maintenance is traditionally an expensive and time-consuming manual activity. This project focuses on reducing the costs associated with software maintenance by researching better ways to automatically search for candidate patches, fixes and improvements for existing programs.</span></p>\n<p style=\"line-height: 1.38; margin-top: 12pt; margin-bottom: 12pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial,sans-serif; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Such search algorithms face a tradeoff between exploration and exploitation, balancing continued refinement of known good solutions against looking for even better solutions farther afield. Current methods for search-based software improvement overemphasize exploitation, limiting searches to only one or two changes to the original program. To search more aggressively, this project focuses on the space of safe (\"neural\") program edits. This approach is motivated by neutral mutations in biology, where there is extensive theory and analysis to describe topological properties of these spaces.</span></p>\n<p style=\"line-height: 1.38; margin-top: 12pt; margin-bottom: 12pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial,sans-serif; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Intellectual Merit. The research associated with the project produced new algorithms, adapted an insight from biology, and evaluated the results in multiple new problem domains. Algorithmic results advanced our understanding of how to search (including the development of a novel algorithm to find the \"peak\" of the search space, an area likely to contain fruitful patches and improvements), how to represent the problem (including advances that unify the repair search process across different levels of abstraction, including traditional source code and lower-level assembly programs), and how to conduct the search quickly (including results on carrying out multiple searches in parallel and coordinating the results). The primary biological aspect considered is the notion of \"neutrality\" (in which two individuals in a population may have the same fitness but have different genetic information). In computing, this corresponds to two programs that have different source code but meet the same human requirements and pass the same tests. The resulting algorithms were applied to tackle problems in new domains. These include graphical processing units (where the resulting optimizations outperformed existing baselines), security (where the algorithms produced patches in response to DARPA Cy ber Grand Challenge security scenarios), graph optimization (where software-engineering-focused results were applied to a more general theoretical optimization problem), and circuit design (where software-based automated program repair algorithms were adapted to fix bugs in hardware circuit descriptions).</span></p>\n<p style=\"line-height: 1.38; margin-top: 12pt; margin-bottom: 12pt;\" dir=\"ltr\"><span style=\"font-size: 11pt; font-family: Arial,sans-serif; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">Broader Impact. The research results were published in peer-reviewed scientific venues. In addition, the project was discussed in keynote addresses, local and international seminars and podcasts. The researchers participated in local and national-level outreach with an emphasis on broadening participation in computing. Multiple undergraduate and graduate students were mentored in, and participated in, the research process as part of this project.</span></p><br>\n<p>\n Last Modified: 12/21/2023<br>\nModified by: Westley&nbsp;Weimer</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nSoftware maintenance, which includes improving and fixing bugs in existing programs, is a critical component of computer science in general and software engineering in particular. Software maintenance is traditionally an expensive and time-consuming manual activity. This project focuses on reducing the costs associated with software maintenance by researching better ways to automatically search for candidate patches, fixes and improvements for existing programs.\n\n\nSuch search algorithms face a tradeoff between exploration and exploitation, balancing continued refinement of known good solutions against looking for even better solutions farther afield. Current methods for search-based software improvement overemphasize exploitation, limiting searches to only one or two changes to the original program. To search more aggressively, this project focuses on the space of safe (\"neural\") program edits. This approach is motivated by neutral mutations in biology, where there is extensive theory and analysis to describe topological properties of these spaces.\n\n\nIntellectual Merit. The research associated with the project produced new algorithms, adapted an insight from biology, and evaluated the results in multiple new problem domains. Algorithmic results advanced our understanding of how to search (including the development of a novel algorithm to find the \"peak\" of the search space, an area likely to contain fruitful patches and improvements), how to represent the problem (including advances that unify the repair search process across different levels of abstraction, including traditional source code and lower-level assembly programs), and how to conduct the search quickly (including results on carrying out multiple searches in parallel and coordinating the results). The primary biological aspect considered is the notion of \"neutrality\" (in which two individuals in a population may have the same fitness but have different genetic information). In computing, this corresponds to two programs that have different source code but meet the same human requirements and pass the same tests. The resulting algorithms were applied to tackle problems in new domains. These include graphical processing units (where the resulting optimizations outperformed existing baselines), security (where the algorithms produced patches in response to DARPA Cy ber Grand Challenge security scenarios), graph optimization (where software-engineering-focused results were applied to a more general theoretical optimization problem), and circuit design (where software-based automated program repair algorithms were adapted to fix bugs in hardware circuit descriptions).\n\n\nBroader Impact. The research results were published in peer-reviewed scientific venues. In addition, the project was discussed in keynote addresses, local and international seminars and podcasts. The researchers participated in local and national-level outreach with an emphasis on broadening participation in computing. Multiple undergraduate and graduate students were mentored in, and participated in, the research process as part of this project.\t\t\t\t\tLast Modified: 12/21/2023\n\n\t\t\t\t\tSubmitted by: WestleyWeimer\n"
 }
}