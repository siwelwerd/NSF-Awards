{
 "awd_id": "1901482",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SaTC: CORE: Small: New Defenses for Data-Only Attacks",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2019-10-01",
 "awd_exp_date": "2024-09-30",
 "tot_intn_awd_amt": 500000.0,
 "awd_amount": 500000.0,
 "awd_min_amd_letter_date": "2019-08-12",
 "awd_max_amd_letter_date": "2019-08-12",
 "awd_abstract_narration": "It is critical to defend software systems against memory-tampering attacks that can steal sensitive data, escalate privilege, or even execute arbitrary code on a remote system. However, most existing defense mechanisms have focused only on control-data attacks (e.g., control- hijacking), but cannot defend data-only attacks such as Heartbleed, which only tamper with the program's data flow. Data-only attacks will become common once control-flow defenses such as control-flow integrity are widely deployed. This project will investigate new, principled solutions to data-only attacks with acceptable overhead for deployment in practice.\r\n\r\nThe technical aims of the project are divided into two thrusts. The first thrust develops a novel compiler analysis and a runtime approach for ensuring cross-origin data flow integrity (X-DFI), which can effectively defend real-world attacks that infect the victim system through one or more ingress points, e.g., a function that reads external data or an event handler for events controlled by attackers. By modeling each of these ingress points as a separate origin, X-DFI can prevent attacks from malicious origins from accessing data belonging to innocent origins through exploiting memory vulnerabilities such as buffer overflows or dangling pointers. The second thrust develops pointer-arithmetic integrity (PAI), which can further reduce the runtime overhead and to also deal with attacks within the same origin through ensuring the safety of pointer arithmetics in memory unsafe languages such as C/C++.  Ensuring PAI is lightweight since pointers that involve arithmetics typically account for only a small fraction of all pointers in the program. Through automated compiler and lightweight runtime techniques to enforce X-DFI and PAI together, the project aims to secure large complex software against data-only attacks without requiring any change to the source code, with no false positives, and with minimal performance overhead.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Jeff",
   "pi_last_name": "Huang",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Jeff Huang",
   "pi_email_addr": "jeff@cse.tamu.edu",
   "nsf_id": "000677528",
   "pi_start_date": "2019-08-12",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Texas A&M Engineering Experiment Station",
  "inst_street_address": "3124 TAMU",
  "inst_street_address_2": "",
  "inst_city_name": "COLLEGE STATION",
  "inst_state_code": "TX",
  "inst_state_name": "Texas",
  "inst_phone_num": "9798626777",
  "inst_zip_code": "778433124",
  "inst_country_name": "United States",
  "cong_dist_code": "10",
  "st_cong_dist_code": "TX10",
  "org_lgl_bus_name": "TEXAS A&M ENGINEERING EXPERIMENT STATION",
  "org_prnt_uei_num": "QD1MX6N5YTN4",
  "org_uei_num": "QD1MX6N5YTN4"
 },
 "perf_inst": {
  "perf_inst_name": "Texas A&M University",
  "perf_str_addr": "301 Harvey R. Bright Building",
  "perf_city_name": "College Station",
  "perf_st_code": "TX",
  "perf_st_name": "Texas",
  "perf_zip_code": "778433112",
  "perf_ctry_code": "US",
  "perf_cong_dist": "10",
  "perf_st_cong_dist": "TX10",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 500000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The project has explored and developed new theories, algorithms, and systems to defend software against data-only attacks -- an emerging class of memory vulnerabilities that can steal sensitive data, escalate privileges, or execute arbitrary code on remote systems without altering the program's control flow. The Principal Investigator (PI) and team introduced a novel solution called Cross-Origin Data Flow Integrity (X-DFI) to address these threats. X-DFI models the ingress points of an application as distinct origins, preventing malicious origins from exploiting memory vulnerabilities, such as buffer overflows or dangling pointers, to access data from benign origins.</p>\n<p>To ensure X-DFI&rsquo;s feasibility with minimal performance overhead, the team designed, implemented, and evaluated a suite of innovative compiler analysis and runtime optimization techniques, including Pointer Arithmetic Integrity (PAI), which guarantees the safety of pointer arithmetic within the same origin in memory-unsafe languages like C/C++. This research has resulted in several high-impact publications in top-tier programming languages, software engineering, and cybersecurity conferences (PLDI, ICSE, CCS). Additionally, the project led to the discovery of several previously unknown security vulnerabilities in widely used open-source projects, including Solana.</p>\n<p>More importantly, this project provided valuable research opportunities for a diverse group of students, including three PhD graduates, five Master&rsquo;s students, and over ten undergraduates, including those from underrepresented minority groups. These students gained hands-on experience in developing compiler and runtime tools and honed essential research skills such as scientific reading and writing, data analysis, experimental design, and cybersecurity defense techniques.</p>\n<p>&nbsp;</p><br>\n<p>\n Last Modified: 10/07/2024<br>\nModified by: Jeff&nbsp;Huang</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nThe project has explored and developed new theories, algorithms, and systems to defend software against data-only attacks -- an emerging class of memory vulnerabilities that can steal sensitive data, escalate privileges, or execute arbitrary code on remote systems without altering the program's control flow. The Principal Investigator (PI) and team introduced a novel solution called Cross-Origin Data Flow Integrity (X-DFI) to address these threats. X-DFI models the ingress points of an application as distinct origins, preventing malicious origins from exploiting memory vulnerabilities, such as buffer overflows or dangling pointers, to access data from benign origins.\n\n\nTo ensure X-DFIs feasibility with minimal performance overhead, the team designed, implemented, and evaluated a suite of innovative compiler analysis and runtime optimization techniques, including Pointer Arithmetic Integrity (PAI), which guarantees the safety of pointer arithmetic within the same origin in memory-unsafe languages like C/C++. This research has resulted in several high-impact publications in top-tier programming languages, software engineering, and cybersecurity conferences (PLDI, ICSE, CCS). Additionally, the project led to the discovery of several previously unknown security vulnerabilities in widely used open-source projects, including Solana.\n\n\nMore importantly, this project provided valuable research opportunities for a diverse group of students, including three PhD graduates, five Masters students, and over ten undergraduates, including those from underrepresented minority groups. These students gained hands-on experience in developing compiler and runtime tools and honed essential research skills such as scientific reading and writing, data analysis, experimental design, and cybersecurity defense techniques.\n\n\n\t\t\t\t\tLast Modified: 10/07/2024\n\n\t\t\t\t\tSubmitted by: JeffHuang\n"
 }
}