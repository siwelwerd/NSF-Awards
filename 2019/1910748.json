{
 "awd_id": "1910748",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: A Unified Approach for Scheduling Computer Vision Dataflow Graphs",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927498",
 "po_email": "achtchel@nsf.gov",
 "po_sign_block_name": "Almadena Chtchelkanova",
 "awd_eff_date": "2019-10-01",
 "awd_exp_date": "2023-09-30",
 "tot_intn_awd_amt": 249416.0,
 "awd_amount": 249416.0,
 "awd_min_amd_letter_date": "2019-09-13",
 "awd_max_amd_letter_date": "2019-09-13",
 "awd_abstract_narration": "Advances in computer vision and machine learning are enabling continuous development of new capabilities in autonomous systems and knowledge extraction from images and video.  These advances are possible in large part to increased computational capability brought about by a new class of processor designed for visual and neural processing.  This includes Google's Visual Core and Tensor Processor Unit, Qualcomm's Hexagon DSP, Nvidia's Programmable Vision Accelerator and Tensor Core, and Intel's Crest processors.  In these processors, the program code exerts far greater control of the underlying processing and memory resources than in general purpose and graphical processors.  This serves to greatly reduce the uncertainties that would otherwise restrict accurate performance prediction and open the door for new approaches for automatic and portable performance optimization. Despite the growing market for embedded vision processors, their associated compiler tools are nascent, relying on hand-tuning program code using trial-and-error methods.  This project will build upon existing technologies to build a \"universal\" front-end for a broad class of vision processors.  As part of this project the researchers will also develop an database of OpenVX 1.2 kernels (https://www.khronos.org/openvx/) and an OpenVX benchmark suite.  It is  expected that developing both the tools and benchmarks in the open source will facilitate community involvement. The artifacts developed in this project will serve as a pedagogical infrastructure for a new course in Internet-of-Things and machine learning at the edge of the computer network.\r\n\r\nThis project is developing a new program compilation flow, in which a program written in the platform-independent OpenVX representation is converted into a low-level representation and explicitly scheduled onto the underlying hardware resources.  The conversion is governed by a mathematical model of the hardware behavior trained from mining performance data generated from executing and instrumenting a series of benchmarks.  The compiler framework developed using this approach has the potential to replace the ad hoc methods currently in use and become a powerful tool for developing software for visual and neural processors, which will power a future generation of cognizant smart devices.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Jason",
   "pi_last_name": "Bakos",
   "pi_mid_init": "D",
   "pi_sufx_name": "",
   "pi_full_name": "Jason D Bakos",
   "pi_email_addr": "jbakos@cse.sc.edu",
   "nsf_id": "000284090",
   "pi_start_date": "2019-09-13",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of South Carolina at Columbia",
  "inst_street_address": "1600 HAMPTON ST",
  "inst_street_address_2": "",
  "inst_city_name": "COLUMBIA",
  "inst_state_code": "SC",
  "inst_state_name": "South Carolina",
  "inst_phone_num": "8037777093",
  "inst_zip_code": "292083403",
  "inst_country_name": "United States",
  "cong_dist_code": "06",
  "st_cong_dist_code": "SC06",
  "org_lgl_bus_name": "UNIVERSITY OF SOUTH CAROLINA",
  "org_prnt_uei_num": "Q93ZDA59ZAR5",
  "org_uei_num": "J22LNTMEDP73"
 },
 "perf_inst": {
  "perf_inst_name": "University South Carolina",
  "perf_str_addr": "Sumter Street",
  "perf_city_name": "Columbia",
  "perf_st_code": "SC",
  "perf_st_name": "South Carolina",
  "perf_zip_code": "292080001",
  "perf_ctry_code": "US",
  "perf_cong_dist": "06",
  "perf_st_cong_dist": "SC06",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "689200",
   "pgm_ele_name": "CI REUSE"
  },
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "026Z",
   "pgm_ref_txt": "NSCI: National Strategic Computing Initi"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7942",
   "pgm_ref_txt": "HIGH-PERFORMANCE COMPUTING"
  },
  {
   "pgm_ref_code": "8004",
   "pgm_ref_txt": "Software Institutes"
  },
  {
   "pgm_ref_code": "9150",
   "pgm_ref_txt": "EXP PROG TO STIM COMP RES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0119",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01001920DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2019,
   "fund_oblg_amt": 249416.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-f95b12f2-7fff-06e8-bbbd-c07599c89a93\"> <span id=\"docs-internal-guid-1b1753a8-7fff-ccf0-0fd3-74d61d771136\"> </span></span></p>\n<p><span id=\"docs-internal-guid-1b1753a8-7fff-ccf0-0fd3-74d61d771136\">\n<p dir=\"ltr\"><span>Although not as well-known as Graphical Processor Units (GPUs), Visual Processor Units (VPUs) are a key technology for enabling the widespread deployment of Automated Driver Assistance (ADAS) systems that improve vehicle safety and save lives. VPUs are the processors that execute real-time computer vision algorithms that use camera-based sensors to detect road and lane boundaries, traffic signs and signals, pedestrians, and other vehicles, and are instrumental for self-driving car technology. However, unlike GPUs, VPU design does not lend itself to an intuitive programming model, which makes it difficult, costly, and time consuming for VPU programmers to meet performance requirements for new applications. This creates significant challenges for the deployment of new algorithms for use in vehicle safety systems.</span></p>\n<br />\n<p dir=\"ltr\"><span>This project developed a new programming framework for VPUs that significantly simplifies the development of efficient VPU code. The framework is built on top of an existing open programming model, OpenVX, but uses a novel algorithm for identifying which memory structures to store intermediate results from the computation, and how to most efficiently orchestrate the set of processing stages that comprise the targeted image processing algorithm.</span></p>\n<br />\n<p dir=\"ltr\"><span>The developed framework includes two components. The first is a set of data-driven models for predicting the efficiency of the VPU&rsquo;s memory interface decomposing image data into sub-images of a given size, and a given schedule of buffering and processing each of the sub-images. The second is a model for predicting the hardware utilization and pixel throughput as a function of the number of processing stages used to process each image. Together, these models are used to evaluate a large set of possible software configurations to identify the one that will yield the best performance.&nbsp; This allows VPU developers to avoid manual, trial-and-error approaches for performance tuning and ultimately improves productivity for VPU programming.</span></p>\n<div></div>\n</span></p>\n<p>&nbsp;</p><br>\n<p>\n Last Modified: 01/29/2024<br>\nModified by: Jason&nbsp;D&nbsp;Bakos</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\n  \n\n\n\n\n\nAlthough not as well-known as Graphical Processor Units (GPUs), Visual Processor Units (VPUs) are a key technology for enabling the widespread deployment of Automated Driver Assistance (ADAS) systems that improve vehicle safety and save lives. VPUs are the processors that execute real-time computer vision algorithms that use camera-based sensors to detect road and lane boundaries, traffic signs and signals, pedestrians, and other vehicles, and are instrumental for self-driving car technology. However, unlike GPUs, VPU design does not lend itself to an intuitive programming model, which makes it difficult, costly, and time consuming for VPU programmers to meet performance requirements for new applications. This creates significant challenges for the deployment of new algorithms for use in vehicle safety systems.\n\n\n\n\nThis project developed a new programming framework for VPUs that significantly simplifies the development of efficient VPU code. The framework is built on top of an existing open programming model, OpenVX, but uses a novel algorithm for identifying which memory structures to store intermediate results from the computation, and how to most efficiently orchestrate the set of processing stages that comprise the targeted image processing algorithm.\n\n\n\n\nThe developed framework includes two components. The first is a set of data-driven models for predicting the efficiency of the VPUs memory interface decomposing image data into sub-images of a given size, and a given schedule of buffering and processing each of the sub-images. The second is a model for predicting the hardware utilization and pixel throughput as a function of the number of processing stages used to process each image. Together, these models are used to evaluate a large set of possible software configurations to identify the one that will yield the best performance. This allows VPU developers to avoid manual, trial-and-error approaches for performance tuning and ultimately improves productivity for VPU programming.\n\n\n\n\n\t\t\t\t\tLast Modified: 01/29/2024\n\n\t\t\t\t\tSubmitted by: JasonDBakos\n"
 }
}