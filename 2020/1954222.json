{
 "awd_id": "1954222",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "III: Medium: Collaborative Research: Reasoning about Optimizers for Data-Intensive Systems",
 "cfda_num": "47.070",
 "org_code": "05020000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Judith Cushing",
 "awd_eff_date": "2020-09-01",
 "awd_exp_date": "2023-08-31",
 "tot_intn_awd_amt": 500000.0,
 "awd_amount": 500000.0,
 "awd_min_amd_letter_date": "2020-07-28",
 "awd_max_amd_letter_date": "2022-07-24",
 "awd_abstract_narration": "Today, we witness an explosion of new data-intensive systems, both for traditional data processing and for machine learning, and these systems critically require powerful optimizers for their declarative languages.  Developing and verifying such optimizers is very difficult: in the past, they were developed only by a small number of commercial database vendors with dedicated teams, while most modern systems are developed by small teams without such expertise. To address this challenge, this project studies and implements automated methods for verifying query optimization rules in data-intensive systems.\r\n\r\nSpecifically, this project will have four research focuses: (1) We will develop an axiomatic foundation based on algebraic identities in a semiring, implement it as a framework, and apply it to verify optimization rules in existing systems. (2) We will extend the framework to reason about languages that combine linear algebra with relational algebra, for example languages that manipulate vectors, matrices, and tensors, and extend the verifier to reason about tensor optimization rules. (3) We will conduct a theoretical study of the completeness and decidability of the semiring-based axiomatic system used for verifying optimization rules, and specialize this study for various query language fragments. (4) We will build a new cloud-based infrastructure for automated reasoning of declarative query languages, to enable researchers to easily develop executable semantics for different data-intensive systems, formal methods researchers to develop new techniques targeted for query language reasoning, and application developers to build new applications that make use of our infrastructure.\r\n\r\nAll software artifacts developed in this project will be released to the public, with plans to incorporate their usage in both the undergraduate and graduate curricula. Any collected benchmarks from open source will be aggregated into a repository that is publicly accessible, with the goal to enable researchers and practitioners in the field to experiment and reproduce the results.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "IIS",
 "org_div_long_name": "Division of Information & Intelligent Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Dan",
   "pi_last_name": "Suciu",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Dan Suciu",
   "pi_email_addr": "suciu@cs.washington.edu",
   "nsf_id": "000218785",
   "pi_start_date": "2020-07-28",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Washington",
  "inst_street_address": "4333 BROOKLYN AVE NE",
  "inst_street_address_2": "",
  "inst_city_name": "SEATTLE",
  "inst_state_code": "WA",
  "inst_state_name": "Washington",
  "inst_phone_num": "2065434043",
  "inst_zip_code": "981951016",
  "inst_country_name": "United States",
  "cong_dist_code": "07",
  "st_cong_dist_code": "WA07",
  "org_lgl_bus_name": "UNIVERSITY OF WASHINGTON",
  "org_prnt_uei_num": "",
  "org_uei_num": "HD1WMN6945W6"
 },
 "perf_inst": {
  "perf_inst_name": "University of Washington",
  "perf_str_addr": "185 Stevens Way",
  "perf_city_name": "Seattle",
  "perf_st_code": "WA",
  "perf_st_name": "Washington",
  "perf_zip_code": "981950001",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "WA07",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "736400",
   "pgm_ele_name": "Info Integration & Informatics"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7364",
   "pgm_ref_txt": "INFO INTEGRATION & INFORMATICS"
  },
  {
   "pgm_ref_code": "7924",
   "pgm_ref_txt": "MEDIUM PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0121",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0122",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002223DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 173174.0
  },
  {
   "fund_oblg_fiscal_yr": 2021,
   "fund_oblg_amt": 179071.0
  },
  {
   "fund_oblg_fiscal_yr": 2022,
   "fund_oblg_amt": 147755.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>There is a large demand for new types of data-intensive systems, both for traditional data processing and for machine learning, and these systems critically require powerful optimizers for their declarative languages.&nbsp; Developing and verifying such optimizers is very difficult: in the past, they were developed only by a small number of commercial database vendors with dedicated teams, while most modern systems today are developed by small teams without such expertise.<br /><br />This project used novel techniques from abstract algebra and formal methods and developed new approaches to query optimizers.&nbsp; Standard database queries process sets of records.&nbsp; In these traditional systems, every record is conceptually associated with a Boolean value, true or false, depending on whether the record is in the database or not.&nbsp; This project took a novel approach, and considered the case when records can be associated with a more abstract kind of information, more precisely they can be associated with values from a fixed semiring.&nbsp; For example, if the semiring is the set of Booleans, or the set of Natural Numbers, or the set of Real Numbers, then we are dealing with sets, or with bags, or with tensors (vectors, matrices, or higher-dimensional tensors).&nbsp; The project used this insight to carry over some classical query optimization techniques to modern data-intensive systems.<br /><br />The first system developed in this project was called Spores, and applied query optimizers to a linear algebra processing engine.&nbsp; Spores converts the linear algebra program into a Union of Conjunctive Queries, optimizes the latter, then converts it back to an optimized linear algebra program.&nbsp; A second system, Storel, uses a declarative approach to integrate flexible storage formats for sparse tensors into a general tensor optimizer.&nbsp; It can handle all well-known storage formats such as CSC, CSR, COO, as well as novel formats, in a uniform way. A more ambitious direction of this project consisted of extending the semiring technique to recursive queries.&nbsp; We developed an extension of Datalog, called Datalogo (\"o\" stands for a ring), which allows users to write sophisticated recursive queries that combine recursion and aggregation, while maintaining the elegant properties of pure datalog, such as termination or semi-naive evaluation.&nbsp; Finally, the project developed a new, very general optimization rule for recursive queries (datalog).&nbsp; The rule, called the FGH-rule (pronounced \"fig-rule\") is very simple, yet it captures many sophisticated optimization techniques developed for recursive queries, such as magic set rewriting, the PREM-rule, and semi-naive evaluation.</p><br>\n<p>\n Last Modified: 11/12/2023<br>\nModified by: Dan&nbsp;Suciu</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nThere is a large demand for new types of data-intensive systems, both for traditional data processing and for machine learning, and these systems critically require powerful optimizers for their declarative languages. Developing and verifying such optimizers is very difficult: in the past, they were developed only by a small number of commercial database vendors with dedicated teams, while most modern systems today are developed by small teams without such expertise.\n\nThis project used novel techniques from abstract algebra and formal methods and developed new approaches to query optimizers. Standard database queries process sets of records. In these traditional systems, every record is conceptually associated with a Boolean value, true or false, depending on whether the record is in the database or not. This project took a novel approach, and considered the case when records can be associated with a more abstract kind of information, more precisely they can be associated with values from a fixed semiring. For example, if the semiring is the set of Booleans, or the set of Natural Numbers, or the set of Real Numbers, then we are dealing with sets, or with bags, or with tensors (vectors, matrices, or higher-dimensional tensors). The project used this insight to carry over some classical query optimization techniques to modern data-intensive systems.\n\nThe first system developed in this project was called Spores, and applied query optimizers to a linear algebra processing engine. Spores converts the linear algebra program into a Union of Conjunctive Queries, optimizes the latter, then converts it back to an optimized linear algebra program. A second system, Storel, uses a declarative approach to integrate flexible storage formats for sparse tensors into a general tensor optimizer. It can handle all well-known storage formats such as CSC, CSR, COO, as well as novel formats, in a uniform way. A more ambitious direction of this project consisted of extending the semiring technique to recursive queries. We developed an extension of Datalog, called Datalogo (\"o\" stands for a ring), which allows users to write sophisticated recursive queries that combine recursion and aggregation, while maintaining the elegant properties of pure datalog, such as termination or semi-naive evaluation. Finally, the project developed a new, very general optimization rule for recursive queries (datalog). The rule, called the FGH-rule (pronounced \"fig-rule\") is very simple, yet it captures many sophisticated optimization techniques developed for recursive queries, such as magic set rewriting, the PREM-rule, and semi-naive evaluation.\t\t\t\t\tLast Modified: 11/12/2023\n\n\t\t\t\t\tSubmitted by: DanSuciu\n"
 }
}