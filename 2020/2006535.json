{
 "awd_id": "2006535",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Mechanized reasoning for functional programs",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2020-10-01",
 "awd_exp_date": "2024-09-30",
 "tot_intn_awd_amt": 450000.0,
 "awd_amount": 450000.0,
 "awd_min_amd_letter_date": "2020-05-15",
 "awd_max_amd_letter_date": "2020-05-15",
 "awd_abstract_narration": "This project investigates the usage of interactive proof assistants for reasoning about the properties of programs written in functional programming languages, with the specific focus on code written in the Haskell programming language and verified using the Coq proof assistant. Results from this project will increase our understanding of mechanical reasoning and its role in the development of a wide variety of software systems through specification identification and bug detection. In other words, development teams should be able to use proof assistants to discover a formal description of the properties and invariants that should hold for a code base and to identify parts of the code base that violate those properties. Additionally, the project develops a corpus of translated libraries, their specifications, and properties that may be used in future developments.\r\n\r\nThe project centers around the development, extension and use of a verification tool, called hs-to-coq that semi-automatically translates unmodified Haskell source code to the language of the Coq proof assistant. This project extends hs-to-coq so that it may be applied to effectful code which express side effects like input/output and other stateful computations using monadic actions. The project considers Haskell code that makes use of concurrency, mutable state, exceptions, or operating system calls. To this end, project members investigate the use of monadic and algebraic structures, such as interaction trees, free monads and effect handlers, both in the original Haskell code and in support of modeling effectful code in Coq.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Stephanie",
   "pi_last_name": "Weirich",
   "pi_mid_init": "C",
   "pi_sufx_name": "",
   "pi_full_name": "Stephanie C Weirich",
   "pi_email_addr": "sweirich@cis.upenn.edu",
   "nsf_id": "000368211",
   "pi_start_date": "2020-05-15",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Pennsylvania",
  "inst_street_address": "3451 WALNUT ST STE 440A",
  "inst_street_address_2": "",
  "inst_city_name": "PHILADELPHIA",
  "inst_state_code": "PA",
  "inst_state_name": "Pennsylvania",
  "inst_phone_num": "2158987293",
  "inst_zip_code": "191046205",
  "inst_country_name": "United States",
  "cong_dist_code": "03",
  "st_cong_dist_code": "PA03",
  "org_lgl_bus_name": "TRUSTEES OF THE UNIVERSITY OF PENNSYLVANIA, THE",
  "org_prnt_uei_num": "GM1XX56LEP58",
  "org_uei_num": "GM1XX56LEP58"
 },
 "perf_inst": {
  "perf_inst_name": "University of Pennsylvania",
  "perf_str_addr": "Levine Hall 3330 Walnut Street",
  "perf_city_name": "Philadelphia",
  "perf_st_code": "PA",
  "perf_st_name": "Pennsylvania",
  "perf_zip_code": "191043409",
  "perf_ctry_code": "US",
  "perf_cong_dist": "03",
  "perf_st_cong_dist": "PA03",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 450000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The goal of this project was to support the usage of interactive proofassistants, such as the Coq/Rocq tool, for reasoning about properties ofprograms written in functional programming languages, such as Haskell. The keyresults of this work included new techniques and algebraic structures forexpressing the semantics of languages in the language of proof assistants,including program adverbs, clairvoyance monads, demand semantics. These newtechniques simplify the process of reasoning about complex features inHaskell, including those that utilize laziness, state or concurrency. Part ofthe work specifically focused on mechanically reasoning about the asymptoticcomplexity (i.e. running time) of Haskell programs---a particularly difficulttask in this context where laziness means that some parts of the program mayor may not be evaluated. This work also supported investigations into theextension of typed programming languages, such as Haskell, with enhancedcapabilities for internal verification. In other works, allowing Haskellprogrammers to use its own type system to reason about data structures,runtime erasure, and data flow. The metatheory of these type system extensionswas also mechanically verified using the Coq proof assistant.<br />The research supported by the National Science Foundation produced multiplepeer-reviewed, published papers focusing on producing correct code in Haskell,through a variety of reasoning mechanism. The broader impacts of this work maylead to new approaches to correct software systems. During the lifetime ofthis grant, a number of students, both undergraduate and graduate, were givencritical support for their work.</p><br>\n<p>\n Last Modified: 01/29/2025<br>\nModified by: Stephanie&nbsp;C&nbsp;Weirich</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nThe goal of this project was to support the usage of interactive proofassistants, such as the Coq/Rocq tool, for reasoning about properties ofprograms written in functional programming languages, such as Haskell. The keyresults of this work included new techniques and algebraic structures forexpressing the semantics of languages in the language of proof assistants,including program adverbs, clairvoyance monads, demand semantics. These newtechniques simplify the process of reasoning about complex features inHaskell, including those that utilize laziness, state or concurrency. Part ofthe work specifically focused on mechanically reasoning about the asymptoticcomplexity (i.e. running time) of Haskell programs---a particularly difficulttask in this context where laziness means that some parts of the program mayor may not be evaluated. This work also supported investigations into theextension of typed programming languages, such as Haskell, with enhancedcapabilities for internal verification. In other works, allowing Haskellprogrammers to use its own type system to reason about data structures,runtime erasure, and data flow. The metatheory of these type system extensionswas also mechanically verified using the Coq proof assistant.\nThe research supported by the National Science Foundation produced multiplepeer-reviewed, published papers focusing on producing correct code in Haskell,through a variety of reasoning mechanism. The broader impacts of this work maylead to new approaches to correct software systems. During the lifetime ofthis grant, a number of students, both undergraduate and graduate, were givencritical support for their work.\t\t\t\t\tLast Modified: 01/29/2025\n\n\t\t\t\t\tSubmitted by: StephanieCWeirich\n"
 }
}