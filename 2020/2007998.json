{
 "awd_id": "2007998",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Practical and Formal Foundations for Intermittent Computer Systems",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2020-07-01",
 "awd_exp_date": "2024-06-30",
 "tot_intn_awd_amt": 450000.0,
 "awd_amount": 450000.0,
 "awd_min_amd_letter_date": "2020-06-16",
 "awd_max_amd_letter_date": "2020-06-16",
 "awd_abstract_narration": "Intermittent, energy-harvesting, battery-less devices are cheap, small, and low-maintenance devices for building computing, sensing, and communicating systems that will serve as the foundation for future internet of things, edge computing and sensing, and cyber physical systems.  However, intermittent software execution can make a device unreliable, due to the device's hard-to-predict power failure and recharge cycles, complicating deployment to high-assurance applications. This project defines the first formal models to precisely characterize the behavior of intermittent systems, formalizes desired correctness properties, designs and implements new sophisticated intermittent systems that are correct, and constructs benchmarks representative of real-world applications of intermittent systems.  This project's impacts are that its technical developments make intermittent systems capable of complex tasks, and at the same time, safer and more reliable, thereby allowing wider deployment into cyber-physical and internet-of-things applications.\r\n\r\nThe key technical contributions of this project are in its formal models of intermittent computing, starting with a sequential model, then extending to concurrent operations in the presence of peripheral devices with timing requirements.  These models characterize system behavior precisely, allowing for correctness proofs of deployed systems. Adapting these models to scheduling, this project develops the first provably correct energy collection and computation scheduler for intermittent systems.  The project establishes rules for verifying feasibility of a set of computing tasks with respect to energy constraints, and allows for graceful degradation when no schedule is feasible.  Benchmarks produced by this project aggregate and thoroughly characterize independently developed applications, enabling direct comparison between systems.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Brandon",
   "pi_last_name": "Lucia",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Brandon Lucia",
   "pi_email_addr": "blucia@andrew.cmu.edu",
   "nsf_id": "000688970",
   "pi_start_date": "2020-06-16",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Limin",
   "pi_last_name": "Jia",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Limin Jia",
   "pi_email_addr": "liminjia@cmu.edu",
   "nsf_id": "000555265",
   "pi_start_date": "2020-06-16",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Carnegie-Mellon University",
  "inst_street_address": "5000 FORBES AVE",
  "inst_street_address_2": "",
  "inst_city_name": "PITTSBURGH",
  "inst_state_code": "PA",
  "inst_state_name": "Pennsylvania",
  "inst_phone_num": "4122688746",
  "inst_zip_code": "152133815",
  "inst_country_name": "United States",
  "cong_dist_code": "12",
  "st_cong_dist_code": "PA12",
  "org_lgl_bus_name": "CARNEGIE MELLON UNIVERSITY",
  "org_prnt_uei_num": "U3NKNFLNQ613",
  "org_uei_num": "U3NKNFLNQ613"
 },
 "perf_inst": {
  "perf_inst_name": "Carnegie Mellon University",
  "perf_str_addr": "5000 Forbes Avenue",
  "perf_city_name": "Pittsburgh",
  "perf_st_code": "PA",
  "perf_st_name": "Pennsylvania",
  "perf_zip_code": "152133890",
  "perf_ctry_code": "US",
  "perf_cong_dist": "12",
  "perf_st_cong_dist": "PA12",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 450000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>This project developed formal models, tools, and runtime systems to ensure the correctness of intermittent execution of programs on embedded devices. This project resulted in the first set of correctness definitions for intermittent computing: memory consistency and timliness. Using the formal semantics, this project connected several intermittent runtime system implementations (e.g., undo-logging, redo-logging, checkpionts, and atomic tasks) and prove them equivalent in terms of providing memory consistency guarantees. This project also demonstrated that different mechanisms differ in their timeliness guarantees, and thus providing useful guidelines for application developers to choose specific runtime systems that suit their need.&nbsp;</p>\r\n<p>This project developed type-based static analyses to rule out programs that cannot be executed correctly on intermittent systems. One of the type systems is based on information flow type systems, which captures the influence of nondetermistic inputs and power failures to the program behavior. A second type system is based on modal logic, which internalizes the intemittent runtime primitives: crash, restore, and checkpoint.</p>\r\n<p>On the practical side, this project resulted in the first Rust-based intermittent runtime that allows programmers developing applications for intermittent systems to benefit from the strong memory safety guarantees provided by the Rust type system.&nbsp;</p>\r\n<p>This project resulted in papers publised at top programming language conferences OOPSLA&nbsp; 2019, OOPSLA 2020, PLDI 2021, PLDI 2023, and ESOP 2023.&nbsp;</p>\r\n<p>The project provided training opportunities for several undergraduates and graduate students, including several US citizens from underrepresented groups, and post-doctoral researchers. One of the female PhD students who participated in this project is now an Assistant Professor at UMD and another one of the female PhD students is scheduled to graduate in 2026.</p><br>\n<p>\n Last Modified: 12/24/2024<br>\nModified by: Brandon&nbsp;Lucia</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nThis project developed formal models, tools, and runtime systems to ensure the correctness of intermittent execution of programs on embedded devices. This project resulted in the first set of correctness definitions for intermittent computing: memory consistency and timliness. Using the formal semantics, this project connected several intermittent runtime system implementations (e.g., undo-logging, redo-logging, checkpionts, and atomic tasks) and prove them equivalent in terms of providing memory consistency guarantees. This project also demonstrated that different mechanisms differ in their timeliness guarantees, and thus providing useful guidelines for application developers to choose specific runtime systems that suit their need.\r\n\n\nThis project developed type-based static analyses to rule out programs that cannot be executed correctly on intermittent systems. One of the type systems is based on information flow type systems, which captures the influence of nondetermistic inputs and power failures to the program behavior. A second type system is based on modal logic, which internalizes the intemittent runtime primitives: crash, restore, and checkpoint.\r\n\n\nOn the practical side, this project resulted in the first Rust-based intermittent runtime that allows programmers developing applications for intermittent systems to benefit from the strong memory safety guarantees provided by the Rust type system.\r\n\n\nThis project resulted in papers publised at top programming language conferences OOPSLA 2019, OOPSLA 2020, PLDI 2021, PLDI 2023, and ESOP 2023.\r\n\n\nThe project provided training opportunities for several undergraduates and graduate students, including several US citizens from underrepresented groups, and post-doctoral researchers. One of the female PhD students who participated in this project is now an Assistant Professor at UMD and another one of the female PhD students is scheduled to graduate in 2026.\t\t\t\t\tLast Modified: 12/24/2024\n\n\t\t\t\t\tSubmitted by: BrandonLucia\n"
 }
}