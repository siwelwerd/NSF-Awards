{
 "awd_id": "2007686",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: A Mechanism for Extending A Programming Language with Interactive Syntax",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2020-07-01",
 "awd_exp_date": "2024-06-30",
 "tot_intn_awd_amt": 449948.0,
 "awd_amount": 449948.0,
 "awd_min_amd_letter_date": "2020-06-10",
 "awd_max_amd_letter_date": "2020-06-10",
 "awd_abstract_narration": "Software developers write programs as linear text. At the moment, this way of programming is the dominant way of instructing computers in industry. While the computer does not care in which format instructions are entered, the format greatly matters to the developer who must read a program many months later to understand and improve the code.  The problem is that a good amount of this linear program text describes geometric relationships among different pieces of the program's problem domain, say a piece of a map or a tabular arrangement of information. No effort on the part of a software developer can ever express such relationships in a textual way that makes them easy to decipher. The goal of this project is to demonstrate that form of textual-visual programming will greatly improve the communication between developers across time.\r\n\r\nThe project develops a mechanism for supplementing textual programming languages with visual and interactive elements: miniature graphical user interfaces (GUIs).  Using this mechanism, developers can create mini GUIs for specific problem domains such as, for example, two-dimension tables of conditional actions. Other developers add instances of these mini-GUIs to their code and interact with them to enter specific details. When the code is supposed to be run, the translator collaborates with these visual elements to render them as ordinary instructions. When the code is to be read, the visual nature expresses the geometric relationships much more directly than linear text. The project team will evaluate the mechanism across several dozen application areas.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Matthias",
   "pi_last_name": "Felleisen",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Matthias Felleisen",
   "pi_email_addr": "matthias@ccs.neu.edu",
   "nsf_id": "000286813",
   "pi_start_date": "2020-06-10",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Northeastern University",
  "inst_street_address": "360 HUNTINGTON AVE",
  "inst_street_address_2": "",
  "inst_city_name": "BOSTON",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "6173735600",
  "inst_zip_code": "021155005",
  "inst_country_name": "United States",
  "cong_dist_code": "07",
  "st_cong_dist_code": "MA07",
  "org_lgl_bus_name": "NORTHEASTERN UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "HLTMVS2JZBS6"
 },
 "perf_inst": {
  "perf_inst_name": "Northeastern University",
  "perf_str_addr": "360 Huntington Avenue",
  "perf_city_name": "Boston",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "021155005",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "MA07",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7943",
   "pgm_ref_txt": "PROGRAMMING LANGUAGES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 449948.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Software developers work with textual programming languages. &nbsp;Every piece of code is a linear sequence of letters, numbers, and words,even when this work is about expressing geometric ideas. Since software is mostly a message from one developer in the present to a developer in the future who must reconstruct these ideas and modify the code based on this understanding, linear text is an inadequate tool. Its use imposes a large cost---in terms of time and money---on the receiving developer.</p>\n<p><br />The PI and his team developed a theoretical foundation and practical tools for mixing linear text with editable images. The mix is dubbed\"interactive syntax\". When the developer saves interactive syntax to a file, the images are turned into annotated code; conversely, when the developer opens such a file with an appropriate editor, the annotated code turns itself into a picture. The automatic translation to annotated code and back ensures that the numerous existing software tools for plain text remain applicable to interactive syntax.&nbsp;</p>\n<p><br />To prove the general nature of the idea, the team has prototyped it in two different programming languages: Racket and ClojureScript. Using these prototypes, the PI's team has re-written a number of textual applications using interactive syntax. When confronted with both variants, third-party readers have uniformly preferred to read and digest the interactive-syntax variants. The project resulted in two dissertations and engaged several undergraduates in research projects.</p><br>\n<p>\n Last Modified: 11/11/2024<br>\nModified by: Matthias&nbsp;Felleisen</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nSoftware developers work with textual programming languages. Every piece of code is a linear sequence of letters, numbers, and words,even when this work is about expressing geometric ideas. Since software is mostly a message from one developer in the present to a developer in the future who must reconstruct these ideas and modify the code based on this understanding, linear text is an inadequate tool. Its use imposes a large cost---in terms of time and money---on the receiving developer.\n\n\n\nThe PI and his team developed a theoretical foundation and practical tools for mixing linear text with editable images. The mix is dubbed\"interactive syntax\". When the developer saves interactive syntax to a file, the images are turned into annotated code; conversely, when the developer opens such a file with an appropriate editor, the annotated code turns itself into a picture. The automatic translation to annotated code and back ensures that the numerous existing software tools for plain text remain applicable to interactive syntax.\n\n\n\nTo prove the general nature of the idea, the team has prototyped it in two different programming languages: Racket and ClojureScript. Using these prototypes, the PI's team has re-written a number of textual applications using interactive syntax. When confronted with both variants, third-party readers have uniformly preferred to read and digest the interactive-syntax variants. The project resulted in two dissertations and engaged several undergraduates in research projects.\t\t\t\t\tLast Modified: 11/11/2024\n\n\t\t\t\t\tSubmitted by: MatthiasFelleisen\n"
 }
}