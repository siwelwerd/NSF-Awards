{
 "awd_id": "1956364",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SaTC: CORE: Small: Collaborative: Understanding and Detecting Memory Bugs in Rust",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2020-07-01",
 "awd_exp_date": "2024-06-30",
 "tot_intn_awd_amt": 199997.0,
 "awd_amount": 199997.0,
 "awd_min_amd_letter_date": "2020-06-30",
 "awd_max_amd_letter_date": "2020-06-30",
 "awd_abstract_narration": "Rust is a young programming language designed for systems software development. Its main design goal is to achieve runtime performance as good as its competitor language, C, while offering better memory and thread safety using a linear type system and strict compile-time checking. Rust has become increasingly popular among developers of safety-critical software, such as operating systems, browsers, and block-chain systems. However, both practitioners and researchers know little about the status of memory bugs in real-world Rust programs. For example, do Rust compile-time checks eliminate all memory bugs? If not, do memory bugs in Rust exhibit certain detectable patterns? This project seeks answers to these questions by devising techniques to identify and eliminate the memory bugs? In particular, it aims to achieve a better understanding of common mistakes made by Rust programmers and build novel techniques to catch memory bugs missed by Rust compile-time checks. The outcome will influence how Rust evolves, guide how developers program Rust safely, and improve the safety of the Rust ecosystem.     \r\n\r\nRust safety mechanisms are sound, but sometimes they are too strict and prevent flexible control over low-level resources. To mitigate this problem, Rust allows developers to bypass its compiler checks using unsafe code. A function can be declared as unsafe. A piece of code inside a safe function can be unsafe, known as interior unsafe, where the unsafe code is encapsulated internally and treated as safe externally. Unfortunately, unsafe code and interior unsafe code can lead to memory bugs since they bypass Rust safety checks. This project aims to better understand Rust memory bugs and build novel static/dynamic tools to combat Rust memory bugs. This project contains three components: (1) a comprehensive taxonomy of Rust memory bugs, (2) novel static techniques to identify memory bugs in interior unsafe functions, and (3) novel fuzzing techniques enhanced by the safe/unsafe information in Rust.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Hao",
   "pi_last_name": "Chen",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Hao Chen",
   "pi_email_addr": "chen@ucdavis.edu",
   "nsf_id": "000202512",
   "pi_start_date": "2020-06-30",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of California-Davis",
  "inst_street_address": "1850 RESEARCH PARK DR STE 300",
  "inst_street_address_2": "",
  "inst_city_name": "DAVIS",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "5307547700",
  "inst_zip_code": "956186153",
  "inst_country_name": "United States",
  "cong_dist_code": "04",
  "st_cong_dist_code": "CA04",
  "org_lgl_bus_name": "UNIVERSITY OF CALIFORNIA, DAVIS",
  "org_prnt_uei_num": "",
  "org_uei_num": "TX2DAGQPENZ5"
 },
 "perf_inst": {
  "perf_inst_name": "University of California-Davis",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "956168562",
  "perf_ctry_code": "US",
  "perf_cong_dist": "04",
  "perf_st_cong_dist": "CA04",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 199997.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>This project has helped better understand Rust memory bugs missed by Rust's compiler checks and has built novel static and dynamic tools to combat Rust memory bugs.<br /><br />Intellectual Merit: This project presents a comprehensive taxonomy of Rust memory bugs. We first conducted an empirical study through close, manual inspection of Rust-related Stack Overflow questions. We sought to understand (1) what safety rules are challenging to learn and program with, (2) under which contexts a safety rule becomes more difficult to apply, and (3) whether the Rust compiler is sufficiently helpful in debugging safety-rule violations. We then performed an online survey with Rust programmers to validate the findings of the empirical study. We invited participants to evaluate program variants that differ from each other, either in terms of violated safety rules or the code constructs involved in the violation, and compared the participants&rsquo; performance on the variants. Our mixed-methods investigation revealed a range of consistent findings that can benefit Rust learners, practitioners, and language designers.<br /><br />This project developed a tool, Rust-lancet, for automatically fixing the violations of Rust&rsquo;s ownership rules. Rust-lancet can enhance test generation techniques for Rust, since Rust&rsquo;s compiler checks are too strict and tests generated by automated techniques are likely to violate some safety rules of Rust and be rejected by the Rust compiler. Specifically, we devise three strategies for altering code, each intended to modify a Rust program and make it pass Rust&rsquo;s compiler checks. Additionally, we introduce mental semantics to model the behaviors of Rust programs that cannot be compiled due to ownership-rule violations. We design an approach to verify whether modified programs preserve their original behaviors before patches are applied. We apply Rust-lancet to 160 safety-rule violations from two sources, successfully fixing 102 violations under the optimal configuration &mdash; more than rustc and six LLM-based techniques. Notably, Rust-lancet avoids generating any incorrect patches, a distinction from all other baseline techniques. We also verify the effectiveness of each fixing strategy and behavior preservation validation and affirm the rationale behind these components.<br /><br />Besides static analysis, this project also developed novel fuzzing techniques for detecting bugs that cannot be detected reliably by static analysis. Crafting high-quality fuzz drivers not only is time-consuming but also requires a deep understanding of the library. However, the state-of-the-art automatic fuzz driver generation techniques fall short of expectations. While fuzz drivers derived from consumer code can reach deep states, they have limited coverage. Conversely, interpretative fuzzing can explore most API calls but requires numerous attempts within a large search space. We propose a coverage-guided fuzzer for prompt fuzzing that iteratively generates fuzz drivers to explore undiscovered library code.&nbsp; Our evaluation shows that our approach increased branch coverage over the state-of-the-art fuzzers significantly and that it detected 33 genuine, new confirmed bugs.<br /><br />Broader Impacts: This project has supported four PhD students. Both PIs have incorporated some project results into our security and programming language-related courses. The PIs have also given several talks on Rust memory safety, static analysis, and fuzzing. The PIs have released their tools as open source projects, which have generated substantial community interests.<br /><br /></p><br>\n<p>\n Last Modified: 07/30/2024<br>\nModified by: Hao&nbsp;Chen</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nThis project has helped better understand Rust memory bugs missed by Rust's compiler checks and has built novel static and dynamic tools to combat Rust memory bugs.\n\nIntellectual Merit: This project presents a comprehensive taxonomy of Rust memory bugs. We first conducted an empirical study through close, manual inspection of Rust-related Stack Overflow questions. We sought to understand (1) what safety rules are challenging to learn and program with, (2) under which contexts a safety rule becomes more difficult to apply, and (3) whether the Rust compiler is sufficiently helpful in debugging safety-rule violations. We then performed an online survey with Rust programmers to validate the findings of the empirical study. We invited participants to evaluate program variants that differ from each other, either in terms of violated safety rules or the code constructs involved in the violation, and compared the participants performance on the variants. Our mixed-methods investigation revealed a range of consistent findings that can benefit Rust learners, practitioners, and language designers.\n\nThis project developed a tool, Rust-lancet, for automatically fixing the violations of Rusts ownership rules. Rust-lancet can enhance test generation techniques for Rust, since Rusts compiler checks are too strict and tests generated by automated techniques are likely to violate some safety rules of Rust and be rejected by the Rust compiler. Specifically, we devise three strategies for altering code, each intended to modify a Rust program and make it pass Rusts compiler checks. Additionally, we introduce mental semantics to model the behaviors of Rust programs that cannot be compiled due to ownership-rule violations. We design an approach to verify whether modified programs preserve their original behaviors before patches are applied. We apply Rust-lancet to 160 safety-rule violations from two sources, successfully fixing 102 violations under the optimal configuration  more than rustc and six LLM-based techniques. Notably, Rust-lancet avoids generating any incorrect patches, a distinction from all other baseline techniques. We also verify the effectiveness of each fixing strategy and behavior preservation validation and affirm the rationale behind these components.\n\nBesides static analysis, this project also developed novel fuzzing techniques for detecting bugs that cannot be detected reliably by static analysis. Crafting high-quality fuzz drivers not only is time-consuming but also requires a deep understanding of the library. However, the state-of-the-art automatic fuzz driver generation techniques fall short of expectations. While fuzz drivers derived from consumer code can reach deep states, they have limited coverage. Conversely, interpretative fuzzing can explore most API calls but requires numerous attempts within a large search space. We propose a coverage-guided fuzzer for prompt fuzzing that iteratively generates fuzz drivers to explore undiscovered library code. Our evaluation shows that our approach increased branch coverage over the state-of-the-art fuzzers significantly and that it detected 33 genuine, new confirmed bugs.\n\nBroader Impacts: This project has supported four PhD students. Both PIs have incorporated some project results into our security and programming language-related courses. The PIs have also given several talks on Rust memory safety, static analysis, and fuzzing. The PIs have released their tools as open source projects, which have generated substantial community interests.\n\n\t\t\t\t\tLast Modified: 07/30/2024\n\n\t\t\t\t\tSubmitted by: HaoChen\n"
 }
}