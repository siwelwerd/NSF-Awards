{
 "awd_id": "2008940",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "Collaborative Research: CNS Core: Small: RUI: Intelligent Developer Infrastructure",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Jason Hallstrom",
 "awd_eff_date": "2020-07-15",
 "awd_exp_date": "2024-06-30",
 "tot_intn_awd_amt": 176018.0,
 "awd_amount": 176018.0,
 "awd_min_amd_letter_date": "2020-07-13",
 "awd_max_amd_letter_date": "2020-07-13",
 "awd_abstract_narration": "Software engineers use development tools to help develop software.  The tools may compile computer code into runnable programs, debug programs to find and fix errors, and deploy software across systems. Existing tools used for these tasks are complex. The misuse of tools can introduce errors and inefficiencies. For example, a popular tool for compiling code, called \"make\", automates compilation with a user-provided encoding of the task. Users of \"make\" must produce either a simple but inefficient encoding, or an efficient but complex encoding with an increased risk of error. This project introduces techniques that correctly and efficiently automate compilation, debugging, and deployment tasks without programming.\r\n\r\nThis project proposes a core technique built on dependency graphs. A dependency graph is generated by observing a piece of software interacting with its environment as it runs. This project proposes three tools that leverage dependency graphs to automate software development tasks. First, Riker correctly and efficiently automates compilation tasks based on a single example compilation.  Second, Scotty answers high-level queries about where a program went wrong by observing the program's execution.  Third, Locutus automates software deployment tasks by observing the user during an example deployment.\r\n\r\nThis project has the potential to impact the day-to-day work of software developers significantly. Automating support tasks with minimal developer input reduces the cost of software development and guarantees that support tasks are correct by construction. These changes free software developers to focus on their core tasks. This project will provide undergraduate students at Grinnell College and Williams College with opportunities to participate in research, and will broaden participation by including students from underrepresented groups.\r\n\r\nAll products of this project will be hosted at https://github.com/curtsinger-lab/idi-grant. Code produced in the course of this project will be released under the MIT license. Modifications to existing software will be released under a compatible open source license. Any non-code products will comprise only publicly-available, non-confidential information, and will be released under a Creative Commons license.  All products of this project will be preserved for at least five years after the conclusion of the project.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Charles",
   "pi_last_name": "Curtsinger",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Charles Curtsinger",
   "pi_email_addr": "curtsinger@grinnell.edu",
   "nsf_id": "000702112",
   "pi_start_date": "2020-07-13",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Grinnell College",
  "inst_street_address": "733 BROAD ST",
  "inst_street_address_2": "",
  "inst_city_name": "GRINNELL",
  "inst_state_code": "IA",
  "inst_state_name": "Iowa",
  "inst_phone_num": "6412694983",
  "inst_zip_code": "501122227",
  "inst_country_name": "United States",
  "cong_dist_code": "02",
  "st_cong_dist_code": "IA02",
  "org_lgl_bus_name": "THE TRUSTEES OF GRINNELL COLLEGE",
  "org_prnt_uei_num": "",
  "org_uei_num": "NRFXPGZU88G2"
 },
 "perf_inst": {
  "perf_inst_name": "Grinnell College",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "IA",
  "perf_st_name": "Iowa",
  "perf_zip_code": "501122227",
  "perf_ctry_code": "US",
  "perf_cong_dist": "02",
  "perf_st_cong_dist": "IA02",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "735400",
   "pgm_ele_name": "CSR-Computer Systems Research"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 176018.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Software developers rely on build systems throughout a project's lifecycle. Build systems describe the steps required to turn a project's code and resources into a runnable program. Critically, these build systems must be both fast and correct to be useful. Developers run builds frequently during the software development process, and builds must correctly account for changes and updates anywhere in a project and its dependencies.</p>\n<p>Prior build systems ask users to specify the main steps required to build a piece of software, as well as the dependencies and outputs of each major step. This forces developers to choose between speed and correctness. A simple build specification is easy to write correctly but is rarely efficient. More efficient build specifications can be faster but often contain errors that can result in incorrect or broken builds. Our work addresses this challenge by making builds both easy to specify and automatically correct.</p>\n<p>Our key insight is that software builds reveal their dependencies as they run. Any files read during the build are dependencies, and the files written during the build are outputs. We developed a new build system called Riker that observes these dependencies and outputs for real builds. Riker uses the dependency information from the previous build to update the build's output any time a project's dependencies are changed. Riker is also able to run a subset of a build's major steps, skipping any whose inputs are unchanged since the last build. Riker's design ensures that its builds are correct and run as few steps as possible in response to the changes since the last build.</p>\n<p>Riker is an effective build tool. We used Riker to replace the existing build systems for several large software projects. We use both Riker and the project's default build system to run builds of each project over a series of changes developers saved in the project's code repository. Riker is nearly as efficient as the projects' default build systems over these incremental builds with none of the risk of errors from incorrect dependency information. Riker builds are also much easier to specify; many software projects have build systems specified over hundreds to thousands of lines, while most Riker builds can be specified in just a few lines without sacrificing efficiency.</p>\n<p>Recently, we have explored extensions to Riker that would allow it to work for system orchestration tasks. System orchestration is any work that involves managing the files and software across separate computers. Existing tools for system orchestration have similar downsides to legacy build systems; users must choose between simple specifications or efficient updates. We believe Riker's automatic dependency and output discovery could be beneficial in this domain as well.</p>\n<p>Riker is an open-source software project and is currently available for Linux. We are exploring strategies for porting Riker to other platforms.</p><br>\n<p>\n Last Modified: 11/10/2024<br>\nModified by: Charles&nbsp;Curtsinger</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nSoftware developers rely on build systems throughout a project's lifecycle. Build systems describe the steps required to turn a project's code and resources into a runnable program. Critically, these build systems must be both fast and correct to be useful. Developers run builds frequently during the software development process, and builds must correctly account for changes and updates anywhere in a project and its dependencies.\n\n\nPrior build systems ask users to specify the main steps required to build a piece of software, as well as the dependencies and outputs of each major step. This forces developers to choose between speed and correctness. A simple build specification is easy to write correctly but is rarely efficient. More efficient build specifications can be faster but often contain errors that can result in incorrect or broken builds. Our work addresses this challenge by making builds both easy to specify and automatically correct.\n\n\nOur key insight is that software builds reveal their dependencies as they run. Any files read during the build are dependencies, and the files written during the build are outputs. We developed a new build system called Riker that observes these dependencies and outputs for real builds. Riker uses the dependency information from the previous build to update the build's output any time a project's dependencies are changed. Riker is also able to run a subset of a build's major steps, skipping any whose inputs are unchanged since the last build. Riker's design ensures that its builds are correct and run as few steps as possible in response to the changes since the last build.\n\n\nRiker is an effective build tool. We used Riker to replace the existing build systems for several large software projects. We use both Riker and the project's default build system to run builds of each project over a series of changes developers saved in the project's code repository. Riker is nearly as efficient as the projects' default build systems over these incremental builds with none of the risk of errors from incorrect dependency information. Riker builds are also much easier to specify; many software projects have build systems specified over hundreds to thousands of lines, while most Riker builds can be specified in just a few lines without sacrificing efficiency.\n\n\nRecently, we have explored extensions to Riker that would allow it to work for system orchestration tasks. System orchestration is any work that involves managing the files and software across separate computers. Existing tools for system orchestration have similar downsides to legacy build systems; users must choose between simple specifications or efficient updates. We believe Riker's automatic dependency and output discovery could be beneficial in this domain as well.\n\n\nRiker is an open-source software project and is currently available for Linux. We are exploring strategies for porting Riker to other platforms.\t\t\t\t\tLast Modified: 11/10/2024\n\n\t\t\t\t\tSubmitted by: CharlesCurtsinger\n"
 }
}