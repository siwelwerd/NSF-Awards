{
 "awd_id": "2008799",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Beyond Accelerators - Using FPGAs to Achieve Fine-grained Control of Data-flows in Embedded SoCs",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": null,
 "po_email": "",
 "po_sign_block_name": "Danella Zhao",
 "awd_eff_date": "2020-07-15",
 "awd_exp_date": "2023-06-30",
 "tot_intn_awd_amt": 499857.0,
 "awd_amount": 499857.0,
 "awd_min_amd_letter_date": "2020-07-02",
 "awd_max_amd_letter_date": "2020-07-02",
 "awd_abstract_narration": "Modern computing systems are to become context-aware by exploiting knowledge of their environment and taking complex decisions based on a multitude of sensory streams. On the other hand, in safety-critical and high-integrity systems, the capability to detect and correct violations of timing and security invariants, i.e., self-awareness, is of the utmost importance. Unfortunately, as platforms grow in complexity to improve context-awareness, the inter-play between concurrent software components and the underlying hardware becomes hard to predict and to reason about. Therefore, there exists a fundamental tension between context- and self-awareness.  This research tackles the challenge of achieving strong self-awareness without trading off system complexity. It does so by defining a new class of software-shaped (SOSH) platforms that provide direct control over the flow of data exchanged between hardware components. SOSH platforms can be implemented today using existing and commercially available hardware that includes traditional processing units and reprogrammable logic on-chip. SOSH data-flow manipulation primitives are constructed in reprogrammable hardware and interposed between traditional central processors, memory modules, and I/O devices. By turning memory and I/O data-flows into manageable entities, a new degree of introspection is unlocked, which constitutes the premise for self-awareness. The project explores key design principles in the definition and implementation of low-overhead SOSH primitives for operations over data-flows. It investigates research avenues on the use of the SOSH paradigm to enact workload profiling and prediction; to implement advanced memory models; to perform security threat identification and mitigation. Evaluation metrics include achievable performance envelopes, expressiveness of programming interfaces, and level of control over access to confidential data and system bottlenecks. The milestones achieved in the definition of SOSH components will be immediately transitioned into practice. Areas of impact include, but are not limited to, civil avionics, autonomous driving technology, analytics engines, and privacy-hardened data stores. The obtained results will be disseminated in peer-reviewed journals, international conferences, and workshops. In addition, a set of publicly available repositories of code, hardware designs, and datasets will be maintained throughout the lifespan of the project and for a minimum of three years thereafter.\r\n\r\nThe goal of this research is a technology to achieve strong self-awareness in complex systems. The key observation is that the interplay between software and hardware modules (i.e., CPUs, GPUs, DSPs, memory modules, and I/O devices) is embedded in the flow of data they exchange. Thus, turning data-flows into observable and manageable entities enables an unprecedented degree of self-awareness. From this observation, a new paradigm for software-shaped (SOSH) platforms is introduced. In SOSH platforms, the software can instantiate hardware modules to constantly monitor data-flows. It can define policies and performance envelopes for data-flow exchanges, and specify actions that affect both hardware and software components in case of a policy violation. The SOSH methodology targets commercial platforms that integrate embedded processors and programmable logic. Support for partial dynamic reconfiguration is also leveraged to achieve runtime adaptation. Four super-classes of data-flow manipulation primitives are considered. First, merging primitives enable the definition of rules to join data-flows from different components. Next, reordering/filtering primitives adapt seminal results in stream-processing to reduce and reorganize the amount of data moved between components. Third, profiling/logging primitives support the extraction of data-flow characteristics for prediction and state/progress tracking of application workloads. Lastly, splitting primitives allow selective re-routing of sub-flows to improve timing and relieve congestion at the performance bottlenecks. The SOSH paradigm lays the basis for novel approaches for the design and analysis of high-integrity and safety-critical systems. More broadly, SOSH platforms represent the first appearance of a new class of truly self-assessing and self-modifying systems, shaking the foundations of traditional hardware/software layers as non-participating entities. In SOSH platforms, the software can systematically inspect and influence the behavior of the hardware; while the hardware constructs and leverages knowledge of applications to enact goal-aware management.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Renato",
   "pi_last_name": "Mancuso",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Renato Mancuso",
   "pi_email_addr": "rmancuso@bu.edu",
   "nsf_id": "000757827",
   "pi_start_date": "2020-07-02",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Trustees of Boston University",
  "inst_street_address": "1 SILBER WAY",
  "inst_street_address_2": "",
  "inst_city_name": "BOSTON",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "6173534365",
  "inst_zip_code": "022151703",
  "inst_country_name": "United States",
  "cong_dist_code": "07",
  "st_cong_dist_code": "MA07",
  "org_lgl_bus_name": "TRUSTEES OF BOSTON UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "THL6A6JLE1S7"
 },
 "perf_inst": {
  "perf_inst_name": "Trustees of Boston University",
  "perf_str_addr": "111 Cummington Mall, CS",
  "perf_city_name": "Boston",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "022152411",
  "perf_ctry_code": "US",
  "perf_cong_dist": "07",
  "perf_st_cong_dist": "MA07",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7941",
   "pgm_ref_txt": "COMPUTER ARCHITECTURE"
  }
 ],
 "app_fund": [
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 499857.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><strong>Revolutionizing Safety-Critical Systems: The SOSH Paradigm</strong></p>\n<p>This concluded grant has provided crucial support for the proposal and investigation of a new architectural paradigm for safety-critical platform design and consolidation, known as SOSH or Software-Shaped Platforms. We hereby review the foundational aspects of SOSH, its practical applications, and the envisioned capabilities to be explored in future work.</p>\n<p><strong>Foundational Aspects of SOSH</strong></p>\n<p><em>1. Introduction and Foundation</em></p>\n<p>The SOSH paradigm represents a visionary approach to designing computing systems. It seeks to aid the transition of safety-critical systems into intelligent entities capable of interacting with their environment in a nuanced and adaptive manner. At its core, SOSH recognizes that safety and intelligence need to to be mutually exclusive. This paradigm shift acknowledges that the modern computing landscape demands more than just passive compliance with safety standards&mdash;it requires active engagement with real-world scenarios.</p>\n<p>To reconcile safety and intelligence, the SOSH paradigm proposes to turn on-chip data-flows into programmatically manageable entities. Doing so exposes better control to the platform's system software about the use of performance-critical resources such as CPUs, accelerators, interconnects, and memory subsystems. This concluded grant has explored the possibility of defining foundational data-flow manipulation blocks in commercially available CPU+FPGA embedded systems.</p>\n<p><em>2. Critical Enabling Mechanisms</em></p>\n<p>- Partial Dynamic Reconfiguration (PDR)</p>\n<p>PDR is a key enabler that allows hardware components within FPGA-based systems to be dynamically instantiated without requiring system resets. This capability opens the door to rapid and efficient hardware module swapping, providing the flexibility needed to adapt to changing requirements.&nbsp;</p>\n<p>- Programmable Logic In-the-Middle (PLIM)</p>\n<p>PLIM represents a fundamental innovation within SOSH. It facilitates the rerouting of memory transactions through programmable logic, thereby enabling unprecedented levels of control over data flow within computing systems. PLIM extends the boundaries of traditional memory management, allowing for resource optimization, performance enhancement, and, crucially, self-awareness in computing systems.</p>\n<p>- Coherence-Aided Elective and Seamless Alternative Routing (CAESAR)</p>\n<p>CAESAR takes advantage of cache-coherent on-chip FPGAs to optimize memory traffic management. By leveraging cache-coherence and FPGAs, CAESAR enhances memory throughput and offers greater operational flexibility. This mechanism complements PLIM, further expanding the capabilities of SOSH.</p>\n<p><strong>Practical Applications of SOSH</strong></p>\n<p>SOSH has already been put into action through the development of concrete data flow operation blocks. These modules serve as proof of concept and demonstrate key data-flow manipulation primitives.</p>\n<p><em>1. Scheduler in-the-Middle (SchIM)</em></p>\n<p>SchIM is a configurable module that interposes itself between the last-level cache (LLC) of a CPU cluster and the memory controller, effectively managing memory transaction scheduling. Memory scheduling policies can be tailored at runtime, offering flexibility in memory management. We demonstrated the use of Time Division Multiple Access (TDMA), Fixed Priority (FP), and Traffic Shaping (TS). SchIM demonstrates how SOSH provides fine-grained control over data flow and allows for the definition of logic governing memory transactions from various upstream components to downstream components.</p>\n<p><em>2. Relational Memory Engine (RME)</em></p>\n<p>RME showcases the power of data flow reordering and filtering. Positioned between main memory and LLC, this configurable module transforms data on-the-fly from a row-major format to arbitrary column groups by leveraging the PLIM paradigm. Traditional data management systems often cater to either transactional or analytical workloads, necessitating data format conversions. RME breaks free from this limitation by creating reorganized aliases of data, allowing the CPU to access relational data with optimal spatial locality. This not only improves access efficiency but also reduces cache footprint.&nbsp;</p>\n<p><em>3. Silent Application Profiler</em></p>\n<p>Coherence backstabbing and the CAESAR approach have paved the way for non-intrusive profiling and logging within SOSH. The Silent Application Profiler was introduced as a means to collect fine-grained metadata about main memory traffic generated by CPUs. By monitoring the coherence fabric, the profiler captures physical addresses and timestamps of cache line accesses that result in LLC cache misses. This passive monitoring approach incurs minimal overhead and offers valuable insights into application behavior, access patterns, and progress tracking.</p>\n<p><strong>Envisioned Capabilities of SOSH</strong></p>\n<p><strong>&nbsp;</strong>SOSH's journey is far from over, with envisioned capabilities pointing toward an even more intelligent and adaptable future for computing systems.</p>\n<p><em>1. Progress Tracking and Behavior Prediction</em></p>\n<p>Envisioned capabilities include the integration of progress tracking modules within SOSH platforms, allowing for proactive resource allocation and application behavior prediction.</p>\n<p><em>2. Advanced Memory Models</em></p>\n<p>SOSH platforms are set to redefine memory semantics with advanced models like historical memory and self-destructing memory. These memory models will introduce new levels of control and security to computing systems.</p>\n<p><em>3. Security Threat Mitigation</em></p>\n<p>SOSH platforms have great potential for allowing in-hardware behavior-based detection of malware activity.&nbsp;<br /><strong>&nbsp;</strong></p>\n<p><strong>Conclusion</strong></p>\n<p>In conclusion, the grant's pioneering research efforts have not only established the SOSH paradigm but have also unlocked its immense potential across a spectrum of practical applications and envisioned capabilities. SOSH stands poised to usher in a new era of safety-critical systems characterized by intelligence, adaptability, and enhanced security, fundamentally reshaping the landscape of computing systems.</p>\n<p>&nbsp;</p><br>\n<p>\n Last Modified: 11/19/2023<br>\nModified by: Renato&nbsp;Mancuso</p></div>\n<div class=\"porSideCol\"\n><div class=\"each-gallery\">\n<div class=\"galContent\" id=\"gallery0\">\n<div class=\"photoCount\" id=\"photoCount0\">\n\t\t\t\t\t\t\t\t\tImages (<span id=\"selectedPhoto0\">1</span> of <span class=\"totalNumber\"></span>)\t\n\t\t\t\t\t\t\t\t</div>\n<div class=\"galControls onePhoto\" id=\"controls0\"></div>\n<div class=\"galSlideshow\" id=\"slideshow0\"></div>\n<div class=\"galEmbox\" id=\"embox\">\n<div class=\"image-title\"></div>\n</div>\n</div>\n<div class=\"galNavigation\" id=\"navigation0\">\n<ul class=\"thumbs\" id=\"thumbs0\">\n<li>\n<a href=\"/por/images/Reports/POR/2023/2008799/2008799_10682354_1700419847361_CAESAR_log--rgov-214x142.png\" original=\"/por/images/Reports/POR/2023/2008799/2008799_10682354_1700419847361_CAESAR_log--rgov-800width.png\" title=\"CAESAR-aided Silent Memory Profiling\"><img src=\"/por/images/Reports/POR/2023/2008799/2008799_10682354_1700419847361_CAESAR_log--rgov-66x44.png\" alt=\"CAESAR-aided Silent Memory Profiling\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">High-level operational principle of a CAESAR-aided memory profiler. The module passively listens to coherent interconnect-generated snoop transactions, which carry the timestamp and physical address of requested cache lines. Request metadata is logged on a dedicated scratchpad.</div>\n<div class=\"imageCredit\">Renato Mancuso (BU)</div>\n<div class=\"imagePermisssions\">Creative Commons</div>\n<div class=\"imageSubmitted\">Renato&nbsp;Mancuso\n<div class=\"imageTitle\">CAESAR-aided Silent Memory Profiling</div>\n</div>\n</li><li>\n<a href=\"/por/images/Reports/POR/2023/2008799/2008799_10682354_1700419936140_CAESAR_profile--rgov-214x142.png\" original=\"/por/images/Reports/POR/2023/2008799/2008799_10682354_1700419936140_CAESAR_profile--rgov-800width.png\" title=\"SD-VBS Memory Activity Obtained via CAESAR-aided Profiling\"><img src=\"/por/images/Reports/POR/2023/2008799/2008799_10682354_1700419936140_CAESAR_profile--rgov-66x44.png\" alt=\"SD-VBS Memory Activity Obtained via CAESAR-aided Profiling\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Partial visualization of memory traces obtained via the CAESAR-aided profiling module by observing the memory traffic generated by two San Diego Vision Benchmark applications, namely (a) tracking and (b) mser.</div>\n<div class=\"imageCredit\">Renato Mancuso (BU)</div>\n<div class=\"imagePermisssions\">Creative Commons</div>\n<div class=\"imageSubmitted\">Renato&nbsp;Mancuso\n<div class=\"imageTitle\">SD-VBS Memory Activity Obtained via CAESAR-aided Profiling</div>\n</div>\n</li><li>\n<a href=\"/por/images/Reports/POR/2023/2008799/2008799_10682354_1700419766768_RME_slides--rgov-214x142.png\" original=\"/por/images/Reports/POR/2023/2008799/2008799_10682354_1700419766768_RME_slides--rgov-800width.png\" title=\"RME in Action\"><img src=\"/por/images/Reports/POR/2023/2008799/2008799_10682354_1700419766768_RME_slides--rgov-66x44.png\" alt=\"RME in Action\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">High-level organization of the Relational Memory Engine. When the CPU makes a request for a cache line of reorganized data, main memory is accessed. Useful data items are extracted on the fly based on the provided geometry specification, and cache lines with only useful data are issued in response.</div>\n<div class=\"imageCredit\">Renato Mancuso (BU)</div>\n<div class=\"imagePermisssions\">Creative Commons</div>\n<div class=\"imageSubmitted\">Renato&nbsp;Mancuso\n<div class=\"imageTitle\">RME in Action</div>\n</div>\n</li><li>\n<a href=\"/por/images/Reports/POR/2023/2008799/2008799_10682354_1700419678795_schim_trace--rgov-214x142.png\" original=\"/por/images/Reports/POR/2023/2008799/2008799_10682354_1700419678795_schim_trace--rgov-800width.png\" title=\"SchIM Memory Scheduling in Action\"><img src=\"/por/images/Reports/POR/2023/2008799/2008799_10682354_1700419678795_schim_trace--rgov-66x44.png\" alt=\"SchIM Memory Scheduling in Action\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">Trace of memory transactions collected on-chip via a real-hardware instantiation of the Scheduler in-the-Middle (SchIM) module.</div>\n<div class=\"imageCredit\">Renato Mancuso (BU)</div>\n<div class=\"imagePermisssions\">Creative Commons</div>\n<div class=\"imageSubmitted\">Renato&nbsp;Mancuso\n<div class=\"imageTitle\">SchIM Memory Scheduling in Action</div>\n</div>\n</li><li>\n<a href=\"/por/images/Reports/POR/2023/2008799/2008799_10682354_1700419361886_ps_pl_soc--rgov-214x142.png\" original=\"/por/images/Reports/POR/2023/2008799/2008799_10682354_1700419361886_ps_pl_soc--rgov-800width.png\" title=\"CPU+FPGA Alternative Memory Routing\"><img src=\"/por/images/Reports/POR/2023/2008799/2008799_10682354_1700419361886_ps_pl_soc--rgov-66x44.png\" alt=\"CPU+FPGA Alternative Memory Routing\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">CPU+FPGA SoC overview. Direct route to main memory (yellow) and through-FPGA alternative route possible via the proposed PLIM approach (blue).</div>\n<div class=\"imageCredit\">Renato Mancuso (BU)</div>\n<div class=\"imagePermisssions\">Creative Commons</div>\n<div class=\"imageSubmitted\">Renato&nbsp;Mancuso\n<div class=\"imageTitle\">CPU+FPGA Alternative Memory Routing</div>\n</div>\n</li><li>\n<a href=\"/por/images/Reports/POR/2023/2008799/2008799_10682354_1700419599921_SOSH_overview--rgov-214x142.png\" original=\"/por/images/Reports/POR/2023/2008799/2008799_10682354_1700419599921_SOSH_overview--rgov-800width.png\" title=\"SOSH Data-flow Manipulation Primitives\"><img src=\"/por/images/Reports/POR/2023/2008799/2008799_10682354_1700419599921_SOSH_overview--rgov-66x44.png\" alt=\"SOSH Data-flow Manipulation Primitives\"></a>\n<div class=\"imageCaptionContainer\">\n<div class=\"imageCaption\">High-level semantics of key data-flow manipulation primitives (black boxes) in software-shaped platforms (SOSH).</div>\n<div class=\"imageCredit\">Renato Mancuso (BU)</div>\n<div class=\"imagePermisssions\">Creative Commons</div>\n<div class=\"imageSubmitted\">Renato&nbsp;Mancuso\n<div class=\"imageTitle\">SOSH Data-flow Manipulation Primitives</div>\n</div>\n</li></ul>\n</div>\n</div></div>\n</div>\n",
  "por_txt_cntn": "\n\nRevolutionizing Safety-Critical Systems: The SOSH Paradigm\n\n\nThis concluded grant has provided crucial support for the proposal and investigation of a new architectural paradigm for safety-critical platform design and consolidation, known as SOSH or Software-Shaped Platforms. We hereby review the foundational aspects of SOSH, its practical applications, and the envisioned capabilities to be explored in future work.\n\n\nFoundational Aspects of SOSH\n\n\n1. Introduction and Foundation\n\n\nThe SOSH paradigm represents a visionary approach to designing computing systems. It seeks to aid the transition of safety-critical systems into intelligent entities capable of interacting with their environment in a nuanced and adaptive manner. At its core, SOSH recognizes that safety and intelligence need to to be mutually exclusive. This paradigm shift acknowledges that the modern computing landscape demands more than just passive compliance with safety standardsit requires active engagement with real-world scenarios.\n\n\nTo reconcile safety and intelligence, the SOSH paradigm proposes to turn on-chip data-flows into programmatically manageable entities. Doing so exposes better control to the platform's system software about the use of performance-critical resources such as CPUs, accelerators, interconnects, and memory subsystems. This concluded grant has explored the possibility of defining foundational data-flow manipulation blocks in commercially available CPU+FPGA embedded systems.\n\n\n2. Critical Enabling Mechanisms\n\n\n- Partial Dynamic Reconfiguration (PDR)\n\n\nPDR is a key enabler that allows hardware components within FPGA-based systems to be dynamically instantiated without requiring system resets. This capability opens the door to rapid and efficient hardware module swapping, providing the flexibility needed to adapt to changing requirements.\n\n\n- Programmable Logic In-the-Middle (PLIM)\n\n\nPLIM represents a fundamental innovation within SOSH. It facilitates the rerouting of memory transactions through programmable logic, thereby enabling unprecedented levels of control over data flow within computing systems. PLIM extends the boundaries of traditional memory management, allowing for resource optimization, performance enhancement, and, crucially, self-awareness in computing systems.\n\n\n- Coherence-Aided Elective and Seamless Alternative Routing (CAESAR)\n\n\nCAESAR takes advantage of cache-coherent on-chip FPGAs to optimize memory traffic management. By leveraging cache-coherence and FPGAs, CAESAR enhances memory throughput and offers greater operational flexibility. This mechanism complements PLIM, further expanding the capabilities of SOSH.\n\n\nPractical Applications of SOSH\n\n\nSOSH has already been put into action through the development of concrete data flow operation blocks. These modules serve as proof of concept and demonstrate key data-flow manipulation primitives.\n\n\n1. Scheduler in-the-Middle (SchIM)\n\n\nSchIM is a configurable module that interposes itself between the last-level cache (LLC) of a CPU cluster and the memory controller, effectively managing memory transaction scheduling. Memory scheduling policies can be tailored at runtime, offering flexibility in memory management. We demonstrated the use of Time Division Multiple Access (TDMA), Fixed Priority (FP), and Traffic Shaping (TS). SchIM demonstrates how SOSH provides fine-grained control over data flow and allows for the definition of logic governing memory transactions from various upstream components to downstream components.\n\n\n2. Relational Memory Engine (RME)\n\n\nRME showcases the power of data flow reordering and filtering. Positioned between main memory and LLC, this configurable module transforms data on-the-fly from a row-major format to arbitrary column groups by leveraging the PLIM paradigm. Traditional data management systems often cater to either transactional or analytical workloads, necessitating data format conversions. RME breaks free from this limitation by creating reorganized aliases of data, allowing the CPU to access relational data with optimal spatial locality. This not only improves access efficiency but also reduces cache footprint.\n\n\n3. Silent Application Profiler\n\n\nCoherence backstabbing and the CAESAR approach have paved the way for non-intrusive profiling and logging within SOSH. The Silent Application Profiler was introduced as a means to collect fine-grained metadata about main memory traffic generated by CPUs. By monitoring the coherence fabric, the profiler captures physical addresses and timestamps of cache line accesses that result in LLC cache misses. This passive monitoring approach incurs minimal overhead and offers valuable insights into application behavior, access patterns, and progress tracking.\n\n\nEnvisioned Capabilities of SOSH\n\n\nSOSH's journey is far from over, with envisioned capabilities pointing toward an even more intelligent and adaptable future for computing systems.\n\n\n1. Progress Tracking and Behavior Prediction\n\n\nEnvisioned capabilities include the integration of progress tracking modules within SOSH platforms, allowing for proactive resource allocation and application behavior prediction.\n\n\n2. Advanced Memory Models\n\n\nSOSH platforms are set to redefine memory semantics with advanced models like historical memory and self-destructing memory. These memory models will introduce new levels of control and security to computing systems.\n\n\n3. Security Threat Mitigation\n\n\nSOSH platforms have great potential for allowing in-hardware behavior-based detection of malware activity.\n\n\n\nConclusion\n\n\nIn conclusion, the grant's pioneering research efforts have not only established the SOSH paradigm but have also unlocked its immense potential across a spectrum of practical applications and envisioned capabilities. SOSH stands poised to usher in a new era of safety-critical systems characterized by intelligence, adaptability, and enhanced security, fundamentally reshaping the landscape of computing systems.\n\n\n\t\t\t\t\tLast Modified: 11/19/2023\n\n\t\t\t\t\tSubmitted by: RenatoMancuso\n"
 }
}