{
 "awd_id": "1955719",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SaTC: CORE: Small: Collaborative: Towards Facilitating Kernel Vulnerability Reproduction by Fusing Crowd and Machine Generated Data",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2020-10-01",
 "awd_exp_date": "2024-09-30",
 "tot_intn_awd_amt": 175000.0,
 "awd_amount": 175000.0,
 "awd_min_amd_letter_date": "2020-07-27",
 "awd_max_amd_letter_date": "2020-07-27",
 "awd_abstract_narration": "The kernel is the core piece of software in a computer's operating system. Due to the high complexity of kernel software, finding all vulnerabilities during the development phase is nearly impossible. In recent years, crowdsourcing efforts have shown great success in discovering kernel vulnerabilities, where security professionals, hackers, and users can all contribute by submitting kernel bug reports. However, research shows that many vulnerability reports, including those generated by automated tools (e.g., kernel fuzzers), are not easily reproducible. Non-reproducible reports can cause significant delays to the patching process or lead kernel vendors to misjudge the severity of the vulnerability. Preliminary research shows vulnerability reports are not reproducible due to 1) missing information on the compilation configuration; (2) a lack of data to construct the contexts for triggering the bug; and (3) inaccurate or incomplete information about the vulnerable kernel versions. This project will develop new approaches combining crowd-reported and machine-generated data and static-dynamic program analysis to automate the process of inferring, constructing, and validating the needed information for kernel-vulnerability reproduction.\r\n\r\nThis project will provide much-needed automation for reproducing kernel bugs and vulnerabilities. If successful, the project will significantly advance computer security (for kernel vulnerability analysis) and contribute to the field of software engineering (for bug diagnosis and assessment). By improving the reproduction rate of kernel bugs, this project will also help with other parallel efforts for vulnerability patching and remediation. The expected advancements are three-fold. (1) The team will develop novel inference methods to infer the kernel compilation configuration based on memory snapshots and code segments in the bug reports. It will design new approaches to handle the untrusted or corrupted memory dumps caused by the bugs. (2) Team members will develop new mechanisms to construct precise triggering contexts to trigger the reported bugs (via kernel fault manipulation and injection). The context construction method is also able to pinpoint relevant faulty processes and handle kernel interrupt correctly. (3) New fuzzing tools will be designed to migrate input programs to enable much broader bug testing across kernel versions, and new methods to quickly determine non-vulnerable versions.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Gang",
   "pi_last_name": "Wang",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Gang Wang",
   "pi_email_addr": "gangw@illinois.edu",
   "nsf_id": "000730936",
   "pi_start_date": "2020-07-27",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Illinois at Urbana-Champaign",
  "inst_street_address": "506 S WRIGHT ST",
  "inst_street_address_2": "",
  "inst_city_name": "URBANA",
  "inst_state_code": "IL",
  "inst_state_name": "Illinois",
  "inst_phone_num": "2173332187",
  "inst_zip_code": "618013620",
  "inst_country_name": "United States",
  "cong_dist_code": "13",
  "st_cong_dist_code": "IL13",
  "org_lgl_bus_name": "UNIVERSITY OF ILLINOIS",
  "org_prnt_uei_num": "V2PHZ2CSCH63",
  "org_uei_num": "Y8CWNJRCNN91"
 },
 "perf_inst": {
  "perf_inst_name": "Board of Trustees of the University of Illinois",
  "perf_str_addr": "506 S. Wright Street",
  "perf_city_name": "Urbana",
  "perf_st_code": "IL",
  "perf_st_name": "Illinois",
  "perf_zip_code": "618013620",
  "perf_ctry_code": "US",
  "perf_cong_dist": "13",
  "perf_st_cong_dist": "IL13",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "806000",
   "pgm_ele_name": "Secure &Trustworthy Cyberspace"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "025Z",
   "pgm_ref_txt": "SaTC: Secure and Trustworthy Cyberspace"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 175000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-e7bfb7d8-7fff-bee9-1a8a-5ef54569b746\"> </span></p>\r\n<p dir=\"ltr\"><span>Bug reproduction is a fundamental step in software debugging and vulnerability analysis, enabling researchers and developers to understand, diagnose, and mitigate security flaws effectively. However, the process is often hindered by the complexity of modern software systems, particularly in kernel environments, where intricate dependencies, configuration variations, and system interactions can significantly impact a bug&rsquo;s manifestation and behavior. Manual bug reproduction is not only time-consuming but also prone to inconsistencies, making it an inefficient approach for large-scale vulnerability assessments.</span></p>\r\n<p dir=\"ltr\"><span>To address these challenges, the principal investigators (PIs) developed novel static and dynamic program analysis techniques aimed at automating the inefficient aspects of the kernel bug reproduction process. By leveraging advanced program analysis methodologies, their work systematically extracts and analyzes kernel compilation options, reconstructs bug-triggering contexts, and verifies vulnerabilities across different kernel versions. These innovations have majorly improved the reproducibility and accuracy of bug diagnosis, reducing the manual effort required in security assessments.</span></p>\r\n<p dir=\"ltr\"><span>The research outcomes of this project have had a significant impact on both academia and industry. Notably, the project produced an award-winning dynamic analysis tool that enhances kernel bug reproduction efficiency, earning recognition within the cybersecurity community. Furthermore, the findings have been disseminated through multiple top-tier publications, contributing to the broader fields of software security and program analysis. The project also played a pivotal role in shaping new curriculum components at both PIs&rsquo; institutions, integrating cutting-edge techniques into graduate and undergraduate courses to train the next generation of security researchers and engineers.</span></p>\r\n<p dir=\"ltr\"><span>By automating key aspects of the kernel bug reproduction process, this research advances state-of-the-art vulnerability analysis, and provides scalable and effective solutions for security professionals. Future work will focus on refining these techniques, expanding their applicability to more complex kernel environments, and further integrating them into security toolchains for real-world adoption.</span></p>\r\n<p>&nbsp;</p><br>\n<p>\n Last Modified: 01/16/2025<br>\nModified by: Gang&nbsp;Wang</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\n \r\n\n\nBug reproduction is a fundamental step in software debugging and vulnerability analysis, enabling researchers and developers to understand, diagnose, and mitigate security flaws effectively. However, the process is often hindered by the complexity of modern software systems, particularly in kernel environments, where intricate dependencies, configuration variations, and system interactions can significantly impact a bugs manifestation and behavior. Manual bug reproduction is not only time-consuming but also prone to inconsistencies, making it an inefficient approach for large-scale vulnerability assessments.\r\n\n\nTo address these challenges, the principal investigators (PIs) developed novel static and dynamic program analysis techniques aimed at automating the inefficient aspects of the kernel bug reproduction process. By leveraging advanced program analysis methodologies, their work systematically extracts and analyzes kernel compilation options, reconstructs bug-triggering contexts, and verifies vulnerabilities across different kernel versions. These innovations have majorly improved the reproducibility and accuracy of bug diagnosis, reducing the manual effort required in security assessments.\r\n\n\nThe research outcomes of this project have had a significant impact on both academia and industry. Notably, the project produced an award-winning dynamic analysis tool that enhances kernel bug reproduction efficiency, earning recognition within the cybersecurity community. Furthermore, the findings have been disseminated through multiple top-tier publications, contributing to the broader fields of software security and program analysis. The project also played a pivotal role in shaping new curriculum components at both PIs institutions, integrating cutting-edge techniques into graduate and undergraduate courses to train the next generation of security researchers and engineers.\r\n\n\nBy automating key aspects of the kernel bug reproduction process, this research advances state-of-the-art vulnerability analysis, and provides scalable and effective solutions for security professionals. Future work will focus on refining these techniques, expanding their applicability to more complex kernel environments, and further integrating them into security toolchains for real-world adoption.\r\n\n\n\t\t\t\t\tLast Modified: 01/16/2025\n\n\t\t\t\t\tSubmitted by: GangWang\n"
 }
}