{
 "awd_id": "2007246",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "SHF: Small: Towards a Holistic Causal Model for Continuous Software Traceability",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2020-10-01",
 "awd_exp_date": "2024-09-30",
 "tot_intn_awd_amt": 500000.0,
 "awd_amount": 500000.0,
 "awd_min_amd_letter_date": "2020-07-30",
 "awd_max_amd_letter_date": "2024-02-16",
 "awd_abstract_narration": "The construction of a software system leads to the creation of several different artifacts, including requirements and code. Requirements, written in natural language, stipulate the system functionality;  code then implements and tests the specified functionality. To ensure that a system has been properly implemented and tested, software engineers attempt to match and link requirements to code (and other artifacts) in a process known as software traceability. Unfortunately, the traceability process can be both difficult and time consuming due to the complexity of the underlying system and the fact that modern development practices tend to prioritize implemented functionality over traceability. This project will develop novel techniques for automating the software traceability process by predicting accurate links for developers and explaining why these predictions were made. The proposed techniques will allow software engineers to establish and manage software traceability in a more efficient and effective manner, ultimately leading to a better understanding of a given system and more robust guarantees that it is functioning as intended. The project will also produce and disseminate educational materials on best practices for requirements engineering and program comprehension. We expect these materials to be integrated into existing computer literacy courses at all levels of education.  In addition, the project will focus on recruiting and retaining computer science students from traditionally underrepresented categories.\r\n\r\nThe project is centered on three specific goals.  First, it will develop novel techniques that are capable of combining (i) orthogonal measures of the textual similarity of software artifacts, (ii) developer feedback, and (iii) transitive links that exist between artifacts, in order to predict accurate trace links between software artifacts. This component will adapt and build upon techniques for machine learning, information retrieval, and statistical modeling. Second, it will develop a method for using evolutionary software histories to improve trace-link quality.  This evolutionary component to the automated traceability system will adapt recent advancements in dynamic statistical-modeling techniques. Finally, the project will leverage causal inference and intelligent agents to aid in explaining predicted trace links and supporting developers in the trace-link evaluation process. The automated techniques developed during the course of this project will be thoroughly validated with industry partners, and are expected to become a powerful tool for developers in establishing and managing trace links for software systems.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Denys",
   "pi_last_name": "Poshyvanyk",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Denys Poshyvanyk",
   "pi_email_addr": "dposhyvanyk@wm.edu",
   "nsf_id": "000516306",
   "pi_start_date": "2020-07-30",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Kevin",
   "pi_last_name": "Moran",
   "pi_mid_init": "P",
   "pi_sufx_name": "",
   "pi_full_name": "Kevin P Moran",
   "pi_email_addr": "kpmoran@ucf.edu",
   "nsf_id": "000788103",
   "pi_start_date": "2020-07-30",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Wing",
   "pi_last_name": "Lam",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Wing Lam",
   "pi_email_addr": "winglam@gmu.edu",
   "nsf_id": "000864372",
   "pi_start_date": "2024-02-16",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "College of William and Mary",
  "inst_street_address": "1314 S MOUNT VERNON AVE",
  "inst_street_address_2": "",
  "inst_city_name": "WILLIAMSBURG",
  "inst_state_code": "VA",
  "inst_state_name": "Virginia",
  "inst_phone_num": "7572213965",
  "inst_zip_code": "23185",
  "inst_country_name": "United States",
  "cong_dist_code": "08",
  "st_cong_dist_code": "VA08",
  "org_lgl_bus_name": "COLLEGE OF WILLIAM AND MARY",
  "org_prnt_uei_num": "EVWJPCY6AD97",
  "org_uei_num": "EVWJPCY6AD97"
 },
 "perf_inst": {
  "perf_inst_name": "College of William and Mary",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "VA",
  "perf_st_name": "Virginia",
  "perf_zip_code": "231878795",
  "perf_ctry_code": "US",
  "perf_cong_dist": "01",
  "perf_st_cong_dist": "VA01",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "287800",
   "pgm_ele_name": "Special Projects - CCF"
  },
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "075Z",
   "pgm_ref_txt": "Artificial Intelligence (AI)"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  },
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  }
 ],
 "app_fund": [
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 500000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>Linking requirements to code provides visibility into a system by enumerating what has been implemented, whereas linking requirements to test cases helps to provide an indication that the software is functioning as expected. In addition to these high-level benefits, the establishment of trace links aids in facilitating a broad set of software engineering activities including code comprehension, change impact analysis, and compliance validation. In certain software domains, such as those involving safety critical systems, traceability is necessarily&nbsp;<em>mandated&nbsp;</em>by regulatory bodies to properly demonstrate the safe functioning of a system. As cyber security continues to gain industrial attention, many software corporations are turning to traceability as a viable means of ensuring system security, but at considerable cost in terms of time and intellectual effort. Unfortunately, despite its importance, software traceability is, by its nature, an inherently difficult, error prone, and intellectually intensive task. This difficulty primarily stems from the need to bridge a logical abstraction gap that exists between different software artifacts, such as requirements written in natural language and code written in &ldquo;lower level&rdquo; programming languages. Thus, bridging this abstraction gap typically requires developers or analysts with expertise related to a given software system to manually comprehend these artifacts and decipher meaningful relationships among them. Thus, stakeholders could benefit from precise, explainable automated traceability techniques.</p>\r\n<p>Our work has under this project led to the generation of foundational knowledge in the field of SE related to: (i) a holistic hierarchal probabilistic model for generating accurate sets of candidate trace links; (ii) a dynamic probabilistic model capable of modeling evolutionary changes to software systems; (iii) algorithms and techniques for inferring and using a causal model to aid the generation and evaluation of candidate trace links via explanations of links in natural language; and (iv) the design of new reinforcement learning agents for assisting in evaluating candidate trace links. Consequently, our framework for automating software traceability is poised to fundamentally transform the way trace links are established and managed in software projects by recasting traceability as a probabilistic reasoning problem and using probabilistic models to provide&nbsp;<em>practical&nbsp;</em>automation to developers and analysts. While achieving the research goals set out in this proposal, the PIs&nbsp;<em>tackled several open research problems currently unaddressed in SE research</em>, advancing knowledge in the field. Specifically, the proposed work led to original research that aims to relate &ldquo;higher-level&rdquo; natural language descriptions of software in requirements to &ldquo;lower level&rdquo; text in code, leverage historical information in software repositories to infer meaningful relationships between software artifacts, and explore the potential of causal reasoning for various properties of artifacts.</p><br>\n<p>\n Last Modified: 01/29/2025<br>\nModified by: Denys&nbsp;Poshyvanyk</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nLinking requirements to code provides visibility into a system by enumerating what has been implemented, whereas linking requirements to test cases helps to provide an indication that the software is functioning as expected. In addition to these high-level benefits, the establishment of trace links aids in facilitating a broad set of software engineering activities including code comprehension, change impact analysis, and compliance validation. In certain software domains, such as those involving safety critical systems, traceability is necessarilymandatedby regulatory bodies to properly demonstrate the safe functioning of a system. As cyber security continues to gain industrial attention, many software corporations are turning to traceability as a viable means of ensuring system security, but at considerable cost in terms of time and intellectual effort. Unfortunately, despite its importance, software traceability is, by its nature, an inherently difficult, error prone, and intellectually intensive task. This difficulty primarily stems from the need to bridge a logical abstraction gap that exists between different software artifacts, such as requirements written in natural language and code written in lower level programming languages. Thus, bridging this abstraction gap typically requires developers or analysts with expertise related to a given software system to manually comprehend these artifacts and decipher meaningful relationships among them. Thus, stakeholders could benefit from precise, explainable automated traceability techniques.\r\n\n\nOur work has under this project led to the generation of foundational knowledge in the field of SE related to: (i) a holistic hierarchal probabilistic model for generating accurate sets of candidate trace links; (ii) a dynamic probabilistic model capable of modeling evolutionary changes to software systems; (iii) algorithms and techniques for inferring and using a causal model to aid the generation and evaluation of candidate trace links via explanations of links in natural language; and (iv) the design of new reinforcement learning agents for assisting in evaluating candidate trace links. Consequently, our framework for automating software traceability is poised to fundamentally transform the way trace links are established and managed in software projects by recasting traceability as a probabilistic reasoning problem and using probabilistic models to providepracticalautomation to developers and analysts. While achieving the research goals set out in this proposal, the PIstackled several open research problems currently unaddressed in SE research, advancing knowledge in the field. Specifically, the proposed work led to original research that aims to relate higher-level natural language descriptions of software in requirements to lower level text in code, leverage historical information in software repositories to infer meaningful relationships between software artifacts, and explore the potential of causal reasoning for various properties of artifacts.\t\t\t\t\tLast Modified: 01/29/2025\n\n\t\t\t\t\tSubmitted by: DenysPoshyvanyk\n"
 }
}