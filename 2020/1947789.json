{
 "awd_id": "1947789",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CRII: AF: RUI: Verifiable Computation Outsourcing: A Non-Cooperative Approach",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032922095",
 "po_email": "kwimmer@nsf.gov",
 "po_sign_block_name": "Karl Wimmer",
 "awd_eff_date": "2020-10-01",
 "awd_exp_date": "2024-09-30",
 "tot_intn_awd_amt": 154597.0,
 "awd_amount": 154597.0,
 "awd_min_amd_letter_date": "2020-01-10",
 "awd_max_amd_letter_date": "2020-01-10",
 "awd_abstract_narration": "With the growing popularity of cloud computing, most computation today is not done locally but rather outsourced to third-party service providers (SPs). Outsourcing computation brings up the following research problem: how can the client outsourcing the computation verify that it has been performed correctly, without having to redo it? Most previous work has studied this problem from a security standpoint, assuming that the SPs are malicious or adversarial. This assumption does not capture the nature of SPs on internet marketplaces, who are often profit-driven, performing computation for money. This project approaches the problem of verifying outsourced computation from an economic perspective. In particular, this project focuses on SPs that want to maximize their payment, with the goal of designing payment schemes that directly incentivize correctness. The advantage of this approach is that is leads to verification protocols that are simple and practical, and require extremely small verification overhead on the part of the client. This project will advance understanding of the role of incentives in algorithms, which has wide applications to areas such as crowdsourcing, cloud computing and social computing.\r\n\r\n\r\nInteractive proofs (IP) are a fundamental theoretical framework used to study verifiable computation outsourcing. In an IP, the weak client (or verifier) interacts with powerful service providers (or provers) to determine the truthfulness of their claim. Existing IP protocols largely fall into two categories: the cooperative-prover model such as classical IPs or the competing-prover model such as refereed games. In computation-outsourcing applications, the nature of SPs is arguably in the middle of these two extremes, neither cooperative or competitive, but rational---acting to maximize their own payment. The model of non-cooperative rational interactive proofs was introduced recently to capture this middle ground. This project aims to take advantage of this new model to design extremely efficient interactive proofs tailored for computation outsourcing. As part of this work, new insights and techniques from game theory and mechanism design will be used to design protocols that: (a) achieve extremely small verification overhead compared to existing rational-proof and refereed-games protocols, (b) guarantee robustness against deviating provers (measured by the notion of utility gap), and (c) do not rely on private channels of communication between the verifier and provers. The project is divided into two parts. The first focuses on improving the verification overhead of existing non-cooperative rational proofs exponentially while simultaneously achieving large utility gap. The second focuses on improving the state-of-the-art delegation schemes based on refereed games by removing the requirement that at least one prover is honest and leveraging incentives of non-cooperative provers to improve the verification overhead asymptotically.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Shikha",
   "pi_last_name": "Singh",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Shikha Singh",
   "pi_email_addr": "shikha@cs.williams.edu",
   "nsf_id": "000807177",
   "pi_start_date": "2020-01-10",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Williams College",
  "inst_street_address": "880 MAIN ST",
  "inst_street_address_2": "",
  "inst_city_name": "WILLIAMSTOWN",
  "inst_state_code": "MA",
  "inst_state_name": "Massachusetts",
  "inst_phone_num": "4135974352",
  "inst_zip_code": "012672600",
  "inst_country_name": "United States",
  "cong_dist_code": "01",
  "st_cong_dist_code": "MA01",
  "org_lgl_bus_name": "PRESIDENT & TRUSTEES OF WILLIAMS COLLEGE",
  "org_prnt_uei_num": "",
  "org_uei_num": "JVZEJJ6N5EM8"
 },
 "perf_inst": {
  "perf_inst_name": "Williams College",
  "perf_str_addr": "880 Main St.",
  "perf_city_name": "Williamstown",
  "perf_st_code": "MA",
  "perf_st_name": "Massachusetts",
  "perf_zip_code": "012672600",
  "perf_ctry_code": "US",
  "perf_cong_dist": "01",
  "perf_st_cong_dist": "MA01",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "779600",
   "pgm_ele_name": "Algorithmic Foundations"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7927",
   "pgm_ref_txt": "COMPLEXITY & CRYPTOGRAPHY"
  },
  {
   "pgm_ref_code": "7932",
   "pgm_ref_txt": "COMPUT GAME THEORY & ECON"
  },
  {
   "pgm_ref_code": "8228",
   "pgm_ref_txt": "CISE Resrch Initiatn Initiatve"
  },
  {
   "pgm_ref_code": "9229",
   "pgm_ref_txt": "RES IN UNDERGRAD INST-RESEARCH"
  }
 ],
 "app_fund": [
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 154597.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-90e71a61-7fff-9d12-dd18-7f53d4991ae4\"> </span></p>\r\n<p dir=\"ltr\"><span>With the advances in cloud computing and the deployment of artificial intelligence and machine learning tools, computation is increasingly being outsourced to <em>untrusted</em> third-party service providers (SPs).&nbsp; At a high level,&nbsp; in a computation outsourcing framework, the client provides the input and the specifications of the task to a remote SP.&nbsp; The SP performs this task and returns the result (the output) back to the client. This output may be erroneous and thus the client needs to be able to efficiently verify whether the computation was performed correctly.&nbsp; Recomputing the result from scratch and comparing beats the purpose of outsourcing the task in the first place.&nbsp; Thus, the verification algorithm ideally must be much more efficient than solving the problem from scratch.&nbsp;&nbsp;</span></p>\r\n<p dir=\"ltr\"><span>This project focused on designing efficient mechanisms for performing <em>verifiable computation outsourcing</em>. Past approaches assume that the behavior of SPs are adversarial or malicious in nature.&nbsp; In particular, they focus on the worst-case behavior and assume the SPs goal is to deliberately mislead the client.&nbsp; Verification protocols in the worst-case model tend to be quite complicated and inefficient. This project studied computation outsourcing in the <em>beyond-worst-case framework</em>, in which the SPs are </span><span>rational</span><span> and their goal is to maximize their own utility.&nbsp; Under this model, the project resulted in the design of simple and efficient (a) non-cooperative verification protocols called rational proofs and (b) master-worker verification mechanisms to perform computation outsourcing in a distributed setting.&nbsp; Besides the originally conceived line of work on rational computation sourcing,&nbsp; the project also resulted in a new line of work on beyond-worst-case algorithms that outsource the computation to machine-learning (ML) models.&nbsp; The goal then is to use the error-prone output provided by the ML model to compute the correct solution more efficiently than solving the problem from scratch.</span></p>\r\n<p dir=\"ltr\"><span>Overall, the project successfully tackled the following research challenges posed by computation outsourcing and developed efficient algorithms for each:&nbsp; (1) how to efficiently verify the correctness of results provided by the SPs?&nbsp; (2) how to design an appropriate payment scheme for the SPs to incentivize correct answers? (3) how to efficiently query the outsourced remotely stored input and output data? and (4) how to be robust against errors if the outsourced results are provided by a machine learning or AI assisted technology?&nbsp;&nbsp;</span></p>\r\n<p dir=\"ltr\"><span>This project resulted in several publications at top conferences and journals in theoretical computer science, databases and machine learning.&nbsp; These results were disseminated broadly to the broader computer science community, through seminars, conferences and invited colloquia. The project also made significant contributions to undergraduate teaching and research:&nbsp; it led to the research training and mentoring of nine undergraduate students and the design of two new courses at Williams College.&nbsp;&nbsp;</span></p>\r\n<div><span><br /></span></div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p><br>\n<p>\n Last Modified: 01/14/2025<br>\nModified by: Shikha&nbsp;Singh</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\n \r\n\n\nWith the advances in cloud computing and the deployment of artificial intelligence and machine learning tools, computation is increasingly being outsourced to untrusted third-party service providers (SPs). At a high level, in a computation outsourcing framework, the client provides the input and the specifications of the task to a remote SP. The SP performs this task and returns the result (the output) back to the client. This output may be erroneous and thus the client needs to be able to efficiently verify whether the computation was performed correctly. Recomputing the result from scratch and comparing beats the purpose of outsourcing the task in the first place. Thus, the verification algorithm ideally must be much more efficient than solving the problem from scratch.\r\n\n\nThis project focused on designing efficient mechanisms for performing verifiable computation outsourcing. Past approaches assume that the behavior of SPs are adversarial or malicious in nature. In particular, they focus on the worst-case behavior and assume the SPs goal is to deliberately mislead the client. Verification protocols in the worst-case model tend to be quite complicated and inefficient. This project studied computation outsourcing in the beyond-worst-case framework, in which the SPs are rational and their goal is to maximize their own utility. Under this model, the project resulted in the design of simple and efficient (a) non-cooperative verification protocols called rational proofs and (b) master-worker verification mechanisms to perform computation outsourcing in a distributed setting. Besides the originally conceived line of work on rational computation sourcing, the project also resulted in a new line of work on beyond-worst-case algorithms that outsource the computation to machine-learning (ML) models. The goal then is to use the error-prone output provided by the ML model to compute the correct solution more efficiently than solving the problem from scratch.\r\n\n\nOverall, the project successfully tackled the following research challenges posed by computation outsourcing and developed efficient algorithms for each: (1) how to efficiently verify the correctness of results provided by the SPs? (2) how to design an appropriate payment scheme for the SPs to incentivize correct answers? (3) how to efficiently query the outsourced remotely stored input and output data? and (4) how to be robust against errors if the outsourced results are provided by a machine learning or AI assisted technology?\r\n\n\nThis project resulted in several publications at top conferences and journals in theoretical computer science, databases and machine learning. These results were disseminated broadly to the broader computer science community, through seminars, conferences and invited colloquia. The project also made significant contributions to undergraduate teaching and research: it led to the research training and mentoring of nine undergraduate students and the design of two new courses at Williams College.\r\n\n\r\n\n\n\r\n\n\n\t\t\t\t\tLast Modified: 01/14/2025\n\n\t\t\t\t\tSubmitted by: ShikhaSingh\n"
 }
}