{
 "awd_id": "1948519",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CRII: CHS: Improving Code Readability with Scalable Feedback on Students' Code Structure",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2020-05-01",
 "awd_exp_date": "2023-04-30",
 "tot_intn_awd_amt": 175000.0,
 "awd_amount": 199000.0,
 "awd_min_amd_letter_date": "2020-04-20",
 "awd_max_amd_letter_date": "2020-06-23",
 "awd_abstract_narration": "The project is to conduct a series of pilot studies on the differences in thought processes, strategies, and approaches that novices and experts use in writing high-quality code. These studies are to be undertaken in classrooms at the University of Utah as well as at a diverse set of partner institutions. The goal is to ultimately develop tools and pedagogical methods to help novices become more like experts (specifically, by writing code that follows known discourse rules). In particular, the project will determine how to better help undergraduate students learn to write code that is easy for others to read, maintain, test, and debug. When undergraduate students learn to program, they mostly focus on what the code does. However, in professional settings, it is crucial that code not just work, but also be easy for others to read and maintain. This project will (1) investigate which coding patterns that harm readability or maintainability are common among undergraduate students; (2) develop an automated system for detecting these patterns; (3) explore how practice and instruction on these patterns can help students learn to write code that is more readable. This research aims to improve undergraduate computer science education and promote workforce development.\r\n\r\nThis project will investigate code structures within individual methods that violate commonly-accepted discourse rules for programming (e.g., repeating code within an if-block and its corresponding else-block rather than factoring out the common steps). This project will survey educators and practitioners to determine which discourse rule violations are important to them, and will see which patterns are common in students' code. Students will be surveyed to examine their perceptions of code readability. Written assessments will determine how students' preferences are related to their abilities to comprehend, write, and edit code. This project will develop a tool to detect the target patterns with static and dynamic analysis. This tool will flag the patterns in students' code as they work on assignments, and will offer hints and suggestions. The efficacy and effectiveness of the tool will be tested in a lab-based experiment and in regular classroom settings.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Eliane",
   "pi_last_name": "Wiese",
   "pi_mid_init": "S",
   "pi_sufx_name": "",
   "pi_full_name": "Eliane S Wiese",
   "pi_email_addr": "eliane.wiese@utah.edu",
   "nsf_id": "000782420",
   "pi_start_date": "2020-04-20",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "University of Utah",
  "inst_street_address": "201 PRESIDENTS CIR",
  "inst_street_address_2": "",
  "inst_city_name": "SALT LAKE CITY",
  "inst_state_code": "UT",
  "inst_state_name": "Utah",
  "inst_phone_num": "8015816903",
  "inst_zip_code": "841129049",
  "inst_country_name": "United States",
  "cong_dist_code": "01",
  "st_cong_dist_code": "UT01",
  "org_lgl_bus_name": "UNIVERSITY OF UTAH",
  "org_prnt_uei_num": "",
  "org_uei_num": "LL8GLEVH6MG3"
 },
 "perf_inst": {
  "perf_inst_name": "University of Utah",
  "perf_str_addr": "50 Central Campus Drive",
  "perf_city_name": "Salt Lake CIty",
  "perf_st_code": "UT",
  "perf_st_name": "Utah",
  "perf_zip_code": "841129205",
  "perf_ctry_code": "US",
  "perf_cong_dist": "01",
  "perf_st_cong_dist": "UT01",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "287800",
   "pgm_ele_name": "Special Projects - CCF"
  },
  {
   "pgm_ele_code": "779800",
   "pgm_ele_name": "Software & Hardware Foundation"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7944",
   "pgm_ref_txt": "SOFTWARE ENG & FORMAL METHODS"
  },
  {
   "pgm_ref_code": "8228",
   "pgm_ref_txt": "CISE Resrch Initiatn Initiatve"
  },
  {
   "pgm_ref_code": "9102",
   "pgm_ref_txt": "WOMEN, MINORITY, DISABLED, NEC"
  },
  {
   "pgm_ref_code": "9251",
   "pgm_ref_txt": "REU SUPP-Res Exp for Ugrd Supp"
  }
 ],
 "app_fund": [
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 199000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span>When programmers write code, it&rsquo;s not enough for the computer to be able to execute it &ndash; other people need to understand it too. This project explored one aspect of code readability: students&rsquo; choice of code structures and control flows within relatively short sections of code. Through surveys of hundreds of students in computing classes, this project showed that students&rsquo; conceptions of readability often differ from their instructors, and that many intermediate-level students choose inappropriate structures when they write. However, explorations of students&rsquo; code writing showed that writing by itself is a noisy measure of understanding. Students may write with appropriate structures by rote, without understanding the importance of their choices. Additionally, students may write with inappropriate structures because they lack motivation (not understanding). Analysis of students&rsquo; homework submissions showed that students may use appropriate and inappropriate structure choices for the same structure within the same submission, showing that researchers need to look for cases where students are doing things right, not just wrong. This analysis was done with a custom automated detector created through this project. Further, looking at instances of inappropriate code structure in students&rsquo; homework showed the nuance needed to design automated hints: in many of the instances flagged by the detector, the inappropriate code structure was part of a much larger problem. Therefore, successful hints need to help the student address the larger issues, not mask them by adjusting the immediate code structure issue. The intellectual merit of this project was in how it advanced the field&rsquo;s understanding of different facets of knowledge of code structure, challenged the assumption that inappropriate code structure was a symptom of students&rsquo; deep knowledge gaps, and proposed more nuanced ways of measuring student knowledge of code structure. The broader impacts of this project came from workshops with computing instructors and TAs, which fostered conversations on code structure, including how course staff assess student knowledge, what might motivate students to make different structure choices, and how to overcome challenges and time constraints in supporting students to improve their code structure. Additionally, this project supported research experiences for eight undergraduate students (including two undergraduate theses, and one student who continued with a Masters&rsquo; project), and supported two Ph.D. students. Further, the findings from this project, such as the kinds of inappropriate choices students make, can support the development of instructional materials to help students make better structure choices and ultimately write code that is easier for others to read, edit, and maintain.</span></p><br>\n<p>\n\t\t\t\t      \tLast Modified: 09/27/2023<br>\n\t\t\t\t\tModified by: Eliane&nbsp;S&nbsp;Wiese</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\nWhen programmers write code, it\u2019s not enough for the computer to be able to execute it &ndash; other people need to understand it too. This project explored one aspect of code readability: students\u2019 choice of code structures and control flows within relatively short sections of code. Through surveys of hundreds of students in computing classes, this project showed that students\u2019 conceptions of readability often differ from their instructors, and that many intermediate-level students choose inappropriate structures when they write. However, explorations of students\u2019 code writing showed that writing by itself is a noisy measure of understanding. Students may write with appropriate structures by rote, without understanding the importance of their choices. Additionally, students may write with inappropriate structures because they lack motivation (not understanding). Analysis of students\u2019 homework submissions showed that students may use appropriate and inappropriate structure choices for the same structure within the same submission, showing that researchers need to look for cases where students are doing things right, not just wrong. This analysis was done with a custom automated detector created through this project. Further, looking at instances of inappropriate code structure in students\u2019 homework showed the nuance needed to design automated hints: in many of the instances flagged by the detector, the inappropriate code structure was part of a much larger problem. Therefore, successful hints need to help the student address the larger issues, not mask them by adjusting the immediate code structure issue. The intellectual merit of this project was in how it advanced the field\u2019s understanding of different facets of knowledge of code structure, challenged the assumption that inappropriate code structure was a symptom of students\u2019 deep knowledge gaps, and proposed more nuanced ways of measuring student knowledge of code structure. The broader impacts of this project came from workshops with computing instructors and TAs, which fostered conversations on code structure, including how course staff assess student knowledge, what might motivate students to make different structure choices, and how to overcome challenges and time constraints in supporting students to improve their code structure. Additionally, this project supported research experiences for eight undergraduate students (including two undergraduate theses, and one student who continued with a Masters\u2019 project), and supported two Ph.D. students. Further, the findings from this project, such as the kinds of inappropriate choices students make, can support the development of instructional materials to help students make better structure choices and ultimately write code that is easier for others to read, edit, and maintain.\n\n\t\t\t\t\tLast Modified: 09/27/2023\n\n\t\t\t\t\tSubmitted by: Eliane S Wiese"
 }
}