{
 "awd_id": "1933342",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CBMS Conference: Parallel Time Integration",
 "cfda_num": "47.049",
 "org_code": "03040000",
 "po_phone": "7032924876",
 "po_email": "snaik@nsf.gov",
 "po_sign_block_name": "Swatee Naik",
 "awd_eff_date": "2020-01-01",
 "awd_exp_date": "2022-12-31",
 "tot_intn_awd_amt": 36636.0,
 "awd_amount": 36636.0,
 "awd_min_amd_letter_date": "2019-10-11",
 "awd_max_amd_letter_date": "2019-10-11",
 "awd_abstract_narration": "This award provides support for the NSF-CBMS Conference on Parallel Time Integration to be held on June 1-5, 2020, at Michigan Technological University. The primary focus of the conference is to educate and inspire researchers and students in new and innovative numerical techniques for the parallel-in-time solution of large-scale evolution problems on modern supercomputing architectures, and to stimulate further studies in their analysis and applications. It aligns with the National Strategic Computing Initiative (NSCI) objective: \"increase coherence between technology for modeling/simulation and data analytics\". Computational simulations are a key part of scientific research for government, industry, and academia, complementing laboratory experimentation and theory. Changes in computer architectures are leading to future supercomputers that will have billions of processors, as opposed to millions today. However, each individual processor will be no faster than individual processors today. Thus, these next generation machines will no longer automatically provide a speedup to existing computational simulations, and new mathematical algorithms must be developed and deployed that can utilize this unprecedented number of processors. Parallel-in-time methods provide one such class of mathematical algorithms. They add a new dimension (time) of parallelism and thus allow existing computer models to be extended to next generation supercomputers. The range of potential applications is vast: computational molecular dynamics such as protein and DNA folding, computational biology (e.g., heart modeling), computational fluid dynamics (e.g., combustion, climate, and weather), and machine learning.\r\n\r\nThe conference will feature ten lectures by Professor Gander, an expert in parallel time integration. Using appropriate mathematical methodologies from the theory of partial differential equations in a functional analytic setting, numerical discretizations, integration techniques, and convergence analyses of these iterative methods, conference participants will be exposed to the numerical analysis of parallel-in-time methodologies and their implementations. The proposed topics include multiple shooting type methods, waveform relaxation methods, time-multigrid methods, and direct time-parallel methods. These lectures will be accessible to a wide audience from a broad range of disciplines, including mathematics, computer science and engineering. The conference website is at-  http://conferences.math.mtu.edu/cbms2020/\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "MPS",
 "org_dir_long_name": "Directorate for Mathematical and Physical Sciences",
 "div_abbr": "DMS",
 "org_div_long_name": "Division Of Mathematical Sciences",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Benjamin",
   "pi_last_name": "Ong",
   "pi_mid_init": "W",
   "pi_sufx_name": "",
   "pi_full_name": "Benjamin W Ong",
   "pi_email_addr": "ongbw@mtu.edu",
   "nsf_id": "000561471",
   "pi_start_date": "2019-10-11",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Jacob",
   "pi_last_name": "Schroder",
   "pi_mid_init": "B",
   "pi_sufx_name": "",
   "pi_full_name": "Jacob B Schroder",
   "pi_email_addr": "jbschroder@unm.edu",
   "nsf_id": "000547971",
   "pi_start_date": "2019-10-11",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Michigan Technological University",
  "inst_street_address": "1400 TOWNSEND DR",
  "inst_street_address_2": "",
  "inst_city_name": "HOUGHTON",
  "inst_state_code": "MI",
  "inst_state_name": "Michigan",
  "inst_phone_num": "9064871885",
  "inst_zip_code": "499311200",
  "inst_country_name": "United States",
  "cong_dist_code": "01",
  "st_cong_dist_code": "MI01",
  "org_lgl_bus_name": "MICHIGAN TECHNOLOGICAL UNIVERSITY",
  "org_prnt_uei_num": "GKMSN3DA6P91",
  "org_uei_num": "GKMSN3DA6P91"
 },
 "perf_inst": {
  "perf_inst_name": "Michigan Technological University",
  "perf_str_addr": "1400 Townsend Drive",
  "perf_city_name": "Houghton",
  "perf_st_code": "MI",
  "perf_st_name": "Michigan",
  "perf_zip_code": "499311295",
  "perf_ctry_code": "US",
  "perf_cong_dist": "01",
  "perf_st_cong_dist": "MI01",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "126000",
   "pgm_ele_name": "INFRASTRUCTURE PROGRAM"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7556",
   "pgm_ref_txt": "CONFERENCE AND WORKSHOPS"
  }
 ],
 "app_fund": [
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 36636.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-ce719f6e-7fff-733d-4974-01696f2e7b15\"> </span></p>\n<p dir=\"ltr\"><span>The </span><span>CBMS workshop on parallel-in-time was held at Michigan Technological University (Houghton, Michigan) August 1 - August 5, 2022 after two COVID delayed attempts in 2020 and 2021. The workshop consisted of ten lectures by the principal lecturer, Professor Martin Gander (University of Geneva), three practical sessions led by Dr. Thibault Lunet (TE Hamburg) and a workshop with the parallel-in-time computer code, xBraid, led by Professor Jacob Schroder (University of New Mexico). There were 26 workshop participants from across the US and Europe, all coming from various early career stages.</span></p>\n<p dir=\"ltr\">&nbsp;</p>\n<p dir=\"ltr\"><span>The principal aim of this conference was to educate and inspire early-career researchers to engage in a specific area of research that can potentially accelerate the computer solutions for scientific models of real-world phenomena, for example, climate prediction, weather forecasting, heat diffusion, mechanics and vibrations.&nbsp; This area of research is called parallel time integration. The term \"parallel\" has a dual meaning. On the one hand, it serves to remind us that many of these methods can utilize many computing cores (in parallel) on modern computational hardware. Additionally, it turns out that many of these methods can work on many points-in-time simultaneously. Taking weather prediction as an example, traditional approaches predict the weather at 8am, only after they have predicted the weather at 7:59am, which in turn requires a prediction at 7:58am, which in turn requires a prediction at 7:57am, and so on.&nbsp; This classical approach is a sequential approach.&nbsp; However when using parallel time integration methods, the computer is able to work, at the same time, on predicting the weather over the entire day, rather than doing things sequentially.&nbsp; You might ask how this is possible, and the answer is by leveraging a less accurate simulation for good initial data. In this example, consider a weather simulation that only predicts the weather at 1-hour increments (say at 5am, 6am, 7am, and so on).&nbsp; This rough 1-hour increment prediction is then used to inform the 1-minute increment simulation.&nbsp; That is, the rough weather prediction at 5am and 6am is used to help predict the weather at 5:01am, 5:02am, ..., 5:59am.&nbsp; Then comes the parallel or simultaneous part of the method.&nbsp; While the predictions between 5:01am and 5:59am are happening, the computer is also using the rough weather prediction at 6am and 7am to help predict the weather at 6:01am, 6:02am, ..., 6:59am.&nbsp; This process can be applied to many, many more intervals of time, resulting in simultaneous computation of the weather over the entire day, i.e., parallel-in-time.&nbsp; Most methods then alternate between the fine and coarse modes (minutes and hours), until the solution is accurate. We note that full parallel-in-time weather simulations are current topics of research.</span></p>\n<p>&nbsp;</p><br>\n<p>\n\t\t\t\t      \tLast Modified: 12/08/2022<br>\n\t\t\t\t\tModified by: Benjamin&nbsp;W&nbsp;Ong</p>\n</div>\n<div class=\"porSideCol\"></div>\n</div>",
  "por_txt_cntn": "\n \nThe CBMS workshop on parallel-in-time was held at Michigan Technological University (Houghton, Michigan) August 1 - August 5, 2022 after two COVID delayed attempts in 2020 and 2021. The workshop consisted of ten lectures by the principal lecturer, Professor Martin Gander (University of Geneva), three practical sessions led by Dr. Thibault Lunet (TE Hamburg) and a workshop with the parallel-in-time computer code, xBraid, led by Professor Jacob Schroder (University of New Mexico). There were 26 workshop participants from across the US and Europe, all coming from various early career stages.\n \nThe principal aim of this conference was to educate and inspire early-career researchers to engage in a specific area of research that can potentially accelerate the computer solutions for scientific models of real-world phenomena, for example, climate prediction, weather forecasting, heat diffusion, mechanics and vibrations.  This area of research is called parallel time integration. The term \"parallel\" has a dual meaning. On the one hand, it serves to remind us that many of these methods can utilize many computing cores (in parallel) on modern computational hardware. Additionally, it turns out that many of these methods can work on many points-in-time simultaneously. Taking weather prediction as an example, traditional approaches predict the weather at 8am, only after they have predicted the weather at 7:59am, which in turn requires a prediction at 7:58am, which in turn requires a prediction at 7:57am, and so on.  This classical approach is a sequential approach.  However when using parallel time integration methods, the computer is able to work, at the same time, on predicting the weather over the entire day, rather than doing things sequentially.  You might ask how this is possible, and the answer is by leveraging a less accurate simulation for good initial data. In this example, consider a weather simulation that only predicts the weather at 1-hour increments (say at 5am, 6am, 7am, and so on).  This rough 1-hour increment prediction is then used to inform the 1-minute increment simulation.  That is, the rough weather prediction at 5am and 6am is used to help predict the weather at 5:01am, 5:02am, ..., 5:59am.  Then comes the parallel or simultaneous part of the method.  While the predictions between 5:01am and 5:59am are happening, the computer is also using the rough weather prediction at 6am and 7am to help predict the weather at 6:01am, 6:02am, ..., 6:59am.  This process can be applied to many, many more intervals of time, resulting in simultaneous computation of the weather over the entire day, i.e., parallel-in-time.  Most methods then alternate between the fine and coarse modes (minutes and hours), until the solution is accurate. We note that full parallel-in-time weather simulations are current topics of research.\n\n \n\n\t\t\t\t\tLast Modified: 12/08/2022\n\n\t\t\t\t\tSubmitted by: Benjamin W Ong"
 }
}