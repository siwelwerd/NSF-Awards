{
 "awd_id": "2008107",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Continuing Grant",
 "awd_titl_txt": "III: Small: Helping Novices Learn and Debug Relational Queries",
 "cfda_num": "47.070",
 "org_code": "05020000",
 "po_phone": "7032924481",
 "po_email": "hmunoz@nsf.gov",
 "po_sign_block_name": "Hector Munoz-Avila",
 "awd_eff_date": "2020-10-01",
 "awd_exp_date": "2024-09-30",
 "tot_intn_awd_amt": 499972.0,
 "awd_amount": 499972.0,
 "awd_min_amd_letter_date": "2020-08-20",
 "awd_max_amd_letter_date": "2021-07-22",
 "awd_abstract_narration": "In a world where decisions are increasingly driven by data, data analytics skills have become an indispensable part of any education that seeks to prepare its students for the modern workforce. Essential in this skill set is the ability to work with structured data. The standard \"tools of trade\" for manipulating structured data include the venerable and ubiquitous SQL language as well as popular libraries heavily influenced by relational query languages, e.g., dplyr for R, DataFrame for pandas and Spark. Learning and debugging relational queries, however, pose challenges to novices. Even computer science students with programming backgrounds are often not used to thinking in terms of logic (e.g., when writing SQL queries) or functional programming (e.g., when writing queries using operators that resemble relational algebra). This project proposes to build a system called HNRQ (Helping Novices Learn and Debug Relational Queries) to address these challenges, by explaining why a query is wrong, and helping users to fix and learn relational queries in the process.\r\n\r\nThe first step in the project is to automatically construct small database instances as counterexamples to illustrate why queries return wrong results, and allow users to trace query execution over these instances. Going beyond convincing users that the queries are wrong, HNRQ further aims to guide users towards the next level of understanding---by helping them generalize from specific counterexamples to semantic descriptions of what cause wrong results, and by providing useful hints on how to approach the problems correctly. This ambitious goal will push the boundaries of existing research and will likely lead to the development of novel methodologies for providing explanations and hints. The project will make HNRQ general and practical by embracing the full complexity of real-world query languages and by delivering interactive performance for users to experiment with changes to queries and database instances, observe their effects, and obtain automated feedback and hints all in real time even for complex queries and large databases. The project plans to evaluate HNRQ not only through user studies but also by measuring its direct impact on learning outcomes. The project is committed to making HNRQ open-source and easy to adopt by educators around the world.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "IIS",
 "org_div_long_name": "Division of Information & Intelligent Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Jun",
   "pi_last_name": "Yang",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Jun Yang",
   "pi_email_addr": "junyang@cs.duke.edu",
   "nsf_id": "000486379",
   "pi_start_date": "2020-08-20",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Sudeepa",
   "pi_last_name": "Roy",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Sudeepa Roy",
   "pi_email_addr": "roy.sudeepa@gmail.com",
   "nsf_id": "000699595",
   "pi_start_date": "2020-08-20",
   "pi_end_date": null
  },
  {
   "pi_role": "Co-Principal Investigator",
   "pi_first_name": "Kristin",
   "pi_last_name": "Stephens-Martinez",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Kristin Stephens-Martinez",
   "pi_email_addr": "ksm@cs.duke.edu",
   "nsf_id": "000784728",
   "pi_start_date": "2020-08-20",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Duke University",
  "inst_street_address": "2200 W MAIN ST",
  "inst_street_address_2": "",
  "inst_city_name": "DURHAM",
  "inst_state_code": "NC",
  "inst_state_name": "North Carolina",
  "inst_phone_num": "9196843030",
  "inst_zip_code": "277054640",
  "inst_country_name": "United States",
  "cong_dist_code": "04",
  "st_cong_dist_code": "NC04",
  "org_lgl_bus_name": "DUKE UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "TP7EK8DZV6N5"
 },
 "perf_inst": {
  "perf_inst_name": "Duke University",
  "perf_str_addr": "",
  "perf_city_name": "Durham",
  "perf_st_code": "NC",
  "perf_st_name": "North Carolina",
  "perf_zip_code": "277080129",
  "perf_ctry_code": "US",
  "perf_cong_dist": "04",
  "perf_st_cong_dist": "NC04",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "736400",
   "pgm_ele_name": "Info Integration & Informatics"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7364",
   "pgm_ref_txt": "INFO INTEGRATION & INFORMATICS"
  },
  {
   "pgm_ref_code": "7923",
   "pgm_ref_txt": "SMALL PROJECT"
  }
 ],
 "app_fund": [
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  },
  {
   "app_code": "0121",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002122DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 333711.0
  },
  {
   "fund_oblg_fiscal_yr": 2021,
   "fund_oblg_amt": 166261.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p><span id=\"docs-internal-guid-b05acf0f-7fff-64f0-6669-bd3eb3be03f3\"> </span></p>\r\n<p><span id=\"docs-internal-guid-17a8a79a-7fff-b285-b48d-2d55bda90110\"> </span></p>\r\n<p dir=\"ltr\"><span>When decisions are increasingly driven by data, data analytics skills have become an indispensable part of any education seeking to prepare students for the modern workforce. Essential in this skill set is the ability to work with structured data using the venerable and ubiquitous SQL language as well as popular libraries heavily influenced by relational query languages, e.g., dplyr for R, DataFrame for pandas and Spark. Learning and debugging relational queries, however, pose challenges to novices: even if they have a programming background, they are often not used to thinking in terms of relational logic or operators.</span></p>\r\n<p dir=\"ltr\"><span>This project, named HNRQ (Helping Novices Learn and Debug Relational Queries), has built a suite of powerful software tools for database educators and students alike. In an educational setting, we are often given a reference query defined by the teacher and a potentially incorrect query written by a student. First, if the two queries return different results on some test database, the RATest tool automatically constructs a small instance that illustrates the difference between the queries but is much simpler for the student to understand. Second, CInsGen finds &ldquo;conditional instances,&rdquo; which are abstract instances that illustrate all possible ways of how to satisfy a complex query or to differentiate two queries. Compared with concrete instances, conditional instances hide unnecessary details and articulate general conditions, making it easier to spot logical differences between queries. Third, Qr-Hint provides actionable hints to fix a working query so that it becomes semantically equivalent to the reference query. These hints purposefully guide the student through a sequence of steps that incrementally transform the working query such that it becomes correct in the end. Together, these three tools offer help that are specifically tailored to students&rsquo; individual mistakes, but do so automatically without revealing the reference query or requiring extensive personal tutoring. Finally, in settings where no reference query is known, i-Rex is a novel debugger that helps students understand SQL query evaluation and debug SQL queries. It allows students to trace query evaluation and study the lineage among input, output, and intermediate result rows. It has a &ldquo;pinning&rdquo; feature that focuses on relevant parts of executions to examine, as well as pagination and &ldquo;teleporting&rdquo; features that allow the system to reproduce relevant parts of execution without starting from the beginning, significantly improving scalability of debugging on massive databases. This project has also started to investigate challenges and opportunities posed by the rise of Generative AI to database education. Specifically, it has produced preliminary results on how to leverage large language models to help students decompose complex queries into simpler steps and describe them, and how to verify the correctness of automatically generated SQL code.</span></p>\r\n<p dir=\"ltr\"><span>The HNRQ suite of tools have been deployed in undergraduate and graduate database courses at Duke University, benefiting more than 1,800 students during the project period, and will be continued in the future. The project has provided research experiences for learners at many levels, including one postdoctoral fellow, 4 PhD students, 6 MS students, 12 undergraduate students, and one high school student. Two alumni of the project are now Assistant Professors. In addition to the educational impact, the research carried out under the HNRQ project has also deepened the understanding of many fundamental problems in databases, resulting in numerous research papers and system demonstrations at top publication venues, 3 keynote speeches at international workshops and conferences, as well as 5 invited talks at research lab/universities.</span></p>\r\n<p>&nbsp;</p><br>\n<p>\n Last Modified: 01/15/2025<br>\nModified by: Jun&nbsp;Yang</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\n \r\n\n\n \r\n\n\nWhen decisions are increasingly driven by data, data analytics skills have become an indispensable part of any education seeking to prepare students for the modern workforce. Essential in this skill set is the ability to work with structured data using the venerable and ubiquitous SQL language as well as popular libraries heavily influenced by relational query languages, e.g., dplyr for R, DataFrame for pandas and Spark. Learning and debugging relational queries, however, pose challenges to novices: even if they have a programming background, they are often not used to thinking in terms of relational logic or operators.\r\n\n\nThis project, named HNRQ (Helping Novices Learn and Debug Relational Queries), has built a suite of powerful software tools for database educators and students alike. In an educational setting, we are often given a reference query defined by the teacher and a potentially incorrect query written by a student. First, if the two queries return different results on some test database, the RATest tool automatically constructs a small instance that illustrates the difference between the queries but is much simpler for the student to understand. Second, CInsGen finds conditional instances, which are abstract instances that illustrate all possible ways of how to satisfy a complex query or to differentiate two queries. Compared with concrete instances, conditional instances hide unnecessary details and articulate general conditions, making it easier to spot logical differences between queries. Third, Qr-Hint provides actionable hints to fix a working query so that it becomes semantically equivalent to the reference query. These hints purposefully guide the student through a sequence of steps that incrementally transform the working query such that it becomes correct in the end. Together, these three tools offer help that are specifically tailored to students individual mistakes, but do so automatically without revealing the reference query or requiring extensive personal tutoring. Finally, in settings where no reference query is known, i-Rex is a novel debugger that helps students understand SQL query evaluation and debug SQL queries. It allows students to trace query evaluation and study the lineage among input, output, and intermediate result rows. It has a pinning feature that focuses on relevant parts of executions to examine, as well as pagination and teleporting features that allow the system to reproduce relevant parts of execution without starting from the beginning, significantly improving scalability of debugging on massive databases. This project has also started to investigate challenges and opportunities posed by the rise of Generative AI to database education. Specifically, it has produced preliminary results on how to leverage large language models to help students decompose complex queries into simpler steps and describe them, and how to verify the correctness of automatically generated SQL code.\r\n\n\nThe HNRQ suite of tools have been deployed in undergraduate and graduate database courses at Duke University, benefiting more than 1,800 students during the project period, and will be continued in the future. The project has provided research experiences for learners at many levels, including one postdoctoral fellow, 4 PhD students, 6 MS students, 12 undergraduate students, and one high school student. Two alumni of the project are now Assistant Professors. In addition to the educational impact, the research carried out under the HNRQ project has also deepened the understanding of many fundamental problems in databases, resulting in numerous research papers and system demonstrations at top publication venues, 3 keynote speeches at international workshops and conferences, as well as 5 invited talks at research lab/universities.\r\n\n\n\t\t\t\t\tLast Modified: 01/15/2025\n\n\t\t\t\t\tSubmitted by: JunYang\n"
 }
}