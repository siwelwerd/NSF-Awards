{
 "awd_id": "2019310",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "Collaborative Research: FMitF: Track I: Property-specific Hardware-oriented Formal Verification Modules for Embedded Systems",
 "cfda_num": "47.070",
 "org_code": "05010000",
 "po_phone": "7032927885",
 "po_email": "abanerje@nsf.gov",
 "po_sign_block_name": "Anindya Banerjee",
 "awd_eff_date": "2020-10-01",
 "awd_exp_date": "2024-09-30",
 "tot_intn_awd_amt": 250000.0,
 "awd_amount": 250000.0,
 "awd_min_amd_letter_date": "2020-08-21",
 "awd_max_amd_letter_date": "2020-10-20",
 "awd_abstract_narration": "With the Internet of Things and Cyber-Physical Systems being used in a broad range of applications such as smart homes, smart infrastructure, and smart health, a rigorous analysis of both hardware and software became critical in ensuring safety and security of these systems. Recently discovered micro-architectural side channels in Intel processors has demonstrated the need for a deep understanding of the interaction between software and hardware. However, hardware/software co-verification is challenging due to the complexity of both hardware and software. The project novelties include a property-directed co-model extraction and a property-specific run-time validation methodology to achieve scalability and precision in detecting bugs due to hardware/software interactions. If successful, the developed methodologies and automation tools will empower embedded-system vendors with tools that can detect security and safety vulnerabilities early in design. The project\u2019s impacts on workforce training and broadening participation in formal methods and embedded-system security will be achieved through the investigators\u2019 courses on formal verification and embedded-system development and security, outreach events, and collaborations with industry. The project will result in a set of system-level benchmarks to demonstrate various cases of hardware software interactions leading to security and safety violations. \r\n\r\nTo achieve these goals, the project will be built on three research thrusts. 1) Property-driven Hardware/Software Co-Model Extraction: A failure property is decomposed into hardware- and software-relevant parts to drive localization of the software and hardware features relevant to the property.  State exploration on the combined state space of the hardware and software will be performed only when required directly by the property. The result of this incremental and property-directed search is the extraction of failure conditions that describe the software contexts in which certain hardware and software properties should be monitored. 2) Low Overhead Property-Specific Hardware Monitors: An off-chip dynamic information-flow tracking module will be implemented leveraging an open-source RISC V processor core. The collected run-time data will be used for enforcing user policies as well as for detecting user-specified failure properties. 3) Reconfigurable Hardware Decision Modules: A configurable interface will be developed for the data exchange between the off-chip dynamic information-flow tracking module and the main processor. The failure conditions generated by the co-model extraction tool will inform the configuration of this interface. The instruction-set architecture will be extended to define new instructions for guiding and configuring the run-time checker.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CCF",
 "org_div_long_name": "Division of Computing and Communication Foundations",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Xiaolong",
   "pi_last_name": "Guo",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Xiaolong Guo",
   "pi_email_addr": "guoxiaolong@ksu.edu",
   "nsf_id": "000801435",
   "pi_start_date": "2020-08-21",
   "pi_end_date": null
  }
 ],
 "inst": {
  "inst_name": "Kansas State University",
  "inst_street_address": "1601 VATTIER STREET",
  "inst_street_address_2": "103 FAIRCHILD HALL",
  "inst_city_name": "MANHATTAN",
  "inst_state_code": "KS",
  "inst_state_name": "Kansas",
  "inst_phone_num": "7855326804",
  "inst_zip_code": "665062504",
  "inst_country_name": "United States",
  "cong_dist_code": "01",
  "st_cong_dist_code": "KS01",
  "org_lgl_bus_name": "KANSAS STATE UNIVERSITY",
  "org_prnt_uei_num": "",
  "org_uei_num": "CFMMM5JM7HJ9"
 },
 "perf_inst": {
  "perf_inst_name": "Kansas State University",
  "perf_str_addr": "",
  "perf_city_name": "",
  "perf_st_code": "KS",
  "perf_st_name": "Kansas",
  "perf_zip_code": "665061100",
  "perf_ctry_code": "US",
  "perf_cong_dist": "01",
  "perf_st_cong_dist": "KS01",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "094Y00",
   "pgm_ele_name": "FMitF: Formal Methods in the F"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "071Z",
   "pgm_ref_txt": "FMitF-Formal Methods in the Field"
  },
  {
   "pgm_ref_code": "8206",
   "pgm_ref_txt": "Formal Methods and Verification"
  },
  {
   "pgm_ref_code": "9150",
   "pgm_ref_txt": "EXP PROG TO STIM COMP RES"
  }
 ],
 "app_fund": [
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 250000.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>This project has yielded three key outcomes in its final year, each contributing to advancements in hardware security and resilience.</p>\r\n<h4><strong>1. Co-Processor-Based Runtime Security Verification Platform</strong></h4>\r\n<p>We developed a <strong>hardware-based security framework</strong> to strengthen cloud computing infrastructure by detecting runtime threats in computational devices, including CPUs, FPGAs, and GPUs. Our approach utilizes <strong>side-channel measurements</strong> from the <strong>power distribution network (PDN)</strong> to monitor device behavior and identify security anomalies.</p>\r\n<p>To implement this, we built an <strong>embedded system based on the RISC-V architecture</strong>, generated using RocketChip, and designed a <strong>co-processor</strong> to track the main processor&rsquo;s state. The experimental setup consists of three main components:</p>\r\n<ul>\r\n<li>A <strong>Xilinx Virtex-7 FPGA VC707 board</strong></li>\r\n<li>A <strong>targeted device under observation</strong></li>\r\n<li>A <strong>high-performance host workstation</strong></li>\r\n</ul>\r\n<p>Both the <strong>PDN sensor</strong> and the <strong>co-processor</strong> are embedded in the FPGA core. We conducted <strong>three test scenarios</strong> to gather sensor data and assess the accuracy of our <strong>machine learning-based sensing approach</strong>. More details about this platform are available here:&nbsp;</p>\r\n<p>https://ece.k-state.edu/research/hardware-security/runtime.html</p>\r\n<h4><strong>2. MicroScope: Hardware Vulnerability Detection Framework</strong></h4>\r\n<p>MicroScope is a novel framework designed to identify <strong>software instruction patterns</strong> that may expose hardware vulnerabilities. It enhances <strong>Structural Causal Models (SCM)</strong> by incorporating <strong>hardware-specific features</strong> such as <strong>timing stamps</strong>, resulting in a scalable <strong>Hardware Structural Causal Model (HW-SCM)</strong>.</p>\r\n<p>To analyze security risks, we developed a <strong>domain-specific language (DSL)</strong> in <strong>SMT-LIB</strong> to represent the HW-SCM along with predefined security properties. We then applied <strong>incremental SMT solving</strong> to uncover all possible instruction sequences that could lead to security vulnerabilities. The effectiveness of MicroScope has been validated using <strong>RISC-V SoC benchmarks</strong>.</p>\r\n<p>The tool is publicly available here:</p>\r\n<p><span>&nbsp;https://ece.k-state.edu/research/hardware-security/tool.html</span></p>\r\n<h4><strong>3. Hardware-Specific Large Language Model Training Datasets</strong></h4>\r\n<p>We have trained <strong>Large Language Models (LLMs)</strong> to assist in <strong>hardware design</strong> and <strong>security bug detection</strong>. These models leverage domain-specific datasets to improve <strong>automated debugging</strong> and <strong>verification processes</strong> in hardware development.</p>\r\n<p>The trained models and datasets are available on Hugging Face:</p>\r\n<p>https://huggingface.co/collections/KSU-HW-SEC/our-picking-66f838099cffeca7ec8968f3</p>\r\n<div id=\"gtx-trans\" style=\"position: absolute; left: -38px; top: 706.812px;\"></div><br>\n<p>\n Last Modified: 01/29/2025<br>\nModified by: Xiaolong&nbsp;Guo</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nThis project has yielded three key outcomes in its final year, each contributing to advancements in hardware security and resilience.\r\n1. Co-Processor-Based Runtime Security Verification Platform\r\n\n\nWe developed a hardware-based security framework to strengthen cloud computing infrastructure by detecting runtime threats in computational devices, including CPUs, FPGAs, and GPUs. Our approach utilizes side-channel measurements from the power distribution network (PDN) to monitor device behavior and identify security anomalies.\r\n\n\nTo implement this, we built an embedded system based on the RISC-V architecture, generated using RocketChip, and designed a co-processor to track the main processors state. The experimental setup consists of three main components:\r\n\r\nA Xilinx Virtex-7 FPGA VC707 board\r\nA targeted device under observation\r\nA high-performance host workstation\r\n\r\n\n\nBoth the PDN sensor and the co-processor are embedded in the FPGA core. We conducted three test scenarios to gather sensor data and assess the accuracy of our machine learning-based sensing approach. More details about this platform are available here:\r\n\n\nhttps://ece.k-state.edu/research/hardware-security/runtime.html\r\n2. MicroScope: Hardware Vulnerability Detection Framework\r\n\n\nMicroScope is a novel framework designed to identify software instruction patterns that may expose hardware vulnerabilities. It enhances Structural Causal Models (SCM) by incorporating hardware-specific features such as timing stamps, resulting in a scalable Hardware Structural Causal Model (HW-SCM).\r\n\n\nTo analyze security risks, we developed a domain-specific language (DSL) in SMT-LIB to represent the HW-SCM along with predefined security properties. We then applied incremental SMT solving to uncover all possible instruction sequences that could lead to security vulnerabilities. The effectiveness of MicroScope has been validated using RISC-V SoC benchmarks.\r\n\n\nThe tool is publicly available here:\r\n\n\nhttps://ece.k-state.edu/research/hardware-security/tool.html\r\n3. Hardware-Specific Large Language Model Training Datasets\r\n\n\nWe have trained Large Language Models (LLMs) to assist in hardware design and security bug detection. These models leverage domain-specific datasets to improve automated debugging and verification processes in hardware development.\r\n\n\nThe trained models and datasets are available on Hugging Face:\r\n\n\nhttps://huggingface.co/collections/KSU-HW-SEC/our-picking-66f838099cffeca7ec8968f3\r\n\t\t\t\t\tLast Modified: 01/29/2025\n\n\t\t\t\t\tSubmitted by: XiaolongGuo\n"
 }
}