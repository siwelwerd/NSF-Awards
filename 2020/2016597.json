{
 "awd_id": "2016597",
 "agcy_id": "NSF",
 "tran_type": "Grant",
 "awd_istr_txt": "Standard Grant",
 "awd_titl_txt": "CCRI: Medium: Collaborative Research: Open-Source, State-of-the-Art Symbolic Model-Checking Framework",
 "cfda_num": "47.070",
 "org_code": "05050000",
 "po_phone": "7032927841",
 "po_email": "sgreensp@nsf.gov",
 "po_sign_block_name": "Sol Greenspan",
 "awd_eff_date": "2020-10-01",
 "awd_exp_date": "2024-09-30",
 "tot_intn_awd_amt": 568557.0,
 "awd_amount": 568557.0,
 "awd_min_amd_letter_date": "2020-08-07",
 "awd_max_amd_letter_date": "2021-07-29",
 "awd_abstract_narration": "Safety-critical and security-critical systems are entering our lives at an increasingly rapid pace. These are the systems that help fly our planes, drive our cars, deliver our packages, ensure our electricity, or even automate our homes. Especially when humans cannot perform a task in person, e.g., due to a dangerous working environment, we depend on such systems. Before any safety-critical system launches into the human environment, we need to be sure it is really safe. Model checking is a popular and appealing way to rigorously check for safety: given a system, or an accurate model of the system, and a safety requirement, model checking is a \"push button\" technique to produce either a proof that the system always operates safely, or a counterexample detailing a system execution that violates the safety requirement. Many aspects of model checking are active research areas, including more efficient ways of reasoning about the system's behavior space, and faster search algorithms for the proofs and counterexamples.\r\n\r\nAs model checking becomes more integrated into the standard design and verification process for safety-critical systems, the platforms for model checking research have become more limited. Previous options have become closed-source or industry tools; current research platforms don't have support for expressive specification languages needed for verifying real systems. This project will fill the current gap in model checking research platforms: building a freely-available, open-source, scalable model checking infrastructure that accepts expressive models and efficiently interfaces with the currently-maintained state-of-the-art back-end algorithms to provide an extensible research and verification tool. This project will create a community resource with a well-documented intermediate representation to enable extensibility, and a web portal, facilitating new modeling languages and back-end algorithmic advances. To add new modeling languages or algorithms, researchers need only to develop a translator to/from the new intermediate language, and will then be able to integrate each advance with the full state-of-the-art in model checking. This community infrastructure will be ideal for catapulting formal verification efforts in many cutting-edge application areas, including security, networking, and operating system verification. This project will particularly target outreach to the embedded systems (CPS) community as the proposed new framework will make hardware verification problems from this community more accessible.\r\n\r\nThis award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.",
 "awd_arra_amount": 0.0,
 "dir_abbr": "CSE",
 "org_dir_long_name": "Directorate for Computer and Information Science and Engineering",
 "div_abbr": "CNS",
 "org_div_long_name": "Division Of Computer and Network Systems",
 "awd_agcy_code": "4900",
 "fund_agcy_code": "4900",
 "pi": [
  {
   "pi_role": "Principal Investigator",
   "pi_first_name": "Natarajan",
   "pi_last_name": "Shankar",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Natarajan Shankar",
   "pi_email_addr": "shankar@csl.sri.com",
   "nsf_id": "000370169",
   "pi_start_date": "2021-07-29",
   "pi_end_date": null
  },
  {
   "pi_role": "Former Principal Investigator",
   "pi_first_name": "Bruno",
   "pi_last_name": "Dutertre",
   "pi_mid_init": "",
   "pi_sufx_name": "",
   "pi_full_name": "Bruno Dutertre",
   "pi_email_addr": "bruno@csl.sri.com",
   "nsf_id": "000487314",
   "pi_start_date": "2020-08-07",
   "pi_end_date": "2021-07-29"
  }
 ],
 "inst": {
  "inst_name": "SRI International",
  "inst_street_address": "333 RAVENSWOOD AVE",
  "inst_street_address_2": "",
  "inst_city_name": "MENLO PARK",
  "inst_state_code": "CA",
  "inst_state_name": "California",
  "inst_phone_num": "6097342285",
  "inst_zip_code": "940253493",
  "inst_country_name": "United States",
  "cong_dist_code": "16",
  "st_cong_dist_code": "CA16",
  "org_lgl_bus_name": "SRI INTERNATIONAL",
  "org_prnt_uei_num": "SRG2J1WS9X63",
  "org_uei_num": "SRG2J1WS9X63"
 },
 "perf_inst": {
  "perf_inst_name": "SRI International",
  "perf_str_addr": "333 Ravenswood Avenue",
  "perf_city_name": "Menlo Park",
  "perf_st_code": "CA",
  "perf_st_name": "California",
  "perf_zip_code": "940253493",
  "perf_ctry_code": "US",
  "perf_cong_dist": "16",
  "perf_st_cong_dist": "CA16",
  "perf_ctry_name": "United States",
  "perf_ctry_flag": "1"
 },
 "pgm_ele": [
  {
   "pgm_ele_code": "735900",
   "pgm_ele_name": "CCRI-CISE Cmnty Rsrch Infrstrc"
  }
 ],
 "pgm_ref": [
  {
   "pgm_ref_code": "7359",
   "pgm_ref_txt": "COMPUTING RES INFRASTRUCTURE"
  }
 ],
 "app_fund": [
  {
   "app_code": "0120",
   "app_name": "NSF RESEARCH & RELATED ACTIVIT",
   "app_symb_id": "040100",
   "fund_code": "01002021DB",
   "fund_name": "NSF RESEARCH & RELATED ACTIVIT",
   "fund_symb_id": "040100"
  }
 ],
 "oblg_fy": [
  {
   "fund_oblg_fiscal_yr": 2020,
   "fund_oblg_amt": 568557.0
  }
 ],
 "por": {
  "por_cntn": "<div class=\"porColContainerWBG\">\n<div class=\"porContentCol\"><p>The project is aimed at filling the gap in model-checking research<br />platforms, namely the absence of an extensible, open-source framework<br />designed around an intermediate language that unifies popular<br />front-end modeling languages with state-of-the-art back-end<br />model-checking tools.&nbsp; Such a framework is needed to support multiple<br />front-end modeling formalisms and connect them to back-end model<br />checking tools and to compare different model checking algorithms on<br />the same suite of benchmarks.&nbsp; The newly developed MoXI (Model<br />eXchange Interlingua) language serves as such an intermediate<br />language.&nbsp; It builds on the SMT-LIB2 intermediate language for solvers<br />for satisfiability modulo theories.&nbsp; We have defined translators from<br />the NuXmv modeling language to MoXI and from MoXI to BTOR2.&nbsp; The<br />formal semantics of MoXI has been developed in the PVS theorem prover<br />along with translations of MoXI specifications to the low-level BTOR2<br />language.&nbsp; These translations have allowed us to compare the<br />translations mediated through MoXI with those directly implemented in<br />the NuXmv model checker.&nbsp; MoXI has also been adopted by others as a<br />suitable front-end language for capturing model checking benchmarks.<br />The project has trained several students in the construction of model<br />checking tools and the formalization of the metatheory of model<br />checking in proof assistants such as PVS.&nbsp; Our future plans are to<br />continue to build out a model checking ecosystem around MoXI with<br />additional front-end and back-end tools and a range of verification<br />services.<br />&nbsp;<br /></p><br>\n<p>\n Last Modified: 01/31/2025<br>\nModified by: Natarajan&nbsp;Shankar</p></div>\n<div class=\"porSideCol\"\n></div>\n</div>\n",
  "por_txt_cntn": "\n\nThe project is aimed at filling the gap in model-checking research\nplatforms, namely the absence of an extensible, open-source framework\ndesigned around an intermediate language that unifies popular\nfront-end modeling languages with state-of-the-art back-end\nmodel-checking tools. Such a framework is needed to support multiple\nfront-end modeling formalisms and connect them to back-end model\nchecking tools and to compare different model checking algorithms on\nthe same suite of benchmarks. The newly developed MoXI (Model\neXchange Interlingua) language serves as such an intermediate\nlanguage. It builds on the SMT-LIB2 intermediate language for solvers\nfor satisfiability modulo theories. We have defined translators from\nthe NuXmv modeling language to MoXI and from MoXI to BTOR2. The\nformal semantics of MoXI has been developed in the PVS theorem prover\nalong with translations of MoXI specifications to the low-level BTOR2\nlanguage. These translations have allowed us to compare the\ntranslations mediated through MoXI with those directly implemented in\nthe NuXmv model checker. MoXI has also been adopted by others as a\nsuitable front-end language for capturing model checking benchmarks.\nThe project has trained several students in the construction of model\nchecking tools and the formalization of the metatheory of model\nchecking in proof assistants such as PVS. Our future plans are to\ncontinue to build out a model checking ecosystem around MoXI with\nadditional front-end and back-end tools and a range of verification\nservices.\n\n\t\t\t\t\tLast Modified: 01/31/2025\n\n\t\t\t\t\tSubmitted by: NatarajanShankar\n"
 }
}